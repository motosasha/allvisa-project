var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function ready(fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
    fn();
  } else {
    document.addEventListener("DOMContentLoaded", fn);
  }
}

ready(function () {
  {
    // Adding a custom property with a system scroll width
    Promise.resolve().then(function () { return getScrollSize$1; }).then(({
      default: getScrollSize
    }) => {
      document.documentElement.style.setProperty("--css-scroll-size", `${getScrollSize()}px`);
    });
  }
});

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const EMAIL_REGEXP = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
const INTEGER_REGEXP = /^-?[0-9]\d*$/;
const PASSWORD_REGEXP = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/;
const STRONG_PASSWORD_REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
const isEmpty = (value) => {
  let newVal = value;
  if (typeof value === "string") {
    newVal = value.trim();
  }
  return !newVal;
};
const isEmail = (value) => {
  return EMAIL_REGEXP.test(value);
};
const isLengthMoreThanMax = (value, len) => {
  return value.length > len;
};
const isLengthLessThanMin = (value, len) => {
  return value.length < len;
};
const isNumber = (value) => {
  if (typeof value !== "string") {
    return false;
  }
  return !isNaN(+value) && !isNaN(parseFloat(value));
};
const isInteger = (value) => {
  return INTEGER_REGEXP.test(value);
};
const isPassword = (value) => {
  return PASSWORD_REGEXP.test(value);
};
const isStrongPassword = (value) => {
  return STRONG_PASSWORD_REGEXP.test(value);
};
const isNumberMoreThanMax = (value, len) => {
  return value > len;
};
const isNumberLessThanMin = (value, len) => {
  return value < len;
};
const isInvalidOrEmptyString = (value) => {
  return typeof value !== "string" || value === "";
};
var Rules = /* @__PURE__ */ ((Rules2) => {
  Rules2["Required"] = "required";
  Rules2["Email"] = "email";
  Rules2["MinLength"] = "minLength";
  Rules2["MaxLength"] = "maxLength";
  Rules2["Password"] = "password";
  Rules2["Number"] = "number";
  Rules2["Integer"] = "integer";
  Rules2["MaxNumber"] = "maxNumber";
  Rules2["MinNumber"] = "minNumber";
  Rules2["StrongPassword"] = "strongPassword";
  Rules2["CustomRegexp"] = "customRegexp";
  Rules2["MinFilesCount"] = "minFilesCount";
  Rules2["MaxFilesCount"] = "maxFilesCount";
  Rules2["Files"] = "files";
  return Rules2;
})(Rules || {});
var GroupRules = /* @__PURE__ */ ((GroupRules2) => {
  GroupRules2["Required"] = "required";
  return GroupRules2;
})(GroupRules || {});
var CustomStyleTagIds = /* @__PURE__ */ ((CustomStyleTagIds2) => {
  CustomStyleTagIds2["Label"] = "label";
  CustomStyleTagIds2["LabelArrow"] = "labelArrow";
  return CustomStyleTagIds2;
})(CustomStyleTagIds || {});
const defaultDictionary = [
  {
    key: Rules.Required,
    dict: {
      en: "The field is required"
    }
  },
  {
    key: Rules.Email,
    dict: {
      en: "Email has invalid format"
    }
  },
  {
    key: Rules.MaxLength,
    dict: {
      en: "The field must contain a maximum of :value characters"
    }
  },
  {
    key: Rules.MinLength,
    dict: {
      en: "The field must contain a minimum of :value characters"
    }
  },
  {
    key: Rules.Password,
    dict: {
      en: "Password must contain minimum eight characters, at least one letter and one number"
    }
  },
  {
    key: Rules.StrongPassword,
    dict: {
      en: "Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character"
    }
  },
  {
    key: Rules.Number,
    dict: {
      en: "Value should be a number"
    }
  },
  {
    key: Rules.MaxNumber,
    dict: {
      en: "Number should be less or equal than :value"
    }
  },
  {
    key: Rules.MinNumber,
    dict: {
      en: "Number should be more or equal than :value"
    }
  },
  {
    key: Rules.MinFilesCount,
    dict: {
      en: "Files count should be more or equal than :value"
    }
  },
  {
    key: Rules.MaxFilesCount,
    dict: {
      en: "Files count should be less or equal than :value"
    }
  },
  {
    key: Rules.Files,
    dict: {
      en: "Uploaded files have one or several invalid properties (extension/size/type etc)."
    }
  }
];
const DEFAULT_ERROR_FIELD_MESSAGE = "Value is incorrect";
const isPromise = (val) => typeof val === "object" && val !== null && "then" in val && typeof val.then === "function";
const getNodeParents = (el) => {
  let elem = el;
  const els = [];
  while (elem) {
    els.unshift(elem);
    elem = elem.parentNode;
  }
  return els;
};
const getClosestParent = (groups, parents) => {
  const reversedParents = [...parents].reverse();
  for (let i = 0, len = reversedParents.length; i < len; ++i) {
    const parent = reversedParents[i];
    for (const key in groups) {
      const group = groups[key];
      if (group.groupElem === parent) {
        return [key, group];
      }
    }
  }
  return null;
};
const getClassList = (classList) => {
  if (Array.isArray(classList)) {
    return classList.filter((cls) => cls.length > 0);
  }
  if (typeof classList === "string" && classList.trim()) {
    return [...classList.split(" ").filter((cls) => cls.length > 0)];
  }
  return [];
};
const isElement = (element) => {
  return element instanceof Element || element instanceof HTMLDocument;
};
const errorLabelCss = `.just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}`;
const TOOLTIP_ARROW_HEIGHT = 5;
const defaultGlobalConfig = {
  errorFieldStyle: {
    color: "#b81111",
    border: "1px solid #B81111"
  },
  errorFieldCssClass: "just-validate-error-field",
  successFieldCssClass: "just-validate-success-field",
  errorLabelStyle: {
    color: "#b81111"
  },
  errorLabelCssClass: "just-validate-error-label",
  successLabelCssClass: "just-validate-success-label",
  focusInvalidField: true,
  lockForm: true,
  testingMode: false,
  validateBeforeSubmitting: false,
  submitFormAutomatically: false
};
class JustValidate {
  constructor(form, globalConfig, dictLocale) {
    __publicField(this, "form", null);
    __publicField(this, "fields", {});
    __publicField(this, "groupFields", {});
    __publicField(this, "errors", {});
    __publicField(this, "isValid", false);
    __publicField(this, "isSubmitted", false);
    __publicField(this, "globalConfig", defaultGlobalConfig);
    __publicField(this, "errorLabels", {});
    __publicField(this, "successLabels", {});
    __publicField(this, "eventListeners", []);
    __publicField(this, "dictLocale", defaultDictionary);
    __publicField(this, "currentLocale", "en");
    __publicField(this, "customStyleTags", {});
    __publicField(this, "onSuccessCallback");
    __publicField(this, "onFailCallback");
    __publicField(this, "onValidateCallback");
    __publicField(this, "tooltips", []);
    __publicField(this, "lastScrollPosition");
    __publicField(this, "isScrollTick");
    __publicField(this, "fieldIds", /* @__PURE__ */ new Map());
    __publicField(this, "getKeyByFieldSelector", (field) => {
      return this.fieldIds.get(field);
    });
    __publicField(this, "getFieldSelectorByKey", (key) => {
      for (const [fieldSelector, k] of this.fieldIds) {
        if (key === k) {
          return fieldSelector;
        }
      }
      return void 0;
    });
    __publicField(this, "getCompatibleFields", () => {
      const fields = {};
      Object.keys(this.fields).forEach((key) => {
        let newKey = key;
        const fieldSelector = this.getFieldSelectorByKey(key);
        if (typeof fieldSelector === "string") {
          newKey = fieldSelector;
        }
        fields[newKey] = { ...this.fields[key] };
      });
      return fields;
    });
    __publicField(this, "setKeyByFieldSelector", (field) => {
      if (this.fieldIds.has(field)) {
        return this.fieldIds.get(field);
      }
      const key = String(this.fieldIds.size + 1);
      this.fieldIds.set(field, key);
      return key;
    });
    __publicField(this, "refreshAllTooltips", () => {
      this.tooltips.forEach((item) => {
        item.refresh();
      });
    });
    __publicField(this, "handleDocumentScroll", () => {
      this.lastScrollPosition = window.scrollY;
      if (!this.isScrollTick) {
        window.requestAnimationFrame(() => {
          this.refreshAllTooltips();
          this.isScrollTick = false;
        });
        this.isScrollTick = true;
      }
    });
    __publicField(this, "formSubmitHandler", (ev) => {
      ev.preventDefault();
      this.isSubmitted = true;
      this.validateHandler(ev);
    });
    __publicField(this, "handleFieldChange", (target) => {
      let foundKey;
      for (const key in this.fields) {
        const field = this.fields[key];
        if (field.elem === target) {
          foundKey = key;
          break;
        }
      }
      if (!foundKey) {
        return;
      }
      this.fields[foundKey].touched = true;
      this.validateField(foundKey, true);
    });
    __publicField(this, "handleGroupChange", (target) => {
      let foundKey;
      for (const key in this.groupFields) {
        const group = this.groupFields[key];
        if (group.elems.find((elem) => elem === target)) {
          foundKey = key;
          break;
        }
      }
      if (!foundKey) {
        return;
      }
      this.groupFields[foundKey].touched = true;
      this.validateGroup(foundKey, true);
    });
    __publicField(this, "handlerChange", (ev) => {
      if (!ev.target) {
        return;
      }
      this.handleFieldChange(ev.target);
      this.handleGroupChange(ev.target);
      this.renderErrors();
    });
    this.initialize(form, globalConfig, dictLocale);
  }
  initialize(form, globalConfig, dictLocale) {
    this.form = null;
    this.errors = {};
    this.isValid = false;
    this.isSubmitted = false;
    this.globalConfig = defaultGlobalConfig;
    this.errorLabels = {};
    this.successLabels = {};
    this.eventListeners = [];
    this.customStyleTags = {};
    this.tooltips = [];
    this.currentLocale = "en";
    if (typeof form === "string") {
      const elem = document.querySelector(form);
      if (!elem) {
        throw Error(
          `Form with ${form} selector not found! Please check the form selector`
        );
      }
      this.setForm(elem);
    } else if (form instanceof HTMLFormElement) {
      this.setForm(form);
    } else {
      throw Error(
        `Form selector is not valid. Please specify a string selector or a DOM element.`
      );
    }
    this.globalConfig = { ...defaultGlobalConfig, ...globalConfig };
    if (dictLocale) {
      this.dictLocale = [...dictLocale, ...defaultDictionary];
    }
    if (this.isTooltip()) {
      const styleTag = document.createElement("style");
      styleTag.textContent = errorLabelCss;
      this.customStyleTags[CustomStyleTagIds.Label] = document.head.appendChild(styleTag);
      this.addListener("scroll", document, this.handleDocumentScroll);
    }
  }
  getLocalisedString(rule, ruleValue, customMsg) {
    var _a;
    const search = customMsg != null ? customMsg : rule;
    let localisedStr = (_a = this.dictLocale.find((item) => item.key === search)) == null ? void 0 : _a.dict[this.currentLocale];
    if (!localisedStr) {
      if (customMsg) {
        localisedStr = customMsg;
      }
    }
    if (localisedStr && ruleValue !== void 0) {
      switch (rule) {
        case Rules.MaxLength:
        case Rules.MinLength:
        case Rules.MaxNumber:
        case Rules.MinNumber:
        case Rules.MinFilesCount:
        case Rules.MaxFilesCount:
          localisedStr = localisedStr.replace(":value", String(ruleValue));
      }
    }
    return localisedStr || customMsg || DEFAULT_ERROR_FIELD_MESSAGE;
  }
  getFieldErrorMessage(fieldRule, elem) {
    const msg = typeof fieldRule.errorMessage === "function" ? fieldRule.errorMessage(this.getElemValue(elem), this.fields) : fieldRule.errorMessage;
    return this.getLocalisedString(fieldRule.rule, fieldRule.value, msg);
  }
  getFieldSuccessMessage(successMessage, elem) {
    const msg = typeof successMessage === "function" ? successMessage(this.getElemValue(elem), this.fields) : successMessage;
    return this.getLocalisedString(void 0, void 0, msg);
  }
  getGroupErrorMessage(groupRule) {
    return this.getLocalisedString(
      groupRule.rule,
      void 0,
      groupRule.errorMessage
    );
  }
  getGroupSuccessMessage(groupRule) {
    if (!groupRule.successMessage) {
      return void 0;
    }
    return this.getLocalisedString(
      void 0,
      void 0,
      groupRule.successMessage
    );
  }
  setFieldInvalid(key, fieldRule) {
    this.fields[key].isValid = false;
    this.fields[key].errorMessage = this.getFieldErrorMessage(
      fieldRule,
      this.fields[key].elem
    );
  }
  setFieldValid(key, successMessage) {
    this.fields[key].isValid = true;
    if (successMessage !== void 0) {
      this.fields[key].successMessage = this.getFieldSuccessMessage(
        successMessage,
        this.fields[key].elem
      );
    }
  }
  setGroupInvalid(key, groupRule) {
    this.groupFields[key].isValid = false;
    this.groupFields[key].errorMessage = this.getGroupErrorMessage(groupRule);
  }
  setGroupValid(key, groupRule) {
    this.groupFields[key].isValid = true;
    this.groupFields[key].successMessage = this.getGroupSuccessMessage(groupRule);
  }
  getElemValue(elem) {
    switch (elem.type) {
      case "checkbox":
        return elem.checked;
      case "file":
        return elem.files;
      default:
        return elem.value;
    }
  }
  validateGroupRule(key, elems, groupRule) {
    switch (groupRule.rule) {
      case GroupRules.Required: {
        if (elems.every((elem) => !elem.checked)) {
          this.setGroupInvalid(key, groupRule);
        } else {
          this.setGroupValid(key, groupRule);
        }
      }
    }
  }
  validateFieldRule(key, elem, fieldRule, afterInputChanged = false) {
    const ruleValue = fieldRule.value;
    const elemValue = this.getElemValue(elem);
    if (fieldRule.plugin) {
      const result = fieldRule.plugin(
        elemValue,
        this.getCompatibleFields()
      );
      if (!result) {
        this.setFieldInvalid(key, fieldRule);
      }
      return;
    }
    switch (fieldRule.rule) {
      case Rules.Required: {
        if (isEmpty(elemValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.Email: {
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        if (!isEmail(elemValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.MaxLength: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (typeof ruleValue !== "number") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] should be a number. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        if (isLengthMoreThanMax(elemValue, ruleValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.MinLength: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (typeof ruleValue !== "number") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] should be a number. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        if (isLengthLessThanMin(elemValue, ruleValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.Password: {
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        if (!isPassword(elemValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.StrongPassword: {
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        if (!isStrongPassword(elemValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.Number: {
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        if (!isNumber(elemValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.Integer: {
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        if (!isInteger(elemValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.MaxNumber: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (typeof ruleValue !== "number") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        const num = +elemValue;
        if (Number.isNaN(num) || isNumberMoreThanMax(num, ruleValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.MinNumber: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (typeof ruleValue !== "number") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (isInvalidOrEmptyString(elemValue)) {
          break;
        }
        const num = +elemValue;
        if (Number.isNaN(num) || isNumberLessThanMin(num, ruleValue)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.CustomRegexp: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          return;
        }
        let regexp;
        try {
          regexp = new RegExp(ruleValue);
        } catch (e) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] should be a valid regexp. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        const str = String(elemValue);
        if (str !== "" && !regexp.test(str)) {
          this.setFieldInvalid(key, fieldRule);
        }
        break;
      }
      case Rules.MinFilesCount: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (typeof ruleValue !== "number") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length < ruleValue) {
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        break;
      }
      case Rules.MaxFilesCount: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (typeof ruleValue !== "number") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length > ruleValue) {
          this.setFieldInvalid(key, fieldRule);
          break;
        }
        break;
      }
      case Rules.Files: {
        if (ruleValue === void 0) {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          return;
        }
        if (typeof ruleValue !== "object") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field should be an object. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          return;
        }
        const filesConfig = ruleValue.files;
        if (typeof filesConfig !== "object") {
          console.error(
            `Value for ${fieldRule.rule} rule for [${key}] field should be an object with files array. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          return;
        }
        const isFilePropsInvalid = (file, fileConfig) => {
          const minSizeInvalid = Number.isFinite(fileConfig.minSize) && file.size < fileConfig.minSize;
          const maxSizeInvalid = Number.isFinite(fileConfig.maxSize) && file.size > fileConfig.maxSize;
          const nameInvalid = Array.isArray(fileConfig.names) && !fileConfig.names.includes(file.name);
          const extInvalid = Array.isArray(fileConfig.extensions) && !fileConfig.extensions.includes(
            file.name.split(".")[file.name.split(".").length - 1]
          );
          const typeInvalid = Array.isArray(fileConfig.types) && !fileConfig.types.includes(file.type);
          return minSizeInvalid || maxSizeInvalid || nameInvalid || extInvalid || typeInvalid;
        };
        if (typeof elemValue === "object" && elemValue !== null) {
          for (let fileIdx = 0, len = elemValue.length; fileIdx < len; ++fileIdx) {
            const file = elemValue.item(fileIdx);
            if (!file) {
              this.setFieldInvalid(key, fieldRule);
              break;
            }
            const filesInvalid = isFilePropsInvalid(file, filesConfig);
            if (filesInvalid) {
              this.setFieldInvalid(key, fieldRule);
              break;
            }
          }
        }
        break;
      }
      default: {
        if (typeof fieldRule.validator !== "function") {
          console.error(
            `Validator for custom rule for [${key}] field should be a function. This field will be always invalid.`
          );
          this.setFieldInvalid(key, fieldRule);
          return;
        }
        const result = fieldRule.validator(
          elemValue,
          this.getCompatibleFields()
        );
        if (typeof result !== "boolean" && typeof result !== "function") {
          console.error(
            `Validator return value for [${key}] field should be boolean or function. It will be cast to boolean.`
          );
        }
        if (typeof result === "function") {
          if (afterInputChanged) {
            this.fields[key].asyncCheckPending = true;
          } else {
            this.fields[key].asyncCheckPending = false;
            const promise = result();
            if (!isPromise(promise)) {
              console.error(
                `Validator function for custom rule for [${key}] field should return a Promise. This field will be always invalid.`
              );
              this.setFieldInvalid(key, fieldRule);
              return;
            }
            return promise.then((resp) => {
              if (!resp) {
                this.setFieldInvalid(key, fieldRule);
              }
            }).catch(() => {
              this.setFieldInvalid(key, fieldRule);
            });
          }
        }
        if (!result) {
          this.setFieldInvalid(key, fieldRule);
        }
      }
    }
  }
  isFormValid() {
    let isValid = true;
    for (let i = 0, len = Object.values(this.fields).length; i < len; ++i) {
      const item = Object.values(this.fields)[i];
      if (item.isValid === void 0) {
        isValid = void 0;
        break;
      }
      if (item.isValid === false) {
        isValid = false;
        break;
      }
    }
    for (let i = 0, len = Object.values(this.groupFields).length; i < len; ++i) {
      const item = Object.values(this.groupFields)[i];
      if (item.isValid === void 0) {
        isValid = void 0;
        break;
      }
      if (item.isValid === false) {
        isValid = false;
        break;
      }
    }
    return isValid;
  }
  validateField(key, afterInputChanged = false) {
    var _a;
    const field = this.fields[key];
    field.isValid = true;
    const promises = [];
    [...field.rules].reverse().forEach((rule) => {
      const res = this.validateFieldRule(
        key,
        field.elem,
        rule,
        afterInputChanged
      );
      if (isPromise(res)) {
        promises.push(res);
      }
    });
    if (field.isValid) {
      this.setFieldValid(key, (_a = field.config) == null ? void 0 : _a.successMessage);
    }
    return Promise.allSettled(promises).finally(() => {
      var _a2;
      if (afterInputChanged) {
        (_a2 = this.onValidateCallback) == null ? void 0 : _a2.call(this, {
          isValid: this.isFormValid(),
          isSubmitted: this.isSubmitted,
          fields: this.getCompatibleFields(),
          groups: { ...this.groupFields }
        });
      }
    });
  }
  revalidateField(fieldSelector) {
    if (typeof fieldSelector !== "string" && !isElement(fieldSelector)) {
      throw Error(
        `Field selector is not valid. Please specify a string selector or a valid DOM element.`
      );
    }
    const key = this.getKeyByFieldSelector(fieldSelector);
    if (!key || !this.fields[key]) {
      console.error(`Field not found. Check the field selector.`);
      return Promise.reject();
    }
    return new Promise((resolve) => {
      this.validateField(key, true).finally(() => {
        this.clearFieldStyle(key);
        this.clearFieldLabel(key);
        this.renderFieldError(key, true);
        resolve(!!this.fields[key].isValid);
      });
    });
  }
  revalidateGroup(groupSelector) {
    if (typeof groupSelector !== "string" && !isElement(groupSelector)) {
      throw Error(
        `Group selector is not valid. Please specify a string selector or a valid DOM element.`
      );
    }
    const key = this.getKeyByFieldSelector(groupSelector);
    if (!key || !this.groupFields[key]) {
      console.error(`Group not found. Check the group selector.`);
      return Promise.reject();
    }
    return new Promise((resolve) => {
      this.validateGroup(key).finally(() => {
        this.clearFieldLabel(key);
        this.renderGroupError(key, true);
        resolve(!!this.groupFields[key].isValid);
      });
    });
  }
  validateGroup(key, afterInputChanged = false) {
    const group = this.groupFields[key];
    const promises = [];
    [...group.rules].reverse().forEach((rule) => {
      const res = this.validateGroupRule(key, group.elems, rule);
      if (isPromise(res)) {
        promises.push(res);
      }
    });
    return Promise.allSettled(promises).finally(() => {
      var _a;
      if (afterInputChanged) {
        (_a = this.onValidateCallback) == null ? void 0 : _a.call(this, {
          isValid: this.isFormValid(),
          isSubmitted: this.isSubmitted,
          fields: this.getCompatibleFields(),
          groups: { ...this.groupFields }
        });
      }
    });
  }
  focusInvalidField() {
    for (const key in this.fields) {
      const field = this.fields[key];
      if (!field.isValid) {
        setTimeout(() => field.elem.focus(), 0);
        break;
      }
    }
  }
  afterSubmitValidation(forceRevalidation = false) {
    this.renderErrors(forceRevalidation);
    if (this.globalConfig.focusInvalidField) {
      this.focusInvalidField();
    }
  }
  validate(forceRevalidation = false) {
    return new Promise((resolve) => {
      const promises = [];
      Object.keys(this.fields).forEach((key) => {
        const promise = this.validateField(key);
        if (isPromise(promise)) {
          promises.push(promise);
        }
      });
      Object.keys(this.groupFields).forEach((key) => {
        const promise = this.validateGroup(key);
        if (isPromise(promise)) {
          promises.push(promise);
        }
      });
      Promise.allSettled(promises).then(() => {
        var _a;
        this.afterSubmitValidation(forceRevalidation);
        (_a = this.onValidateCallback) == null ? void 0 : _a.call(this, {
          isValid: this.isFormValid(),
          isSubmitted: this.isSubmitted,
          fields: this.getCompatibleFields(),
          groups: { ...this.groupFields }
        });
        resolve(!!promises.length);
      });
    });
  }
  revalidate() {
    return new Promise((resolve) => {
      this.validateHandler(void 0, true).finally(() => {
        if (this.globalConfig.focusInvalidField) {
          this.focusInvalidField();
        }
        resolve(this.isValid);
      });
    });
  }
  validateHandler(ev, forceRevalidation = false) {
    if (this.globalConfig.lockForm) {
      this.lockForm();
    }
    return this.validate(forceRevalidation).finally(() => {
      var _a, _b, _c;
      if (this.globalConfig.lockForm) {
        this.unlockForm();
      }
      if (this.isValid) {
        (_a = this.onSuccessCallback) == null ? void 0 : _a.call(this, ev);
        if (this.globalConfig.submitFormAutomatically) {
          (_b = ev == null ? void 0 : ev.currentTarget) == null ? void 0 : _b.submit();
        }
      } else {
        (_c = this.onFailCallback) == null ? void 0 : _c.call(this, this.getCompatibleFields(), this.groupFields);
      }
    });
  }
  setForm(form) {
    this.form = form;
    this.form.setAttribute("novalidate", "novalidate");
    this.removeListener("submit", this.form, this.formSubmitHandler);
    this.addListener("submit", this.form, this.formSubmitHandler);
  }
  addListener(type, elem, handler) {
    elem.addEventListener(type, handler);
    this.eventListeners.push({ type, elem, func: handler });
  }
  removeListener(type, elem, handler) {
    elem.removeEventListener(type, handler);
    this.eventListeners = this.eventListeners.filter(
      (item) => item.type !== type || item.elem !== elem
    );
  }
  addField(fieldSelector, rules, config) {
    if (typeof fieldSelector !== "string" && !isElement(fieldSelector)) {
      throw Error(
        `Field selector is not valid. Please specify a string selector or a valid DOM element.`
      );
    }
    let elem;
    if (typeof fieldSelector === "string") {
      elem = this.form.querySelector(fieldSelector);
    } else {
      elem = fieldSelector;
    }
    if (!elem) {
      throw Error(
        `Field doesn't exist in the DOM! Please check the field selector.`
      );
    }
    if (!Array.isArray(rules) || !rules.length) {
      throw Error(
        `Rules argument should be an array and should contain at least 1 element.`
      );
    }
    rules.forEach((item) => {
      if (!("rule" in item || "validator" in item || "plugin" in item)) {
        throw Error(
          `Rules argument must contain at least one rule or validator property.`
        );
      }
      if (!item.validator && !item.plugin && (!item.rule || !Object.values(Rules).includes(item.rule))) {
        throw Error(
          `Rule should be one of these types: ${Object.values(Rules).join(
            ", "
          )}. Provided value: ${item.rule}`
        );
      }
    });
    const key = this.setKeyByFieldSelector(fieldSelector);
    this.fields[key] = {
      elem,
      rules,
      isValid: void 0,
      touched: false,
      config
    };
    this.setListeners(elem);
    if (this.isSubmitted || this.globalConfig.validateBeforeSubmitting) {
      this.validateField(key);
    }
    return this;
  }
  removeField(fieldSelector) {
    if (typeof fieldSelector !== "string" && !isElement(fieldSelector)) {
      throw Error(
        `Field selector is not valid. Please specify a string selector or a valid DOM element.`
      );
    }
    const key = this.getKeyByFieldSelector(fieldSelector);
    if (!key || !this.fields[key]) {
      console.error(`Field not found. Check the field selector.`);
      return this;
    }
    const type = this.getListenerType(this.fields[key].elem.type);
    this.removeListener(type, this.fields[key].elem, this.handlerChange);
    this.clearErrors();
    delete this.fields[key];
    return this;
  }
  removeGroup(group) {
    if (typeof group !== "string") {
      throw Error(
        `Group selector is not valid. Please specify a string selector.`
      );
    }
    const key = this.getKeyByFieldSelector(group);
    if (!key || !this.groupFields[key]) {
      console.error(`Group not found. Check the group selector.`);
      return this;
    }
    this.groupFields[key].elems.forEach((elem) => {
      const type = this.getListenerType(elem.type);
      this.removeListener(type, elem, this.handlerChange);
    });
    this.clearErrors();
    delete this.groupFields[key];
    return this;
  }
  addRequiredGroup(groupField, errorMessage, config, successMessage) {
    if (typeof groupField !== "string" && !isElement(groupField)) {
      throw Error(
        `Group selector is not valid. Please specify a string selector or a valid DOM element.`
      );
    }
    let elem;
    if (typeof groupField === "string") {
      elem = this.form.querySelector(groupField);
    } else {
      elem = groupField;
    }
    if (!elem) {
      throw Error(`Group selector not found! Please check the group selector.`);
    }
    const inputs = elem.querySelectorAll("input");
    const childrenInputs = Array.from(inputs).filter((input) => {
      const parent = getClosestParent(this.groupFields, getNodeParents(input));
      if (!parent) {
        return true;
      }
      return parent[1].elems.find((elem2) => elem2 !== input);
    });
    const key = this.setKeyByFieldSelector(groupField);
    this.groupFields[key] = {
      rules: [
        {
          rule: GroupRules.Required,
          errorMessage,
          successMessage
        }
      ],
      groupElem: elem,
      elems: childrenInputs,
      touched: false,
      isValid: void 0,
      config
    };
    inputs.forEach((input) => {
      this.setListeners(input);
    });
    return this;
  }
  getListenerType(type) {
    switch (type) {
      case "checkbox":
      case "select-one":
      case "file":
      case "radio": {
        return "change";
      }
      default: {
        return "input";
      }
    }
  }
  setListeners(elem) {
    const type = this.getListenerType(elem.type);
    this.removeListener(type, elem, this.handlerChange);
    this.addListener(type, elem, this.handlerChange);
  }
  clearFieldLabel(key) {
    var _a, _b;
    (_a = this.errorLabels[key]) == null ? void 0 : _a.remove();
    (_b = this.successLabels[key]) == null ? void 0 : _b.remove();
  }
  clearFieldStyle(key) {
    var _a, _b, _c, _d;
    const field = this.fields[key];
    const errorStyle = ((_a = field.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;
    Object.keys(errorStyle).forEach((key2) => {
      field.elem.style[key2] = "";
    });
    const successStyle = ((_b = field.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};
    Object.keys(successStyle).forEach((key2) => {
      field.elem.style[key2] = "";
    });
    field.elem.classList.remove(
      ...getClassList(
        ((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass
      ),
      ...getClassList(
        ((_d = field.config) == null ? void 0 : _d.successFieldCssClass) || this.globalConfig.successFieldCssClass
      )
    );
  }
  clearErrors() {
    var _a, _b;
    Object.keys(this.errorLabels).forEach(
      (key) => this.errorLabels[key].remove()
    );
    Object.keys(this.successLabels).forEach(
      (key) => this.successLabels[key].remove()
    );
    for (const key in this.fields) {
      this.clearFieldStyle(key);
    }
    for (const key in this.groupFields) {
      const group = this.groupFields[key];
      const errorStyle = ((_a = group.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;
      Object.keys(errorStyle).forEach((key2) => {
        group.elems.forEach((elem) => {
          var _a2;
          elem.style[key2] = "";
          elem.classList.remove(
            ...getClassList(
              ((_a2 = group.config) == null ? void 0 : _a2.errorFieldCssClass) || this.globalConfig.errorFieldCssClass
            )
          );
        });
      });
      const successStyle = ((_b = group.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};
      Object.keys(successStyle).forEach((key2) => {
        group.elems.forEach((elem) => {
          var _a2;
          elem.style[key2] = "";
          elem.classList.remove(
            ...getClassList(
              ((_a2 = group.config) == null ? void 0 : _a2.successFieldCssClass) || this.globalConfig.successFieldCssClass
            )
          );
        });
      });
    }
    this.tooltips = [];
  }
  isTooltip() {
    return !!this.globalConfig.tooltip;
  }
  lockForm() {
    const elems = this.form.querySelectorAll(
      "input, textarea, button, select"
    );
    for (let i = 0, len = elems.length; i < len; ++i) {
      elems[i].setAttribute(
        "data-just-validate-fallback-disabled",
        elems[i].disabled ? "true" : "false"
      );
      elems[i].setAttribute("disabled", "disabled");
      elems[i].style.pointerEvents = "none";
      elems[i].style.webkitFilter = "grayscale(100%)";
      elems[i].style.filter = "grayscale(100%)";
    }
  }
  unlockForm() {
    const elems = this.form.querySelectorAll(
      "input, textarea, button, select"
    );
    for (let i = 0, len = elems.length; i < len; ++i) {
      if (elems[i].getAttribute("data-just-validate-fallback-disabled") !== "true") {
        elems[i].removeAttribute("disabled");
      }
      elems[i].style.pointerEvents = "";
      elems[i].style.webkitFilter = "";
      elems[i].style.filter = "";
    }
  }
  renderTooltip(elem, errorLabel, position) {
    var _a;
    const { top, left, width, height } = elem.getBoundingClientRect();
    const errorLabelRect = errorLabel.getBoundingClientRect();
    const pos = position || ((_a = this.globalConfig.tooltip) == null ? void 0 : _a.position);
    switch (pos) {
      case "left": {
        errorLabel.style.top = `${top + height / 2 - errorLabelRect.height / 2}px`;
        errorLabel.style.left = `${left - errorLabelRect.width - TOOLTIP_ARROW_HEIGHT}px`;
        break;
      }
      case "top": {
        errorLabel.style.top = `${top - errorLabelRect.height - TOOLTIP_ARROW_HEIGHT}px`;
        errorLabel.style.left = `${left + width / 2 - errorLabelRect.width / 2}px`;
        break;
      }
      case "right": {
        errorLabel.style.top = `${top + height / 2 - errorLabelRect.height / 2}px`;
        errorLabel.style.left = `${left + width + TOOLTIP_ARROW_HEIGHT}px`;
        break;
      }
      case "bottom": {
        errorLabel.style.top = `${top + height + TOOLTIP_ARROW_HEIGHT}px`;
        errorLabel.style.left = `${left + width / 2 - errorLabelRect.width / 2}px`;
        break;
      }
    }
    errorLabel.dataset.direction = pos;
    const refresh = () => {
      this.renderTooltip(elem, errorLabel, position);
    };
    return {
      refresh
    };
  }
  createErrorLabelElem(key, errorMessage, config) {
    const errorLabel = document.createElement("div");
    errorLabel.innerHTML = errorMessage;
    const customErrorLabelStyle = this.isTooltip() ? config == null ? void 0 : config.errorLabelStyle : (config == null ? void 0 : config.errorLabelStyle) || this.globalConfig.errorLabelStyle;
    Object.assign(errorLabel.style, customErrorLabelStyle);
    errorLabel.classList.add(
      ...getClassList(
        (config == null ? void 0 : config.errorLabelCssClass) || this.globalConfig.errorLabelCssClass
      ),
      "just-validate-error-label"
    );
    if (this.isTooltip()) {
      errorLabel.dataset.tooltip = "true";
    }
    if (this.globalConfig.testingMode) {
      errorLabel.dataset.testId = `error-label-${key}`;
    }
    this.errorLabels[key] = errorLabel;
    return errorLabel;
  }
  createSuccessLabelElem(key, successMessage, config) {
    if (successMessage === void 0) {
      return null;
    }
    const successLabel = document.createElement("div");
    successLabel.innerHTML = successMessage;
    const customSuccessLabelStyle = (config == null ? void 0 : config.successLabelStyle) || this.globalConfig.successLabelStyle;
    Object.assign(successLabel.style, customSuccessLabelStyle);
    successLabel.classList.add(
      ...getClassList(
        (config == null ? void 0 : config.successLabelCssClass) || this.globalConfig.successLabelCssClass
      ),
      "just-validate-success-label"
    );
    if (this.globalConfig.testingMode) {
      successLabel.dataset.testId = `success-label-${key}`;
    }
    this.successLabels[key] = successLabel;
    return successLabel;
  }
  renderErrorsContainer(label, errorsContainer) {
    const container = errorsContainer || this.globalConfig.errorsContainer;
    if (typeof container === "string") {
      const elem = this.form.querySelector(container);
      if (elem) {
        elem.appendChild(label);
        return true;
      } else {
        console.error(
          `Error container with ${container} selector not found. Errors will be rendered as usual`
        );
      }
    }
    if (container instanceof Element) {
      container.appendChild(label);
      return true;
    }
    if (container !== void 0) {
      console.error(
        `Error container not found. It should be a string or existing Element. Errors will be rendered as usual`
      );
    }
    return false;
  }
  renderGroupLabel(elem, label, errorsContainer, isSuccess) {
    if (!isSuccess) {
      const renderedInErrorsContainer = this.renderErrorsContainer(
        label,
        errorsContainer
      );
      if (renderedInErrorsContainer) {
        return;
      }
    }
    elem.appendChild(label);
  }
  renderFieldLabel(elem, label, errorsContainer, isSuccess) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!isSuccess) {
      const renderedInErrorsContainer = this.renderErrorsContainer(
        label,
        errorsContainer
      );
      if (renderedInErrorsContainer) {
        return;
      }
    }
    if (elem.type === "checkbox" || elem.type === "radio") {
      const labelElem = document.querySelector(
        `label[for="${elem.getAttribute("id")}"]`
      );
      if (((_b = (_a = elem.parentElement) == null ? void 0 : _a.tagName) == null ? void 0 : _b.toLowerCase()) === "label") {
        (_d = (_c = elem.parentElement) == null ? void 0 : _c.parentElement) == null ? void 0 : _d.appendChild(label);
      } else if (labelElem) {
        (_e = labelElem.parentElement) == null ? void 0 : _e.appendChild(label);
      } else {
        (_f = elem.parentElement) == null ? void 0 : _f.appendChild(label);
      }
    } else {
      (_g = elem.parentElement) == null ? void 0 : _g.appendChild(label);
    }
  }
  showLabels(fields, isError) {
    Object.keys(fields).forEach((fieldName, i) => {
      const error = fields[fieldName];
      const key = this.getKeyByFieldSelector(fieldName);
      if (!key || !this.fields[key]) {
        console.error(`Field not found. Check the field selector.`);
        return;
      }
      const field = this.fields[key];
      field.isValid = !isError;
      this.clearFieldStyle(key);
      this.clearFieldLabel(key);
      this.renderFieldError(key, false, error);
      if (i === 0 && this.globalConfig.focusInvalidField) {
        setTimeout(() => field.elem.focus(), 0);
      }
    });
  }
  showErrors(fields) {
    if (typeof fields !== "object") {
      throw Error(
        "[showErrors]: Errors should be an object with key: value format"
      );
    }
    this.showLabels(fields, true);
  }
  showSuccessLabels(fields) {
    if (typeof fields !== "object") {
      throw Error(
        "[showSuccessLabels]: Labels should be an object with key: value format"
      );
    }
    this.showLabels(fields, false);
  }
  renderFieldError(key, forced = false, message) {
    var _a, _b, _c, _d, _e, _f;
    const field = this.fields[key];
    if (field.isValid === false) {
      this.isValid = false;
    }
    if (field.isValid === void 0 || !forced && !this.isSubmitted && !field.touched && message === void 0) {
      return;
    }
    if (field.isValid) {
      if (!field.asyncCheckPending) {
        const successLabel = this.createSuccessLabelElem(
          key,
          message !== void 0 ? message : field.successMessage,
          field.config
        );
        if (successLabel) {
          this.renderFieldLabel(
            field.elem,
            successLabel,
            (_a = field.config) == null ? void 0 : _a.errorsContainer,
            true
          );
        }
        field.elem.classList.add(
          ...getClassList(
            ((_b = field.config) == null ? void 0 : _b.successFieldCssClass) || this.globalConfig.successFieldCssClass
          )
        );
      }
      return;
    }
    field.elem.classList.add(
      ...getClassList(
        ((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass
      )
    );
    const errorLabel = this.createErrorLabelElem(
      key,
      message !== void 0 ? message : field.errorMessage,
      field.config
    );
    this.renderFieldLabel(
      field.elem,
      errorLabel,
      (_d = field.config) == null ? void 0 : _d.errorsContainer
    );
    if (this.isTooltip()) {
      this.tooltips.push(
        this.renderTooltip(
          field.elem,
          errorLabel,
          (_f = (_e = field.config) == null ? void 0 : _e.tooltip) == null ? void 0 : _f.position
        )
      );
    }
  }
  renderGroupError(key, force = true) {
    var _a, _b, _c, _d;
    const group = this.groupFields[key];
    if (group.isValid === false) {
      this.isValid = false;
    }
    if (group.isValid === void 0 || !force && !this.isSubmitted && !group.touched) {
      return;
    }
    if (group.isValid) {
      group.elems.forEach((elem) => {
        var _a2, _b2;
        Object.assign(
          elem.style,
          ((_a2 = group.config) == null ? void 0 : _a2.successFieldStyle) || this.globalConfig.successFieldStyle
        );
        elem.classList.add(
          ...getClassList(
            ((_b2 = group.config) == null ? void 0 : _b2.successFieldCssClass) || this.globalConfig.successFieldCssClass
          )
        );
      });
      const successLabel = this.createSuccessLabelElem(
        key,
        group.successMessage,
        group.config
      );
      if (successLabel) {
        this.renderGroupLabel(
          group.groupElem,
          successLabel,
          (_a = group.config) == null ? void 0 : _a.errorsContainer,
          true
        );
      }
      return;
    }
    this.isValid = false;
    group.elems.forEach((elem) => {
      var _a2, _b2;
      Object.assign(
        elem.style,
        ((_a2 = group.config) == null ? void 0 : _a2.errorFieldStyle) || this.globalConfig.errorFieldStyle
      );
      elem.classList.add(
        ...getClassList(
          ((_b2 = group.config) == null ? void 0 : _b2.errorFieldCssClass) || this.globalConfig.errorFieldCssClass
        )
      );
    });
    const errorLabel = this.createErrorLabelElem(
      key,
      group.errorMessage,
      group.config
    );
    this.renderGroupLabel(
      group.groupElem,
      errorLabel,
      (_b = group.config) == null ? void 0 : _b.errorsContainer
    );
    if (this.isTooltip()) {
      this.tooltips.push(
        this.renderTooltip(
          group.groupElem,
          errorLabel,
          (_d = (_c = group.config) == null ? void 0 : _c.tooltip) == null ? void 0 : _d.position
        )
      );
    }
  }
  renderErrors(forceRevalidation = false) {
    if (!this.isSubmitted && !forceRevalidation && !this.globalConfig.validateBeforeSubmitting) {
      return;
    }
    this.clearErrors();
    this.isValid = true;
    for (const key in this.groupFields) {
      this.renderGroupError(key);
    }
    for (const key in this.fields) {
      this.renderFieldError(key);
    }
  }
  destroy() {
    this.eventListeners.forEach((event) => {
      this.removeListener(event.type, event.elem, event.func);
    });
    Object.keys(this.customStyleTags).forEach((key) => {
      this.customStyleTags[key].remove();
    });
    this.clearErrors();
    if (this.globalConfig.lockForm) {
      this.unlockForm();
    }
  }
  refresh() {
    this.destroy();
    if (!this.form) {
      console.error("Cannot initialize the library! Form is not defined");
    } else {
      this.initialize(this.form, this.globalConfig);
      Object.keys(this.fields).forEach((key) => {
        const fieldSelector = this.getFieldSelectorByKey(key);
        if (fieldSelector) {
          this.addField(
            fieldSelector,
            [...this.fields[key].rules],
            this.fields[key].config
          );
        }
      });
    }
  }
  setCurrentLocale(locale) {
    if (typeof locale !== "string" && locale !== void 0) {
      console.error("Current locale should be a string");
      return;
    }
    this.currentLocale = locale;
    if (this.isSubmitted) {
      this.validate();
    }
  }
  onSuccess(callback) {
    this.onSuccessCallback = callback;
    return this;
  }
  onFail(callback) {
    this.onFailCallback = callback;
    return this;
  }
  onValidate(callback) {
    this.onValidateCallback = callback;
    return this;
  }
}

const validationFormConfig = {
  errorFieldCssClass: "input--invalid",
  errorLabelStyle: {},
  errorLabelCssClass: ["form__field-error"]
};
const requiredFieldValidationRule = {
  rule: "required",
  errorMessage: "Обязательное поле"
};
const phoneFieldValidationRules = [requiredFieldValidationRule, {
  rule: "customRegexp",
  value: /^(\+7)[\s-]\(([0-9]{3})\)[\s-]([0-9]{3})[\s-]([0-9]{2})[\s-]([0-9]{2})/gi,
  errorMessage: "Неверное значение"
}];
const textFieldValidationRules = [requiredFieldValidationRule, {
  rule: "minLength",
  value: 2,
  errorMessage: "Значение слишком короткое"
}, {
  rule: "maxLength",
  value: 50,
  errorMessage: "Значение слишком длинное"
}];
const emailFieldValidationRules = [requiredFieldValidationRule, {
  rule: "email",
  errorMessage: "Неверное значение"
}];
const requiredFieldValidationRules = [requiredFieldValidationRule];
const integerFieldValidationRules = [requiredFieldValidationRule, {
  rule: "integer",
  errorMessage: "Введите число"
}];
const selectFieldValidationConfig = {
  errorFieldCssClass: "select--invalid"
};
function formSendConfig(plainFormData) {
  return {
    method: "POST",
    headers: {
      "Content-Type": "application/json;charset=utf-8"
    },
    body: JSON.stringify(plainFormData)
  };
}
const onValidationSuccess = (form, actionUrl, success, error) => {
  const formData = new FormData(form);
  const plainFormData = Object.fromEntries(formData.entries());
  fetch(actionUrl, formSendConfig(plainFormData)).then(response => {
    if (response.ok) {
      success();
    } else {
      error();
    }
  });
};
const isSelectHasValue = select => {
  if (select.value.length !== 0) select.classList.add("select--has-value");
  select.addEventListener("change", function () {
    this.value.length !== 0 ? this.classList.add("select--has-value") : this.classList.remove("select--has-value");
  });
};

const successFn = () => {
  alert("success");
};
const errorFn = () => {
  alert("error");
};
ready(function () {
  const formMyData = document.querySelector("#formMyData");
  const formPayment = document.querySelector("#formPayment");
  const formFeedBack = document.querySelector("#formFeedBack");
  const formAddFile = document.querySelector("#formAddFile");
  const formVisa = document.querySelector("#formVisa");
  const formAtes = document.querySelector("#formAtes");
  const formWork = document.querySelector("#formWork");
  const formCitizenship = document.querySelector("#formCitizenship");
  const formIntPassport = document.querySelector("#formIntPassport");
  const formInvite = document.querySelector("#formInvite");
  const formAvia = document.querySelector("#formAvia");
  const formBusiness = document.querySelector("#formBusiness");
  const formMedical = document.querySelector("#formMedical");
  const formOthers = document.querySelector("#formOthers");
  const formCallback = document.querySelector("#formCallback");
  if (formVisa) {
    const actionUrl = formVisa.getAttribute("action");
    const formVisaValidate = new JustValidate(formVisa, validationFormConfig);
    formVisaValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("input[name='citizenship']", requiredFieldValidationRules).addField("select[name='visaType']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='country']", requiredFieldValidationRules, selectFieldValidationConfig).addField("input[name='amount']", integerFieldValidationRules).addField("input[name='dateStart']", requiredFieldValidationRules).addField("input[name='dateEnd']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formVisa, actionUrl, successFn, errorFn);
    });
  }
  if (formAtes) {
    const actionUrl = formAtes.getAttribute("action");
    const formAtesValidate = new JustValidate(formAtes, validationFormConfig);
    formAtesValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("input[name='citizenship']", requiredFieldValidationRules).addField("input[name='amount']", integerFieldValidationRules).addField("input[name='dateStart']", requiredFieldValidationRules).addField("input[name='dateEnd']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formAtes, actionUrl, successFn, errorFn);
    });
  }
  if (formWork) {
    const actionUrl = formWork.getAttribute("action");
    const formWorkValidate = new JustValidate(formWork, validationFormConfig);
    formWorkValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("input[name='citizenship']", requiredFieldValidationRules).addField("select[name='country']", requiredFieldValidationRules, selectFieldValidationConfig).addField("input[name='amount']", integerFieldValidationRules).addField("input[name='dateStart']", requiredFieldValidationRules).addField("input[name='dateEnd']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formWork, actionUrl, successFn, errorFn);
    });
  }
  if (formCitizenship) {
    const actionUrl = formCitizenship.getAttribute("action");
    const formCitizenshipValidate = new JustValidate(formCitizenship, validationFormConfig);
    formCitizenshipValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("select[name='citizenshipCountry']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='program']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='criminalRecord']", requiredFieldValidationRules, selectFieldValidationConfig).onSuccess(() => {
      onValidationSuccess(formCitizenship, actionUrl, successFn, errorFn);
    });
  }
  if (formIntPassport) {
    const actionUrl = formIntPassport.getAttribute("action");
    const formIntPassportValidate = new JustValidate(formIntPassport, validationFormConfig);
    formIntPassportValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("select[name='age']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='militaryId']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='debt']", requiredFieldValidationRules, selectFieldValidationConfig).onSuccess(() => {
      onValidationSuccess(formIntPassport, actionUrl, successFn, errorFn);
    });
  }
  if (formInvite) {
    const actionUrl = formInvite.getAttribute("action");
    const formInviteValidate = new JustValidate(formInvite, validationFormConfig);
    formInviteValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("select[name='inviteType']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='stayDuration']", requiredFieldValidationRules, selectFieldValidationConfig).addField("input[name='inviteeCountry']", textFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formInvite, actionUrl, successFn, errorFn);
    });
  }
  if (formAvia) {
    const actionUrl = formAvia.getAttribute("action");
    const formAviaValidate = new JustValidate(formAvia, validationFormConfig);
    formAviaValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("select[name='serviceType']", requiredFieldValidationRules, selectFieldValidationConfig).addField("input[name='passengersNumber']", integerFieldValidationRules).addField("input[name='whatDate']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formAvia, actionUrl, successFn, errorFn);
    });
  }
  if (formBusiness) {
    const actionUrl = formBusiness.getAttribute("action");
    const formBusinessValidate = new JustValidate(formBusiness, validationFormConfig);
    formBusinessValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("input[name='citizenship']", requiredFieldValidationRules).addField("select[name='inviteType']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='country']", requiredFieldValidationRules, selectFieldValidationConfig).addField("input[name='amount']", integerFieldValidationRules).addField("input[name='dateStart']", requiredFieldValidationRules).addField("input[name='dateEnd']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formBusiness, actionUrl, successFn, errorFn);
    });
  }
  if (formMedical) {
    const actionUrl = formMedical.getAttribute("action");
    const formMedicalValidate = new JustValidate(formMedical, validationFormConfig);
    formMedicalValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).addField("input[name='citizenship']", requiredFieldValidationRules).addField("select[name='inviteType']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='country']", requiredFieldValidationRules, selectFieldValidationConfig).addField("input[name='amount']", integerFieldValidationRules).addField("input[name='dateStart']", requiredFieldValidationRules).addField("input[name='dateEnd']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formMedical, actionUrl, successFn, errorFn);
    });
  }
  if (formOthers) {
    const actionUrl = formOthers.getAttribute("action");
    const formOthersValidate = new JustValidate(formOthers, validationFormConfig);
    formOthersValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='type']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formOthers, actionUrl, successFn, errorFn);
    });
  }
  if (formMyData) {
    const actionUrl = formMyData.getAttribute("action");
    const formMyDataValidate = new JustValidate(formMyData, validationFormConfig);
    formMyDataValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='lastname']", textFieldValidationRules).addField("input[name='middleName']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='birthday']", requiredFieldValidationRules).addField("input[name='currentCitizenship']", requiredFieldValidationRules).addField("input[name='intPassNumber']", [{
      rule: "required",
      errorMessage: "Обязательное поле"
    }, {
      rule: "customRegexp",
      value: /\d{2}\s\d{7}/gi,
      errorMessage: "Неверное значение"
    }]).addField("input[name='intIssuedBy']", requiredFieldValidationRules).addField("input[name='intIssueDate']", requiredFieldValidationRules).addField("input[name='intExpiryDate']", requiredFieldValidationRules).addField("input[name='passNumber']", [{
      rule: "required",
      errorMessage: "Обязательное поле"
    }, {
      rule: "customRegexp",
      value: /\d{4}\s\d{6}/gi,
      errorMessage: "Неверное значение"
    }]).addField("input[name='passIssuedBy']", requiredFieldValidationRules).addField("input[name='passIssueDate']", requiredFieldValidationRules).addField("input[name='passExpiryDate']", requiredFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formMyData, actionUrl, successFn, errorFn);
    });
  }
  if (formPayment) {
    const actionUrl = formPayment.getAttribute("action");
    const formPaymentValidate = new JustValidate(formPayment, validationFormConfig);
    formPaymentValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='sum']", integerFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formPayment, actionUrl, successFn, errorFn);
    });
  }
  if (formFeedBack) {
    const actionUrl = formFeedBack.getAttribute("action");
    const formFeedBackValidate = new JustValidate(formFeedBack, validationFormConfig);
    formFeedBackValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formFeedBack, actionUrl, successFn, errorFn);
    });
  }
  if (formAddFile) {
    const actionUrl = formAddFile.getAttribute("action");
    const formAddFileValidate = new JustValidate(formAddFile, validationFormConfig);
    formAddFileValidate.addField("[name='doc']", [{
      rule: "minFilesCount",
      value: 1,
      errorMessage: "Нужно выбрать файл"
    }, {
      rule: "maxFilesCount",
      value: 3,
      errorMessage: "Обязательное поле"
    }, {
      rule: "files",
      value: {
        files: {
          extensions: ["xls", "xlsx", "doc", "docx", "png", "jpg", "jpeg", "pdf"],
          maxSize: 5_000_000,
          minSize: 1_000,
          types: ["application/vnd.ms-excel", "application/msword", "application/pdf", "image/jpeg", "image/jpg", "image/png"]
        }
      },
      errorMessage: `Файл должен быть документом (xls, xlsx, doc, docx, pdf) или изображением (png, jpg, jpeg),
              максимальный размер файла 5mb`
    }], {
      errorFieldCssClass: "input-file__input--invalid",
      errorLabelCssClass: "input-file__error"
    }).onSuccess(() => {
      onValidationSuccess(formAddFile, actionUrl, successFn, errorFn);
    });
  }
  if (formCallback) {
    const actionUrl = formCallback.getAttribute("action");
    const formCallbackValidate = new JustValidate(formCallback, validationFormConfig);
    formCallbackValidate.addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).addField("input[name='city']", textFieldValidationRules).onSuccess(() => {
      onValidationSuccess(formCallback, actionUrl, () => {
        location.replace("/thanks/");
      }, errorFn);
    });
  }
});

ready(function () {
  const formSet = document.querySelector("#formSet");
  if (formSet) {
    const serviceTypeSelect = formSet.querySelector("#service");
    const formSetPanes = formSet.querySelectorAll(".form-set__pane");
    setActivePane(formSetPanes, serviceTypeSelect.value);
    serviceTypeSelect.addEventListener("change", e => {
      setActivePane(formSetPanes, e.target.value);
    });
  }
});
function setActivePane(panes, id) {
  for (let pane of panes) {
    if (pane.dataset.form === id) pane.classList.add("form-set__pane--active");else pane.classList.remove("form-set__pane--active");
  }
}

/** Checks if value is string */
function isString(str) {
  return typeof str === 'string' || str instanceof String;
}

/** Checks if value is object */
function isObject(obj) {
  var _obj$constructor;
  return typeof obj === 'object' && obj != null && (obj == null || (_obj$constructor = obj.constructor) == null ? void 0 : _obj$constructor.name) === 'Object';
}
function pick(obj, keys) {
  if (Array.isArray(keys)) return pick(obj, (_, k) => keys.includes(k));
  return Object.entries(obj).reduce((acc, _ref) => {
    let [k, v] = _ref;
    if (keys(v, k)) acc[k] = v;
    return acc;
  }, {});
}

/** Direction */
const DIRECTION = {
  NONE: 'NONE',
  LEFT: 'LEFT',
  FORCE_LEFT: 'FORCE_LEFT',
  RIGHT: 'RIGHT',
  FORCE_RIGHT: 'FORCE_RIGHT'
};

/** Direction */

function forceDirection(direction) {
  switch (direction) {
    case DIRECTION.LEFT:
      return DIRECTION.FORCE_LEFT;
    case DIRECTION.RIGHT:
      return DIRECTION.FORCE_RIGHT;
    default:
      return direction;
  }
}

/** Escapes regular expression control chars */
function escapeRegExp(str) {
  return str.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1');
}

// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes
function objectIncludes(b, a) {
  if (a === b) return true;
  const arrA = Array.isArray(a),
    arrB = Array.isArray(b);
  let i;
  if (arrA && arrB) {
    if (a.length != b.length) return false;
    for (i = 0; i < a.length; i++) if (!objectIncludes(a[i], b[i])) return false;
    return true;
  }
  if (arrA != arrB) return false;
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const dateA = a instanceof Date,
      dateB = b instanceof Date;
    if (dateA && dateB) return a.getTime() == b.getTime();
    if (dateA != dateB) return false;
    const regexpA = a instanceof RegExp,
      regexpB = b instanceof RegExp;
    if (regexpA && regexpB) return a.toString() == b.toString();
    if (regexpA != regexpB) return false;
    const keys = Object.keys(a);
    // if (keys.length !== Object.keys(b).length) return false;

    for (i = 0; i < keys.length; i++) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    for (i = 0; i < keys.length; i++) if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;
    return true;
  } else if (a && b && typeof a === 'function' && typeof b === 'function') {
    return a.toString() === b.toString();
  }
  return false;
}

/** Provides details of changing input */
class ActionDetails {
  /** Current input value */

  /** Current cursor position */

  /** Old input value */

  /** Old selection */

  constructor(opts) {
    Object.assign(this, opts);

    // double check if left part was changed (autofilling, other non-standard input triggers)
    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {
      --this.oldSelection.start;
    }
    if (this.insertedCount) {
      // double check right part
      while (this.value.slice(this.cursorPos) !== this.oldValue.slice(this.oldSelection.end)) {
        if (this.value.length - this.cursorPos < this.oldValue.length - this.oldSelection.end) ++this.oldSelection.end;else ++this.cursorPos;
      }
    }
  }

  /** Start changing position */
  get startChangePos() {
    return Math.min(this.cursorPos, this.oldSelection.start);
  }

  /** Inserted symbols count */
  get insertedCount() {
    return this.cursorPos - this.startChangePos;
  }

  /** Inserted symbols */
  get inserted() {
    return this.value.substr(this.startChangePos, this.insertedCount);
  }

  /** Removed symbols count */
  get removedCount() {
    // Math.max for opposite operation
    return Math.max(this.oldSelection.end - this.startChangePos ||
    // for Delete
    this.oldValue.length - this.value.length, 0);
  }

  /** Removed symbols */
  get removed() {
    return this.oldValue.substr(this.startChangePos, this.removedCount);
  }

  /** Unchanged head symbols */
  get head() {
    return this.value.substring(0, this.startChangePos);
  }

  /** Unchanged tail symbols */
  get tail() {
    return this.value.substring(this.startChangePos + this.insertedCount);
  }

  /** Remove direction */
  get removeDirection() {
    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;

    // align right if delete at right
    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&
    // if not range removed (event with backspace)
    this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;
  }
}

/** Applies mask on element */
function IMask(el, opts) {
  // currently available only for input-like elements
  return new IMask.InputMask(el, opts);
}

// TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754
// export function maskedClass(mask: string): typeof MaskedPattern;
// export function maskedClass(mask: DateConstructor): typeof MaskedDate;
// export function maskedClass(mask: NumberConstructor): typeof MaskedNumber;
// export function maskedClass(mask: Array<any> | ArrayConstructor): typeof MaskedDynamic;
// export function maskedClass(mask: MaskedDate): typeof MaskedDate;
// export function maskedClass(mask: MaskedNumber): typeof MaskedNumber;
// export function maskedClass(mask: MaskedEnum): typeof MaskedEnum;
// export function maskedClass(mask: MaskedRange): typeof MaskedRange;
// export function maskedClass(mask: MaskedRegExp): typeof MaskedRegExp;
// export function maskedClass(mask: MaskedFunction): typeof MaskedFunction;
// export function maskedClass(mask: MaskedPattern): typeof MaskedPattern;
// export function maskedClass(mask: MaskedDynamic): typeof MaskedDynamic;
// export function maskedClass(mask: Masked): typeof Masked;
// export function maskedClass(mask: typeof Masked): typeof Masked;
// export function maskedClass(mask: typeof MaskedDate): typeof MaskedDate;
// export function maskedClass(mask: typeof MaskedNumber): typeof MaskedNumber;
// export function maskedClass(mask: typeof MaskedEnum): typeof MaskedEnum;
// export function maskedClass(mask: typeof MaskedRange): typeof MaskedRange;
// export function maskedClass(mask: typeof MaskedRegExp): typeof MaskedRegExp;
// export function maskedClass(mask: typeof MaskedFunction): typeof MaskedFunction;
// export function maskedClass(mask: typeof MaskedPattern): typeof MaskedPattern;
// export function maskedClass(mask: typeof MaskedDynamic): typeof MaskedDynamic;
// export function maskedClass<Mask extends typeof Masked> (mask: Mask): Mask;
// export function maskedClass(mask: RegExp): typeof MaskedRegExp;
// export function maskedClass(mask: (value: string, ...args: any[]) => boolean): typeof MaskedFunction;

/** Get Masked class by mask type */
function maskedClass(mask) /* TODO */{
  if (mask == null) throw new Error('mask property should be defined');
  if (mask instanceof RegExp) return IMask.MaskedRegExp;
  if (isString(mask)) return IMask.MaskedPattern;
  if (mask === Date) return IMask.MaskedDate;
  if (mask === Number) return IMask.MaskedNumber;
  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;
  if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask;
  if (IMask.Masked && mask instanceof IMask.Masked) return mask.constructor;
  if (mask instanceof Function) return IMask.MaskedFunction;
  console.warn('Mask not found for mask', mask); // eslint-disable-line no-console
  return IMask.Masked;
}
function normalizeOpts(opts) {
  if (!opts) throw new Error('Options in not defined');
  if (IMask.Masked) {
    if (opts.prototype instanceof IMask.Masked) return {
      mask: opts
    };

    /*
      handle cases like:
      1) opts = Masked
      2) opts = { mask: Masked, ...instanceOpts }
    */
    const {
      mask = undefined,
      ...instanceOpts
    } = opts instanceof IMask.Masked ? {
      mask: opts
    } : isObject(opts) && opts.mask instanceof IMask.Masked ? opts : {};
    if (mask) {
      const _mask = mask.mask;
      return {
        ...pick(mask, (_, k) => !k.startsWith('_')),
        mask: mask.constructor,
        _mask,
        ...instanceOpts
      };
    }
  }
  if (!isObject(opts)) return {
    mask: opts
  };
  return {
    ...opts
  };
}

// TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754

// From masked
// export default function createMask<Opts extends Masked, ReturnMasked=Opts> (opts: Opts): ReturnMasked;
// // From masked class
// export default function createMask<Opts extends MaskedOptions<typeof Masked>, ReturnMasked extends Masked=InstanceType<Opts['mask']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedDate>, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedNumber>, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedEnum>, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedRange>, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedRegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedFunction>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedPattern>, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<typeof MaskedDynamic>, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;
// // From mask opts
// export default function createMask<Opts extends MaskedOptions<Masked>, ReturnMasked=Opts extends MaskedOptions<infer M> ? M : never> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedNumberOptions, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedDateFactoryOptions, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedEnumOptions, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedRangeOptions, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedPatternOptions, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedDynamicOptions, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<RegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;
// export default function createMask<Opts extends MaskedOptions<Function>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;

/** Creates new {@link Masked} depending on mask type */
function createMask(opts) {
  if (IMask.Masked && opts instanceof IMask.Masked) return opts;
  const nOpts = normalizeOpts(opts);
  const MaskedClass = maskedClass(nOpts.mask);
  if (!MaskedClass) throw new Error("Masked class is not found for provided mask " + nOpts.mask + ", appropriate module needs to be imported manually before creating mask.");
  if (nOpts.mask === MaskedClass) delete nOpts.mask;
  if (nOpts._mask) {
    nOpts.mask = nOpts._mask;
    delete nOpts._mask;
  }
  return new MaskedClass(nOpts);
}
IMask.createMask = createMask;

/**  Generic element API to use with mask */
class MaskElement {
  /** */

  /** */

  /** */

  /** Safely returns selection start */
  get selectionStart() {
    let start;
    try {
      start = this._unsafeSelectionStart;
    } catch {}
    return start != null ? start : this.value.length;
  }

  /** Safely returns selection end */
  get selectionEnd() {
    let end;
    try {
      end = this._unsafeSelectionEnd;
    } catch {}
    return end != null ? end : this.value.length;
  }

  /** Safely sets element selection */
  select(start, end) {
    if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;
    try {
      this._unsafeSelect(start, end);
    } catch {}
  }

  /** */
  get isActive() {
    return false;
  }
  /** */

  /** */

  /** */
}
IMask.MaskElement = MaskElement;

const KEY_Z = 90;
const KEY_Y = 89;

/** Bridge between HTMLElement and {@link Masked} */
class HTMLMaskElement extends MaskElement {
  /** HTMLElement to use mask on */

  constructor(input) {
    super();
    this.input = input;
    this._onKeydown = this._onKeydown.bind(this);
    this._onInput = this._onInput.bind(this);
    this._onBeforeinput = this._onBeforeinput.bind(this);
    this._onCompositionEnd = this._onCompositionEnd.bind(this);
  }
  get rootElement() {
    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;
    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) == null ? void 0 : _this$input$getRootNo2.call(_this$input)) != null ? _this$input$getRootNo : document;
  }

  /** Is element in focus */
  get isActive() {
    return this.input === this.rootElement.activeElement;
  }

  /** Binds HTMLElement events to mask internal events */
  bindEvents(handlers) {
    this.input.addEventListener('keydown', this._onKeydown);
    this.input.addEventListener('input', this._onInput);
    this.input.addEventListener('beforeinput', this._onBeforeinput);
    this.input.addEventListener('compositionend', this._onCompositionEnd);
    this.input.addEventListener('drop', handlers.drop);
    this.input.addEventListener('click', handlers.click);
    this.input.addEventListener('focus', handlers.focus);
    this.input.addEventListener('blur', handlers.commit);
    this._handlers = handlers;
  }
  _onKeydown(e) {
    if (this._handlers.redo && (e.keyCode === KEY_Z && e.shiftKey && (e.metaKey || e.ctrlKey) || e.keyCode === KEY_Y && e.ctrlKey)) {
      e.preventDefault();
      return this._handlers.redo(e);
    }
    if (this._handlers.undo && e.keyCode === KEY_Z && (e.metaKey || e.ctrlKey)) {
      e.preventDefault();
      return this._handlers.undo(e);
    }
    if (!e.isComposing) this._handlers.selectionChange(e);
  }
  _onBeforeinput(e) {
    if (e.inputType === 'historyUndo' && this._handlers.undo) {
      e.preventDefault();
      return this._handlers.undo(e);
    }
    if (e.inputType === 'historyRedo' && this._handlers.redo) {
      e.preventDefault();
      return this._handlers.redo(e);
    }
  }
  _onCompositionEnd(e) {
    this._handlers.input(e);
  }
  _onInput(e) {
    if (!e.isComposing) this._handlers.input(e);
  }

  /** Unbinds HTMLElement events to mask internal events */
  unbindEvents() {
    this.input.removeEventListener('keydown', this._onKeydown);
    this.input.removeEventListener('input', this._onInput);
    this.input.removeEventListener('beforeinput', this._onBeforeinput);
    this.input.removeEventListener('compositionend', this._onCompositionEnd);
    this.input.removeEventListener('drop', this._handlers.drop);
    this.input.removeEventListener('click', this._handlers.click);
    this.input.removeEventListener('focus', this._handlers.focus);
    this.input.removeEventListener('blur', this._handlers.commit);
    this._handlers = {};
  }
}
IMask.HTMLMaskElement = HTMLMaskElement;

/** Bridge between InputElement and {@link Masked} */
class HTMLInputMaskElement extends HTMLMaskElement {
  /** InputElement to use mask on */

  constructor(input) {
    super(input);
    this.input = input;
  }

  /** Returns InputElement selection start */
  get _unsafeSelectionStart() {
    return this.input.selectionStart != null ? this.input.selectionStart : this.value.length;
  }

  /** Returns InputElement selection end */
  get _unsafeSelectionEnd() {
    return this.input.selectionEnd;
  }

  /** Sets InputElement selection */
  _unsafeSelect(start, end) {
    this.input.setSelectionRange(start, end);
  }
  get value() {
    return this.input.value;
  }
  set value(value) {
    this.input.value = value;
  }
}
IMask.HTMLMaskElement = HTMLMaskElement;

class HTMLContenteditableMaskElement extends HTMLMaskElement {
  /** Returns HTMLElement selection start */
  get _unsafeSelectionStart() {
    const root = this.rootElement;
    const selection = root.getSelection && root.getSelection();
    const anchorOffset = selection && selection.anchorOffset;
    const focusOffset = selection && selection.focusOffset;
    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {
      return anchorOffset;
    }
    return focusOffset;
  }

  /** Returns HTMLElement selection end */
  get _unsafeSelectionEnd() {
    const root = this.rootElement;
    const selection = root.getSelection && root.getSelection();
    const anchorOffset = selection && selection.anchorOffset;
    const focusOffset = selection && selection.focusOffset;
    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {
      return anchorOffset;
    }
    return focusOffset;
  }

  /** Sets HTMLElement selection */
  _unsafeSelect(start, end) {
    if (!this.rootElement.createRange) return;
    const range = this.rootElement.createRange();
    range.setStart(this.input.firstChild || this.input, start);
    range.setEnd(this.input.lastChild || this.input, end);
    const root = this.rootElement;
    const selection = root.getSelection && root.getSelection();
    if (selection) {
      selection.removeAllRanges();
      selection.addRange(range);
    }
  }

  /** HTMLElement value */
  get value() {
    return this.input.textContent || '';
  }
  set value(value) {
    this.input.textContent = value;
  }
}
IMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;

class InputHistory {
  constructor() {
    this.states = [];
    this.currentIndex = 0;
  }
  get currentState() {
    return this.states[this.currentIndex];
  }
  get isEmpty() {
    return this.states.length === 0;
  }
  push(state) {
    // if current index points before the last element then remove the future
    if (this.currentIndex < this.states.length - 1) this.states.length = this.currentIndex + 1;
    this.states.push(state);
    if (this.states.length > InputHistory.MAX_LENGTH) this.states.shift();
    this.currentIndex = this.states.length - 1;
  }
  go(steps) {
    this.currentIndex = Math.min(Math.max(this.currentIndex + steps, 0), this.states.length - 1);
    return this.currentState;
  }
  undo() {
    return this.go(-1);
  }
  redo() {
    return this.go(+1);
  }
  clear() {
    this.states.length = 0;
    this.currentIndex = 0;
  }
}
InputHistory.MAX_LENGTH = 100;

/** Listens to element events and controls changes between element and {@link Masked} */
class InputMask {
  /**
    View element
  */

  /** Internal {@link Masked} model */

  constructor(el, opts) {
    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);
    this.masked = createMask(opts);
    this._listeners = {};
    this._value = '';
    this._unmaskedValue = '';
    this._rawInputValue = '';
    this.history = new InputHistory();
    this._saveSelection = this._saveSelection.bind(this);
    this._onInput = this._onInput.bind(this);
    this._onChange = this._onChange.bind(this);
    this._onDrop = this._onDrop.bind(this);
    this._onFocus = this._onFocus.bind(this);
    this._onClick = this._onClick.bind(this);
    this._onUndo = this._onUndo.bind(this);
    this._onRedo = this._onRedo.bind(this);
    this.alignCursor = this.alignCursor.bind(this);
    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);
    this._bindEvents();

    // refresh
    this.updateValue();
    this._onChange();
  }
  maskEquals(mask) {
    var _this$masked;
    return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));
  }

  /** Masked */
  get mask() {
    return this.masked.mask;
  }
  set mask(mask) {
    if (this.maskEquals(mask)) return;
    if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {
      // TODO "any" no idea
      this.masked.updateOptions({
        mask
      });
      return;
    }
    const masked = mask instanceof IMask.Masked ? mask : createMask({
      mask
    });
    masked.unmaskedValue = this.masked.unmaskedValue;
    this.masked = masked;
  }

  /** Raw value */
  get value() {
    return this._value;
  }
  set value(str) {
    if (this.value === str) return;
    this.masked.value = str;
    this.updateControl('auto');
  }

  /** Unmasked value */
  get unmaskedValue() {
    return this._unmaskedValue;
  }
  set unmaskedValue(str) {
    if (this.unmaskedValue === str) return;
    this.masked.unmaskedValue = str;
    this.updateControl('auto');
  }

  /** Raw input value */
  get rawInputValue() {
    return this._rawInputValue;
  }
  set rawInputValue(str) {
    if (this.rawInputValue === str) return;
    this.masked.rawInputValue = str;
    this.updateControl();
    this.alignCursor();
  }

  /** Typed unmasked value */
  get typedValue() {
    return this.masked.typedValue;
  }
  set typedValue(val) {
    if (this.masked.typedValueEquals(val)) return;
    this.masked.typedValue = val;
    this.updateControl('auto');
  }

  /** Display value */
  get displayValue() {
    return this.masked.displayValue;
  }

  /** Starts listening to element events */
  _bindEvents() {
    this.el.bindEvents({
      selectionChange: this._saveSelection,
      input: this._onInput,
      drop: this._onDrop,
      click: this._onClick,
      focus: this._onFocus,
      commit: this._onChange,
      undo: this._onUndo,
      redo: this._onRedo
    });
  }

  /** Stops listening to element events */
  _unbindEvents() {
    if (this.el) this.el.unbindEvents();
  }

  /** Fires custom event */
  _fireEvent(ev, e) {
    const listeners = this._listeners[ev];
    if (!listeners) return;
    listeners.forEach(l => l(e));
  }

  /** Current selection start */
  get selectionStart() {
    return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;
  }

  /** Current cursor position */
  get cursorPos() {
    return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;
  }
  set cursorPos(pos) {
    if (!this.el || !this.el.isActive) return;
    this.el.select(pos, pos);
    this._saveSelection();
  }

  /** Stores current selection */
  _saveSelection( /* ev */
  ) {
    if (this.displayValue !== this.el.value) {
      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console
    }
    this._selection = {
      start: this.selectionStart,
      end: this.cursorPos
    };
  }

  /** Syncronizes model value from view */
  updateValue() {
    this.masked.value = this.el.value;
    this._value = this.masked.value;
    this._unmaskedValue = this.masked.unmaskedValue;
    this._rawInputValue = this.masked.rawInputValue;
  }

  /** Syncronizes view from model value, fires change events */
  updateControl(cursorPos) {
    const newUnmaskedValue = this.masked.unmaskedValue;
    const newValue = this.masked.value;
    const newRawInputValue = this.masked.rawInputValue;
    const newDisplayValue = this.displayValue;
    const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue || this._rawInputValue !== newRawInputValue;
    this._unmaskedValue = newUnmaskedValue;
    this._value = newValue;
    this._rawInputValue = newRawInputValue;
    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;
    if (cursorPos === 'auto') this.alignCursor();else if (cursorPos != null) this.cursorPos = cursorPos;
    if (isChanged) this._fireChangeEvents();
    if (!this._historyChanging && (isChanged || this.history.isEmpty)) this.history.push({
      unmaskedValue: newUnmaskedValue,
      selection: {
        start: this.selectionStart,
        end: this.cursorPos
      }
    });
  }

  /** Updates options with deep equal check, recreates {@link Masked} model if mask type changes */
  updateOptions(opts) {
    const {
      mask,
      ...restOpts
    } = opts; // TODO types, yes, mask is optional

    const updateMask = !this.maskEquals(mask);
    const updateOpts = this.masked.optionsIsChanged(restOpts);
    if (updateMask) this.mask = mask;
    if (updateOpts) this.masked.updateOptions(restOpts); // TODO

    if (updateMask || updateOpts) this.updateControl();
  }

  /** Updates cursor */
  updateCursor(cursorPos) {
    if (cursorPos == null) return;
    this.cursorPos = cursorPos;

    // also queue change cursor for mobile browsers
    this._delayUpdateCursor(cursorPos);
  }

  /** Delays cursor update to support mobile browsers */
  _delayUpdateCursor(cursorPos) {
    this._abortUpdateCursor();
    this._changingCursorPos = cursorPos;
    this._cursorChanging = setTimeout(() => {
      if (!this.el) return; // if was destroyed
      this.cursorPos = this._changingCursorPos;
      this._abortUpdateCursor();
    }, 10);
  }

  /** Fires custom events */
  _fireChangeEvents() {
    this._fireEvent('accept', this._inputEvent);
    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);
  }

  /** Aborts delayed cursor update */
  _abortUpdateCursor() {
    if (this._cursorChanging) {
      clearTimeout(this._cursorChanging);
      delete this._cursorChanging;
    }
  }

  /** Aligns cursor to nearest available position */
  alignCursor() {
    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));
  }

  /** Aligns cursor only if selection is empty */
  alignCursorFriendly() {
    if (this.selectionStart !== this.cursorPos) return; // skip if range is selected
    this.alignCursor();
  }

  /** Adds listener on custom event */
  on(ev, handler) {
    if (!this._listeners[ev]) this._listeners[ev] = [];
    this._listeners[ev].push(handler);
    return this;
  }

  /** Removes custom event listener */
  off(ev, handler) {
    if (!this._listeners[ev]) return this;
    if (!handler) {
      delete this._listeners[ev];
      return this;
    }
    const hIndex = this._listeners[ev].indexOf(handler);
    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);
    return this;
  }

  /** Handles view input event */
  _onInput(e) {
    this._inputEvent = e;
    this._abortUpdateCursor();
    const details = new ActionDetails({
      // new state
      value: this.el.value,
      cursorPos: this.cursorPos,
      // old state
      oldValue: this.displayValue,
      oldSelection: this._selection
    });
    const oldRawValue = this.masked.rawInputValue;
    const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {
      input: true,
      raw: true
    }).offset;

    // force align in remove direction only if no input chars were removed
    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)
    const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;
    let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);
    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);
    this.updateControl(cursorPos);
    delete this._inputEvent;
  }

  /** Handles view change event and commits model value */
  _onChange() {
    if (this.displayValue !== this.el.value) this.updateValue();
    this.masked.doCommit();
    this.updateControl();
    this._saveSelection();
  }

  /** Handles view drop event, prevents by default */
  _onDrop(ev) {
    ev.preventDefault();
    ev.stopPropagation();
  }

  /** Restore last selection on focus */
  _onFocus(ev) {
    this.alignCursorFriendly();
  }

  /** Restore last selection on focus */
  _onClick(ev) {
    this.alignCursorFriendly();
  }
  _onUndo() {
    this._applyHistoryState(this.history.undo());
  }
  _onRedo() {
    this._applyHistoryState(this.history.redo());
  }
  _applyHistoryState(state) {
    if (!state) return;
    this._historyChanging = true;
    this.unmaskedValue = state.unmaskedValue;
    this.el.select(state.selection.start, state.selection.end);
    this._saveSelection();
    this._historyChanging = false;
  }

  /** Unbind view events and removes element reference */
  destroy() {
    this._unbindEvents();
    this._listeners.length = 0;
    delete this.el;
  }
}
IMask.InputMask = InputMask;

/** Provides details of changing model value */
class ChangeDetails {
  /** Inserted symbols */

  /** Additional offset if any changes occurred before tail */

  /** Raw inserted is used by dynamic mask */

  /** Can skip chars */

  static normalize(prep) {
    return Array.isArray(prep) ? prep : [prep, new ChangeDetails()];
  }
  constructor(details) {
    Object.assign(this, {
      inserted: '',
      rawInserted: '',
      tailShift: 0,
      skip: false
    }, details);
  }

  /** Aggregate changes */
  aggregate(details) {
    this.inserted += details.inserted;
    this.rawInserted += details.rawInserted;
    this.tailShift += details.tailShift;
    this.skip = this.skip || details.skip;
    return this;
  }

  /** Total offset considering all changes */
  get offset() {
    return this.tailShift + this.inserted.length;
  }
  get consumed() {
    return Boolean(this.rawInserted) || this.skip;
  }
  equals(details) {
    return this.inserted === details.inserted && this.tailShift === details.tailShift && this.rawInserted === details.rawInserted && this.skip === details.skip;
  }
}
IMask.ChangeDetails = ChangeDetails;

/** Provides details of continuous extracted tail */
class ContinuousTailDetails {
  /** Tail value as string */

  /** Tail start position */

  /** Start position */

  constructor(value, from, stop) {
    if (value === void 0) {
      value = '';
    }
    if (from === void 0) {
      from = 0;
    }
    this.value = value;
    this.from = from;
    this.stop = stop;
  }
  toString() {
    return this.value;
  }
  extend(tail) {
    this.value += String(tail);
  }
  appendTo(masked) {
    return masked.append(this.toString(), {
      tail: true
    }).aggregate(masked._appendPlaceholder());
  }
  get state() {
    return {
      value: this.value,
      from: this.from,
      stop: this.stop
    };
  }
  set state(state) {
    Object.assign(this, state);
  }
  unshift(beforePos) {
    if (!this.value.length || beforePos != null && this.from >= beforePos) return '';
    const shiftChar = this.value[0];
    this.value = this.value.slice(1);
    return shiftChar;
  }
  shift() {
    if (!this.value.length) return '';
    const shiftChar = this.value[this.value.length - 1];
    this.value = this.value.slice(0, -1);
    return shiftChar;
  }
}

/** Append flags */

/** Extract flags */

// see https://github.com/microsoft/TypeScript/issues/6223

/** Provides common masking stuff */
class Masked {
  /** */

  /** */

  /** Transforms value before mask processing */

  /** Transforms each char before mask processing */

  /** Validates if value is acceptable */

  /** Does additional processing at the end of editing */

  /** Format typed value to string */

  /** Parse string to get typed value */

  /** Enable characters overwriting */

  /** */

  /** */

  /** */

  /** */

  constructor(opts) {
    this._value = '';
    this._update({
      ...Masked.DEFAULTS,
      ...opts
    });
    this._initialized = true;
  }

  /** Sets and applies new options */
  updateOptions(opts) {
    if (!this.optionsIsChanged(opts)) return;
    this.withValueRefresh(this._update.bind(this, opts));
  }

  /** Sets new options */
  _update(opts) {
    Object.assign(this, opts);
  }

  /** Mask state */
  get state() {
    return {
      _value: this.value,
      _rawInputValue: this.rawInputValue
    };
  }
  set state(state) {
    this._value = state._value;
  }

  /** Resets value */
  reset() {
    this._value = '';
  }
  get value() {
    return this._value;
  }
  set value(value) {
    this.resolve(value, {
      input: true
    });
  }

  /** Resolve new value */
  resolve(value, flags) {
    if (flags === void 0) {
      flags = {
        input: true
      };
    }
    this.reset();
    this.append(value, flags, '');
    this.doCommit();
  }
  get unmaskedValue() {
    return this.value;
  }
  set unmaskedValue(value) {
    this.resolve(value, {});
  }
  get typedValue() {
    return this.parse ? this.parse(this.value, this) : this.unmaskedValue;
  }
  set typedValue(value) {
    if (this.format) {
      this.value = this.format(value, this);
    } else {
      this.unmaskedValue = String(value);
    }
  }

  /** Value that includes raw user input */
  get rawInputValue() {
    return this.extractInput(0, this.displayValue.length, {
      raw: true
    });
  }
  set rawInputValue(value) {
    this.resolve(value, {
      raw: true
    });
  }
  get displayValue() {
    return this.value;
  }
  get isComplete() {
    return true;
  }
  get isFilled() {
    return this.isComplete;
  }

  /** Finds nearest input position in direction */
  nearestInputPos(cursorPos, direction) {
    return cursorPos;
  }
  totalInputPositions(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    return Math.min(this.displayValue.length, toPos - fromPos);
  }

  /** Extracts value in range considering flags */
  extractInput(fromPos, toPos, flags) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    return this.displayValue.slice(fromPos, toPos);
  }

  /** Extracts tail in range */
  extractTail(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);
  }

  /** Appends tail */
  appendTail(tail) {
    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));
    return tail.appendTo(this);
  }

  /** Appends char */
  _appendCharRaw(ch, flags) {
    if (!ch) return new ChangeDetails();
    this._value += ch;
    return new ChangeDetails({
      inserted: ch,
      rawInserted: ch
    });
  }

  /** Appends char */
  _appendChar(ch, flags, checkTail) {
    if (flags === void 0) {
      flags = {};
    }
    const consistentState = this.state;
    let details;
    [ch, details] = this.doPrepareChar(ch, flags);
    if (ch) {
      details = details.aggregate(this._appendCharRaw(ch, flags));

      // TODO handle `skip`?

      // try `autofix` lookahead
      if (!details.rawInserted && this.autofix === 'pad') {
        const noFixState = this.state;
        this.state = consistentState;
        let fixDetails = this.pad(flags);
        const chDetails = this._appendCharRaw(ch, flags);
        fixDetails = fixDetails.aggregate(chDetails);

        // if fix was applied or
        // if details are equal use skip restoring state optimization
        if (chDetails.rawInserted || fixDetails.equals(details)) {
          details = fixDetails;
        } else {
          this.state = noFixState;
        }
      }
    }
    if (details.inserted) {
      let consistentTail;
      let appended = this.doValidate(flags) !== false;
      if (appended && checkTail != null) {
        // validation ok, check tail
        const beforeTailState = this.state;
        if (this.overwrite === true) {
          consistentTail = checkTail.state;
          for (let i = 0; i < details.rawInserted.length; ++i) {
            checkTail.unshift(this.displayValue.length - details.tailShift);
          }
        }
        let tailDetails = this.appendTail(checkTail);
        appended = tailDetails.rawInserted.length === checkTail.toString().length;

        // not ok, try shift
        if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {
          this.state = beforeTailState;
          consistentTail = checkTail.state;
          for (let i = 0; i < details.rawInserted.length; ++i) {
            checkTail.shift();
          }
          tailDetails = this.appendTail(checkTail);
          appended = tailDetails.rawInserted.length === checkTail.toString().length;
        }

        // if ok, rollback state after tail
        if (appended && tailDetails.inserted) this.state = beforeTailState;
      }

      // revert all if something went wrong
      if (!appended) {
        details = new ChangeDetails();
        this.state = consistentState;
        if (checkTail && consistentTail) checkTail.state = consistentTail;
      }
    }
    return details;
  }

  /** Appends optional placeholder at the end */
  _appendPlaceholder() {
    return new ChangeDetails();
  }

  /** Appends optional eager placeholder at the end */
  _appendEager() {
    return new ChangeDetails();
  }

  /** Appends symbols considering flags */
  append(str, flags, tail) {
    if (!isString(str)) throw new Error('value should be string');
    const checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail;
    if (flags != null && flags.tail) flags._beforeTailState = this.state;
    let details;
    [str, details] = this.doPrepare(str, flags);
    for (let ci = 0; ci < str.length; ++ci) {
      const d = this._appendChar(str[ci], flags, checkTail);
      if (!d.rawInserted && !this.doSkipInvalid(str[ci], flags, checkTail)) break;
      details.aggregate(d);
    }
    if ((this.eager === true || this.eager === 'append') && flags != null && flags.input && str) {
      details.aggregate(this._appendEager());
    }

    // append tail but aggregate only tailShift
    if (checkTail != null) {
      details.tailShift += this.appendTail(checkTail).tailShift;
      // TODO it's a good idea to clear state after appending ends
      // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)
      // this._resetBeforeTailState();
    }
    return details;
  }
  remove(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    this._value = this.displayValue.slice(0, fromPos) + this.displayValue.slice(toPos);
    return new ChangeDetails();
  }

  /** Calls function and reapplies current value */
  withValueRefresh(fn) {
    if (this._refreshing || !this._initialized) return fn();
    this._refreshing = true;
    const rawInput = this.rawInputValue;
    const value = this.value;
    const ret = fn();
    this.rawInputValue = rawInput;
    // append lost trailing chars at the end
    if (this.value && this.value !== value && value.indexOf(this.value) === 0) {
      this.append(value.slice(this.displayValue.length), {}, '');
      this.doCommit();
    }
    delete this._refreshing;
    return ret;
  }
  runIsolated(fn) {
    if (this._isolated || !this._initialized) return fn(this);
    this._isolated = true;
    const state = this.state;
    const ret = fn(this);
    this.state = state;
    delete this._isolated;
    return ret;
  }
  doSkipInvalid(ch, flags, checkTail) {
    return Boolean(this.skipInvalid);
  }

  /** Prepares string before mask processing */
  doPrepare(str, flags) {
    if (flags === void 0) {
      flags = {};
    }
    return ChangeDetails.normalize(this.prepare ? this.prepare(str, this, flags) : str);
  }

  /** Prepares each char before mask processing */
  doPrepareChar(str, flags) {
    if (flags === void 0) {
      flags = {};
    }
    return ChangeDetails.normalize(this.prepareChar ? this.prepareChar(str, this, flags) : str);
  }

  /** Validates if value is acceptable */
  doValidate(flags) {
    return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));
  }

  /** Does additional processing at the end of editing */
  doCommit() {
    if (this.commit) this.commit(this.value, this);
  }
  splice(start, deleteCount, inserted, removeDirection, flags) {
    if (inserted === void 0) {
      inserted = '';
    }
    if (removeDirection === void 0) {
      removeDirection = DIRECTION.NONE;
    }
    if (flags === void 0) {
      flags = {
        input: true
      };
    }
    const tailPos = start + deleteCount;
    const tail = this.extractTail(tailPos);
    const eagerRemove = this.eager === true || this.eager === 'remove';
    let oldRawValue;
    if (eagerRemove) {
      removeDirection = forceDirection(removeDirection);
      oldRawValue = this.extractInput(0, tailPos, {
        raw: true
      });
    }
    let startChangePos = start;
    const details = new ChangeDetails();

    // if it is just deletion without insertion
    if (removeDirection !== DIRECTION.NONE) {
      startChangePos = this.nearestInputPos(start, deleteCount > 1 && start !== 0 && !eagerRemove ? DIRECTION.NONE : removeDirection);

      // adjust tailShift if start was aligned
      details.tailShift = startChangePos - start;
    }
    details.aggregate(this.remove(startChangePos));
    if (eagerRemove && removeDirection !== DIRECTION.NONE && oldRawValue === this.rawInputValue) {
      if (removeDirection === DIRECTION.FORCE_LEFT) {
        let valLength;
        while (oldRawValue === this.rawInputValue && (valLength = this.displayValue.length)) {
          details.aggregate(new ChangeDetails({
            tailShift: -1
          })).aggregate(this.remove(valLength - 1));
        }
      } else if (removeDirection === DIRECTION.FORCE_RIGHT) {
        tail.unshift();
      }
    }
    return details.aggregate(this.append(inserted, flags, tail));
  }
  maskEquals(mask) {
    return this.mask === mask;
  }
  optionsIsChanged(opts) {
    return !objectIncludes(this, opts);
  }
  typedValueEquals(value) {
    const tval = this.typedValue;
    return value === tval || Masked.EMPTY_VALUES.includes(value) && Masked.EMPTY_VALUES.includes(tval) || (this.format ? this.format(value, this) === this.format(this.typedValue, this) : false);
  }
  pad(flags) {
    return new ChangeDetails();
  }
}
Masked.DEFAULTS = {
  skipInvalid: true
};
Masked.EMPTY_VALUES = [undefined, null, ''];
IMask.Masked = Masked;

class ChunksTailDetails {
  /** */

  constructor(chunks, from) {
    if (chunks === void 0) {
      chunks = [];
    }
    if (from === void 0) {
      from = 0;
    }
    this.chunks = chunks;
    this.from = from;
  }
  toString() {
    return this.chunks.map(String).join('');
  }
  extend(tailChunk) {
    if (!String(tailChunk)) return;
    tailChunk = isString(tailChunk) ? new ContinuousTailDetails(String(tailChunk)) : tailChunk;
    const lastChunk = this.chunks[this.chunks.length - 1];
    const extendLast = lastChunk && (
    // if stops are same or tail has no stop
    lastChunk.stop === tailChunk.stop || tailChunk.stop == null) &&
    // if tail chunk goes just after last chunk
    tailChunk.from === lastChunk.from + lastChunk.toString().length;
    if (tailChunk instanceof ContinuousTailDetails) {
      // check the ability to extend previous chunk
      if (extendLast) {
        // extend previous chunk
        lastChunk.extend(tailChunk.toString());
      } else {
        // append new chunk
        this.chunks.push(tailChunk);
      }
    } else if (tailChunk instanceof ChunksTailDetails) {
      if (tailChunk.stop == null) {
        // unwrap floating chunks to parent, keeping `from` pos
        let firstTailChunk;
        while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {
          firstTailChunk = tailChunk.chunks.shift(); // not possible to be `undefined` because length was checked above
          firstTailChunk.from += tailChunk.from;
          this.extend(firstTailChunk);
        }
      }

      // if tail chunk still has value
      if (tailChunk.toString()) {
        // if chunks contains stops, then popup stop to container
        tailChunk.stop = tailChunk.blockIndex;
        this.chunks.push(tailChunk);
      }
    }
  }
  appendTo(masked) {
    if (!(masked instanceof IMask.MaskedPattern)) {
      const tail = new ContinuousTailDetails(this.toString());
      return tail.appendTo(masked);
    }
    const details = new ChangeDetails();
    for (let ci = 0; ci < this.chunks.length; ++ci) {
      const chunk = this.chunks[ci];
      const lastBlockIter = masked._mapPosToBlock(masked.displayValue.length);
      const stop = chunk.stop;
      let chunkBlock;
      if (stop != null && (
      // if block not found or stop is behind lastBlock
      !lastBlockIter || lastBlockIter.index <= stop)) {
        if (chunk instanceof ChunksTailDetails ||
        // for continuous block also check if stop is exist
        masked._stops.indexOf(stop) >= 0) {
          details.aggregate(masked._appendPlaceholder(stop));
        }
        chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];
      }
      if (chunkBlock) {
        const tailDetails = chunkBlock.appendTail(chunk);
        details.aggregate(tailDetails);

        // get not inserted chars
        const remainChars = chunk.toString().slice(tailDetails.rawInserted.length);
        if (remainChars) details.aggregate(masked.append(remainChars, {
          tail: true
        }));
      } else {
        details.aggregate(masked.append(chunk.toString(), {
          tail: true
        }));
      }
    }
    return details;
  }
  get state() {
    return {
      chunks: this.chunks.map(c => c.state),
      from: this.from,
      stop: this.stop,
      blockIndex: this.blockIndex
    };
  }
  set state(state) {
    const {
      chunks,
      ...props
    } = state;
    Object.assign(this, props);
    this.chunks = chunks.map(cstate => {
      const chunk = "chunks" in cstate ? new ChunksTailDetails() : new ContinuousTailDetails();
      chunk.state = cstate;
      return chunk;
    });
  }
  unshift(beforePos) {
    if (!this.chunks.length || beforePos != null && this.from >= beforePos) return '';
    const chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;
    let ci = 0;
    while (ci < this.chunks.length) {
      const chunk = this.chunks[ci];
      const shiftChar = chunk.unshift(chunkShiftPos);
      if (chunk.toString()) {
        // chunk still contains value
        // but not shifted - means no more available chars to shift
        if (!shiftChar) break;
        ++ci;
      } else {
        // clean if chunk has no value
        this.chunks.splice(ci, 1);
      }
      if (shiftChar) return shiftChar;
    }
    return '';
  }
  shift() {
    if (!this.chunks.length) return '';
    let ci = this.chunks.length - 1;
    while (0 <= ci) {
      const chunk = this.chunks[ci];
      const shiftChar = chunk.shift();
      if (chunk.toString()) {
        // chunk still contains value
        // but not shifted - means no more available chars to shift
        if (!shiftChar) break;
        --ci;
      } else {
        // clean if chunk has no value
        this.chunks.splice(ci, 1);
      }
      if (shiftChar) return shiftChar;
    }
    return '';
  }
}

class PatternCursor {
  constructor(masked, pos) {
    this.masked = masked;
    this._log = [];
    const {
      offset,
      index
    } = masked._mapPosToBlock(pos) || (pos < 0 ?
    // first
    {
      index: 0,
      offset: 0
    } :
    // last
    {
      index: this.masked._blocks.length,
      offset: 0
    });
    this.offset = offset;
    this.index = index;
    this.ok = false;
  }
  get block() {
    return this.masked._blocks[this.index];
  }
  get pos() {
    return this.masked._blockStartPos(this.index) + this.offset;
  }
  get state() {
    return {
      index: this.index,
      offset: this.offset,
      ok: this.ok
    };
  }
  set state(s) {
    Object.assign(this, s);
  }
  pushState() {
    this._log.push(this.state);
  }
  popState() {
    const s = this._log.pop();
    if (s) this.state = s;
    return s;
  }
  bindBlock() {
    if (this.block) return;
    if (this.index < 0) {
      this.index = 0;
      this.offset = 0;
    }
    if (this.index >= this.masked._blocks.length) {
      this.index = this.masked._blocks.length - 1;
      this.offset = this.block.displayValue.length; // TODO this is stupid type error, `block` depends on index that was changed above
    }
  }
  _pushLeft(fn) {
    this.pushState();
    for (this.bindBlock(); 0 <= this.index; --this.index, this.offset = ((_this$block = this.block) == null ? void 0 : _this$block.displayValue.length) || 0) {
      var _this$block;
      if (fn()) return this.ok = true;
    }
    return this.ok = false;
  }
  _pushRight(fn) {
    this.pushState();
    for (this.bindBlock(); this.index < this.masked._blocks.length; ++this.index, this.offset = 0) {
      if (fn()) return this.ok = true;
    }
    return this.ok = false;
  }
  pushLeftBeforeFilled() {
    return this._pushLeft(() => {
      if (this.block.isFixed || !this.block.value) return;
      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_LEFT);
      if (this.offset !== 0) return true;
    });
  }
  pushLeftBeforeInput() {
    // cases:
    // filled input: 00|
    // optional empty input: 00[]|
    // nested block: XX<[]>|
    return this._pushLeft(() => {
      if (this.block.isFixed) return;
      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);
      return true;
    });
  }
  pushLeftBeforeRequired() {
    return this._pushLeft(() => {
      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;
      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);
      return true;
    });
  }
  pushRightBeforeFilled() {
    return this._pushRight(() => {
      if (this.block.isFixed || !this.block.value) return;
      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_RIGHT);
      if (this.offset !== this.block.value.length) return true;
    });
  }
  pushRightBeforeInput() {
    return this._pushRight(() => {
      if (this.block.isFixed) return;

      // const o = this.offset;
      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);
      // HACK cases like (STILL DOES NOT WORK FOR NESTED)
      // aa|X
      // aa<X|[]>X_    - this will not work
      // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;
      return true;
    });
  }
  pushRightBeforeRequired() {
    return this._pushRight(() => {
      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;

      // TODO check |[*]XX_
      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);
      return true;
    });
  }
}

class PatternFixedDefinition {
  /** */

  /** */

  /** */

  /** */

  /** */

  /** */

  constructor(opts) {
    Object.assign(this, opts);
    this._value = '';
    this.isFixed = true;
  }
  get value() {
    return this._value;
  }
  get unmaskedValue() {
    return this.isUnmasking ? this.value : '';
  }
  get rawInputValue() {
    return this._isRawInput ? this.value : '';
  }
  get displayValue() {
    return this.value;
  }
  reset() {
    this._isRawInput = false;
    this._value = '';
  }
  remove(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this._value.length;
    }
    this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);
    if (!this._value) this._isRawInput = false;
    return new ChangeDetails();
  }
  nearestInputPos(cursorPos, direction) {
    if (direction === void 0) {
      direction = DIRECTION.NONE;
    }
    const minPos = 0;
    const maxPos = this._value.length;
    switch (direction) {
      case DIRECTION.LEFT:
      case DIRECTION.FORCE_LEFT:
        return minPos;
      case DIRECTION.NONE:
      case DIRECTION.RIGHT:
      case DIRECTION.FORCE_RIGHT:
      default:
        return maxPos;
    }
  }
  totalInputPositions(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this._value.length;
    }
    return this._isRawInput ? toPos - fromPos : 0;
  }
  extractInput(fromPos, toPos, flags) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this._value.length;
    }
    if (flags === void 0) {
      flags = {};
    }
    return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';
  }
  get isComplete() {
    return true;
  }
  get isFilled() {
    return Boolean(this._value);
  }
  _appendChar(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    if (this.isFilled) return new ChangeDetails();
    const appendEager = this.eager === true || this.eager === 'append';
    const appended = this.char === ch;
    const isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !appendEager) && !flags.tail;
    const details = new ChangeDetails({
      inserted: this.char,
      rawInserted: isResolved ? this.char : ''
    });
    this._value = this.char;
    this._isRawInput = isResolved && (flags.raw || flags.input);
    return details;
  }
  _appendEager() {
    return this._appendChar(this.char, {
      tail: true
    });
  }
  _appendPlaceholder() {
    const details = new ChangeDetails();
    if (this.isFilled) return details;
    this._value = details.inserted = this.char;
    return details;
  }
  extractTail() {
    return new ContinuousTailDetails('');
  }
  appendTail(tail) {
    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));
    return tail.appendTo(this);
  }
  append(str, flags, tail) {
    const details = this._appendChar(str[0], flags);
    if (tail != null) {
      details.tailShift += this.appendTail(tail).tailShift;
    }
    return details;
  }
  doCommit() {}
  get state() {
    return {
      _value: this._value,
      _rawInputValue: this.rawInputValue
    };
  }
  set state(state) {
    this._value = state._value;
    this._isRawInput = Boolean(state._rawInputValue);
  }
  pad(flags) {
    return this._appendPlaceholder();
  }
}

class PatternInputDefinition {
  /** */

  /** */

  /** */

  /** */

  /** */

  /** */

  /** */

  /** */

  constructor(opts) {
    const {
      parent,
      isOptional,
      placeholderChar,
      displayChar,
      lazy,
      eager,
      ...maskOpts
    } = opts;
    this.masked = createMask(maskOpts);
    Object.assign(this, {
      parent,
      isOptional,
      placeholderChar,
      displayChar,
      lazy,
      eager
    });
  }
  reset() {
    this.isFilled = false;
    this.masked.reset();
  }
  remove(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.value.length;
    }
    if (fromPos === 0 && toPos >= 1) {
      this.isFilled = false;
      return this.masked.remove(fromPos, toPos);
    }
    return new ChangeDetails();
  }
  get value() {
    return this.masked.value || (this.isFilled && !this.isOptional ? this.placeholderChar : '');
  }
  get unmaskedValue() {
    return this.masked.unmaskedValue;
  }
  get rawInputValue() {
    return this.masked.rawInputValue;
  }
  get displayValue() {
    return this.masked.value && this.displayChar || this.value;
  }
  get isComplete() {
    return Boolean(this.masked.value) || this.isOptional;
  }
  _appendChar(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    if (this.isFilled) return new ChangeDetails();
    const state = this.masked.state;
    // simulate input
    let details = this.masked._appendChar(ch, this.currentMaskFlags(flags));
    if (details.inserted && this.doValidate(flags) === false) {
      details = new ChangeDetails();
      this.masked.state = state;
    }
    if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {
      details.inserted = this.placeholderChar;
    }
    details.skip = !details.inserted && !this.isOptional;
    this.isFilled = Boolean(details.inserted);
    return details;
  }
  append(str, flags, tail) {
    // TODO probably should be done via _appendChar
    return this.masked.append(str, this.currentMaskFlags(flags), tail);
  }
  _appendPlaceholder() {
    if (this.isFilled || this.isOptional) return new ChangeDetails();
    this.isFilled = true;
    return new ChangeDetails({
      inserted: this.placeholderChar
    });
  }
  _appendEager() {
    return new ChangeDetails();
  }
  extractTail(fromPos, toPos) {
    return this.masked.extractTail(fromPos, toPos);
  }
  appendTail(tail) {
    return this.masked.appendTail(tail);
  }
  extractInput(fromPos, toPos, flags) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.value.length;
    }
    return this.masked.extractInput(fromPos, toPos, flags);
  }
  nearestInputPos(cursorPos, direction) {
    if (direction === void 0) {
      direction = DIRECTION.NONE;
    }
    const minPos = 0;
    const maxPos = this.value.length;
    const boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);
    switch (direction) {
      case DIRECTION.LEFT:
      case DIRECTION.FORCE_LEFT:
        return this.isComplete ? boundPos : minPos;
      case DIRECTION.RIGHT:
      case DIRECTION.FORCE_RIGHT:
        return this.isComplete ? boundPos : maxPos;
      case DIRECTION.NONE:
      default:
        return boundPos;
    }
  }
  totalInputPositions(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.value.length;
    }
    return this.value.slice(fromPos, toPos).length;
  }
  doValidate(flags) {
    return this.masked.doValidate(this.currentMaskFlags(flags)) && (!this.parent || this.parent.doValidate(this.currentMaskFlags(flags)));
  }
  doCommit() {
    this.masked.doCommit();
  }
  get state() {
    return {
      _value: this.value,
      _rawInputValue: this.rawInputValue,
      masked: this.masked.state,
      isFilled: this.isFilled
    };
  }
  set state(state) {
    this.masked.state = state.masked;
    this.isFilled = state.isFilled;
  }
  currentMaskFlags(flags) {
    var _flags$_beforeTailSta;
    return {
      ...flags,
      _beforeTailState: (flags == null || (_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.masked) || (flags == null ? void 0 : flags._beforeTailState)
    };
  }
  pad(flags) {
    return new ChangeDetails();
  }
}
PatternInputDefinition.DEFAULT_DEFINITIONS = {
  '0': /\d/,
  'a': /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
  // http://stackoverflow.com/a/22075070
  '*': /./
};

/** Masking by RegExp */
class MaskedRegExp extends Masked {
  /** */

  /** Enable characters overwriting */

  /** */

  /** */

  /** */

  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    const mask = opts.mask;
    if (mask) opts.validate = value => value.search(mask) >= 0;
    super._update(opts);
  }
}
IMask.MaskedRegExp = MaskedRegExp;

/** Pattern mask */
class MaskedPattern extends Masked {
  /** */

  /** */

  /** Single char for empty input */

  /** Single char for filled input */

  /** Show placeholder only when needed */

  /** Enable characters overwriting */

  /** */

  /** */

  /** */

  constructor(opts) {
    super({
      ...MaskedPattern.DEFAULTS,
      ...opts,
      definitions: Object.assign({}, PatternInputDefinition.DEFAULT_DEFINITIONS, opts == null ? void 0 : opts.definitions)
    });
  }
  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    opts.definitions = Object.assign({}, this.definitions, opts.definitions);
    super._update(opts);
    this._rebuildMask();
  }
  _rebuildMask() {
    const defs = this.definitions;
    this._blocks = [];
    this.exposeBlock = undefined;
    this._stops = [];
    this._maskedBlocks = {};
    const pattern = this.mask;
    if (!pattern || !defs) return;
    let unmaskingBlock = false;
    let optionalBlock = false;
    for (let i = 0; i < pattern.length; ++i) {
      if (this.blocks) {
        const p = pattern.slice(i);
        const bNames = Object.keys(this.blocks).filter(bName => p.indexOf(bName) === 0);
        // order by key length
        bNames.sort((a, b) => b.length - a.length);
        // use block name with max length
        const bName = bNames[0];
        if (bName) {
          const {
            expose,
            repeat,
            ...bOpts
          } = normalizeOpts(this.blocks[bName]); // TODO type Opts<Arg & Extra>
          const blockOpts = {
            lazy: this.lazy,
            eager: this.eager,
            placeholderChar: this.placeholderChar,
            displayChar: this.displayChar,
            overwrite: this.overwrite,
            autofix: this.autofix,
            ...bOpts,
            repeat,
            parent: this
          };
          const maskedBlock = repeat != null ? new IMask.RepeatBlock(blockOpts /* TODO */) : createMask(blockOpts);
          if (maskedBlock) {
            this._blocks.push(maskedBlock);
            if (expose) this.exposeBlock = maskedBlock;

            // store block index
            if (!this._maskedBlocks[bName]) this._maskedBlocks[bName] = [];
            this._maskedBlocks[bName].push(this._blocks.length - 1);
          }
          i += bName.length - 1;
          continue;
        }
      }
      let char = pattern[i];
      let isInput = (char in defs);
      if (char === MaskedPattern.STOP_CHAR) {
        this._stops.push(this._blocks.length);
        continue;
      }
      if (char === '{' || char === '}') {
        unmaskingBlock = !unmaskingBlock;
        continue;
      }
      if (char === '[' || char === ']') {
        optionalBlock = !optionalBlock;
        continue;
      }
      if (char === MaskedPattern.ESCAPE_CHAR) {
        ++i;
        char = pattern[i];
        if (!char) break;
        isInput = false;
      }
      const def = isInput ? new PatternInputDefinition({
        isOptional: optionalBlock,
        lazy: this.lazy,
        eager: this.eager,
        placeholderChar: this.placeholderChar,
        displayChar: this.displayChar,
        ...normalizeOpts(defs[char]),
        parent: this
      }) : new PatternFixedDefinition({
        char,
        eager: this.eager,
        isUnmasking: unmaskingBlock
      });
      this._blocks.push(def);
    }
  }
  get state() {
    return {
      ...super.state,
      _blocks: this._blocks.map(b => b.state)
    };
  }
  set state(state) {
    if (!state) {
      this.reset();
      return;
    }
    const {
      _blocks,
      ...maskedState
    } = state;
    this._blocks.forEach((b, bi) => b.state = _blocks[bi]);
    super.state = maskedState;
  }
  reset() {
    super.reset();
    this._blocks.forEach(b => b.reset());
  }
  get isComplete() {
    return this.exposeBlock ? this.exposeBlock.isComplete : this._blocks.every(b => b.isComplete);
  }
  get isFilled() {
    return this._blocks.every(b => b.isFilled);
  }
  get isFixed() {
    return this._blocks.every(b => b.isFixed);
  }
  get isOptional() {
    return this._blocks.every(b => b.isOptional);
  }
  doCommit() {
    this._blocks.forEach(b => b.doCommit());
    super.doCommit();
  }
  get unmaskedValue() {
    return this.exposeBlock ? this.exposeBlock.unmaskedValue : this._blocks.reduce((str, b) => str += b.unmaskedValue, '');
  }
  set unmaskedValue(unmaskedValue) {
    if (this.exposeBlock) {
      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);
      this.exposeBlock.unmaskedValue = unmaskedValue;
      this.appendTail(tail);
      this.doCommit();
    } else super.unmaskedValue = unmaskedValue;
  }
  get value() {
    return this.exposeBlock ? this.exposeBlock.value :
    // TODO return _value when not in change?
    this._blocks.reduce((str, b) => str += b.value, '');
  }
  set value(value) {
    if (this.exposeBlock) {
      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);
      this.exposeBlock.value = value;
      this.appendTail(tail);
      this.doCommit();
    } else super.value = value;
  }
  get typedValue() {
    return this.exposeBlock ? this.exposeBlock.typedValue : super.typedValue;
  }
  set typedValue(value) {
    if (this.exposeBlock) {
      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);
      this.exposeBlock.typedValue = value;
      this.appendTail(tail);
      this.doCommit();
    } else super.typedValue = value;
  }
  get displayValue() {
    return this._blocks.reduce((str, b) => str += b.displayValue, '');
  }
  appendTail(tail) {
    return super.appendTail(tail).aggregate(this._appendPlaceholder());
  }
  _appendEager() {
    var _this$_mapPosToBlock;
    const details = new ChangeDetails();
    let startBlockIndex = (_this$_mapPosToBlock = this._mapPosToBlock(this.displayValue.length)) == null ? void 0 : _this$_mapPosToBlock.index;
    if (startBlockIndex == null) return details;

    // TODO test if it works for nested pattern masks
    if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;
    for (let bi = startBlockIndex; bi < this._blocks.length; ++bi) {
      const d = this._blocks[bi]._appendEager();
      if (!d.inserted) break;
      details.aggregate(d);
    }
    return details;
  }
  _appendCharRaw(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    const blockIter = this._mapPosToBlock(this.displayValue.length);
    const details = new ChangeDetails();
    if (!blockIter) return details;
    for (let bi = blockIter.index, block; block = this._blocks[bi]; ++bi) {
      var _flags$_beforeTailSta;
      const blockDetails = block._appendChar(ch, {
        ...flags,
        _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) == null || (_flags$_beforeTailSta = _flags$_beforeTailSta._blocks) == null ? void 0 : _flags$_beforeTailSta[bi]
      });
      details.aggregate(blockDetails);
      if (blockDetails.consumed) break; // go next char
    }
    return details;
  }
  extractTail(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    const chunkTail = new ChunksTailDetails();
    if (fromPos === toPos) return chunkTail;
    this._forEachBlocksInRange(fromPos, toPos, (b, bi, bFromPos, bToPos) => {
      const blockChunk = b.extractTail(bFromPos, bToPos);
      blockChunk.stop = this._findStopBefore(bi);
      blockChunk.from = this._blockStartPos(bi);
      if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;
      chunkTail.extend(blockChunk);
    });
    return chunkTail;
  }
  extractInput(fromPos, toPos, flags) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    if (flags === void 0) {
      flags = {};
    }
    if (fromPos === toPos) return '';
    let input = '';
    this._forEachBlocksInRange(fromPos, toPos, (b, _, fromPos, toPos) => {
      input += b.extractInput(fromPos, toPos, flags);
    });
    return input;
  }
  _findStopBefore(blockIndex) {
    let stopBefore;
    for (let si = 0; si < this._stops.length; ++si) {
      const stop = this._stops[si];
      if (stop <= blockIndex) stopBefore = stop;else break;
    }
    return stopBefore;
  }

  /** Appends placeholder depending on laziness */
  _appendPlaceholder(toBlockIndex) {
    const details = new ChangeDetails();
    if (this.lazy && toBlockIndex == null) return details;
    const startBlockIter = this._mapPosToBlock(this.displayValue.length);
    if (!startBlockIter) return details;
    const startBlockIndex = startBlockIter.index;
    const endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;
    this._blocks.slice(startBlockIndex, endBlockIndex).forEach(b => {
      if (!b.lazy || toBlockIndex != null) {
        var _blocks2;
        details.aggregate(b._appendPlaceholder((_blocks2 = b._blocks) == null ? void 0 : _blocks2.length));
      }
    });
    return details;
  }

  /** Finds block in pos */
  _mapPosToBlock(pos) {
    let accVal = '';
    for (let bi = 0; bi < this._blocks.length; ++bi) {
      const block = this._blocks[bi];
      const blockStartPos = accVal.length;
      accVal += block.displayValue;
      if (pos <= accVal.length) {
        return {
          index: bi,
          offset: pos - blockStartPos
        };
      }
    }
  }
  _blockStartPos(blockIndex) {
    return this._blocks.slice(0, blockIndex).reduce((pos, b) => pos += b.displayValue.length, 0);
  }
  _forEachBlocksInRange(fromPos, toPos, fn) {
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    const fromBlockIter = this._mapPosToBlock(fromPos);
    if (fromBlockIter) {
      const toBlockIter = this._mapPosToBlock(toPos);
      // process first block
      const isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;
      const fromBlockStartPos = fromBlockIter.offset;
      const fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].displayValue.length;
      fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);
      if (toBlockIter && !isSameBlock) {
        // process intermediate blocks
        for (let bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {
          fn(this._blocks[bi], bi, 0, this._blocks[bi].displayValue.length);
        }

        // process last block
        fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);
      }
    }
  }
  remove(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    const removeDetails = super.remove(fromPos, toPos);
    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {
      removeDetails.aggregate(b.remove(bFromPos, bToPos));
    });
    return removeDetails;
  }
  nearestInputPos(cursorPos, direction) {
    if (direction === void 0) {
      direction = DIRECTION.NONE;
    }
    if (!this._blocks.length) return 0;
    const cursor = new PatternCursor(this, cursorPos);
    if (direction === DIRECTION.NONE) {
      // -------------------------------------------------
      // NONE should only go out from fixed to the right!
      // -------------------------------------------------
      if (cursor.pushRightBeforeInput()) return cursor.pos;
      cursor.popState();
      if (cursor.pushLeftBeforeInput()) return cursor.pos;
      return this.displayValue.length;
    }

    // FORCE is only about a|* otherwise is 0
    if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {
      // try to break fast when *|a
      if (direction === DIRECTION.LEFT) {
        cursor.pushRightBeforeFilled();
        if (cursor.ok && cursor.pos === cursorPos) return cursorPos;
        cursor.popState();
      }

      // forward flow
      cursor.pushLeftBeforeInput();
      cursor.pushLeftBeforeRequired();
      cursor.pushLeftBeforeFilled();

      // backward flow
      if (direction === DIRECTION.LEFT) {
        cursor.pushRightBeforeInput();
        cursor.pushRightBeforeRequired();
        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;
        cursor.popState();
        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;
        cursor.popState();
      }
      if (cursor.ok) return cursor.pos;
      if (direction === DIRECTION.FORCE_LEFT) return 0;
      cursor.popState();
      if (cursor.ok) return cursor.pos;
      cursor.popState();
      if (cursor.ok) return cursor.pos;
      return 0;
    }
    if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {
      // forward flow
      cursor.pushRightBeforeInput();
      cursor.pushRightBeforeRequired();
      if (cursor.pushRightBeforeFilled()) return cursor.pos;
      if (direction === DIRECTION.FORCE_RIGHT) return this.displayValue.length;

      // backward flow
      cursor.popState();
      if (cursor.ok) return cursor.pos;
      cursor.popState();
      if (cursor.ok) return cursor.pos;
      return this.nearestInputPos(cursorPos, DIRECTION.LEFT);
    }
    return cursorPos;
  }
  totalInputPositions(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    let total = 0;
    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {
      total += b.totalInputPositions(bFromPos, bToPos);
    });
    return total;
  }

  /** Get block by name */
  maskedBlock(name) {
    return this.maskedBlocks(name)[0];
  }

  /** Get all blocks by name */
  maskedBlocks(name) {
    const indices = this._maskedBlocks[name];
    if (!indices) return [];
    return indices.map(gi => this._blocks[gi]);
  }
  pad(flags) {
    const details = new ChangeDetails();
    this._forEachBlocksInRange(0, this.displayValue.length, b => details.aggregate(b.pad(flags)));
    return details;
  }
}
MaskedPattern.DEFAULTS = {
  ...Masked.DEFAULTS,
  lazy: true,
  placeholderChar: '_'
};
MaskedPattern.STOP_CHAR = '`';
MaskedPattern.ESCAPE_CHAR = '\\';
MaskedPattern.InputDefinition = PatternInputDefinition;
MaskedPattern.FixedDefinition = PatternFixedDefinition;
IMask.MaskedPattern = MaskedPattern;

/** Pattern which accepts ranges */
class MaskedRange extends MaskedPattern {
  /**
    Optionally sets max length of pattern.
    Used when pattern length is longer then `to` param length. Pads zeros at start in this case.
  */

  /** Min bound */

  /** Max bound */

  get _matchFrom() {
    return this.maxLength - String(this.from).length;
  }
  constructor(opts) {
    super(opts); // mask will be created in _update
  }
  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    const {
      to = this.to || 0,
      from = this.from || 0,
      maxLength = this.maxLength || 0,
      autofix = this.autofix,
      ...patternOpts
    } = opts;
    this.to = to;
    this.from = from;
    this.maxLength = Math.max(String(to).length, maxLength);
    this.autofix = autofix;
    const fromStr = String(this.from).padStart(this.maxLength, '0');
    const toStr = String(this.to).padStart(this.maxLength, '0');
    let sameCharsCount = 0;
    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;
    patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\0') + '0'.repeat(this.maxLength - sameCharsCount);
    super._update(patternOpts);
  }
  get isComplete() {
    return super.isComplete && Boolean(this.value);
  }
  boundaries(str) {
    let minstr = '';
    let maxstr = '';
    const [, placeholder, num] = str.match(/^(\D*)(\d*)(\D*)/) || [];
    if (num) {
      minstr = '0'.repeat(placeholder.length) + num;
      maxstr = '9'.repeat(placeholder.length) + num;
    }
    minstr = minstr.padEnd(this.maxLength, '0');
    maxstr = maxstr.padEnd(this.maxLength, '9');
    return [minstr, maxstr];
  }
  doPrepareChar(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    let details;
    [ch, details] = super.doPrepareChar(ch.replace(/\D/g, ''), flags);
    if (!ch) details.skip = !this.isComplete;
    return [ch, details];
  }
  _appendCharRaw(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    if (!this.autofix || this.value.length + 1 > this.maxLength) return super._appendCharRaw(ch, flags);
    const fromStr = String(this.from).padStart(this.maxLength, '0');
    const toStr = String(this.to).padStart(this.maxLength, '0');
    const [minstr, maxstr] = this.boundaries(this.value + ch);
    if (Number(maxstr) < this.from) return super._appendCharRaw(fromStr[this.value.length], flags);
    if (Number(minstr) > this.to) {
      if (!flags.tail && this.autofix === 'pad' && this.value.length + 1 < this.maxLength) {
        return super._appendCharRaw(fromStr[this.value.length], flags).aggregate(this._appendCharRaw(ch, flags));
      }
      return super._appendCharRaw(toStr[this.value.length], flags);
    }
    return super._appendCharRaw(ch, flags);
  }
  doValidate(flags) {
    const str = this.value;
    const firstNonZero = str.search(/[^0]/);
    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;
    const [minstr, maxstr] = this.boundaries(str);
    return this.from <= Number(maxstr) && Number(minstr) <= this.to && super.doValidate(flags);
  }
  pad(flags) {
    const details = new ChangeDetails();
    if (this.value.length === this.maxLength) return details;
    const value = this.value;
    const padLength = this.maxLength - this.value.length;
    if (padLength) {
      this.reset();
      for (let i = 0; i < padLength; ++i) {
        details.aggregate(super._appendCharRaw('0', flags));
      }

      // append tail
      value.split('').forEach(ch => this._appendCharRaw(ch));
    }
    return details;
  }
}
IMask.MaskedRange = MaskedRange;

const DefaultPattern = 'd{.}`m{.}`Y';

// Make format and parse required when pattern is provided

/** Date mask */
class MaskedDate extends MaskedPattern {
  static extractPatternOptions(opts) {
    const {
      mask,
      pattern,
      ...patternOpts
    } = opts;
    return {
      ...patternOpts,
      mask: isString(mask) ? mask : pattern
    };
  }

  /** Pattern mask for date according to {@link MaskedDate#format} */

  /** Start date */

  /** End date */

  /** Format typed value to string */

  /** Parse string to get typed value */

  constructor(opts) {
    super(MaskedDate.extractPatternOptions({
      ...MaskedDate.DEFAULTS,
      ...opts
    }));
  }
  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    const {
      mask,
      pattern,
      blocks,
      ...patternOpts
    } = {
      ...MaskedDate.DEFAULTS,
      ...opts
    };
    const patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());
    // adjust year block
    if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();
    if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();
    if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to) {
      patternBlocks.m.from = opts.min.getMonth() + 1;
      patternBlocks.m.to = opts.max.getMonth() + 1;
      if (patternBlocks.m.from === patternBlocks.m.to) {
        patternBlocks.d.from = opts.min.getDate();
        patternBlocks.d.to = opts.max.getDate();
      }
    }
    Object.assign(patternBlocks, this.blocks, blocks);
    super._update({
      ...patternOpts,
      mask: isString(mask) ? mask : pattern,
      blocks: patternBlocks
    });
  }
  doValidate(flags) {
    const date = this.date;
    return super.doValidate(flags) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));
  }

  /** Checks if date is exists */
  isDateExist(str) {
    return this.format(this.parse(str, this), this).indexOf(str) >= 0;
  }

  /** Parsed Date */
  get date() {
    return this.typedValue;
  }
  set date(date) {
    this.typedValue = date;
  }
  get typedValue() {
    return this.isComplete ? super.typedValue : null;
  }
  set typedValue(value) {
    super.typedValue = value;
  }
  maskEquals(mask) {
    return mask === Date || super.maskEquals(mask);
  }
  optionsIsChanged(opts) {
    return super.optionsIsChanged(MaskedDate.extractPatternOptions(opts));
  }
}
MaskedDate.GET_DEFAULT_BLOCKS = () => ({
  d: {
    mask: MaskedRange,
    from: 1,
    to: 31,
    maxLength: 2
  },
  m: {
    mask: MaskedRange,
    from: 1,
    to: 12,
    maxLength: 2
  },
  Y: {
    mask: MaskedRange,
    from: 1900,
    to: 9999
  }
});
MaskedDate.DEFAULTS = {
  ...MaskedPattern.DEFAULTS,
  mask: Date,
  pattern: DefaultPattern,
  format: (date, masked) => {
    if (!date) return '';
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return [day, month, year].join('.');
  },
  parse: (str, masked) => {
    const [day, month, year] = str.split('.').map(Number);
    return new Date(year, month - 1, day);
  }
};
IMask.MaskedDate = MaskedDate;

/** Dynamic mask for choosing appropriate mask in run-time */
class MaskedDynamic extends Masked {
  constructor(opts) {
    super({
      ...MaskedDynamic.DEFAULTS,
      ...opts
    });
    this.currentMask = undefined;
  }
  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    super._update(opts);
    if ('mask' in opts) {
      this.exposeMask = undefined;
      // mask could be totally dynamic with only `dispatch` option
      this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(m => {
        const {
          expose,
          ...maskOpts
        } = normalizeOpts(m);
        const masked = createMask({
          overwrite: this._overwrite,
          eager: this._eager,
          skipInvalid: this._skipInvalid,
          ...maskOpts
        });
        if (expose) this.exposeMask = masked;
        return masked;
      }) : [];

      // this.currentMask = this.doDispatch(''); // probably not needed but lets see
    }
  }
  _appendCharRaw(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    const details = this._applyDispatch(ch, flags);
    if (this.currentMask) {
      details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));
    }
    return details;
  }
  _applyDispatch(appended, flags, tail) {
    if (appended === void 0) {
      appended = '';
    }
    if (flags === void 0) {
      flags = {};
    }
    if (tail === void 0) {
      tail = '';
    }
    const prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;
    const inputValue = this.rawInputValue;
    const insertValue = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._rawInputValue : inputValue;
    const tailValue = inputValue.slice(insertValue.length);
    const prevMask = this.currentMask;
    const details = new ChangeDetails();
    const prevMaskState = prevMask == null ? void 0 : prevMask.state;

    // clone flags to prevent overwriting `_beforeTailState`
    this.currentMask = this.doDispatch(appended, {
      ...flags
    }, tail);

    // restore state after dispatch
    if (this.currentMask) {
      if (this.currentMask !== prevMask) {
        // if mask changed reapply input
        this.currentMask.reset();
        if (insertValue) {
          this.currentMask.append(insertValue, {
            raw: true
          });
          details.tailShift = this.currentMask.value.length - prevValueBeforeTail.length;
        }
        if (tailValue) {
          details.tailShift += this.currentMask.append(tailValue, {
            raw: true,
            tail: true
          }).tailShift;
        }
      } else if (prevMaskState) {
        // Dispatch can do something bad with state, so
        // restore prev mask state
        this.currentMask.state = prevMaskState;
      }
    }
    return details;
  }
  _appendPlaceholder() {
    const details = this._applyDispatch();
    if (this.currentMask) {
      details.aggregate(this.currentMask._appendPlaceholder());
    }
    return details;
  }
  _appendEager() {
    const details = this._applyDispatch();
    if (this.currentMask) {
      details.aggregate(this.currentMask._appendEager());
    }
    return details;
  }
  appendTail(tail) {
    const details = new ChangeDetails();
    if (tail) details.aggregate(this._applyDispatch('', {}, tail));
    return details.aggregate(this.currentMask ? this.currentMask.appendTail(tail) : super.appendTail(tail));
  }
  currentMaskFlags(flags) {
    var _flags$_beforeTailSta, _flags$_beforeTailSta2;
    return {
      ...flags,
      _beforeTailState: ((_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.currentMaskRef) === this.currentMask && ((_flags$_beforeTailSta2 = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta2.currentMask) || flags._beforeTailState
    };
  }
  doDispatch(appended, flags, tail) {
    if (flags === void 0) {
      flags = {};
    }
    if (tail === void 0) {
      tail = '';
    }
    return this.dispatch(appended, this, flags, tail);
  }
  doValidate(flags) {
    return super.doValidate(flags) && (!this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags)));
  }
  doPrepare(str, flags) {
    if (flags === void 0) {
      flags = {};
    }
    let [s, details] = super.doPrepare(str, flags);
    if (this.currentMask) {
      let currentDetails;
      [s, currentDetails] = super.doPrepare(s, this.currentMaskFlags(flags));
      details = details.aggregate(currentDetails);
    }
    return [s, details];
  }
  doPrepareChar(str, flags) {
    if (flags === void 0) {
      flags = {};
    }
    let [s, details] = super.doPrepareChar(str, flags);
    if (this.currentMask) {
      let currentDetails;
      [s, currentDetails] = super.doPrepareChar(s, this.currentMaskFlags(flags));
      details = details.aggregate(currentDetails);
    }
    return [s, details];
  }
  reset() {
    var _this$currentMask;
    (_this$currentMask = this.currentMask) == null || _this$currentMask.reset();
    this.compiledMasks.forEach(m => m.reset());
  }
  get value() {
    return this.exposeMask ? this.exposeMask.value : this.currentMask ? this.currentMask.value : '';
  }
  set value(value) {
    if (this.exposeMask) {
      this.exposeMask.value = value;
      this.currentMask = this.exposeMask;
      this._applyDispatch();
    } else super.value = value;
  }
  get unmaskedValue() {
    return this.exposeMask ? this.exposeMask.unmaskedValue : this.currentMask ? this.currentMask.unmaskedValue : '';
  }
  set unmaskedValue(unmaskedValue) {
    if (this.exposeMask) {
      this.exposeMask.unmaskedValue = unmaskedValue;
      this.currentMask = this.exposeMask;
      this._applyDispatch();
    } else super.unmaskedValue = unmaskedValue;
  }
  get typedValue() {
    return this.exposeMask ? this.exposeMask.typedValue : this.currentMask ? this.currentMask.typedValue : '';
  }
  set typedValue(typedValue) {
    if (this.exposeMask) {
      this.exposeMask.typedValue = typedValue;
      this.currentMask = this.exposeMask;
      this._applyDispatch();
      return;
    }
    let unmaskedValue = String(typedValue);

    // double check it
    if (this.currentMask) {
      this.currentMask.typedValue = typedValue;
      unmaskedValue = this.currentMask.unmaskedValue;
    }
    this.unmaskedValue = unmaskedValue;
  }
  get displayValue() {
    return this.currentMask ? this.currentMask.displayValue : '';
  }
  get isComplete() {
    var _this$currentMask2;
    return Boolean((_this$currentMask2 = this.currentMask) == null ? void 0 : _this$currentMask2.isComplete);
  }
  get isFilled() {
    var _this$currentMask3;
    return Boolean((_this$currentMask3 = this.currentMask) == null ? void 0 : _this$currentMask3.isFilled);
  }
  remove(fromPos, toPos) {
    const details = new ChangeDetails();
    if (this.currentMask) {
      details.aggregate(this.currentMask.remove(fromPos, toPos))
      // update with dispatch
      .aggregate(this._applyDispatch());
    }
    return details;
  }
  get state() {
    var _this$currentMask4;
    return {
      ...super.state,
      _rawInputValue: this.rawInputValue,
      compiledMasks: this.compiledMasks.map(m => m.state),
      currentMaskRef: this.currentMask,
      currentMask: (_this$currentMask4 = this.currentMask) == null ? void 0 : _this$currentMask4.state
    };
  }
  set state(state) {
    const {
      compiledMasks,
      currentMaskRef,
      currentMask,
      ...maskedState
    } = state;
    if (compiledMasks) this.compiledMasks.forEach((m, mi) => m.state = compiledMasks[mi]);
    if (currentMaskRef != null) {
      this.currentMask = currentMaskRef;
      this.currentMask.state = currentMask;
    }
    super.state = maskedState;
  }
  extractInput(fromPos, toPos, flags) {
    return this.currentMask ? this.currentMask.extractInput(fromPos, toPos, flags) : '';
  }
  extractTail(fromPos, toPos) {
    return this.currentMask ? this.currentMask.extractTail(fromPos, toPos) : super.extractTail(fromPos, toPos);
  }
  doCommit() {
    if (this.currentMask) this.currentMask.doCommit();
    super.doCommit();
  }
  nearestInputPos(cursorPos, direction) {
    return this.currentMask ? this.currentMask.nearestInputPos(cursorPos, direction) : super.nearestInputPos(cursorPos, direction);
  }
  get overwrite() {
    return this.currentMask ? this.currentMask.overwrite : this._overwrite;
  }
  set overwrite(overwrite) {
    this._overwrite = overwrite;
  }
  get eager() {
    return this.currentMask ? this.currentMask.eager : this._eager;
  }
  set eager(eager) {
    this._eager = eager;
  }
  get skipInvalid() {
    return this.currentMask ? this.currentMask.skipInvalid : this._skipInvalid;
  }
  set skipInvalid(skipInvalid) {
    this._skipInvalid = skipInvalid;
  }
  get autofix() {
    return this.currentMask ? this.currentMask.autofix : this._autofix;
  }
  set autofix(autofix) {
    this._autofix = autofix;
  }
  maskEquals(mask) {
    return Array.isArray(mask) ? this.compiledMasks.every((m, mi) => {
      if (!mask[mi]) return;
      const {
        mask: oldMask,
        ...restOpts
      } = mask[mi];
      return objectIncludes(m, restOpts) && m.maskEquals(oldMask);
    }) : super.maskEquals(mask);
  }
  typedValueEquals(value) {
    var _this$currentMask5;
    return Boolean((_this$currentMask5 = this.currentMask) == null ? void 0 : _this$currentMask5.typedValueEquals(value));
  }
}
/** Currently chosen mask */
/** Currently chosen mask */
/** Compliled {@link Masked} options */
/** Chooses {@link Masked} depending on input value */
MaskedDynamic.DEFAULTS = {
  ...Masked.DEFAULTS,
  dispatch: (appended, masked, flags, tail) => {
    if (!masked.compiledMasks.length) return;
    const inputValue = masked.rawInputValue;

    // simulate input
    const inputs = masked.compiledMasks.map((m, index) => {
      const isCurrent = masked.currentMask === m;
      const startInputPos = isCurrent ? m.displayValue.length : m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT);
      if (m.rawInputValue !== inputValue) {
        m.reset();
        m.append(inputValue, {
          raw: true
        });
      } else if (!isCurrent) {
        m.remove(startInputPos);
      }
      m.append(appended, masked.currentMaskFlags(flags));
      m.appendTail(tail);
      return {
        index,
        weight: m.rawInputValue.length,
        totalInputPositions: m.totalInputPositions(0, Math.max(startInputPos, m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT)))
      };
    });

    // pop masks with longer values first
    inputs.sort((i1, i2) => i2.weight - i1.weight || i2.totalInputPositions - i1.totalInputPositions);
    return masked.compiledMasks[inputs[0].index];
  }
};
IMask.MaskedDynamic = MaskedDynamic;

/** Pattern which validates enum values */
class MaskedEnum extends MaskedPattern {
  constructor(opts) {
    super({
      ...MaskedEnum.DEFAULTS,
      ...opts
    }); // mask will be created in _update
  }
  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    const {
      enum: enum_,
      ...eopts
    } = opts;
    if (enum_) {
      const lengths = enum_.map(e => e.length);
      const requiredLength = Math.min(...lengths);
      const optionalLength = Math.max(...lengths) - requiredLength;
      eopts.mask = '*'.repeat(requiredLength);
      if (optionalLength) eopts.mask += '[' + '*'.repeat(optionalLength) + ']';
      this.enum = enum_;
    }
    super._update(eopts);
  }
  _appendCharRaw(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    const matchFrom = Math.min(this.nearestInputPos(0, DIRECTION.FORCE_RIGHT), this.value.length);
    const matches = this.enum.filter(e => this.matchValue(e, this.unmaskedValue + ch, matchFrom));
    if (matches.length) {
      if (matches.length === 1) {
        this._forEachBlocksInRange(0, this.value.length, (b, bi) => {
          const mch = matches[0][bi];
          if (bi >= this.value.length || mch === b.value) return;
          b.reset();
          b._appendChar(mch, flags);
        });
      }
      const d = super._appendCharRaw(matches[0][this.value.length], flags);
      if (matches.length === 1) {
        matches[0].slice(this.unmaskedValue.length).split('').forEach(mch => d.aggregate(super._appendCharRaw(mch)));
      }
      return d;
    }
    return new ChangeDetails({
      skip: !this.isComplete
    });
  }
  extractTail(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    // just drop tail
    return new ContinuousTailDetails('', fromPos);
  }
  remove(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    if (fromPos === toPos) return new ChangeDetails();
    const matchFrom = Math.min(super.nearestInputPos(0, DIRECTION.FORCE_RIGHT), this.value.length);
    let pos;
    for (pos = fromPos; pos >= 0; --pos) {
      const matches = this.enum.filter(e => this.matchValue(e, this.value.slice(matchFrom, pos), matchFrom));
      if (matches.length > 1) break;
    }
    const details = super.remove(pos, toPos);
    details.tailShift += pos - fromPos;
    return details;
  }
  get isComplete() {
    return this.enum.indexOf(this.value) >= 0;
  }
}
/** Match enum value */
MaskedEnum.DEFAULTS = {
  ...MaskedPattern.DEFAULTS,
  matchValue: (estr, istr, matchFrom) => estr.indexOf(istr, matchFrom) === matchFrom
};
IMask.MaskedEnum = MaskedEnum;

/** Masking by custom Function */
class MaskedFunction extends Masked {
  /** */

  /** Enable characters overwriting */

  /** */

  /** */

  /** */

  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    super._update({
      ...opts,
      validate: opts.mask
    });
  }
}
IMask.MaskedFunction = MaskedFunction;

var _MaskedNumber;
/** Number mask */
class MaskedNumber extends Masked {
  /** Single char */

  /** Single char */

  /** Array of single chars */

  /** */

  /** */

  /** Digits after point */

  /** Flag to remove leading and trailing zeros in the end of editing */

  /** Flag to pad trailing zeros after point in the end of editing */

  /** Enable characters overwriting */

  /** */

  /** */

  /** */

  /** Format typed value to string */

  /** Parse string to get typed value */

  constructor(opts) {
    super({
      ...MaskedNumber.DEFAULTS,
      ...opts
    });
  }
  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    super._update(opts);
    this._updateRegExps();
  }
  _updateRegExps() {
    const start = '^' + (this.allowNegative ? '[+|\\-]?' : '');
    const mid = '\\d*';
    const end = (this.scale ? "(" + escapeRegExp(this.radix) + "\\d{0," + this.scale + "})?" : '') + '$';
    this._numberRegExp = new RegExp(start + mid + end);
    this._mapToRadixRegExp = new RegExp("[" + this.mapToRadix.map(escapeRegExp).join('') + "]", 'g');
    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');
  }
  _removeThousandsSeparators(value) {
    return value.replace(this._thousandsSeparatorRegExp, '');
  }
  _insertThousandsSeparators(value) {
    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
    const parts = value.split(this.radix);
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, this.thousandsSeparator);
    return parts.join(this.radix);
  }
  doPrepareChar(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    const [prepCh, details] = super.doPrepareChar(this._removeThousandsSeparators(this.scale && this.mapToRadix.length && (
    /*
      radix should be mapped when
      1) input is done from keyboard = flags.input && flags.raw
      2) unmasked value is set = !flags.input && !flags.raw
      and should not be mapped when
      1) value is set = flags.input && !flags.raw
      2) raw value is set = !flags.input && flags.raw
    */
    flags.input && flags.raw || !flags.input && !flags.raw) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch), flags);
    if (ch && !prepCh) details.skip = true;
    if (prepCh && !this.allowPositive && !this.value && prepCh !== '-') details.aggregate(this._appendChar('-'));
    return [prepCh, details];
  }
  _separatorsCount(to, extendOnSeparators) {
    if (extendOnSeparators === void 0) {
      extendOnSeparators = false;
    }
    let count = 0;
    for (let pos = 0; pos < to; ++pos) {
      if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {
        ++count;
        if (extendOnSeparators) to += this.thousandsSeparator.length;
      }
    }
    return count;
  }
  _separatorsCountFromSlice(slice) {
    if (slice === void 0) {
      slice = this._value;
    }
    return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);
  }
  extractInput(fromPos, toPos, flags) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);
    return this._removeThousandsSeparators(super.extractInput(fromPos, toPos, flags));
  }
  _appendCharRaw(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    const prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;
    const prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);
    this._value = this._removeThousandsSeparators(this.value);
    const oldValue = this._value;
    this._value += ch;
    const num = this.number;
    let accepted = !isNaN(num);
    let skip = false;
    if (accepted) {
      let fixedNum;
      if (this.min != null && this.min < 0 && this.number < this.min) fixedNum = this.min;
      if (this.max != null && this.max > 0 && this.number > this.max) fixedNum = this.max;
      if (fixedNum != null) {
        if (this.autofix) {
          this._value = this.format(fixedNum, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);
          skip || (skip = oldValue === this._value && !flags.tail); // if not changed on tail it's still ok to proceed
        } else {
          accepted = false;
        }
      }
      accepted && (accepted = Boolean(this._value.match(this._numberRegExp)));
    }
    let appendDetails;
    if (!accepted) {
      this._value = oldValue;
      appendDetails = new ChangeDetails();
    } else {
      appendDetails = new ChangeDetails({
        inserted: this._value.slice(oldValue.length),
        rawInserted: skip ? '' : ch,
        skip
      });
    }
    this._value = this._insertThousandsSeparators(this._value);
    const beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;
    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);
    appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;
    return appendDetails;
  }
  _findSeparatorAround(pos) {
    if (this.thousandsSeparator) {
      const searchFrom = pos - this.thousandsSeparator.length + 1;
      const separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);
      if (separatorPos <= pos) return separatorPos;
    }
    return -1;
  }
  _adjustRangeWithSeparators(from, to) {
    const separatorAroundFromPos = this._findSeparatorAround(from);
    if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;
    const separatorAroundToPos = this._findSeparatorAround(to);
    if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;
    return [from, to];
  }
  remove(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);
    const valueBeforePos = this.value.slice(0, fromPos);
    const valueAfterPos = this.value.slice(toPos);
    const prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);
    this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));
    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);
    return new ChangeDetails({
      tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length
    });
  }
  nearestInputPos(cursorPos, direction) {
    if (!this.thousandsSeparator) return cursorPos;
    switch (direction) {
      case DIRECTION.NONE:
      case DIRECTION.LEFT:
      case DIRECTION.FORCE_LEFT:
        {
          const separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);
          if (separatorAtLeftPos >= 0) {
            const separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;
            if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {
              return separatorAtLeftPos;
            }
          }
          break;
        }
      case DIRECTION.RIGHT:
      case DIRECTION.FORCE_RIGHT:
        {
          const separatorAtRightPos = this._findSeparatorAround(cursorPos);
          if (separatorAtRightPos >= 0) {
            return separatorAtRightPos + this.thousandsSeparator.length;
          }
        }
    }
    return cursorPos;
  }
  doCommit() {
    if (this.value) {
      const number = this.number;
      let validnum = number;

      // check bounds
      if (this.min != null) validnum = Math.max(validnum, this.min);
      if (this.max != null) validnum = Math.min(validnum, this.max);
      if (validnum !== number) this.unmaskedValue = this.format(validnum, this);
      let formatted = this.value;
      if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);
      if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);
      this._value = formatted;
    }
    super.doCommit();
  }
  _normalizeZeros(value) {
    const parts = this._removeThousandsSeparators(value).split(this.radix);

    // remove leading zeros
    parts[0] = parts[0].replace(/^(\D*)(0*)(\d*)/, (match, sign, zeros, num) => sign + num);
    // add leading zero
    if (value.length && !/\d$/.test(parts[0])) parts[0] = parts[0] + '0';
    if (parts.length > 1) {
      parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros
      if (!parts[1].length) parts.length = 1; // remove fractional
    }
    return this._insertThousandsSeparators(parts.join(this.radix));
  }
  _padFractionalZeros(value) {
    if (!value) return value;
    const parts = value.split(this.radix);
    if (parts.length < 2) parts.push('');
    parts[1] = parts[1].padEnd(this.scale, '0');
    return parts.join(this.radix);
  }
  doSkipInvalid(ch, flags, checkTail) {
    if (flags === void 0) {
      flags = {};
    }
    const dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (ch === this.radix || ch === MaskedNumber.UNMASKED_RADIX || this.mapToRadix.includes(ch));
    return super.doSkipInvalid(ch, flags, checkTail) && !dropFractional;
  }
  get unmaskedValue() {
    return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, MaskedNumber.UNMASKED_RADIX);
  }
  set unmaskedValue(unmaskedValue) {
    super.unmaskedValue = unmaskedValue;
  }
  get typedValue() {
    return this.parse(this.unmaskedValue, this);
  }
  set typedValue(n) {
    this.rawInputValue = this.format(n, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);
  }

  /** Parsed Number */
  get number() {
    return this.typedValue;
  }
  set number(number) {
    this.typedValue = number;
  }
  get allowNegative() {
    return this.min != null && this.min < 0 || this.max != null && this.max < 0;
  }
  get allowPositive() {
    return this.min != null && this.min > 0 || this.max != null && this.max > 0;
  }
  typedValueEquals(value) {
    // handle  0 -> '' case (typed = 0 even if value = '')
    // for details see https://github.com/uNmAnNeR/imaskjs/issues/134
    return (super.typedValueEquals(value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');
  }
}
_MaskedNumber = MaskedNumber;
MaskedNumber.UNMASKED_RADIX = '.';
MaskedNumber.EMPTY_VALUES = [...Masked.EMPTY_VALUES, 0];
MaskedNumber.DEFAULTS = {
  ...Masked.DEFAULTS,
  mask: Number,
  radix: ',',
  thousandsSeparator: '',
  mapToRadix: [_MaskedNumber.UNMASKED_RADIX],
  min: Number.MIN_SAFE_INTEGER,
  max: Number.MAX_SAFE_INTEGER,
  scale: 2,
  normalizeZeros: true,
  padFractionalZeros: false,
  parse: Number,
  format: n => n.toLocaleString('en-US', {
    useGrouping: false,
    maximumFractionDigits: 20
  })
};
IMask.MaskedNumber = MaskedNumber;

/** Mask pipe source and destination types */
const PIPE_TYPE = {
  MASKED: 'value',
  UNMASKED: 'unmaskedValue',
  TYPED: 'typedValue'
};
/** Creates new pipe function depending on mask type, source and destination options */
function createPipe(arg, from, to) {
  if (from === void 0) {
    from = PIPE_TYPE.MASKED;
  }
  if (to === void 0) {
    to = PIPE_TYPE.MASKED;
  }
  const masked = createMask(arg);
  return value => masked.runIsolated(m => {
    m[from] = value;
    return m[to];
  });
}

/** Pipes value through mask depending on mask type, source and destination options */
function pipe(value, mask, from, to) {
  return createPipe(mask, from, to)(value);
}
IMask.PIPE_TYPE = PIPE_TYPE;
IMask.createPipe = createPipe;
IMask.pipe = pipe;

/** Pattern mask */
class RepeatBlock extends MaskedPattern {
  get repeatFrom() {
    var _ref;
    return (_ref = Array.isArray(this.repeat) ? this.repeat[0] : this.repeat === Infinity ? 0 : this.repeat) != null ? _ref : 0;
  }
  get repeatTo() {
    var _ref2;
    return (_ref2 = Array.isArray(this.repeat) ? this.repeat[1] : this.repeat) != null ? _ref2 : Infinity;
  }
  constructor(opts) {
    super(opts);
  }
  updateOptions(opts) {
    super.updateOptions(opts);
  }
  _update(opts) {
    var _ref3, _ref4, _this$_blocks;
    const {
      repeat,
      ...blockOpts
    } = normalizeOpts(opts); // TODO type
    this._blockOpts = Object.assign({}, this._blockOpts, blockOpts);
    const block = createMask(this._blockOpts);
    this.repeat = (_ref3 = (_ref4 = repeat != null ? repeat : block.repeat) != null ? _ref4 : this.repeat) != null ? _ref3 : Infinity; // TODO type

    super._update({
      mask: 'm'.repeat(Math.max(this.repeatTo === Infinity && ((_this$_blocks = this._blocks) == null ? void 0 : _this$_blocks.length) || 0, this.repeatFrom)),
      blocks: {
        m: block
      },
      eager: block.eager,
      overwrite: block.overwrite,
      skipInvalid: block.skipInvalid,
      lazy: block.lazy,
      placeholderChar: block.placeholderChar,
      displayChar: block.displayChar
    });
  }
  _allocateBlock(bi) {
    if (bi < this._blocks.length) return this._blocks[bi];
    if (this.repeatTo === Infinity || this._blocks.length < this.repeatTo) {
      this._blocks.push(createMask(this._blockOpts));
      this.mask += 'm';
      return this._blocks[this._blocks.length - 1];
    }
  }
  _appendCharRaw(ch, flags) {
    if (flags === void 0) {
      flags = {};
    }
    const details = new ChangeDetails();
    for (let bi = (_this$_mapPosToBlock$ = (_this$_mapPosToBlock = this._mapPosToBlock(this.displayValue.length)) == null ? void 0 : _this$_mapPosToBlock.index) != null ? _this$_mapPosToBlock$ : Math.max(this._blocks.length - 1, 0), block, allocated;
    // try to get a block or
    // try to allocate a new block if not allocated already
    block = (_this$_blocks$bi = this._blocks[bi]) != null ? _this$_blocks$bi : allocated = !allocated && this._allocateBlock(bi); ++bi) {
      var _this$_mapPosToBlock$, _this$_mapPosToBlock, _this$_blocks$bi, _flags$_beforeTailSta;
      const blockDetails = block._appendChar(ch, {
        ...flags,
        _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) == null || (_flags$_beforeTailSta = _flags$_beforeTailSta._blocks) == null ? void 0 : _flags$_beforeTailSta[bi]
      });
      if (blockDetails.skip && allocated) {
        // remove the last allocated block and break
        this._blocks.pop();
        this.mask = this.mask.slice(1);
        break;
      }
      details.aggregate(blockDetails);
      if (blockDetails.consumed) break; // go next char
    }
    return details;
  }
  _trimEmptyTail(fromPos, toPos) {
    var _this$_mapPosToBlock2, _this$_mapPosToBlock3;
    if (fromPos === void 0) {
      fromPos = 0;
    }
    const firstBlockIndex = Math.max(((_this$_mapPosToBlock2 = this._mapPosToBlock(fromPos)) == null ? void 0 : _this$_mapPosToBlock2.index) || 0, this.repeatFrom, 0);
    let lastBlockIndex;
    if (toPos != null) lastBlockIndex = (_this$_mapPosToBlock3 = this._mapPosToBlock(toPos)) == null ? void 0 : _this$_mapPosToBlock3.index;
    if (lastBlockIndex == null) lastBlockIndex = this._blocks.length - 1;
    let removeCount = 0;
    for (let blockIndex = lastBlockIndex; firstBlockIndex <= blockIndex; --blockIndex, ++removeCount) {
      if (this._blocks[blockIndex].unmaskedValue) break;
    }
    if (removeCount) {
      this._blocks.splice(lastBlockIndex - removeCount + 1, removeCount);
      this.mask = this.mask.slice(removeCount);
    }
  }
  reset() {
    super.reset();
    this._trimEmptyTail();
  }
  remove(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos === void 0) {
      toPos = this.displayValue.length;
    }
    const removeDetails = super.remove(fromPos, toPos);
    this._trimEmptyTail(fromPos, toPos);
    return removeDetails;
  }
  totalInputPositions(fromPos, toPos) {
    if (fromPos === void 0) {
      fromPos = 0;
    }
    if (toPos == null && this.repeatTo === Infinity) return Infinity;
    return super.totalInputPositions(fromPos, toPos);
  }
  get state() {
    return super.state;
  }
  set state(state) {
    this._blocks.length = state._blocks.length;
    this.mask = this.mask.slice(0, this._blocks.length);
    super.state = state;
  }
}
IMask.RepeatBlock = RepeatBlock;

try {
  globalThis.IMask = IMask;
} catch {}

ready(function () {
  const inputs = document.querySelectorAll(".input");
  if (inputs.length !== 0) {
    for (let input of inputs) {
      if (input.value.length !== 0) input.classList.add("input--has-value");
      input.addEventListener("input", function () {
        this.value.length !== 0 ? this.classList.add("input--has-value") : this.classList.remove("input--has-value");
      });
    }
  }
  const phoneFields = document.querySelectorAll("[data-phone-field]");
  if (phoneFields) {
    phoneFields.forEach(field => {
      IMask(field, {
        lazy: true,
        mask: "+{7} (000) 000 00 00",
        prepare: function (appended, masked) {
          if (appended === "8" && masked.value === "") {
            return "+7";
          }
          return appended;
        }
      });
    });
  }
  const numberFields = document.querySelectorAll("input[data-number]");
  if (numberFields) {
    numberFields.forEach(field => {
      IMask(field, {
        mask: Number,
        min: 0
      });
    });
  }
  const passportRussia = document.querySelectorAll("input[data-passport-russia]");
  if (passportRussia) {
    passportRussia.forEach(field => {
      IMask(field, {
        lazy: true,
        mask: "0000 000000"
      });
    });
  }
  const passportInt = document.querySelectorAll("input[data-passport-int]");
  if (passportInt) {
    passportInt.forEach(field => {
      IMask(field, {
        lazy: true,
        mask: "00 0000000"
      });
    });
  }
});

var slimselect = {exports: {}};

(function (module, exports) {
	(function (global, factory) {
	    module.exports = factory() ;
	})(commonjsGlobal, (function () {
	    class CssClasses {
	        constructor(classes) {
	            if (!classes) {
	                classes = {};
	            }
	            this.main = classes.main || 'ss-main';
	            this.placeholder = classes.placeholder || 'ss-placeholder';
	            this.values = classes.values || 'ss-values';
	            this.single = classes.single || 'ss-single';
	            this.max = classes.max || 'ss-max';
	            this.value = classes.value || 'ss-value';
	            this.valueText = classes.valueText || 'ss-value-text';
	            this.valueDelete = classes.valueDelete || 'ss-value-delete';
	            this.valueOut = classes.valueOut || 'ss-value-out';
	            this.deselect = classes.deselect || 'ss-deselect';
	            this.deselectPath = classes.deselectPath || 'M10,10 L90,90 M10,90 L90,10';
	            this.arrow = classes.arrow || 'ss-arrow';
	            this.arrowClose = classes.arrowClose || 'M10,30 L50,70 L90,30';
	            this.arrowOpen = classes.arrowOpen || 'M10,70 L50,30 L90,70';
	            this.content = classes.content || 'ss-content';
	            this.openAbove = classes.openAbove || 'ss-open-above';
	            this.openBelow = classes.openBelow || 'ss-open-below';
	            this.search = classes.search || 'ss-search';
	            this.searchHighlighter = classes.searchHighlighter || 'ss-search-highlight';
	            this.searching = classes.searching || 'ss-searching';
	            this.addable = classes.addable || 'ss-addable';
	            this.addablePath = classes.addablePath || 'M50,10 L50,90 M10,50 L90,50';
	            this.list = classes.list || 'ss-list';
	            this.optgroup = classes.optgroup || 'ss-optgroup';
	            this.optgroupLabel = classes.optgroupLabel || 'ss-optgroup-label';
	            this.optgroupLabelText = classes.optgroupLabelText || 'ss-optgroup-label-text';
	            this.optgroupActions = classes.optgroupActions || 'ss-optgroup-actions';
	            this.optgroupSelectAll = classes.optgroupSelectAll || 'ss-selectall';
	            this.optgroupSelectAllBox = classes.optgroupSelectAllBox || 'M60,10 L10,10 L10,90 L90,90 L90,50';
	            this.optgroupSelectAllCheck = classes.optgroupSelectAllCheck || 'M30,45 L50,70 L90,10';
	            this.optgroupClosable = classes.optgroupClosable || 'ss-closable';
	            this.option = classes.option || 'ss-option';
	            this.optionDelete = classes.optionDelete || 'M10,10 L90,90 M10,90 L90,10';
	            this.highlighted = classes.highlighted || 'ss-highlighted';
	            this.open = classes.open || 'ss-open';
	            this.close = classes.close || 'ss-close';
	            this.selected = classes.selected || 'ss-selected';
	            this.error = classes.error || 'ss-error';
	            this.disabled = classes.disabled || 'ss-disabled';
	            this.hide = classes.hide || 'ss-hide';
	        }
	    }

	    function generateID() {
	        return Math.random().toString(36).substring(2, 10);
	    }
	    function hasClassInTree(element, className) {
	        function hasClass(e, c) {
	            if (c && e && e.classList && e.classList.contains(c)) {
	                return e;
	            }
	            if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) {
	                return e;
	            }
	            return null;
	        }
	        function parentByClass(e, c) {
	            if (!e || e === document) {
	                return null;
	            }
	            else if (hasClass(e, c)) {
	                return e;
	            }
	            else {
	                return parentByClass(e.parentNode, c);
	            }
	        }
	        return hasClass(element, className) || parentByClass(element, className);
	    }
	    function debounce(func, wait = 50, immediate = false) {
	        let timeout;
	        return function (...args) {
	            const context = self;
	            const later = () => {
	                timeout = null;
	                if (!immediate) {
	                    func.apply(context, args);
	                }
	            };
	            const callNow = immediate && !timeout;
	            clearTimeout(timeout);
	            timeout = setTimeout(later, wait);
	            if (callNow) {
	                func.apply(context, args);
	            }
	        };
	    }
	    function isEqual(a, b) {
	        return JSON.stringify(a) === JSON.stringify(b);
	    }
	    function kebabCase(str) {
	        const result = str.replace(/[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g, (match) => '-' + match.toLowerCase());
	        return str[0] === str[0].toUpperCase() ? result.substring(1) : result;
	    }

	    class Optgroup {
	        constructor(optgroup) {
	            this.id = !optgroup.id || optgroup.id === '' ? generateID() : optgroup.id;
	            this.label = optgroup.label || '';
	            this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll;
	            this.selectAllText = optgroup.selectAllText || 'Select All';
	            this.closable = optgroup.closable || 'off';
	            this.options = [];
	            if (optgroup.options) {
	                for (const o of optgroup.options) {
	                    this.options.push(new Option(o));
	                }
	            }
	        }
	    }
	    class Option {
	        constructor(option) {
	            this.id = !option.id || option.id === '' ? generateID() : option.id;
	            this.value = option.value === undefined ? option.text : option.value;
	            this.text = option.text || '';
	            this.html = option.html || '';
	            this.selected = option.selected !== undefined ? option.selected : false;
	            this.display = option.display !== undefined ? option.display : true;
	            this.disabled = option.disabled !== undefined ? option.disabled : false;
	            this.mandatory = option.mandatory !== undefined ? option.mandatory : false;
	            this.placeholder = option.placeholder !== undefined ? option.placeholder : false;
	            this.class = option.class || '';
	            this.style = option.style || '';
	            this.data = option.data || {};
	        }
	    }
	    class Store {
	        constructor(type, data) {
	            this.selectType = 'single';
	            this.data = [];
	            this.selectedOrder = [];
	            this.selectType = type;
	            this.setData(data);
	        }
	        validateDataArray(data) {
	            if (!Array.isArray(data)) {
	                return new Error('Data must be an array');
	            }
	            for (let dataObj of data) {
	                if (dataObj instanceof Optgroup || 'label' in dataObj) {
	                    if (!('label' in dataObj)) {
	                        return new Error('Optgroup must have a label');
	                    }
	                    if ('options' in dataObj && dataObj.options) {
	                        for (let option of dataObj.options) {
	                            const validationError = this.validateOption(option);
	                            if (validationError) {
	                                return validationError;
	                            }
	                        }
	                    }
	                }
	                else if (dataObj instanceof Option || 'text' in dataObj) {
	                    const validationError = this.validateOption(dataObj);
	                    if (validationError) {
	                        return validationError;
	                    }
	                }
	                else {
	                    return new Error('Data object must be a valid optgroup or option');
	                }
	            }
	            return null;
	        }
	        validateOption(option) {
	            if (!('text' in option)) {
	                return new Error('Option must have a text');
	            }
	            return null;
	        }
	        partialToFullData(data) {
	            let dataFinal = [];
	            data.forEach((dataObj) => {
	                if (dataObj instanceof Optgroup || 'label' in dataObj) {
	                    let optOptions = [];
	                    if ('options' in dataObj && dataObj.options) {
	                        dataObj.options.forEach((option) => {
	                            optOptions.push(new Option(option));
	                        });
	                    }
	                    if (optOptions.length > 0) {
	                        dataFinal.push(new Optgroup(dataObj));
	                    }
	                }
	                if (dataObj instanceof Option || 'text' in dataObj) {
	                    dataFinal.push(new Option(dataObj));
	                }
	            });
	            return dataFinal;
	        }
	        setData(data) {
	            this.data = this.partialToFullData(data);
	            if (this.selectType === 'single') {
	                this.setSelectedBy('id', this.getSelected());
	            }
	        }
	        getData() {
	            return this.filter(null, true);
	        }
	        getDataOptions() {
	            return this.filter(null, false);
	        }
	        addOption(option, addToStart = false) {
	            if (addToStart) {
	                let data = [new Option(option)];
	                this.setData(data.concat(this.getData()));
	            }
	            else {
	                this.setData(this.getData().concat(new Option(option)));
	            }
	        }
	        setSelectedBy(selectedType, selectedValues) {
	            let firstOption = null;
	            let hasSelected = false;
	            const selectedObjects = [];
	            for (let dataObj of this.data) {
	                if (dataObj instanceof Optgroup) {
	                    for (let option of dataObj.options) {
	                        if (!firstOption) {
	                            firstOption = option;
	                        }
	                        option.selected = hasSelected ? false : selectedValues.includes(option[selectedType]);
	                        if (option.selected) {
	                            selectedObjects.push(option);
	                            if (this.selectType === 'single') {
	                                hasSelected = true;
	                            }
	                        }
	                    }
	                }
	                if (dataObj instanceof Option) {
	                    if (!firstOption) {
	                        firstOption = dataObj;
	                    }
	                    dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType]);
	                    if (dataObj.selected) {
	                        selectedObjects.push(dataObj);
	                        if (this.selectType === 'single') {
	                            hasSelected = true;
	                        }
	                    }
	                }
	            }
	            if (this.selectType === 'single' && firstOption && !hasSelected) {
	                firstOption.selected = true;
	                selectedObjects.push(firstOption);
	            }
	            const selectedIds = selectedValues.map((value) => {
	                var _a;
	                return ((_a = selectedObjects.find((option) => option[selectedType] === value)) === null || _a === void 0 ? void 0 : _a.id) || '';
	            });
	            this.selectedOrder = selectedIds;
	        }
	        getSelected() {
	            return this.getSelectedOptions().map((option) => option.id);
	        }
	        getSelectedValues() {
	            return this.getSelectedOptions().map((option) => option.value);
	        }
	        getSelectedOptions() {
	            return this.filter((opt) => {
	                return opt.selected;
	            }, false);
	        }
	        getOptgroupByID(id) {
	            for (let dataObj of this.data) {
	                if (dataObj instanceof Optgroup && dataObj.id === id) {
	                    return dataObj;
	                }
	            }
	            return null;
	        }
	        getOptionByID(id) {
	            let options = this.filter((opt) => {
	                return opt.id === id;
	            }, false);
	            return options.length ? options[0] : null;
	        }
	        getSelectType() {
	            return this.selectType;
	        }
	        getFirstOption() {
	            let option = null;
	            for (let dataObj of this.data) {
	                if (dataObj instanceof Optgroup) {
	                    option = dataObj.options[0];
	                }
	                else if (dataObj instanceof Option) {
	                    option = dataObj;
	                }
	                if (option) {
	                    break;
	                }
	            }
	            return option;
	        }
	        search(search, searchFilter) {
	            search = search.trim();
	            if (search === '') {
	                return this.getData();
	            }
	            return this.filter((opt) => {
	                return searchFilter(opt, search);
	            }, true);
	        }
	        filter(filter, includeOptgroup) {
	            const dataSearch = [];
	            this.data.forEach((dataObj) => {
	                if (dataObj instanceof Optgroup) {
	                    let optOptions = [];
	                    dataObj.options.forEach((option) => {
	                        if (!filter || filter(option)) {
	                            if (!includeOptgroup) {
	                                dataSearch.push(new Option(option));
	                            }
	                            else {
	                                optOptions.push(new Option(option));
	                            }
	                        }
	                    });
	                    if (optOptions.length > 0) {
	                        let optgroup = new Optgroup(dataObj);
	                        optgroup.options = optOptions;
	                        dataSearch.push(optgroup);
	                    }
	                }
	                if (dataObj instanceof Option) {
	                    if (!filter || filter(dataObj)) {
	                        dataSearch.push(new Option(dataObj));
	                    }
	                }
	            });
	            return dataSearch;
	        }
	        selectedOrderOptions(options) {
	            const newOrder = [];
	            this.selectedOrder.forEach((id) => {
	                const option = options.find((opt) => opt.id === id);
	                if (option) {
	                    newOrder.push(option);
	                }
	            });
	            options.forEach((option) => {
	                let isIn = false;
	                newOrder.forEach((selectedOption) => {
	                    if (option.id === selectedOption.id) {
	                        isIn = true;
	                        return;
	                    }
	                });
	                if (!isIn) {
	                    newOrder.push(option);
	                }
	            });
	            return newOrder;
	        }
	    }

	    class Render {
	        constructor(settings, classes, store, callbacks) {
	            this.store = store;
	            this.settings = settings;
	            this.classes = classes;
	            this.callbacks = callbacks;
	            this.main = this.mainDiv();
	            this.content = this.contentDiv();
	            this.updateClassStyles();
	            this.updateAriaAttributes();
	            if (this.settings.contentLocation) {
	                this.settings.contentLocation.appendChild(this.content.main);
	            }
	        }
	        enable() {
	            this.main.main.classList.remove(this.classes.disabled);
	            this.content.search.input.disabled = false;
	        }
	        disable() {
	            this.main.main.classList.add(this.classes.disabled);
	            this.content.search.input.disabled = true;
	        }
	        open() {
	            this.main.arrow.path.setAttribute('d', this.classes.arrowOpen);
	            this.main.main.classList.add(this.settings.openPosition === 'up' ? this.classes.openAbove : this.classes.openBelow);
	            this.main.main.setAttribute('aria-expanded', 'true');
	            this.moveContent();
	            const selectedOptions = this.store.getSelectedOptions();
	            if (selectedOptions.length) {
	                const selectedId = selectedOptions[selectedOptions.length - 1].id;
	                const selectedOption = this.content.list.querySelector('[data-id="' + selectedId + '"]');
	                if (selectedOption) {
	                    this.ensureElementInView(this.content.list, selectedOption);
	                }
	            }
	        }
	        close() {
	            this.main.main.classList.remove(this.classes.openAbove);
	            this.main.main.classList.remove(this.classes.openBelow);
	            this.main.main.setAttribute('aria-expanded', 'false');
	            this.content.main.classList.remove(this.classes.openAbove);
	            this.content.main.classList.remove(this.classes.openBelow);
	            this.main.arrow.path.setAttribute('d', this.classes.arrowClose);
	        }
	        updateClassStyles() {
	            this.main.main.className = '';
	            this.main.main.removeAttribute('style');
	            this.content.main.className = '';
	            this.content.main.removeAttribute('style');
	            this.main.main.classList.add(this.classes.main);
	            this.content.main.classList.add(this.classes.content);
	            if (this.settings.style !== '') {
	                this.main.main.style.cssText = this.settings.style;
	                this.content.main.style.cssText = this.settings.style;
	            }
	            if (this.settings.class.length) {
	                for (const c of this.settings.class) {
	                    if (c.trim() !== '') {
	                        this.main.main.classList.add(c.trim());
	                        this.content.main.classList.add(c.trim());
	                    }
	                }
	            }
	            if (this.settings.contentPosition === 'relative') {
	                this.content.main.classList.add('ss-' + this.settings.contentPosition);
	            }
	        }
	        updateAriaAttributes() {
	            this.main.main.role = 'combobox';
	            this.main.main.setAttribute('aria-haspopup', 'listbox');
	            this.main.main.setAttribute('aria-controls', this.content.main.id);
	            this.main.main.setAttribute('aria-expanded', 'false');
	            this.content.main.setAttribute('role', 'listbox');
	        }
	        mainDiv() {
	            var _a;
	            const main = document.createElement('div');
	            main.dataset.id = this.settings.id;
	            main.setAttribute('aria-label', this.settings.ariaLabel);
	            main.tabIndex = 0;
	            main.onkeydown = (e) => {
	                switch (e.key) {
	                    case 'ArrowUp':
	                    case 'ArrowDown':
	                        this.callbacks.open();
	                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');
	                        return false;
	                    case 'Tab':
	                        this.callbacks.close();
	                        return true;
	                    case 'Enter':
	                    case ' ':
	                        this.callbacks.open();
	                        const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);
	                        if (highlighted) {
	                            highlighted.click();
	                        }
	                        return false;
	                    case 'Escape':
	                        this.callbacks.close();
	                        return false;
	                }
	                return true;
	            };
	            main.onclick = (e) => {
	                if (this.settings.disabled) {
	                    return;
	                }
	                this.settings.isOpen ? this.callbacks.close() : this.callbacks.open();
	            };
	            const values = document.createElement('div');
	            values.classList.add(this.classes.values);
	            main.appendChild(values);
	            const deselect = document.createElement('div');
	            deselect.classList.add(this.classes.deselect);
	            const selectedOptions = (_a = this.store) === null || _a === void 0 ? void 0 : _a.getSelectedOptions();
	            if (!this.settings.allowDeselect || (this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0)) {
	                deselect.classList.add(this.classes.hide);
	            }
	            else {
	                deselect.classList.remove(this.classes.hide);
	            }
	            deselect.onclick = (e) => {
	                e.stopPropagation();
	                if (this.settings.disabled) {
	                    return;
	                }
	                let shouldDelete = true;
	                const before = this.store.getSelectedOptions();
	                const after = [];
	                if (this.callbacks.beforeChange) {
	                    shouldDelete = this.callbacks.beforeChange(after, before) === true;
	                }
	                if (shouldDelete) {
	                    if (this.settings.isMultiple) {
	                        this.callbacks.setSelected([], false);
	                        this.updateDeselectAll();
	                    }
	                    else {
	                        const firstOption = this.store.getFirstOption();
	                        const id = firstOption ? firstOption.id : '';
	                        this.callbacks.setSelected(id, false);
	                    }
	                    if (this.settings.closeOnSelect) {
	                        this.callbacks.close();
	                    }
	                    if (this.callbacks.afterChange) {
	                        this.callbacks.afterChange(this.store.getSelectedOptions());
	                    }
	                }
	            };
	            const deselectSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	            deselectSvg.setAttribute('viewBox', '0 0 100 100');
	            const deselectPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
	            deselectPath.setAttribute('d', this.classes.deselectPath);
	            deselectSvg.appendChild(deselectPath);
	            deselect.appendChild(deselectSvg);
	            main.appendChild(deselect);
	            const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	            arrow.classList.add(this.classes.arrow);
	            arrow.setAttribute('viewBox', '0 0 100 100');
	            const arrowPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
	            arrowPath.setAttribute('d', this.classes.arrowClose);
	            if (this.settings.alwaysOpen) {
	                arrow.classList.add(this.classes.hide);
	            }
	            arrow.appendChild(arrowPath);
	            main.appendChild(arrow);
	            return {
	                main: main,
	                values: values,
	                deselect: {
	                    main: deselect,
	                    svg: deselectSvg,
	                    path: deselectPath
	                },
	                arrow: {
	                    main: arrow,
	                    path: arrowPath
	                }
	            };
	        }
	        mainFocus(eventType) {
	            if (eventType !== 'click') {
	                this.main.main.focus({ preventScroll: true });
	            }
	        }
	        placeholder() {
	            const placeholderOption = this.store.filter((o) => o.placeholder, false);
	            let placeholderText = this.settings.placeholderText;
	            if (placeholderOption.length) {
	                if (placeholderOption[0].html !== '') {
	                    placeholderText = placeholderOption[0].html;
	                }
	                else if (placeholderOption[0].text !== '') {
	                    placeholderText = placeholderOption[0].text;
	                }
	            }
	            const placeholder = document.createElement('div');
	            placeholder.classList.add(this.classes.placeholder);
	            placeholder.innerHTML = placeholderText;
	            return placeholder;
	        }
	        renderValues() {
	            if (!this.settings.isMultiple) {
	                this.renderSingleValue();
	                return;
	            }
	            this.renderMultipleValues();
	            this.updateDeselectAll();
	        }
	        renderSingleValue() {
	            const selected = this.store.filter((o) => {
	                return o.selected && !o.placeholder;
	            }, false);
	            const selectedSingle = selected.length > 0 ? selected[0] : null;
	            if (!selectedSingle) {
	                this.main.values.innerHTML = this.placeholder().outerHTML;
	            }
	            else {
	                const singleValue = document.createElement('div');
	                singleValue.classList.add(this.classes.single);
	                if (selectedSingle.html) {
	                    singleValue.innerHTML = selectedSingle.html;
	                }
	                else {
	                    singleValue.innerText = selectedSingle.text;
	                }
	                this.main.values.innerHTML = singleValue.outerHTML;
	            }
	            if (!this.settings.allowDeselect || !selected.length) {
	                this.main.deselect.main.classList.add(this.classes.hide);
	            }
	            else {
	                this.main.deselect.main.classList.remove(this.classes.hide);
	            }
	        }
	        renderMultipleValues() {
	            let currentNodes = this.main.values.childNodes;
	            let selectedOptions = this.store.filter((opt) => {
	                return opt.selected && opt.display;
	            }, false);
	            if (selectedOptions.length === 0) {
	                this.main.values.innerHTML = this.placeholder().outerHTML;
	                return;
	            }
	            else {
	                const placeholder = this.main.values.querySelector('.' + this.classes.placeholder);
	                if (placeholder) {
	                    placeholder.remove();
	                }
	            }
	            if (selectedOptions.length > this.settings.maxValuesShown) {
	                const singleValue = document.createElement('div');
	                singleValue.classList.add(this.classes.max);
	                singleValue.textContent = this.settings.maxValuesMessage.replace('{number}', selectedOptions.length.toString());
	                this.main.values.innerHTML = singleValue.outerHTML;
	                return;
	            }
	            else {
	                const maxValuesMessage = this.main.values.querySelector('.' + this.classes.max);
	                if (maxValuesMessage) {
	                    maxValuesMessage.remove();
	                }
	            }
	            if (this.settings.keepOrder) {
	                selectedOptions = this.store.selectedOrderOptions(selectedOptions);
	            }
	            let removeNodes = [];
	            for (let i = 0; i < currentNodes.length; i++) {
	                const node = currentNodes[i];
	                const id = node.getAttribute('data-id');
	                if (id) {
	                    const found = selectedOptions.filter((opt) => {
	                        return opt.id === id;
	                    }, false);
	                    if (!found.length) {
	                        removeNodes.push(node);
	                    }
	                }
	            }
	            for (const n of removeNodes) {
	                n.classList.add(this.classes.valueOut);
	                setTimeout(() => {
	                    if (this.main.values.hasChildNodes() && this.main.values.contains(n)) {
	                        this.main.values.removeChild(n);
	                    }
	                }, 100);
	            }
	            currentNodes = this.main.values.childNodes;
	            for (let d = 0; d < selectedOptions.length; d++) {
	                let shouldAdd = true;
	                for (let i = 0; i < currentNodes.length; i++) {
	                    if (selectedOptions[d].id === String(currentNodes[i].dataset.id)) {
	                        shouldAdd = false;
	                    }
	                }
	                if (shouldAdd) {
	                    if (this.settings.keepOrder) {
	                        this.main.values.appendChild(this.multipleValue(selectedOptions[d]));
	                    }
	                    else {
	                        if (currentNodes.length === 0) {
	                            this.main.values.appendChild(this.multipleValue(selectedOptions[d]));
	                        }
	                        else if (d === 0) {
	                            this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d]);
	                        }
	                        else {
	                            currentNodes[d - 1].insertAdjacentElement('afterend', this.multipleValue(selectedOptions[d]));
	                        }
	                    }
	                }
	            }
	        }
	        multipleValue(option) {
	            const value = document.createElement('div');
	            value.classList.add(this.classes.value);
	            value.dataset.id = option.id;
	            const text = document.createElement('div');
	            text.classList.add(this.classes.valueText);
	            text.textContent = option.text;
	            value.appendChild(text);
	            if (!option.mandatory) {
	                const deleteDiv = document.createElement('div');
	                deleteDiv.classList.add(this.classes.valueDelete);
	                deleteDiv.onclick = (e) => {
	                    e.preventDefault();
	                    e.stopPropagation();
	                    if (this.settings.disabled) {
	                        return;
	                    }
	                    let shouldDelete = true;
	                    const before = this.store.getSelectedOptions();
	                    const after = before.filter((o) => {
	                        return o.selected && o.id !== option.id;
	                    }, true);
	                    if (this.settings.minSelected && after.length < this.settings.minSelected) {
	                        return;
	                    }
	                    if (this.callbacks.beforeChange) {
	                        shouldDelete = this.callbacks.beforeChange(after, before) === true;
	                    }
	                    if (shouldDelete) {
	                        let selectedIds = [];
	                        for (const o of after) {
	                            if (o instanceof Optgroup) {
	                                for (const c of o.options) {
	                                    selectedIds.push(c.id);
	                                }
	                            }
	                            if (o instanceof Option) {
	                                selectedIds.push(o.id);
	                            }
	                        }
	                        this.callbacks.setSelected(selectedIds, false);
	                        if (this.settings.closeOnSelect) {
	                            this.callbacks.close();
	                        }
	                        if (this.callbacks.afterChange) {
	                            this.callbacks.afterChange(after);
	                        }
	                        this.updateDeselectAll();
	                    }
	                };
	                const deleteSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	                deleteSvg.setAttribute('viewBox', '0 0 100 100');
	                const deletePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
	                deletePath.setAttribute('d', this.classes.optionDelete);
	                deleteSvg.appendChild(deletePath);
	                deleteDiv.appendChild(deleteSvg);
	                value.appendChild(deleteDiv);
	            }
	            return value;
	        }
	        contentDiv() {
	            const main = document.createElement('div');
	            main.dataset.id = this.settings.id;
	            const search = this.searchDiv();
	            main.appendChild(search.main);
	            const list = this.listDiv();
	            main.appendChild(list);
	            return {
	                main: main,
	                search: search,
	                list: list
	            };
	        }
	        moveContent() {
	            if (this.settings.contentPosition === 'relative') {
	                this.moveContentBelow();
	                return;
	            }
	            if (this.settings.openPosition === 'down') {
	                this.moveContentBelow();
	                return;
	            }
	            else if (this.settings.openPosition === 'up') {
	                this.moveContentAbove();
	                return;
	            }
	            if (this.putContent() === 'up') {
	                this.moveContentAbove();
	            }
	            else {
	                this.moveContentBelow();
	            }
	        }
	        searchDiv() {
	            const main = document.createElement('div');
	            const input = document.createElement('input');
	            const addable = document.createElement('div');
	            main.classList.add(this.classes.search);
	            const searchReturn = {
	                main,
	                input
	            };
	            if (!this.settings.showSearch) {
	                main.classList.add(this.classes.hide);
	                input.readOnly = true;
	            }
	            input.type = 'search';
	            input.placeholder = this.settings.searchPlaceholder;
	            input.tabIndex = -1;
	            input.setAttribute('aria-label', this.settings.searchPlaceholder);
	            input.setAttribute('autocapitalize', 'off');
	            input.setAttribute('autocomplete', 'off');
	            input.setAttribute('autocorrect', 'off');
	            input.oninput = debounce((e) => {
	                this.callbacks.search(e.target.value);
	            }, 100);
	            input.onkeydown = (e) => {
	                switch (e.key) {
	                    case 'ArrowUp':
	                    case 'ArrowDown':
	                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');
	                        return false;
	                    case 'Tab':
	                        this.callbacks.close();
	                        return true;
	                    case 'Escape':
	                        this.callbacks.close();
	                        return false;
	                    case ' ':
	                        const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);
	                        if (highlighted) {
	                            highlighted.click();
	                            return false;
	                        }
	                        return true;
	                    case 'Enter':
	                        if (this.callbacks.addable) {
	                            addable.click();
	                            return false;
	                        }
	                        else {
	                            const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);
	                            if (highlighted) {
	                                highlighted.click();
	                                return false;
	                            }
	                        }
	                        return true;
	                }
	                return true;
	            };
	            main.appendChild(input);
	            if (this.callbacks.addable) {
	                addable.classList.add(this.classes.addable);
	                const plus = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	                plus.setAttribute('viewBox', '0 0 100 100');
	                const plusPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
	                plusPath.setAttribute('d', this.classes.addablePath);
	                plus.appendChild(plusPath);
	                addable.appendChild(plus);
	                addable.onclick = (e) => {
	                    e.preventDefault();
	                    e.stopPropagation();
	                    if (!this.callbacks.addable) {
	                        return;
	                    }
	                    const inputValue = this.content.search.input.value.trim();
	                    if (inputValue === '') {
	                        this.content.search.input.focus();
	                        return;
	                    }
	                    const runFinish = (oo) => {
	                        let newOption = new Option(oo);
	                        this.callbacks.addOption(newOption);
	                        if (this.settings.isMultiple) {
	                            let ids = this.store.getSelected();
	                            ids.push(newOption.id);
	                            this.callbacks.setSelected(ids, true);
	                        }
	                        else {
	                            this.callbacks.setSelected([newOption.id], true);
	                        }
	                        this.callbacks.search('');
	                        if (this.settings.closeOnSelect) {
	                            setTimeout(() => {
	                                this.callbacks.close();
	                            }, 100);
	                        }
	                    };
	                    const addableValue = this.callbacks.addable(inputValue);
	                    if (addableValue === false || addableValue === undefined || addableValue === null) {
	                        return;
	                    }
	                    if (addableValue instanceof Promise) {
	                        addableValue.then((value) => {
	                            if (typeof value === 'string') {
	                                runFinish({
	                                    text: value,
	                                    value: value
	                                });
	                            }
	                            else if (addableValue instanceof Error) {
	                                this.renderError(addableValue.message);
	                            }
	                            else {
	                                runFinish(value);
	                            }
	                        });
	                    }
	                    else if (typeof addableValue === 'string') {
	                        runFinish({
	                            text: addableValue,
	                            value: addableValue
	                        });
	                    }
	                    else if (addableValue instanceof Error) {
	                        this.renderError(addableValue.message);
	                    }
	                    else {
	                        runFinish(addableValue);
	                    }
	                    return;
	                };
	                main.appendChild(addable);
	                searchReturn.addable = {
	                    main: addable,
	                    svg: plus,
	                    path: plusPath
	                };
	            }
	            return searchReturn;
	        }
	        searchFocus() {
	            this.content.search.input.focus();
	        }
	        getOptions(notPlaceholder = false, notDisabled = false, notHidden = false) {
	            let query = '.' + this.classes.option;
	            if (notPlaceholder) {
	                query += ':not(.' + this.classes.placeholder + ')';
	            }
	            if (notDisabled) {
	                query += ':not(.' + this.classes.disabled + ')';
	            }
	            if (notHidden) {
	                query += ':not(.' + this.classes.hide + ')';
	            }
	            return Array.from(this.content.list.querySelectorAll(query));
	        }
	        highlight(dir) {
	            const options = this.getOptions(true, true, true);
	            if (options.length === 0) {
	                return;
	            }
	            if (options.length === 1) {
	                if (!options[0].classList.contains(this.classes.highlighted)) {
	                    options[0].classList.add(this.classes.highlighted);
	                    return;
	                }
	            }
	            let highlighted = false;
	            for (const o of options) {
	                if (o.classList.contains(this.classes.highlighted)) {
	                    highlighted = true;
	                }
	            }
	            if (!highlighted) {
	                for (const o of options) {
	                    if (o.classList.contains(this.classes.selected)) {
	                        o.classList.add(this.classes.highlighted);
	                        break;
	                    }
	                }
	            }
	            for (let i = 0; i < options.length; i++) {
	                if (options[i].classList.contains(this.classes.highlighted)) {
	                    const prevOption = options[i];
	                    prevOption.classList.remove(this.classes.highlighted);
	                    const prevParent = prevOption.parentElement;
	                    if (prevParent && prevParent.classList.contains(this.classes.open)) {
	                        const optgroupLabel = prevParent.querySelector('.' + this.classes.optgroupLabel);
	                        if (optgroupLabel) {
	                            optgroupLabel.click();
	                        }
	                    }
	                    let selectOption = options[dir === 'down' ? (i + 1 < options.length ? i + 1 : 0) : i - 1 >= 0 ? i - 1 : options.length - 1];
	                    selectOption.classList.add(this.classes.highlighted);
	                    this.ensureElementInView(this.content.list, selectOption);
	                    const selectParent = selectOption.parentElement;
	                    if (selectParent && selectParent.classList.contains(this.classes.close)) {
	                        const optgroupLabel = selectParent.querySelector('.' + this.classes.optgroupLabel);
	                        if (optgroupLabel) {
	                            optgroupLabel.click();
	                        }
	                    }
	                    return;
	                }
	            }
	            options[dir === 'down' ? 0 : options.length - 1].classList.add(this.classes.highlighted);
	            this.ensureElementInView(this.content.list, options[dir === 'down' ? 0 : options.length - 1]);
	        }
	        listDiv() {
	            const options = document.createElement('div');
	            options.classList.add(this.classes.list);
	            return options;
	        }
	        renderError(error) {
	            this.content.list.innerHTML = '';
	            const errorDiv = document.createElement('div');
	            errorDiv.classList.add(this.classes.error);
	            errorDiv.textContent = error;
	            this.content.list.appendChild(errorDiv);
	        }
	        renderSearching() {
	            this.content.list.innerHTML = '';
	            const searchingDiv = document.createElement('div');
	            searchingDiv.classList.add(this.classes.searching);
	            searchingDiv.textContent = this.settings.searchingText;
	            this.content.list.appendChild(searchingDiv);
	        }
	        renderOptions(data) {
	            this.content.list.innerHTML = '';
	            if (data.length === 0) {
	                const noResults = document.createElement('div');
	                noResults.classList.add(this.classes.search);
	                if (this.callbacks.addable) {
	                    noResults.innerHTML = this.settings.addableText.replace('{value}', this.content.search.input.value);
	                }
	                else {
	                    noResults.innerHTML = this.settings.searchText;
	                }
	                this.content.list.appendChild(noResults);
	                return;
	            }
	            if (this.settings.allowDeselect && !this.settings.isMultiple) {
	                const placeholderOption = this.store.filter((o) => o.placeholder, false);
	                if (!placeholderOption.length) {
	                    this.store.addOption(new Option({
	                        text: '',
	                        value: '',
	                        selected: false,
	                        placeholder: true
	                    }), true);
	                }
	            }
	            for (const d of data) {
	                if (d instanceof Optgroup) {
	                    const optgroupEl = document.createElement('div');
	                    optgroupEl.classList.add(this.classes.optgroup);
	                    const optgroupLabel = document.createElement('div');
	                    optgroupLabel.classList.add(this.classes.optgroupLabel);
	                    optgroupEl.appendChild(optgroupLabel);
	                    const optgroupLabelText = document.createElement('div');
	                    optgroupLabelText.classList.add(this.classes.optgroupLabelText);
	                    optgroupLabelText.textContent = d.label;
	                    optgroupLabel.appendChild(optgroupLabelText);
	                    const optgroupActions = document.createElement('div');
	                    optgroupActions.classList.add(this.classes.optgroupActions);
	                    optgroupLabel.appendChild(optgroupActions);
	                    if (this.settings.isMultiple && d.selectAll) {
	                        const selectAll = document.createElement('div');
	                        selectAll.classList.add(this.classes.optgroupSelectAll);
	                        let allSelected = true;
	                        for (const o of d.options) {
	                            if (!o.selected) {
	                                allSelected = false;
	                                break;
	                            }
	                        }
	                        if (allSelected) {
	                            selectAll.classList.add(this.classes.selected);
	                        }
	                        const selectAllText = document.createElement('span');
	                        selectAllText.textContent = d.selectAllText;
	                        selectAll.appendChild(selectAllText);
	                        const selectAllSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	                        selectAllSvg.setAttribute('viewBox', '0 0 100 100');
	                        selectAll.appendChild(selectAllSvg);
	                        const selectAllBox = document.createElementNS('http://www.w3.org/2000/svg', 'path');
	                        selectAllBox.setAttribute('d', this.classes.optgroupSelectAllBox);
	                        selectAllSvg.appendChild(selectAllBox);
	                        const selectAllCheck = document.createElementNS('http://www.w3.org/2000/svg', 'path');
	                        selectAllCheck.setAttribute('d', this.classes.optgroupSelectAllCheck);
	                        selectAllSvg.appendChild(selectAllCheck);
	                        selectAll.addEventListener('click', (e) => {
	                            e.preventDefault();
	                            e.stopPropagation();
	                            const currentSelected = this.store.getSelected();
	                            if (allSelected) {
	                                const newSelected = currentSelected.filter((s) => {
	                                    for (const o of d.options) {
	                                        if (s === o.id) {
	                                            return false;
	                                        }
	                                    }
	                                    return true;
	                                });
	                                this.callbacks.setSelected(newSelected, true);
	                                return;
	                            }
	                            else {
	                                const newSelected = currentSelected.concat(d.options.map((o) => o.id));
	                                for (const o of d.options) {
	                                    if (!this.store.getOptionByID(o.id)) {
	                                        this.callbacks.addOption(o);
	                                    }
	                                }
	                                this.callbacks.setSelected(newSelected, true);
	                                return;
	                            }
	                        });
	                        optgroupActions.appendChild(selectAll);
	                    }
	                    if (d.closable !== 'off') {
	                        const optgroupClosable = document.createElement('div');
	                        optgroupClosable.classList.add(this.classes.optgroupClosable);
	                        const optgroupClosableSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	                        optgroupClosableSvg.setAttribute('viewBox', '0 0 100 100');
	                        optgroupClosableSvg.classList.add(this.classes.arrow);
	                        optgroupClosable.appendChild(optgroupClosableSvg);
	                        const optgroupClosableArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');
	                        optgroupClosableSvg.appendChild(optgroupClosableArrow);
	                        if (d.options.some((o) => o.selected) || this.content.search.input.value.trim() !== '') {
	                            optgroupClosable.classList.add(this.classes.open);
	                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);
	                        }
	                        else if (d.closable === 'open') {
	                            optgroupEl.classList.add(this.classes.open);
	                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);
	                        }
	                        else if (d.closable === 'close') {
	                            optgroupEl.classList.add(this.classes.close);
	                            optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);
	                        }
	                        optgroupLabel.addEventListener('click', (e) => {
	                            e.preventDefault();
	                            e.stopPropagation();
	                            if (optgroupEl.classList.contains(this.classes.close)) {
	                                optgroupEl.classList.remove(this.classes.close);
	                                optgroupEl.classList.add(this.classes.open);
	                                optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);
	                            }
	                            else {
	                                optgroupEl.classList.remove(this.classes.open);
	                                optgroupEl.classList.add(this.classes.close);
	                                optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);
	                            }
	                        });
	                        optgroupActions.appendChild(optgroupClosable);
	                    }
	                    optgroupEl.appendChild(optgroupLabel);
	                    for (const o of d.options) {
	                        optgroupEl.appendChild(this.option(o));
	                    }
	                    this.content.list.appendChild(optgroupEl);
	                }
	                if (d instanceof Option) {
	                    this.content.list.appendChild(this.option(d));
	                }
	            }
	        }
	        option(option) {
	            if (option.placeholder) {
	                const placeholder = document.createElement('div');
	                placeholder.classList.add(this.classes.option);
	                placeholder.classList.add(this.classes.hide);
	                return placeholder;
	            }
	            const optionEl = document.createElement('div');
	            optionEl.dataset.id = option.id;
	            optionEl.id = option.id;
	            optionEl.classList.add(this.classes.option);
	            optionEl.setAttribute('role', 'option');
	            if (option.class) {
	                option.class.split(' ').forEach((dataClass) => {
	                    optionEl.classList.add(dataClass);
	                });
	            }
	            if (option.style) {
	                optionEl.style.cssText = option.style;
	            }
	            if (this.settings.searchHighlight && this.content.search.input.value.trim() !== '') {
	                optionEl.innerHTML = this.highlightText(option.html !== '' ? option.html : option.text, this.content.search.input.value, this.classes.searchHighlighter);
	            }
	            else if (option.html !== '') {
	                optionEl.innerHTML = option.html;
	            }
	            else {
	                optionEl.textContent = option.text;
	            }
	            if (this.settings.showOptionTooltips && optionEl.textContent) {
	                optionEl.setAttribute('title', optionEl.textContent);
	            }
	            if (!option.display) {
	                optionEl.classList.add(this.classes.hide);
	            }
	            if (option.disabled) {
	                optionEl.classList.add(this.classes.disabled);
	            }
	            if (option.selected && this.settings.hideSelected) {
	                optionEl.classList.add(this.classes.hide);
	            }
	            if (option.selected) {
	                optionEl.classList.add(this.classes.selected);
	                optionEl.setAttribute('aria-selected', 'true');
	                this.main.main.setAttribute('aria-activedescendant', optionEl.id);
	            }
	            else {
	                optionEl.classList.remove(this.classes.selected);
	                optionEl.setAttribute('aria-selected', 'false');
	            }
	            optionEl.addEventListener('click', (e) => {
	                e.preventDefault();
	                e.stopPropagation();
	                const selectedOptions = this.store.getSelected();
	                const element = e.currentTarget;
	                const elementID = String(element.dataset.id);
	                if (option.disabled || (option.selected && !this.settings.allowDeselect)) {
	                    return;
	                }
	                if ((this.settings.isMultiple && this.settings.maxSelected <= selectedOptions.length && !option.selected) ||
	                    (this.settings.isMultiple && this.settings.minSelected >= selectedOptions.length && option.selected)) {
	                    return;
	                }
	                let shouldUpdate = false;
	                const before = this.store.getSelectedOptions();
	                let after = [];
	                if (this.settings.isMultiple) {
	                    if (option.selected) {
	                        after = before.filter((o) => o.id !== elementID);
	                    }
	                    else {
	                        after = before.concat(option);
	                    }
	                }
	                if (!this.settings.isMultiple) {
	                    if (option.selected) {
	                        after = [];
	                    }
	                    else {
	                        after = [option];
	                    }
	                }
	                if (!this.callbacks.beforeChange) {
	                    shouldUpdate = true;
	                }
	                if (this.callbacks.beforeChange) {
	                    if (this.callbacks.beforeChange(after, before) === false) {
	                        shouldUpdate = false;
	                    }
	                    else {
	                        shouldUpdate = true;
	                    }
	                }
	                if (shouldUpdate) {
	                    if (!this.store.getOptionByID(elementID)) {
	                        this.callbacks.addOption(option);
	                    }
	                    this.callbacks.setSelected(after.map((o) => o.id), false);
	                    if (this.settings.closeOnSelect) {
	                        this.callbacks.close();
	                    }
	                    if (this.callbacks.afterChange) {
	                        this.callbacks.afterChange(after);
	                    }
	                }
	            });
	            return optionEl;
	        }
	        destroy() {
	            this.main.main.remove();
	            this.content.main.remove();
	        }
	        highlightText(str, search, className) {
	            let completedString = str;
	            const regex = new RegExp('(?![^<]*>)(' + search.trim() + ')(?![^<]*>[^<>]*</)', 'i');
	            if (!str.match(regex)) {
	                return str;
	            }
	            const matchStartPosition = str.match(regex).index;
	            const matchEndPosition = matchStartPosition + str.match(regex)[0].toString().length;
	            const originalTextFoundByRegex = str.substring(matchStartPosition, matchEndPosition);
	            completedString = completedString.replace(regex, `<mark class="${className}">${originalTextFoundByRegex}</mark>`);
	            return completedString;
	        }
	        moveContentAbove() {
	            const mainHeight = this.main.main.offsetHeight;
	            const contentHeight = this.content.main.offsetHeight;
	            this.main.main.classList.remove(this.classes.openBelow);
	            this.main.main.classList.add(this.classes.openAbove);
	            this.content.main.classList.remove(this.classes.openBelow);
	            this.content.main.classList.add(this.classes.openAbove);
	            const containerRect = this.main.main.getBoundingClientRect();
	            this.content.main.style.margin = '-' + (mainHeight + contentHeight - 1) + 'px 0px 0px 0px';
	            this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';
	            this.content.main.style.left = containerRect.left + window.scrollX + 'px';
	            this.content.main.style.width = containerRect.width + 'px';
	        }
	        moveContentBelow() {
	            this.main.main.classList.remove(this.classes.openAbove);
	            this.main.main.classList.add(this.classes.openBelow);
	            this.content.main.classList.remove(this.classes.openAbove);
	            this.content.main.classList.add(this.classes.openBelow);
	            const containerRect = this.main.main.getBoundingClientRect();
	            this.content.main.style.margin = '-1px 0px 0px 0px';
	            if (this.settings.contentPosition !== 'relative') {
	                this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';
	                this.content.main.style.left = containerRect.left + window.scrollX + 'px';
	                this.content.main.style.width = containerRect.width + 'px';
	            }
	        }
	        ensureElementInView(container, element) {
	            const cTop = container.scrollTop + container.offsetTop;
	            const cBottom = cTop + container.clientHeight;
	            const eTop = element.offsetTop;
	            const eBottom = eTop + element.clientHeight;
	            if (eTop < cTop) {
	                container.scrollTop -= cTop - eTop;
	            }
	            else if (eBottom > cBottom) {
	                container.scrollTop += eBottom - cBottom;
	            }
	        }
	        putContent() {
	            const mainHeight = this.main.main.offsetHeight;
	            const mainRect = this.main.main.getBoundingClientRect();
	            const contentHeight = this.content.main.offsetHeight;
	            const spaceBelow = window.innerHeight - (mainRect.top + mainHeight);
	            if (spaceBelow <= contentHeight) {
	                if (mainRect.top > contentHeight) {
	                    return 'up';
	                }
	                else {
	                    return 'down';
	                }
	            }
	            return 'down';
	        }
	        updateDeselectAll() {
	            if (!this.store || !this.settings) {
	                return;
	            }
	            const selected = this.store.getSelectedOptions();
	            const hasSelectedItems = selected && selected.length > 0;
	            const isMultiple = this.settings.isMultiple;
	            const allowDeselect = this.settings.allowDeselect;
	            const deselectButton = this.main.deselect.main;
	            const hideClass = this.classes.hide;
	            if (allowDeselect && !(isMultiple && !hasSelectedItems)) {
	                deselectButton.classList.remove(hideClass);
	            }
	            else {
	                deselectButton.classList.add(hideClass);
	            }
	        }
	    }

	    class Select {
	        constructor(select) {
	            this.listen = false;
	            this.observer = null;
	            this.select = select;
	            this.valueChange = this.valueChange.bind(this);
	            this.select.addEventListener('change', this.valueChange, {
	                passive: true
	            });
	            this.observer = new MutationObserver(this.observeCall.bind(this));
	            this.changeListen(true);
	        }
	        enable() {
	            this.select.disabled = false;
	        }
	        disable() {
	            this.select.disabled = true;
	        }
	        hideUI() {
	            this.select.tabIndex = -1;
	            this.select.style.display = 'none';
	            this.select.setAttribute('aria-hidden', 'true');
	        }
	        showUI() {
	            this.select.removeAttribute('tabindex');
	            this.select.style.display = '';
	            this.select.removeAttribute('aria-hidden');
	        }
	        changeListen(listen) {
	            this.listen = listen;
	            if (listen) {
	                if (this.observer) {
	                    this.observer.observe(this.select, {
	                        subtree: true,
	                        childList: true,
	                        attributes: true
	                    });
	                }
	            }
	            if (!listen) {
	                if (this.observer) {
	                    this.observer.disconnect();
	                }
	            }
	        }
	        valueChange(ev) {
	            if (this.listen && this.onValueChange) {
	                this.onValueChange(this.getSelectedOptions());
	            }
	            return true;
	        }
	        observeCall(mutations) {
	            if (!this.listen) {
	                return;
	            }
	            let classChanged = false;
	            let disabledChanged = false;
	            let optgroupOptionChanged = false;
	            for (const m of mutations) {
	                if (m.target === this.select) {
	                    if (m.attributeName === 'disabled') {
	                        disabledChanged = true;
	                    }
	                    if (m.attributeName === 'class') {
	                        classChanged = true;
	                    }
	                    if (m.type === 'childList') {
	                        for (const n of m.addedNodes) {
	                            if (n.nodeName === 'OPTION' && n.value === this.select.value) {
	                                this.select.dispatchEvent(new Event('change'));
	                                break;
	                            }
	                        }
	                        optgroupOptionChanged = true;
	                    }
	                }
	                if (m.target.nodeName === 'OPTGROUP' || m.target.nodeName === 'OPTION') {
	                    optgroupOptionChanged = true;
	                }
	            }
	            if (classChanged && this.onClassChange) {
	                this.onClassChange(this.select.className.split(' '));
	            }
	            if (disabledChanged && this.onDisabledChange) {
	                this.changeListen(false);
	                this.onDisabledChange(this.select.disabled);
	                this.changeListen(true);
	            }
	            if (optgroupOptionChanged && this.onOptionsChange) {
	                this.changeListen(false);
	                this.onOptionsChange(this.getData());
	                this.changeListen(true);
	            }
	        }
	        getData() {
	            let data = [];
	            const nodes = this.select.childNodes;
	            for (const n of nodes) {
	                if (n.nodeName === 'OPTGROUP') {
	                    data.push(this.getDataFromOptgroup(n));
	                }
	                if (n.nodeName === 'OPTION') {
	                    data.push(this.getDataFromOption(n));
	                }
	            }
	            return data;
	        }
	        getDataFromOptgroup(optgroup) {
	            let data = {
	                id: optgroup.id,
	                label: optgroup.label,
	                selectAll: optgroup.dataset ? optgroup.dataset.selectall === 'true' : false,
	                selectAllText: optgroup.dataset ? optgroup.dataset.selectalltext : 'Select all',
	                closable: optgroup.dataset ? optgroup.dataset.closable : 'off',
	                options: []
	            };
	            const options = optgroup.childNodes;
	            for (const o of options) {
	                if (o.nodeName === 'OPTION') {
	                    data.options.push(this.getDataFromOption(o));
	                }
	            }
	            return data;
	        }
	        getDataFromOption(option) {
	            return {
	                id: option.id,
	                value: option.value,
	                text: option.text,
	                html: option.dataset && option.dataset.html ? option.dataset.html : '',
	                selected: option.selected,
	                display: option.style.display !== 'none',
	                disabled: option.disabled,
	                mandatory: option.dataset ? option.dataset.mandatory === 'true' : false,
	                placeholder: option.dataset.placeholder === 'true',
	                class: option.className,
	                style: option.style.cssText,
	                data: option.dataset
	            };
	        }
	        getSelectedOptions() {
	            let options = [];
	            const opts = this.select.childNodes;
	            for (const o of opts) {
	                if (o.nodeName === 'OPTGROUP') {
	                    const optgroupOptions = o.childNodes;
	                    for (const oo of optgroupOptions) {
	                        if (oo.nodeName === 'OPTION') {
	                            const option = oo;
	                            if (option.selected) {
	                                options.push(this.getDataFromOption(option));
	                            }
	                        }
	                    }
	                }
	                if (o.nodeName === 'OPTION') {
	                    const option = o;
	                    if (option.selected) {
	                        options.push(this.getDataFromOption(option));
	                    }
	                }
	            }
	            return options;
	        }
	        getSelectedValues() {
	            return this.getSelectedOptions().map((option) => option.value);
	        }
	        setSelected(ids) {
	            this.changeListen(false);
	            const options = this.select.childNodes;
	            for (const o of options) {
	                if (o.nodeName === 'OPTGROUP') {
	                    const optgroup = o;
	                    const optgroupOptions = optgroup.childNodes;
	                    for (const oo of optgroupOptions) {
	                        if (oo.nodeName === 'OPTION') {
	                            const option = oo;
	                            option.selected = ids.includes(option.id);
	                        }
	                    }
	                }
	                if (o.nodeName === 'OPTION') {
	                    const option = o;
	                    option.selected = ids.includes(option.id);
	                }
	            }
	            this.changeListen(true);
	        }
	        setSelectedByValue(values) {
	            this.changeListen(false);
	            const options = this.select.childNodes;
	            for (const o of options) {
	                if (o.nodeName === 'OPTGROUP') {
	                    const optgroup = o;
	                    const optgroupOptions = optgroup.childNodes;
	                    for (const oo of optgroupOptions) {
	                        if (oo.nodeName === 'OPTION') {
	                            const option = oo;
	                            option.selected = values.includes(option.value);
	                        }
	                    }
	                }
	                if (o.nodeName === 'OPTION') {
	                    const option = o;
	                    option.selected = values.includes(option.value);
	                }
	            }
	            this.changeListen(true);
	        }
	        updateSelect(id, style, classes) {
	            this.changeListen(false);
	            if (id) {
	                this.select.dataset.id = id;
	            }
	            if (style) {
	                this.select.style.cssText = style;
	            }
	            if (classes) {
	                this.select.className = '';
	                classes.forEach((c) => {
	                    if (c.trim() !== '') {
	                        this.select.classList.add(c.trim());
	                    }
	                });
	            }
	            this.changeListen(true);
	        }
	        updateOptions(data) {
	            this.changeListen(false);
	            this.select.innerHTML = '';
	            for (const d of data) {
	                if (d instanceof Optgroup) {
	                    this.select.appendChild(this.createOptgroup(d));
	                }
	                if (d instanceof Option) {
	                    this.select.appendChild(this.createOption(d));
	                }
	            }
	            this.select.dispatchEvent(new Event('change', { bubbles: true }));
	            this.changeListen(true);
	        }
	        createOptgroup(optgroup) {
	            const optgroupEl = document.createElement('optgroup');
	            optgroupEl.id = optgroup.id;
	            optgroupEl.label = optgroup.label;
	            if (optgroup.selectAll) {
	                optgroupEl.dataset.selectAll = 'true';
	            }
	            if (optgroup.closable !== 'off') {
	                optgroupEl.dataset.closable = optgroup.closable;
	            }
	            if (optgroup.options) {
	                for (const o of optgroup.options) {
	                    optgroupEl.appendChild(this.createOption(o));
	                }
	            }
	            return optgroupEl;
	        }
	        createOption(info) {
	            const optionEl = document.createElement('option');
	            optionEl.id = info.id;
	            optionEl.value = info.value;
	            optionEl.textContent = info.text;
	            if (info.html !== '') {
	                optionEl.setAttribute('data-html', info.html);
	            }
	            if (info.selected) {
	                optionEl.selected = info.selected;
	            }
	            if (info.disabled) {
	                optionEl.disabled = true;
	            }
	            if (!info.display) {
	                optionEl.style.display = 'none';
	            }
	            if (info.placeholder) {
	                optionEl.setAttribute('data-placeholder', 'true');
	            }
	            if (info.mandatory) {
	                optionEl.setAttribute('data-mandatory', 'true');
	            }
	            if (info.class) {
	                info.class.split(' ').forEach((optionClass) => {
	                    optionEl.classList.add(optionClass);
	                });
	            }
	            if (info.data && typeof info.data === 'object') {
	                Object.keys(info.data).forEach((key) => {
	                    optionEl.setAttribute('data-' + kebabCase(key), info.data[key]);
	                });
	            }
	            return optionEl;
	        }
	        destroy() {
	            this.changeListen(false);
	            this.select.removeEventListener('change', this.valueChange);
	            if (this.observer) {
	                this.observer.disconnect();
	                this.observer = null;
	            }
	            delete this.select.dataset.id;
	            this.showUI();
	        }
	    }

	    class Settings {
	        constructor(settings) {
	            this.id = '';
	            this.style = '';
	            this.class = [];
	            this.isMultiple = false;
	            this.isOpen = false;
	            this.isFullOpen = false;
	            this.intervalMove = null;
	            if (!settings) {
	                settings = {};
	            }
	            this.id = 'ss-' + generateID();
	            this.style = settings.style || '';
	            this.class = settings.class || [];
	            this.disabled = settings.disabled !== undefined ? settings.disabled : false;
	            this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false;
	            this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true;
	            this.focusSearch = settings.focusSearch !== undefined ? settings.focusSearch : true;
	            this.ariaLabel = settings.ariaLabel || 'Combobox';
	            this.searchPlaceholder = settings.searchPlaceholder || 'Search';
	            this.searchText = settings.searchText || 'No Results';
	            this.searchingText = settings.searchingText || 'Searching...';
	            this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false;
	            this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true;
	            this.contentLocation = settings.contentLocation || document.body;
	            this.contentPosition = settings.contentPosition || 'absolute';
	            this.openPosition = settings.openPosition || 'auto';
	            this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : 'Select Value';
	            this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false;
	            this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false;
	            this.keepOrder = settings.keepOrder !== undefined ? settings.keepOrder : false;
	            this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false;
	            this.minSelected = settings.minSelected || 0;
	            this.maxSelected = settings.maxSelected || 1000;
	            this.timeoutDelay = settings.timeoutDelay || 200;
	            this.maxValuesShown = settings.maxValuesShown || 20;
	            this.maxValuesMessage = settings.maxValuesMessage || '{number} selected';
	            this.addableText = settings.addableText || 'Press "Enter" to add {value}';
	        }
	    }

	    class SlimSelect {
	        constructor(config) {
	            var _a;
	            this.events = {
	                search: undefined,
	                searchFilter: (opt, search) => {
	                    return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1;
	                },
	                addable: undefined,
	                beforeChange: undefined,
	                afterChange: undefined,
	                beforeOpen: undefined,
	                afterOpen: undefined,
	                beforeClose: undefined,
	                afterClose: undefined
	            };
	            this.windowResize = debounce(() => {
	                if (!this.settings.isOpen && !this.settings.isFullOpen) {
	                    return;
	                }
	                this.render.moveContent();
	            });
	            this.windowScroll = debounce(() => {
	                if (!this.settings.isOpen && !this.settings.isFullOpen) {
	                    return;
	                }
	                this.render.moveContent();
	            });
	            this.documentClick = (e) => {
	                if (!this.settings.isOpen) {
	                    return;
	                }
	                if (e.target && !hasClassInTree(e.target, this.settings.id)) {
	                    this.close(e.type);
	                }
	            };
	            this.windowVisibilityChange = () => {
	                if (document.hidden) {
	                    this.close();
	                }
	            };
	            this.selectEl = (typeof config.select === 'string' ? document.querySelector(config.select) : config.select);
	            if (!this.selectEl) {
	                if (config.events && config.events.error) {
	                    config.events.error(new Error('Could not find select element'));
	                }
	                return;
	            }
	            if (this.selectEl.tagName !== 'SELECT') {
	                if (config.events && config.events.error) {
	                    config.events.error(new Error('Element isnt of type select'));
	                }
	                return;
	            }
	            if (this.selectEl.dataset.ssid) {
	                this.destroy();
	            }
	            this.settings = new Settings(config.settings);
	            this.cssClasses = new CssClasses(config.cssClasses);
	            const debounceEvents = ['afterChange', 'beforeOpen', 'afterOpen', 'beforeClose', 'afterClose'];
	            for (const key in config.events) {
	                if (!config.events.hasOwnProperty(key)) {
	                    continue;
	                }
	                if (debounceEvents.indexOf(key) !== -1) {
	                    this.events[key] = debounce(config.events[key], 100);
	                }
	                else {
	                    this.events[key] = config.events[key];
	                }
	            }
	            this.settings.disabled = ((_a = config.settings) === null || _a === void 0 ? void 0 : _a.disabled) ? config.settings.disabled : this.selectEl.disabled;
	            this.settings.isMultiple = this.selectEl.multiple;
	            this.settings.style = this.selectEl.style.cssText;
	            this.settings.class = this.selectEl.className.split(' ');
	            this.select = new Select(this.selectEl);
	            this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class);
	            this.select.hideUI();
	            this.select.onValueChange = (options) => {
	                this.setSelected(options.map((option) => option.id));
	            };
	            this.select.onClassChange = (classes) => {
	                this.settings.class = classes;
	                this.render.updateClassStyles();
	            };
	            this.select.onDisabledChange = (disabled) => {
	                if (disabled) {
	                    this.disable();
	                }
	                else {
	                    this.enable();
	                }
	            };
	            this.select.onOptionsChange = (data) => {
	                this.setData(data);
	            };
	            this.store = new Store(this.settings.isMultiple ? 'multiple' : 'single', config.data ? config.data : this.select.getData());
	            if (config.data) {
	                this.select.updateOptions(this.store.getData());
	            }
	            const renderCallbacks = {
	                open: this.open.bind(this),
	                close: this.close.bind(this),
	                addable: this.events.addable ? this.events.addable : undefined,
	                setSelected: this.setSelected.bind(this),
	                addOption: this.addOption.bind(this),
	                search: this.search.bind(this),
	                beforeChange: this.events.beforeChange,
	                afterChange: this.events.afterChange
	            };
	            this.render = new Render(this.settings, this.cssClasses, this.store, renderCallbacks);
	            this.render.renderValues();
	            this.render.renderOptions(this.store.getData());
	            const selectAriaLabel = this.selectEl.getAttribute('aria-label');
	            const selectAriaLabelledBy = this.selectEl.getAttribute('aria-labelledby');
	            if (selectAriaLabel) {
	                this.render.main.main.setAttribute('aria-label', selectAriaLabel);
	            }
	            else if (selectAriaLabelledBy) {
	                this.render.main.main.setAttribute('aria-labelledby', selectAriaLabelledBy);
	            }
	            if (this.selectEl.parentNode) {
	                this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling);
	            }
	            window.addEventListener('resize', this.windowResize, false);
	            if (this.settings.openPosition === 'auto') {
	                window.addEventListener('scroll', this.windowScroll, false);
	            }
	            document.addEventListener('visibilitychange', this.windowVisibilityChange);
	            if (this.settings.disabled) {
	                this.disable();
	            }
	            if (this.settings.alwaysOpen) {
	                this.open();
	            }
	            this.selectEl.slim = this;
	        }
	        enable() {
	            this.settings.disabled = false;
	            this.select.enable();
	            this.render.enable();
	        }
	        disable() {
	            this.settings.disabled = true;
	            this.select.disable();
	            this.render.disable();
	        }
	        getData() {
	            return this.store.getData();
	        }
	        setData(data) {
	            const selected = this.store.getSelected();
	            const err = this.store.validateDataArray(data);
	            if (err) {
	                if (this.events.error) {
	                    this.events.error(err);
	                }
	                return;
	            }
	            this.store.setData(data);
	            const dataClean = this.store.getData();
	            this.select.updateOptions(dataClean);
	            this.render.renderValues();
	            this.render.renderOptions(dataClean);
	            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {
	                this.events.afterChange(this.store.getSelectedOptions());
	            }
	        }
	        getSelected() {
	            let options = this.store.getSelectedOptions();
	            if (this.settings.keepOrder) {
	                options = this.store.selectedOrderOptions(options);
	            }
	            return options.map((option) => option.value);
	        }
	        setSelected(values, runAfterChange = true) {
	            const selected = this.store.getSelected();
	            const options = this.store.getDataOptions();
	            values = Array.isArray(values) ? values : [values];
	            const ids = [];
	            for (const value of values) {
	                if (options.find((option) => option.id == value)) {
	                    ids.push(value);
	                    continue;
	                }
	                for (const option of options.filter((option) => option.value == value)) {
	                    ids.push(option.id);
	                }
	            }
	            this.store.setSelectedBy('id', ids);
	            const data = this.store.getData();
	            this.select.updateOptions(data);
	            this.render.renderValues();
	            if (this.render.content.search.input.value !== '') {
	                this.search(this.render.content.search.input.value);
	            }
	            else {
	                this.render.renderOptions(data);
	            }
	            if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) {
	                this.events.afterChange(this.store.getSelectedOptions());
	            }
	        }
	        addOption(option) {
	            const selected = this.store.getSelected();
	            if (!this.store.getDataOptions().some((o) => { var _a; return o.value === ((_a = option.value) !== null && _a !== void 0 ? _a : option.text); })) {
	                this.store.addOption(option);
	            }
	            const data = this.store.getData();
	            this.select.updateOptions(data);
	            this.render.renderValues();
	            this.render.renderOptions(data);
	            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {
	                this.events.afterChange(this.store.getSelectedOptions());
	            }
	        }
	        open() {
	            if (this.settings.disabled || this.settings.isOpen) {
	                return;
	            }
	            if (this.events.beforeOpen) {
	                this.events.beforeOpen();
	            }
	            this.render.open();
	            if (this.settings.showSearch && this.settings.focusSearch) {
	                this.render.searchFocus();
	            }
	            this.settings.isOpen = true;
	            setTimeout(() => {
	                if (this.events.afterOpen) {
	                    this.events.afterOpen();
	                }
	                if (this.settings.isOpen) {
	                    this.settings.isFullOpen = true;
	                }
	                document.addEventListener('click', this.documentClick);
	            }, this.settings.timeoutDelay);
	            if (this.settings.contentPosition === 'absolute') {
	                if (this.settings.intervalMove) {
	                    clearInterval(this.settings.intervalMove);
	                }
	                this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500);
	            }
	        }
	        close(eventType = null) {
	            if (!this.settings.isOpen || this.settings.alwaysOpen) {
	                return;
	            }
	            if (this.events.beforeClose) {
	                this.events.beforeClose();
	            }
	            this.render.close();
	            if (this.render.content.search.input.value !== '') {
	                this.search('');
	            }
	            this.render.mainFocus(eventType);
	            this.settings.isOpen = false;
	            this.settings.isFullOpen = false;
	            setTimeout(() => {
	                if (this.events.afterClose) {
	                    this.events.afterClose();
	                }
	                document.removeEventListener('click', this.documentClick);
	            }, this.settings.timeoutDelay);
	            if (this.settings.intervalMove) {
	                clearInterval(this.settings.intervalMove);
	            }
	        }
	        search(value) {
	            if (this.render.content.search.input.value !== value) {
	                this.render.content.search.input.value = value;
	            }
	            if (!this.events.search) {
	                this.render.renderOptions(value === '' ? this.store.getData() : this.store.search(value, this.events.searchFilter));
	                return;
	            }
	            this.render.renderSearching();
	            const searchResp = this.events.search(value, this.store.getSelectedOptions());
	            if (searchResp instanceof Promise) {
	                searchResp
	                    .then((data) => {
	                    this.render.renderOptions(this.store.partialToFullData(data));
	                })
	                    .catch((err) => {
	                    this.render.renderError(typeof err === 'string' ? err : err.message);
	                });
	                return;
	            }
	            else if (Array.isArray(searchResp)) {
	                this.render.renderOptions(this.store.partialToFullData(searchResp));
	            }
	            else {
	                this.render.renderError('Search event must return a promise or an array of data');
	            }
	        }
	        destroy() {
	            document.removeEventListener('click', this.documentClick);
	            window.removeEventListener('resize', this.windowResize, false);
	            if (this.settings.openPosition === 'auto') {
	                window.removeEventListener('scroll', this.windowScroll, false);
	            }
	            document.removeEventListener('visibilitychange', this.windowVisibilityChange);
	            this.store.setData([]);
	            this.render.destroy();
	            this.select.destroy();
	        }
	    }

	    return SlimSelect;

	})); 
} (slimselect));

var slimselectExports = slimselect.exports;
var SlimSelect = /*@__PURE__*/getDefaultExportFromCjs(slimselectExports);

const countries = [{
  text: "Выберите страну",
  value: "",
  html: "Выберите страну"
}, {
  text: "Австралия",
  value: "Австралия",
  html: `<span class="ss-flag australia">Австралия</span>`
}, {
  text: "Австрия",
  value: "Австрия",
  html: `<span class="ss-flag austria">Австрия</span>`
}, {
  text: "Бельгия",
  value: "Бельгия",
  html: `<span class="ss-flag belgium">Бельгия</span>`
}, {
  text: "Болгария",
  value: "Болгария",
  html: `<span class="ss-flag bulgaria">Болгария</span>`
}, {
  text: "Великобритания",
  value: "Великобритания",
  html: `<span class="ss-flag united-kingdom">Великобритания</span>`
}, {
  text: "Венгрия",
  value: "Венгрия",
  html: `<span class="ss-flag hungary">Венгрия</span>`
}, {
  text: "Вьетнам",
  value: "Вьетнам",
  html: `<span class="ss-flag vietnam">Вьетнам</span>`
}, {
  text: "Германия",
  value: "Германия",
  html: `<span class="ss-flag germany">Германия</span>`
}, {
  text: "Греция",
  value: "Греция",
  html: `<span class="ss-flag greece">Греция</span>`
}, {
  text: "Дания",
  value: "Дания",
  html: `<span class="ss-flag denmark">Дания</span>`
}, {
  text: "Индия",
  value: "Индия",
  html: `<span class="ss-flag india">Индия</span>`
}, {
  text: "Индонезия",
  value: "Индонезия",
  html: `<span class="ss-flag indonesia">Индонезия</span>`
}, {
  text: "Ирландия",
  value: "Ирландия",
  html: `<span class="ss-flag ireland">Ирландия</span>`
}, {
  text: "Исландия",
  value: "Исландия",
  html: `<span class="ss-flag iceland">Исландия</span>`
}, {
  text: "Испания",
  value: "Испания",
  html: `<span class="ss-flag spain">Испания</span>`
}, {
  text: "Италия",
  value: "Италия",
  html: `<span class="ss-flag italy">Италия</span>`
}, {
  text: "Канада",
  value: "Канада",
  html: `<span class="ss-flag canada">Канада</span>`
}, {
  text: "Кипр",
  value: "Кипр",
  html: `<span class="ss-flag cyprus">Кипр</span>`
}, {
  text: "Китай",
  value: "Китай",
  html: `<span class="ss-flag china">Китай</span>`
}, {
  text: "Латвия",
  value: "Латвия",
  html: `<span class="ss-flag latvia">Латвия</span>`
}, {
  text: "Литва",
  value: "Литва",
  html: `<span class="ss-flag lithuania">Литва</span>`
}, {
  text: "Мальта",
  value: "Мальта",
  html: `<span class="ss-flag malta">Мальта</span>`
}, {
  text: "Мексика",
  value: "Мексика",
  html: `<span class="ss-flag mexico">Мексика</span>`
}, {
  text: "Нидерланды",
  value: "Нидерланды",
  html: `<span class="ss-flag netherlands">Нидерланды</span>`
}, {
  text: "Новая Зеландия",
  value: "Новая Зеландия",
  html: `<span class="ss-flag new-zealand">Новая Зеландия</span>`
}, {
  text: "Норвегия",
  value: "Норвегия",
  html: `<span class="ss-flag norway">Норвегия</span>`
}, {
  text: "ОАЭ",
  value: "ОАЭ",
  html: `<span class="ss-flag uae">ОАЭ</span>`
}, {
  text: "Польша",
  value: "Польша",
  html: `<span class="ss-flag poland">Польша</span>`
}, {
  text: "Португалия",
  value: "Португалия",
  html: `<span class="ss-flag portugal">Португалия</span>`
}, {
  text: "Румыния",
  value: "Румыния",
  html: `<span class="ss-flag romania">Румыния</span>`
}, {
  text: "Сингапур",
  value: "Сингапур",
  html: `<span class="ss-flag singapore">Сингапур</span>`
}, {
  text: "Словакия",
  value: "Словакия",
  html: `<span class="ss-flag slovakia">Словакия</span>`
}, {
  text: "Словения",
  value: "Словения",
  html: `<span class="ss-flag slovenia">Словения</span>`
}, {
  text: "США",
  value: "США",
  html: `<span class="ss-flag usa">США</span>`
}, {
  text: "Тайланд",
  value: "Тайланд",
  html: `<span class="ss-flag thailand">Тайланд</span>`
}, {
  text: "Франция",
  value: "Франция",
  html: `<span class="ss-flag france">Франция</span>`
}, {
  text: "Финляндия",
  value: "Финляндия",
  html: `<span class="ss-flag finland">Финляндия</span>`
}, {
  text: "Хорватия",
  value: "Хорватия",
  html: `<span class="ss-flag croatia">Хорватия</span>`
}, {
  text: "Чехия",
  value: "Чехия",
  html: `<span class="ss-flag czech">Чехия</span>`
}, {
  text: "Швейцария",
  value: "Швейцария",
  html: `<span class="ss-flag switzerland">Швейцария</span>`
}, {
  text: "Швеция",
  value: "Швеция",
  html: `<span class="ss-flag sweden">Швеция</span>`
}, {
  text: "Шри-Ланка",
  value: "Шри-Ланка",
  html: `<span class="ss-flag sri-lanka">Шри-Ланка</span>`
}, {
  text: "Эстония",
  value: "Эстония",
  html: `<span class="ss-flag estonia">Эстония</span>`
}, {
  text: "Южная Корея",
  value: "Южная Корея",
  html: `<span class="ss-flag south-korea">Южная Корея</span>`
}, {
  text: "Япония",
  value: "Япония",
  html: `<span class="ss-flag japan">Япония</span>`
}];
const currentYear = new Date().getFullYear();
function getDaysInMonth(month) {
  return new Date(currentYear, month, 0).getDate();
}
ready(function () {
  const requestForm = document.querySelector("#requestForm");
  if (requestForm) {
    const actionUrl = requestForm.getAttribute("action");
    const selectedCountry = requestForm.getAttribute("data-selected-country");
    const formValidate = new JustValidate(requestForm, validationFormConfig);
    const countrySelect = requestForm.querySelector("[data-country-select]");
    const visaTypeSelect = requestForm.querySelector("select[name='visaType']");
    const monthSelect = requestForm.querySelector("#month");
    const daysSelectElem = requestForm.querySelector("#days");
    const formButtonForward = requestForm.querySelector("[data-action='forward']");
    let currentStep = 1;
    let isDaySelectInit = false;
    let daysSelect;
    formValidate.addField("select[name='country']", requiredFieldValidationRules, selectFieldValidationConfig).addField("select[name='visaType']", requiredFieldValidationRules, selectFieldValidationConfig).addField("input[name='phone']", phoneFieldValidationRules).addField("input[name='name']", textFieldValidationRules).addField("input[name='email']", emailFieldValidationRules).onSuccess(() => {
      onValidationSuccess(requestForm, actionUrl, () => {
        requestForm.dataset.steps = (++currentStep).toString();
      }, () => {
        alert("Ошибка! Попробуйте повторить отправку формы позже.");
      });
    });
    function createDaysSelect(month) {
      if (isDaySelectInit) {
        daysSelect.destroy();
      }
      let daysInMonth = getDaysInMonth(month);
      let daysArray = [];
      if (month === "2" && (currentYear % 4 === 0 || (currentYear + 1) % 4 === 0)) {
        daysInMonth = 29;
      }
      for (let i = 1; i <= daysInMonth; i++) {
        daysArray.push({
          text: i,
          value: i
        });
      }
      daysSelect = new SlimSelect({
        select: daysSelectElem,
        data: daysArray,
        settings: {
          showSearch: false
        }
      });
      isDaySelectInit = true;
    }
    createDaysSelect(monthSelect.value);
    monthSelect.addEventListener("change", () => {
      createDaysSelect(monthSelect.value);
    });
    visaTypeSelect.addEventListener("change", () => {
      formValidate.revalidateField("select[name='visaType']");
    });
    const countrySlimSelect = new SlimSelect({
      select: countrySelect,
      data: countries,
      settings: {
        showSearch: false
      },
      events: {
        afterChange: () => {
          formValidate.revalidateField("select[name='country']");
        }
      }
    });
    if (selectedCountry) countrySlimSelect.setSelected(selectedCountry);
    isSelectHasValue(countrySelect);
    isSelectHasValue(daysSelectElem);
    if (formButtonForward) {
      formButtonForward.addEventListener("click", function (e) {
        let isCountryFieldValid;
        let isVisaTypeFieldValid;
        formValidate.revalidateField("select[name='country']").then(isValid => {
          isCountryFieldValid = isValid;
        });
        formValidate.revalidateField("select[name='visaType']").then(isValid => {
          isVisaTypeFieldValid = isValid;
          if (isCountryFieldValid && isVisaTypeFieldValid) {
            e.preventDefault();
            requestForm.dataset.steps = (++currentStep).toString();
          }
        });
      });
    }
  }
});

ready(function () {
  const selects = document.querySelectorAll("[data-slim-select]");
  if (selects.length !== 0) {
    for (let select of selects) {
      new SlimSelect({
        select: select,
        settings: {
          showSearch: false
        }
      });
      isSelectHasValue(select);

      // if (select.value.length !== 0) select.classList.add("select--has-value");
      // select.addEventListener("change", function () {
      //   this.value.length !== 0 ? this.classList.add("select--has-value") : this.classList.remove("select--has-value");
      // });
    }
  }
});

var e=new Map;function t(t){var o=e.get(t);o&&o.destroy();}function o(t){var o=e.get(t);o&&o.update();}var r=null;"undefined"==typeof window?((r=function(e){return e}).destroy=function(e){return e},r.update=function(e){return e}):((r=function(t,o){return t&&Array.prototype.forEach.call(t.length?t:[t],function(t){return function(t){if(t&&t.nodeName&&"TEXTAREA"===t.nodeName&&!e.has(t)){var o,r=null,n=window.getComputedStyle(t),i=(o=t.value,function(){a({testForHeightReduction:""===o||!t.value.startsWith(o),restoreTextAlign:null}),o=t.value;}),l=function(o){t.removeEventListener("autosize:destroy",l),t.removeEventListener("autosize:update",s),t.removeEventListener("input",i),window.removeEventListener("resize",s),Object.keys(o).forEach(function(e){return t.style[e]=o[e]}),e.delete(t);}.bind(t,{height:t.style.height,resize:t.style.resize,textAlign:t.style.textAlign,overflowY:t.style.overflowY,overflowX:t.style.overflowX,wordWrap:t.style.wordWrap});t.addEventListener("autosize:destroy",l),t.addEventListener("autosize:update",s),t.addEventListener("input",i),window.addEventListener("resize",s),t.style.overflowX="hidden",t.style.wordWrap="break-word",e.set(t,{destroy:l,update:s}),s();}function a(e){var o,i,l=e.restoreTextAlign,s=void 0===l?null:l,d=e.testForHeightReduction,u=void 0===d||d,c=n.overflowY;if(0!==t.scrollHeight&&("vertical"===n.resize?t.style.resize="none":"both"===n.resize&&(t.style.resize="horizontal"),u&&(o=function(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push([e.parentNode,e.parentNode.scrollTop]),e=e.parentNode;return function(){return t.forEach(function(e){var t=e[0],o=e[1];t.style.scrollBehavior="auto",t.scrollTop=o,t.style.scrollBehavior=null;})}}(t),t.style.height=""),i="content-box"===n.boxSizing?t.scrollHeight-(parseFloat(n.paddingTop)+parseFloat(n.paddingBottom)):t.scrollHeight+parseFloat(n.borderTopWidth)+parseFloat(n.borderBottomWidth),"none"!==n.maxHeight&&i>parseFloat(n.maxHeight)?("hidden"===n.overflowY&&(t.style.overflow="scroll"),i=parseFloat(n.maxHeight)):"hidden"!==n.overflowY&&(t.style.overflow="hidden"),t.style.height=i+"px",s&&(t.style.textAlign=s),o&&o(),r!==i&&(t.dispatchEvent(new Event("autosize:resized",{bubbles:!0})),r=i),c!==n.overflow&&!s)){var v=n.textAlign;"hidden"===n.overflow&&(t.style.textAlign="start"===v?"end":"start"),a({restoreTextAlign:v,testForHeightReduction:!0});}}function s(){a({testForHeightReduction:!0,restoreTextAlign:null});}}(t)}),t}).destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],t),e},r.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],o),e});var n=r;

ready(function () {
  // textarea
  const textareas = document.querySelectorAll(".textarea");
  if (textareas.length !== 0) {
    for (let textarea of textareas) {
      if (textarea.value.length !== 0) {
        n(textarea);
        textarea.classList.add("textarea--has-value");
      }
      textarea.addEventListener("input", function () {
        this.value.length !== 0 ? this.classList.add("textarea--has-value") : this.classList.remove("textarea--has-value");
      });
    }
  }
  n(textareas);
});

function getScrollSize () {
  const outer = document.createElement("div");
  const inner = document.createElement("div");
  outer.style.overflow = "scroll";
  outer.classList.add("scrollbar");
  outer.appendChild(inner);
  document.body.appendChild(outer);
  const scrollbarSize = outer.offsetWidth - inner.offsetWidth;
  document.body.removeChild(outer);
  return scrollbarSize;
}

var getScrollSize$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: getScrollSize
});
//# sourceMappingURL=bundle.js.map

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvdXRpbHMvZG9jdW1lbnRSZWFkeS5qcyIsIi4uLy4uL3NyYy9qcy9zY3JpcHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vanVzdC12YWxpZGF0ZUA0LjMuMC9ub2RlX21vZHVsZXMvanVzdC12YWxpZGF0ZS9kaXN0L2p1c3QtdmFsaWRhdGUuZXMuanMiLCIuLi8uLi9zcmMvanMvY29tbW9uL2Zvcm1WYXJpYWJsZXMuanMiLCIuLi8uLi9zcmMvYmxvY2tzL2Zvcm0vZm9ybS5qcyIsIi4uLy4uL3NyYy9ibG9ja3MvZm9ybS1zZXQvZm9ybS1zZXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaW1hc2tANy42LjEvbm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9jb3JlL3V0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vY29yZS9hY3Rpb24tZGV0YWlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL2NvcmUvaG9sZGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL2ZhY3RvcnkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaW1hc2tANy42LjEvbm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9jb250cm9scy9tYXNrLWVsZW1lbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaW1hc2tANy42LjEvbm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9jb250cm9scy9odG1sLW1hc2stZWxlbWVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL2NvbnRyb2xzL2h0bWwtaW5wdXQtbWFzay1lbGVtZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vY29udHJvbHMvaHRtbC1jb250ZW50ZWRpdGFibGUtbWFzay1lbGVtZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vY29udHJvbHMvaW5wdXQtaGlzdG9yeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL2NvbnRyb2xzL2lucHV0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaW1hc2tANy42LjEvbm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9tYXNrZWQvYmFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9wYXR0ZXJuL2NodW5rLXRhaWwtZGV0YWlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9wYXR0ZXJuL2N1cnNvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9wYXR0ZXJuL2ZpeGVkLWRlZmluaXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaW1hc2tANy42LjEvbm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9tYXNrZWQvcGF0dGVybi9pbnB1dC1kZWZpbml0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3JlZ2V4cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9wYXR0ZXJuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL2RhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaW1hc2tANy42LjEvbm9kZV9tb2R1bGVzL2ltYXNrL2VzbS9tYXNrZWQvZHluYW1pYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9lbnVtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL2Z1bmN0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL21hc2tlZC9waXBlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYXNrQDcuNi4xL25vZGVfbW9kdWxlcy9pbWFzay9lc20vbWFza2VkL3JlcGVhdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFza0A3LjYuMS9ub2RlX21vZHVsZXMvaW1hc2svZXNtL2luZGV4LmpzIiwiLi4vLi4vc3JjL2Jsb2Nrcy9pbnB1dC9pbnB1dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zbGltLXNlbGVjdEAyLjkuMi9ub2RlX21vZHVsZXMvc2xpbS1zZWxlY3QvZGlzdC9zbGltc2VsZWN0LmpzIiwiLi4vLi4vc3JjL2Jsb2Nrcy9yZXF1ZXN0LWZvcm0vcmVxdWVzdC1mb3JtLmpzIiwiLi4vLi4vc3JjL2Jsb2Nrcy9zZWxlY3Qvc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2F1dG9zaXplQDYuMC4xL25vZGVfbW9kdWxlcy9hdXRvc2l6ZS9kaXN0L2F1dG9zaXplLmVzbS5qcyIsIi4uLy4uL3NyYy9ibG9ja3MvdGV4dGFyZWEvdGV4dGFyZWEuanMiLCIuLi8uLi9zcmMvanMvdXRpbHMvZ2V0U2Nyb2xsU2l6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWR5KGZuKSB7XG4gIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCA/IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiA6IGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gICAgZm4oKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmbik7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCIuL3V0aWxzL2J1bmRsZUNvbmZpZy5qc1wiO1xuaW1wb3J0IHsgcmVhZHkgfSBmcm9tIFwiLi91dGlscy9kb2N1bWVudFJlYWR5LmpzXCI7XG5cbnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgaWYgKGNvbmZpZy5nZXRTY3JvbGxTaXplKSB7XG4gICAgLy8gQWRkaW5nIGEgY3VzdG9tIHByb3BlcnR5IHdpdGggYSBzeXN0ZW0gc2Nyb2xsIHdpZHRoXG4gICAgaW1wb3J0KFwiLi91dGlscy9nZXRTY3JvbGxTaXplLmpzXCIpLnRoZW4oKHsgZGVmYXVsdDogZ2V0U2Nyb2xsU2l6ZSB9KSA9PiB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWNzcy1zY3JvbGwtc2l6ZVwiLCBgJHtnZXRTY3JvbGxTaXplKCl9cHhgKTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5jb25zdCBFTUFJTF9SRUdFWFAgPSAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuY29uc3QgSU5URUdFUl9SRUdFWFAgPSAvXi0/WzAtOV1cXGQqJC87XG5jb25zdCBQQVNTV09SRF9SRUdFWFAgPSAvXig/PS4qW0EtWmEtel0pKD89LipcXGQpLns4LH0kLztcbmNvbnN0IFNUUk9OR19QQVNTV09SRF9SRUdFWFAgPSAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZCkoPz0uKltAJCElKj8mXSlbQS1aYS16XFxkQCQhJSo/Jl17OCx9JC87XG5jb25zdCBpc0VtcHR5ID0gKHZhbHVlKSA9PiB7XG4gIGxldCBuZXdWYWwgPSB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIG5ld1ZhbCA9IHZhbHVlLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gIW5ld1ZhbDtcbn07XG5jb25zdCBpc0VtYWlsID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG59O1xuY29uc3QgaXNMZW5ndGhNb3JlVGhhbk1heCA9ICh2YWx1ZSwgbGVuKSA9PiB7XG4gIHJldHVybiB2YWx1ZS5sZW5ndGggPiBsZW47XG59O1xuY29uc3QgaXNMZW5ndGhMZXNzVGhhbk1pbiA9ICh2YWx1ZSwgbGVuKSA9PiB7XG4gIHJldHVybiB2YWx1ZS5sZW5ndGggPCBsZW47XG59O1xuY29uc3QgaXNOdW1iZXIgPSAodmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gIWlzTmFOKCt2YWx1ZSkgJiYgIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG5jb25zdCBpc0ludGVnZXIgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIElOVEVHRVJfUkVHRVhQLnRlc3QodmFsdWUpO1xufTtcbmNvbnN0IGlzUGFzc3dvcmQgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIFBBU1NXT1JEX1JFR0VYUC50ZXN0KHZhbHVlKTtcbn07XG5jb25zdCBpc1N0cm9uZ1Bhc3N3b3JkID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiBTVFJPTkdfUEFTU1dPUkRfUkVHRVhQLnRlc3QodmFsdWUpO1xufTtcbmNvbnN0IGlzTnVtYmVyTW9yZVRoYW5NYXggPSAodmFsdWUsIGxlbikgPT4ge1xuICByZXR1cm4gdmFsdWUgPiBsZW47XG59O1xuY29uc3QgaXNOdW1iZXJMZXNzVGhhbk1pbiA9ICh2YWx1ZSwgbGVuKSA9PiB7XG4gIHJldHVybiB2YWx1ZSA8IGxlbjtcbn07XG5jb25zdCBpc0ludmFsaWRPckVtcHR5U3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgfHwgdmFsdWUgPT09IFwiXCI7XG59O1xudmFyIFJ1bGVzID0gLyogQF9fUFVSRV9fICovICgoUnVsZXMyKSA9PiB7XG4gIFJ1bGVzMltcIlJlcXVpcmVkXCJdID0gXCJyZXF1aXJlZFwiO1xuICBSdWxlczJbXCJFbWFpbFwiXSA9IFwiZW1haWxcIjtcbiAgUnVsZXMyW1wiTWluTGVuZ3RoXCJdID0gXCJtaW5MZW5ndGhcIjtcbiAgUnVsZXMyW1wiTWF4TGVuZ3RoXCJdID0gXCJtYXhMZW5ndGhcIjtcbiAgUnVsZXMyW1wiUGFzc3dvcmRcIl0gPSBcInBhc3N3b3JkXCI7XG4gIFJ1bGVzMltcIk51bWJlclwiXSA9IFwibnVtYmVyXCI7XG4gIFJ1bGVzMltcIkludGVnZXJcIl0gPSBcImludGVnZXJcIjtcbiAgUnVsZXMyW1wiTWF4TnVtYmVyXCJdID0gXCJtYXhOdW1iZXJcIjtcbiAgUnVsZXMyW1wiTWluTnVtYmVyXCJdID0gXCJtaW5OdW1iZXJcIjtcbiAgUnVsZXMyW1wiU3Ryb25nUGFzc3dvcmRcIl0gPSBcInN0cm9uZ1Bhc3N3b3JkXCI7XG4gIFJ1bGVzMltcIkN1c3RvbVJlZ2V4cFwiXSA9IFwiY3VzdG9tUmVnZXhwXCI7XG4gIFJ1bGVzMltcIk1pbkZpbGVzQ291bnRcIl0gPSBcIm1pbkZpbGVzQ291bnRcIjtcbiAgUnVsZXMyW1wiTWF4RmlsZXNDb3VudFwiXSA9IFwibWF4RmlsZXNDb3VudFwiO1xuICBSdWxlczJbXCJGaWxlc1wiXSA9IFwiZmlsZXNcIjtcbiAgcmV0dXJuIFJ1bGVzMjtcbn0pKFJ1bGVzIHx8IHt9KTtcbnZhciBHcm91cFJ1bGVzID0gLyogQF9fUFVSRV9fICovICgoR3JvdXBSdWxlczIpID0+IHtcbiAgR3JvdXBSdWxlczJbXCJSZXF1aXJlZFwiXSA9IFwicmVxdWlyZWRcIjtcbiAgcmV0dXJuIEdyb3VwUnVsZXMyO1xufSkoR3JvdXBSdWxlcyB8fCB7fSk7XG52YXIgQ3VzdG9tU3R5bGVUYWdJZHMgPSAvKiBAX19QVVJFX18gKi8gKChDdXN0b21TdHlsZVRhZ0lkczIpID0+IHtcbiAgQ3VzdG9tU3R5bGVUYWdJZHMyW1wiTGFiZWxcIl0gPSBcImxhYmVsXCI7XG4gIEN1c3RvbVN0eWxlVGFnSWRzMltcIkxhYmVsQXJyb3dcIl0gPSBcImxhYmVsQXJyb3dcIjtcbiAgcmV0dXJuIEN1c3RvbVN0eWxlVGFnSWRzMjtcbn0pKEN1c3RvbVN0eWxlVGFnSWRzIHx8IHt9KTtcbmNvbnN0IGRlZmF1bHREaWN0aW9uYXJ5ID0gW1xuICB7XG4gICAga2V5OiBSdWxlcy5SZXF1aXJlZCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJUaGUgZmllbGQgaXMgcmVxdWlyZWRcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuRW1haWwsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiRW1haWwgaGFzIGludmFsaWQgZm9ybWF0XCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBrZXk6IFJ1bGVzLk1heExlbmd0aCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJUaGUgZmllbGQgbXVzdCBjb250YWluIGEgbWF4aW11bSBvZiA6dmFsdWUgY2hhcmFjdGVyc1wiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5NaW5MZW5ndGgsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiVGhlIGZpZWxkIG11c3QgY29udGFpbiBhIG1pbmltdW0gb2YgOnZhbHVlIGNoYXJhY3RlcnNcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuUGFzc3dvcmQsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiUGFzc3dvcmQgbXVzdCBjb250YWluIG1pbmltdW0gZWlnaHQgY2hhcmFjdGVycywgYXQgbGVhc3Qgb25lIGxldHRlciBhbmQgb25lIG51bWJlclwiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5TdHJvbmdQYXNzd29yZCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJQYXNzd29yZCBzaG91bGQgY29udGFpbiBtaW5pbXVtIGVpZ2h0IGNoYXJhY3RlcnMsIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBvbmUgbG93ZXJjYXNlIGxldHRlciwgb25lIG51bWJlciBhbmQgb25lIHNwZWNpYWwgY2hhcmFjdGVyXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBrZXk6IFJ1bGVzLk51bWJlcixcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJWYWx1ZSBzaG91bGQgYmUgYSBudW1iZXJcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuTWF4TnVtYmVyLFxuICAgIGRpY3Q6IHtcbiAgICAgIGVuOiBcIk51bWJlciBzaG91bGQgYmUgbGVzcyBvciBlcXVhbCB0aGFuIDp2YWx1ZVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5NaW5OdW1iZXIsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiTnVtYmVyIHNob3VsZCBiZSBtb3JlIG9yIGVxdWFsIHRoYW4gOnZhbHVlXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBrZXk6IFJ1bGVzLk1pbkZpbGVzQ291bnQsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiRmlsZXMgY291bnQgc2hvdWxkIGJlIG1vcmUgb3IgZXF1YWwgdGhhbiA6dmFsdWVcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuTWF4RmlsZXNDb3VudCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJGaWxlcyBjb3VudCBzaG91bGQgYmUgbGVzcyBvciBlcXVhbCB0aGFuIDp2YWx1ZVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5GaWxlcyxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJVcGxvYWRlZCBmaWxlcyBoYXZlIG9uZSBvciBzZXZlcmFsIGludmFsaWQgcHJvcGVydGllcyAoZXh0ZW5zaW9uL3NpemUvdHlwZSBldGMpLlwiXG4gICAgfVxuICB9XG5dO1xuY29uc3QgREVGQVVMVF9FUlJPUl9GSUVMRF9NRVNTQUdFID0gXCJWYWx1ZSBpcyBpbmNvcnJlY3RcIjtcbmNvbnN0IGlzUHJvbWlzZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIgJiYgdmFsICE9PSBudWxsICYmIFwidGhlblwiIGluIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGdldE5vZGVQYXJlbnRzID0gKGVsKSA9PiB7XG4gIGxldCBlbGVtID0gZWw7XG4gIGNvbnN0IGVscyA9IFtdO1xuICB3aGlsZSAoZWxlbSkge1xuICAgIGVscy51bnNoaWZ0KGVsZW0pO1xuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIGVscztcbn07XG5jb25zdCBnZXRDbG9zZXN0UGFyZW50ID0gKGdyb3VwcywgcGFyZW50cykgPT4ge1xuICBjb25zdCByZXZlcnNlZFBhcmVudHMgPSBbLi4ucGFyZW50c10ucmV2ZXJzZSgpO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmV2ZXJzZWRQYXJlbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcmV2ZXJzZWRQYXJlbnRzW2ldO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGdyb3Vwcykge1xuICAgICAgY29uc3QgZ3JvdXAgPSBncm91cHNba2V5XTtcbiAgICAgIGlmIChncm91cC5ncm91cEVsZW0gPT09IHBhcmVudCkge1xuICAgICAgICByZXR1cm4gW2tleSwgZ3JvdXBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBnZXRDbGFzc0xpc3QgPSAoY2xhc3NMaXN0KSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNsYXNzTGlzdCkpIHtcbiAgICByZXR1cm4gY2xhc3NMaXN0LmZpbHRlcigoY2xzKSA9PiBjbHMubGVuZ3RoID4gMCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjbGFzc0xpc3QgPT09IFwic3RyaW5nXCIgJiYgY2xhc3NMaXN0LnRyaW0oKSkge1xuICAgIHJldHVybiBbLi4uY2xhc3NMaXN0LnNwbGl0KFwiIFwiKS5maWx0ZXIoKGNscykgPT4gY2xzLmxlbmd0aCA+IDApXTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuY29uc3QgaXNFbGVtZW50ID0gKGVsZW1lbnQpID0+IHtcbiAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQ7XG59O1xuY29uc3QgZXJyb3JMYWJlbENzcyA9IGAuanVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFtkYXRhLXRvb2x0aXA9dHJ1ZV17cG9zaXRpb246Zml4ZWQ7cGFkZGluZzo0cHggOHB4O2JhY2tncm91bmQ6IzQyM2YzZjtjb2xvcjojZmZmO3doaXRlLXNwYWNlOm5vd3JhcDt6LWluZGV4OjEwO2JvcmRlci1yYWRpdXM6NHB4O3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01cHgpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXTpiZWZvcmV7Y29udGVudDonJzt3aWR0aDowO2hlaWdodDowO2JvcmRlci1sZWZ0OnNvbGlkIDVweCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6c29saWQgNXB4IHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206c29saWQgNXB4ICM0MjNmM2Y7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDozO2Rpc3BsYXk6YmxvY2s7Ym90dG9tOi01cHg7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpO2xlZnQ6Y2FsYyg1MCUgLSA1cHgpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXVtkYXRhLWRpcmVjdGlvbj1sZWZ0XXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNXB4KX0uanVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFtkYXRhLXRvb2x0aXA9dHJ1ZV1bZGF0YS1kaXJlY3Rpb249bGVmdF06YmVmb3Jle3JpZ2h0Oi03cHg7Ym90dG9tOmF1dG87bGVmdDphdXRvO3RvcDpjYWxjKDUwJSAtIDJweCk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdW2RhdGEtZGlyZWN0aW9uPXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXVtkYXRhLWRpcmVjdGlvbj1yaWdodF06YmVmb3Jle3JpZ2h0OmF1dG87Ym90dG9tOmF1dG87bGVmdDotN3B4O3RvcDpjYWxjKDUwJSAtIDJweCk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXVtkYXRhLWRpcmVjdGlvbj1ib3R0b21de3RyYW5zZm9ybTp0cmFuc2xhdGVZKDVweCl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdW2RhdGEtZGlyZWN0aW9uPWJvdHRvbV06YmVmb3Jle3JpZ2h0OmF1dG87Ym90dG9tOmF1dG87bGVmdDpjYWxjKDUwJSAtIDVweCk7dG9wOi01cHg7dHJhbnNmb3JtOnJvdGF0ZSgwKX1gO1xuY29uc3QgVE9PTFRJUF9BUlJPV19IRUlHSFQgPSA1O1xuY29uc3QgZGVmYXVsdEdsb2JhbENvbmZpZyA9IHtcbiAgZXJyb3JGaWVsZFN0eWxlOiB7XG4gICAgY29sb3I6IFwiI2I4MTExMVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgI0I4MTExMVwiXG4gIH0sXG4gIGVycm9yRmllbGRDc3NDbGFzczogXCJqdXN0LXZhbGlkYXRlLWVycm9yLWZpZWxkXCIsXG4gIHN1Y2Nlc3NGaWVsZENzc0NsYXNzOiBcImp1c3QtdmFsaWRhdGUtc3VjY2Vzcy1maWVsZFwiLFxuICBlcnJvckxhYmVsU3R5bGU6IHtcbiAgICBjb2xvcjogXCIjYjgxMTExXCJcbiAgfSxcbiAgZXJyb3JMYWJlbENzc0NsYXNzOiBcImp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxcIixcbiAgc3VjY2Vzc0xhYmVsQ3NzQ2xhc3M6IFwianVzdC12YWxpZGF0ZS1zdWNjZXNzLWxhYmVsXCIsXG4gIGZvY3VzSW52YWxpZEZpZWxkOiB0cnVlLFxuICBsb2NrRm9ybTogdHJ1ZSxcbiAgdGVzdGluZ01vZGU6IGZhbHNlLFxuICB2YWxpZGF0ZUJlZm9yZVN1Ym1pdHRpbmc6IGZhbHNlLFxuICBzdWJtaXRGb3JtQXV0b21hdGljYWxseTogZmFsc2Vcbn07XG5jbGFzcyBKdXN0VmFsaWRhdGUge1xuICBjb25zdHJ1Y3Rvcihmb3JtLCBnbG9iYWxDb25maWcsIGRpY3RMb2NhbGUpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZm9ybVwiLCBudWxsKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZmllbGRzXCIsIHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZ3JvdXBGaWVsZHNcIiwge30pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJlcnJvcnNcIiwge30pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc1ZhbGlkXCIsIGZhbHNlKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaXNTdWJtaXR0ZWRcIiwgZmFsc2UpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJnbG9iYWxDb25maWdcIiwgZGVmYXVsdEdsb2JhbENvbmZpZyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImVycm9yTGFiZWxzXCIsIHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic3VjY2Vzc0xhYmVsc1wiLCB7fSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImV2ZW50TGlzdGVuZXJzXCIsIFtdKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZGljdExvY2FsZVwiLCBkZWZhdWx0RGljdGlvbmFyeSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImN1cnJlbnRMb2NhbGVcIiwgXCJlblwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiY3VzdG9tU3R5bGVUYWdzXCIsIHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25TdWNjZXNzQ2FsbGJhY2tcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uRmFpbENhbGxiYWNrXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvblZhbGlkYXRlQ2FsbGJhY2tcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInRvb2x0aXBzXCIsIFtdKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibGFzdFNjcm9sbFBvc2l0aW9uXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc1Njcm9sbFRpY2tcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZpZWxkSWRzXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJnZXRLZXlCeUZpZWxkU2VsZWN0b3JcIiwgKGZpZWxkKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5maWVsZElkcy5nZXQoZmllbGQpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJnZXRGaWVsZFNlbGVjdG9yQnlLZXlcIiwgKGtleSkgPT4ge1xuICAgICAgZm9yIChjb25zdCBbZmllbGRTZWxlY3Rvciwga10gb2YgdGhpcy5maWVsZElkcykge1xuICAgICAgICBpZiAoa2V5ID09PSBrKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkU2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImdldENvbXBhdGlibGVGaWVsZHNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZmllbGRzID0ge307XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGxldCBuZXdLZXkgPSBrZXk7XG4gICAgICAgIGNvbnN0IGZpZWxkU2VsZWN0b3IgPSB0aGlzLmdldEZpZWxkU2VsZWN0b3JCeUtleShrZXkpO1xuICAgICAgICBpZiAodHlwZW9mIGZpZWxkU2VsZWN0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBuZXdLZXkgPSBmaWVsZFNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGZpZWxkc1tuZXdLZXldID0geyAuLi50aGlzLmZpZWxkc1trZXldIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInNldEtleUJ5RmllbGRTZWxlY3RvclwiLCAoZmllbGQpID0+IHtcbiAgICAgIGlmICh0aGlzLmZpZWxkSWRzLmhhcyhmaWVsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRJZHMuZ2V0KGZpZWxkKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGtleSA9IFN0cmluZyh0aGlzLmZpZWxkSWRzLnNpemUgKyAxKTtcbiAgICAgIHRoaXMuZmllbGRJZHMuc2V0KGZpZWxkLCBrZXkpO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVmcmVzaEFsbFRvb2x0aXBzXCIsICgpID0+IHtcbiAgICAgIHRoaXMudG9vbHRpcHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpdGVtLnJlZnJlc2goKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYW5kbGVEb2N1bWVudFNjcm9sbFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmxhc3RTY3JvbGxQb3NpdGlvbiA9IHdpbmRvdy5zY3JvbGxZO1xuICAgICAgaWYgKCF0aGlzLmlzU2Nyb2xsVGljaykge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlZnJlc2hBbGxUb29sdGlwcygpO1xuICAgICAgICAgIHRoaXMuaXNTY3JvbGxUaWNrID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmlzU2Nyb2xsVGljayA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvcm1TdWJtaXRIYW5kbGVyXCIsIChldikgPT4ge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuaXNTdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy52YWxpZGF0ZUhhbmRsZXIoZXYpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYW5kbGVGaWVsZENoYW5nZVwiLCAodGFyZ2V0KSA9PiB7XG4gICAgICBsZXQgZm91bmRLZXk7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmZpZWxkcykge1xuICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRzW2tleV07XG4gICAgICAgIGlmIChmaWVsZC5lbGVtID09PSB0YXJnZXQpIHtcbiAgICAgICAgICBmb3VuZEtleSA9IGtleTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFmb3VuZEtleSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmZpZWxkc1tmb3VuZEtleV0udG91Y2hlZCA9IHRydWU7XG4gICAgICB0aGlzLnZhbGlkYXRlRmllbGQoZm91bmRLZXksIHRydWUpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYW5kbGVHcm91cENoYW5nZVwiLCAodGFyZ2V0KSA9PiB7XG4gICAgICBsZXQgZm91bmRLZXk7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmdyb3VwRmllbGRzKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5ncm91cEZpZWxkc1trZXldO1xuICAgICAgICBpZiAoZ3JvdXAuZWxlbXMuZmluZCgoZWxlbSkgPT4gZWxlbSA9PT0gdGFyZ2V0KSkge1xuICAgICAgICAgIGZvdW5kS2V5ID0ga2V5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZvdW5kS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ3JvdXBGaWVsZHNbZm91bmRLZXldLnRvdWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy52YWxpZGF0ZUdyb3VwKGZvdW5kS2V5LCB0cnVlKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGFuZGxlckNoYW5nZVwiLCAoZXYpID0+IHtcbiAgICAgIGlmICghZXYudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGFuZGxlRmllbGRDaGFuZ2UoZXYudGFyZ2V0KTtcbiAgICAgIHRoaXMuaGFuZGxlR3JvdXBDaGFuZ2UoZXYudGFyZ2V0KTtcbiAgICAgIHRoaXMucmVuZGVyRXJyb3JzKCk7XG4gICAgfSk7XG4gICAgdGhpcy5pbml0aWFsaXplKGZvcm0sIGdsb2JhbENvbmZpZywgZGljdExvY2FsZSk7XG4gIH1cbiAgaW5pdGlhbGl6ZShmb3JtLCBnbG9iYWxDb25maWcsIGRpY3RMb2NhbGUpIHtcbiAgICB0aGlzLmZvcm0gPSBudWxsO1xuICAgIHRoaXMuZXJyb3JzID0ge307XG4gICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgdGhpcy5pc1N1Ym1pdHRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZ2xvYmFsQ29uZmlnID0gZGVmYXVsdEdsb2JhbENvbmZpZztcbiAgICB0aGlzLmVycm9yTGFiZWxzID0ge307XG4gICAgdGhpcy5zdWNjZXNzTGFiZWxzID0ge307XG4gICAgdGhpcy5ldmVudExpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuY3VzdG9tU3R5bGVUYWdzID0ge307XG4gICAgdGhpcy50b29sdGlwcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudExvY2FsZSA9IFwiZW5cIjtcbiAgICBpZiAodHlwZW9mIGZvcm0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGZvcm0pO1xuICAgICAgaWYgKCFlbGVtKSB7XG4gICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgIGBGb3JtIHdpdGggJHtmb3JtfSBzZWxlY3RvciBub3QgZm91bmQhIFBsZWFzZSBjaGVjayB0aGUgZm9ybSBzZWxlY3RvcmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0Rm9ybShlbGVtKTtcbiAgICB9IGVsc2UgaWYgKGZvcm0gaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuc2V0Rm9ybShmb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBGb3JtIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3Igb3IgYSBET00gZWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmdsb2JhbENvbmZpZyA9IHsgLi4uZGVmYXVsdEdsb2JhbENvbmZpZywgLi4uZ2xvYmFsQ29uZmlnIH07XG4gICAgaWYgKGRpY3RMb2NhbGUpIHtcbiAgICAgIHRoaXMuZGljdExvY2FsZSA9IFsuLi5kaWN0TG9jYWxlLCAuLi5kZWZhdWx0RGljdGlvbmFyeV07XG4gICAgfVxuICAgIGlmICh0aGlzLmlzVG9vbHRpcCgpKSB7XG4gICAgICBjb25zdCBzdHlsZVRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgIHN0eWxlVGFnLnRleHRDb250ZW50ID0gZXJyb3JMYWJlbENzcztcbiAgICAgIHRoaXMuY3VzdG9tU3R5bGVUYWdzW0N1c3RvbVN0eWxlVGFnSWRzLkxhYmVsXSA9IGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVUYWcpO1xuICAgICAgdGhpcy5hZGRMaXN0ZW5lcihcInNjcm9sbFwiLCBkb2N1bWVudCwgdGhpcy5oYW5kbGVEb2N1bWVudFNjcm9sbCk7XG4gICAgfVxuICB9XG4gIGdldExvY2FsaXNlZFN0cmluZyhydWxlLCBydWxlVmFsdWUsIGN1c3RvbU1zZykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBzZWFyY2ggPSBjdXN0b21Nc2cgIT0gbnVsbCA/IGN1c3RvbU1zZyA6IHJ1bGU7XG4gICAgbGV0IGxvY2FsaXNlZFN0ciA9IChfYSA9IHRoaXMuZGljdExvY2FsZS5maW5kKChpdGVtKSA9PiBpdGVtLmtleSA9PT0gc2VhcmNoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmRpY3RbdGhpcy5jdXJyZW50TG9jYWxlXTtcbiAgICBpZiAoIWxvY2FsaXNlZFN0cikge1xuICAgICAgaWYgKGN1c3RvbU1zZykge1xuICAgICAgICBsb2NhbGlzZWRTdHIgPSBjdXN0b21Nc2c7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsb2NhbGlzZWRTdHIgJiYgcnVsZVZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHN3aXRjaCAocnVsZSkge1xuICAgICAgICBjYXNlIFJ1bGVzLk1heExlbmd0aDpcbiAgICAgICAgY2FzZSBSdWxlcy5NaW5MZW5ndGg6XG4gICAgICAgIGNhc2UgUnVsZXMuTWF4TnVtYmVyOlxuICAgICAgICBjYXNlIFJ1bGVzLk1pbk51bWJlcjpcbiAgICAgICAgY2FzZSBSdWxlcy5NaW5GaWxlc0NvdW50OlxuICAgICAgICBjYXNlIFJ1bGVzLk1heEZpbGVzQ291bnQ6XG4gICAgICAgICAgbG9jYWxpc2VkU3RyID0gbG9jYWxpc2VkU3RyLnJlcGxhY2UoXCI6dmFsdWVcIiwgU3RyaW5nKHJ1bGVWYWx1ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxpc2VkU3RyIHx8IGN1c3RvbU1zZyB8fCBERUZBVUxUX0VSUk9SX0ZJRUxEX01FU1NBR0U7XG4gIH1cbiAgZ2V0RmllbGRFcnJvck1lc3NhZ2UoZmllbGRSdWxlLCBlbGVtKSB7XG4gICAgY29uc3QgbXNnID0gdHlwZW9mIGZpZWxkUnVsZS5lcnJvck1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIiA/IGZpZWxkUnVsZS5lcnJvck1lc3NhZ2UodGhpcy5nZXRFbGVtVmFsdWUoZWxlbSksIHRoaXMuZmllbGRzKSA6IGZpZWxkUnVsZS5lcnJvck1lc3NhZ2U7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TG9jYWxpc2VkU3RyaW5nKGZpZWxkUnVsZS5ydWxlLCBmaWVsZFJ1bGUudmFsdWUsIG1zZyk7XG4gIH1cbiAgZ2V0RmllbGRTdWNjZXNzTWVzc2FnZShzdWNjZXNzTWVzc2FnZSwgZWxlbSkge1xuICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBzdWNjZXNzTWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiID8gc3VjY2Vzc01lc3NhZ2UodGhpcy5nZXRFbGVtVmFsdWUoZWxlbSksIHRoaXMuZmllbGRzKSA6IHN1Y2Nlc3NNZXNzYWdlO1xuICAgIHJldHVybiB0aGlzLmdldExvY2FsaXNlZFN0cmluZyh2b2lkIDAsIHZvaWQgMCwgbXNnKTtcbiAgfVxuICBnZXRHcm91cEVycm9yTWVzc2FnZShncm91cFJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRMb2NhbGlzZWRTdHJpbmcoXG4gICAgICBncm91cFJ1bGUucnVsZSxcbiAgICAgIHZvaWQgMCxcbiAgICAgIGdyb3VwUnVsZS5lcnJvck1lc3NhZ2VcbiAgICApO1xuICB9XG4gIGdldEdyb3VwU3VjY2Vzc01lc3NhZ2UoZ3JvdXBSdWxlKSB7XG4gICAgaWYgKCFncm91cFJ1bGUuc3VjY2Vzc01lc3NhZ2UpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldExvY2FsaXNlZFN0cmluZyhcbiAgICAgIHZvaWQgMCxcbiAgICAgIHZvaWQgMCxcbiAgICAgIGdyb3VwUnVsZS5zdWNjZXNzTWVzc2FnZVxuICAgICk7XG4gIH1cbiAgc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKSB7XG4gICAgdGhpcy5maWVsZHNba2V5XS5pc1ZhbGlkID0gZmFsc2U7XG4gICAgdGhpcy5maWVsZHNba2V5XS5lcnJvck1lc3NhZ2UgPSB0aGlzLmdldEZpZWxkRXJyb3JNZXNzYWdlKFxuICAgICAgZmllbGRSdWxlLFxuICAgICAgdGhpcy5maWVsZHNba2V5XS5lbGVtXG4gICAgKTtcbiAgfVxuICBzZXRGaWVsZFZhbGlkKGtleSwgc3VjY2Vzc01lc3NhZ2UpIHtcbiAgICB0aGlzLmZpZWxkc1trZXldLmlzVmFsaWQgPSB0cnVlO1xuICAgIGlmIChzdWNjZXNzTWVzc2FnZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLmZpZWxkc1trZXldLnN1Y2Nlc3NNZXNzYWdlID0gdGhpcy5nZXRGaWVsZFN1Y2Nlc3NNZXNzYWdlKFxuICAgICAgICBzdWNjZXNzTWVzc2FnZSxcbiAgICAgICAgdGhpcy5maWVsZHNba2V5XS5lbGVtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBzZXRHcm91cEludmFsaWQoa2V5LCBncm91cFJ1bGUpIHtcbiAgICB0aGlzLmdyb3VwRmllbGRzW2tleV0uaXNWYWxpZCA9IGZhbHNlO1xuICAgIHRoaXMuZ3JvdXBGaWVsZHNba2V5XS5lcnJvck1lc3NhZ2UgPSB0aGlzLmdldEdyb3VwRXJyb3JNZXNzYWdlKGdyb3VwUnVsZSk7XG4gIH1cbiAgc2V0R3JvdXBWYWxpZChrZXksIGdyb3VwUnVsZSkge1xuICAgIHRoaXMuZ3JvdXBGaWVsZHNba2V5XS5pc1ZhbGlkID0gdHJ1ZTtcbiAgICB0aGlzLmdyb3VwRmllbGRzW2tleV0uc3VjY2Vzc01lc3NhZ2UgPSB0aGlzLmdldEdyb3VwU3VjY2Vzc01lc3NhZ2UoZ3JvdXBSdWxlKTtcbiAgfVxuICBnZXRFbGVtVmFsdWUoZWxlbSkge1xuICAgIHN3aXRjaCAoZWxlbS50eXBlKSB7XG4gICAgICBjYXNlIFwiY2hlY2tib3hcIjpcbiAgICAgICAgcmV0dXJuIGVsZW0uY2hlY2tlZDtcbiAgICAgIGNhc2UgXCJmaWxlXCI6XG4gICAgICAgIHJldHVybiBlbGVtLmZpbGVzO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGVsZW0udmFsdWU7XG4gICAgfVxuICB9XG4gIHZhbGlkYXRlR3JvdXBSdWxlKGtleSwgZWxlbXMsIGdyb3VwUnVsZSkge1xuICAgIHN3aXRjaCAoZ3JvdXBSdWxlLnJ1bGUpIHtcbiAgICAgIGNhc2UgR3JvdXBSdWxlcy5SZXF1aXJlZDoge1xuICAgICAgICBpZiAoZWxlbXMuZXZlcnkoKGVsZW0pID0+ICFlbGVtLmNoZWNrZWQpKSB7XG4gICAgICAgICAgdGhpcy5zZXRHcm91cEludmFsaWQoa2V5LCBncm91cFJ1bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0R3JvdXBWYWxpZChrZXksIGdyb3VwUnVsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFsaWRhdGVGaWVsZFJ1bGUoa2V5LCBlbGVtLCBmaWVsZFJ1bGUsIGFmdGVySW5wdXRDaGFuZ2VkID0gZmFsc2UpIHtcbiAgICBjb25zdCBydWxlVmFsdWUgPSBmaWVsZFJ1bGUudmFsdWU7XG4gICAgY29uc3QgZWxlbVZhbHVlID0gdGhpcy5nZXRFbGVtVmFsdWUoZWxlbSk7XG4gICAgaWYgKGZpZWxkUnVsZS5wbHVnaW4pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGZpZWxkUnVsZS5wbHVnaW4oXG4gICAgICAgIGVsZW1WYWx1ZSxcbiAgICAgICAgdGhpcy5nZXRDb21wYXRpYmxlRmllbGRzKClcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAoZmllbGRSdWxlLnJ1bGUpIHtcbiAgICAgIGNhc2UgUnVsZXMuUmVxdWlyZWQ6IHtcbiAgICAgICAgaWYgKGlzRW1wdHkoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuRW1haWw6IHtcbiAgICAgICAgaWYgKGlzSW52YWxpZE9yRW1wdHlTdHJpbmcoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFbWFpbChlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5NYXhMZW5ndGg6IHtcbiAgICAgICAgaWYgKHJ1bGVWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgaXMgbm90IGRlZmluZWQuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVWYWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIHNob3VsZCBiZSBhIG51bWJlci4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ludmFsaWRPckVtcHR5U3RyaW5nKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNMZW5ndGhNb3JlVGhhbk1heChlbGVtVmFsdWUsIHJ1bGVWYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLk1pbkxlbmd0aDoge1xuICAgICAgICBpZiAocnVsZVZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZVZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gc2hvdWxkIGJlIGEgbnVtYmVyLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSW52YWxpZE9yRW1wdHlTdHJpbmcoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0xlbmd0aExlc3NUaGFuTWluKGVsZW1WYWx1ZSwgcnVsZVZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuUGFzc3dvcmQ6IHtcbiAgICAgICAgaWYgKGlzSW52YWxpZE9yRW1wdHlTdHJpbmcoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNQYXNzd29yZChlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5TdHJvbmdQYXNzd29yZDoge1xuICAgICAgICBpZiAoaXNJbnZhbGlkT3JFbXB0eVN0cmluZyhlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1N0cm9uZ1Bhc3N3b3JkKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLk51bWJlcjoge1xuICAgICAgICBpZiAoaXNJbnZhbGlkT3JFbXB0eVN0cmluZyhlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc051bWJlcihlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5JbnRlZ2VyOiB7XG4gICAgICAgIGlmIChpc0ludmFsaWRPckVtcHR5U3RyaW5nKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzSW50ZWdlcihlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5NYXhOdW1iZXI6IHtcbiAgICAgICAgaWYgKHJ1bGVWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgaXMgbm90IGRlZmluZWQuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVWYWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIHNob3VsZCBiZSBhIG51bWJlci4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ludmFsaWRPckVtcHR5U3RyaW5nKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW0gPSArZWxlbVZhbHVlO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG51bSkgfHwgaXNOdW1iZXJNb3JlVGhhbk1heChudW0sIHJ1bGVWYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLk1pbk51bWJlcjoge1xuICAgICAgICBpZiAocnVsZVZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZVZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgc2hvdWxkIGJlIGEgbnVtYmVyLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSW52YWxpZE9yRW1wdHlTdHJpbmcoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG51bSA9ICtlbGVtVmFsdWU7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4obnVtKSB8fCBpc051bWJlckxlc3NUaGFuTWluKG51bSwgcnVsZVZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuQ3VzdG9tUmVnZXhwOiB7XG4gICAgICAgIGlmIChydWxlVmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVnZXhwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAocnVsZVZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIHNob3VsZCBiZSBhIHZhbGlkIHJlZ2V4cC4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHIgPSBTdHJpbmcoZWxlbVZhbHVlKTtcbiAgICAgICAgaWYgKHN0ciAhPT0gXCJcIiAmJiAhcmVnZXhwLnRlc3Qoc3RyKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuTWluRmlsZXNDb3VudDoge1xuICAgICAgICBpZiAocnVsZVZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVWYWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIHNob3VsZCBiZSBhIG51bWJlci4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoZWxlbVZhbHVlID09IG51bGwgPyB2b2lkIDAgOiBlbGVtVmFsdWUubGVuZ3RoKSAmJiBlbGVtVmFsdWUubGVuZ3RoIDwgcnVsZVZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5NYXhGaWxlc0NvdW50OiB7XG4gICAgICAgIGlmIChydWxlVmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZVZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgc2hvdWxkIGJlIGEgbnVtYmVyLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZShlbGVtVmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IGVsZW1WYWx1ZS5sZW5ndGgpICYmIGVsZW1WYWx1ZS5sZW5ndGggPiBydWxlVmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLkZpbGVzOiB7XG4gICAgICAgIGlmIChydWxlVmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVWYWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIHNob3VsZCBiZSBhbiBvYmplY3QuIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbGVzQ29uZmlnID0gcnVsZVZhbHVlLmZpbGVzO1xuICAgICAgICBpZiAodHlwZW9mIGZpbGVzQ29uZmlnICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGZpbGVzIGFycmF5LiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0ZpbGVQcm9wc0ludmFsaWQgPSAoZmlsZSwgZmlsZUNvbmZpZykgPT4ge1xuICAgICAgICAgIGNvbnN0IG1pblNpemVJbnZhbGlkID0gTnVtYmVyLmlzRmluaXRlKGZpbGVDb25maWcubWluU2l6ZSkgJiYgZmlsZS5zaXplIDwgZmlsZUNvbmZpZy5taW5TaXplO1xuICAgICAgICAgIGNvbnN0IG1heFNpemVJbnZhbGlkID0gTnVtYmVyLmlzRmluaXRlKGZpbGVDb25maWcubWF4U2l6ZSkgJiYgZmlsZS5zaXplID4gZmlsZUNvbmZpZy5tYXhTaXplO1xuICAgICAgICAgIGNvbnN0IG5hbWVJbnZhbGlkID0gQXJyYXkuaXNBcnJheShmaWxlQ29uZmlnLm5hbWVzKSAmJiAhZmlsZUNvbmZpZy5uYW1lcy5pbmNsdWRlcyhmaWxlLm5hbWUpO1xuICAgICAgICAgIGNvbnN0IGV4dEludmFsaWQgPSBBcnJheS5pc0FycmF5KGZpbGVDb25maWcuZXh0ZW5zaW9ucykgJiYgIWZpbGVDb25maWcuZXh0ZW5zaW9ucy5pbmNsdWRlcyhcbiAgICAgICAgICAgIGZpbGUubmFtZS5zcGxpdChcIi5cIilbZmlsZS5uYW1lLnNwbGl0KFwiLlwiKS5sZW5ndGggLSAxXVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgdHlwZUludmFsaWQgPSBBcnJheS5pc0FycmF5KGZpbGVDb25maWcudHlwZXMpICYmICFmaWxlQ29uZmlnLnR5cGVzLmluY2x1ZGVzKGZpbGUudHlwZSk7XG4gICAgICAgICAgcmV0dXJuIG1pblNpemVJbnZhbGlkIHx8IG1heFNpemVJbnZhbGlkIHx8IG5hbWVJbnZhbGlkIHx8IGV4dEludmFsaWQgfHwgdHlwZUludmFsaWQ7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbVZhbHVlID09PSBcIm9iamVjdFwiICYmIGVsZW1WYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGZvciAobGV0IGZpbGVJZHggPSAwLCBsZW4gPSBlbGVtVmFsdWUubGVuZ3RoOyBmaWxlSWR4IDwgbGVuOyArK2ZpbGVJZHgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBlbGVtVmFsdWUuaXRlbShmaWxlSWR4KTtcbiAgICAgICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlsZXNJbnZhbGlkID0gaXNGaWxlUHJvcHNJbnZhbGlkKGZpbGUsIGZpbGVzQ29uZmlnKTtcbiAgICAgICAgICAgIGlmIChmaWxlc0ludmFsaWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRSdWxlLnZhbGlkYXRvciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWxpZGF0b3IgZm9yIGN1c3RvbSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBzaG91bGQgYmUgYSBmdW5jdGlvbi4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZmllbGRSdWxlLnZhbGlkYXRvcihcbiAgICAgICAgICBlbGVtVmFsdWUsXG4gICAgICAgICAgdGhpcy5nZXRDb21wYXRpYmxlRmllbGRzKClcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09IFwiYm9vbGVhblwiICYmIHR5cGVvZiByZXN1bHQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsaWRhdG9yIHJldHVybiB2YWx1ZSBmb3IgWyR7a2V5fV0gZmllbGQgc2hvdWxkIGJlIGJvb2xlYW4gb3IgZnVuY3Rpb24uIEl0IHdpbGwgYmUgY2FzdCB0byBib29sZWFuLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJJbnB1dENoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGRzW2tleV0uYXN5bmNDaGVja1BlbmRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkc1trZXldLmFzeW5jQ2hlY2tQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gcmVzdWx0KCk7XG4gICAgICAgICAgICBpZiAoIWlzUHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBWYWxpZGF0b3IgZnVuY3Rpb24gZm9yIGN1c3RvbSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBzaG91bGQgcmV0dXJuIGEgUHJvbWlzZS4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKChyZXNwKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghcmVzcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaXNGb3JtVmFsaWQoKSB7XG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBPYmplY3QudmFsdWVzKHRoaXMuZmllbGRzKS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY29uc3QgaXRlbSA9IE9iamVjdC52YWx1ZXModGhpcy5maWVsZHMpW2ldO1xuICAgICAgaWYgKGl0ZW0uaXNWYWxpZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlzVmFsaWQgPSB2b2lkIDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0uaXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IE9iamVjdC52YWx1ZXModGhpcy5ncm91cEZpZWxkcykubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBPYmplY3QudmFsdWVzKHRoaXMuZ3JvdXBGaWVsZHMpW2ldO1xuICAgICAgaWYgKGl0ZW0uaXNWYWxpZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlzVmFsaWQgPSB2b2lkIDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0uaXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzVmFsaWQ7XG4gIH1cbiAgdmFsaWRhdGVGaWVsZChrZXksIGFmdGVySW5wdXRDaGFuZ2VkID0gZmFsc2UpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1trZXldO1xuICAgIGZpZWxkLmlzVmFsaWQgPSB0cnVlO1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgWy4uLmZpZWxkLnJ1bGVzXS5yZXZlcnNlKCkuZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gdGhpcy52YWxpZGF0ZUZpZWxkUnVsZShcbiAgICAgICAga2V5LFxuICAgICAgICBmaWVsZC5lbGVtLFxuICAgICAgICBydWxlLFxuICAgICAgICBhZnRlcklucHV0Q2hhbmdlZFxuICAgICAgKTtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICBwcm9taXNlcy5wdXNoKHJlcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGZpZWxkLmlzVmFsaWQpIHtcbiAgICAgIHRoaXMuc2V0RmllbGRWYWxpZChrZXksIChfYSA9IGZpZWxkLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnN1Y2Nlc3NNZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsU2V0dGxlZChwcm9taXNlcykuZmluYWxseSgoKSA9PiB7XG4gICAgICB2YXIgX2EyO1xuICAgICAgaWYgKGFmdGVySW5wdXRDaGFuZ2VkKSB7XG4gICAgICAgIChfYTIgPSB0aGlzLm9uVmFsaWRhdGVDYWxsYmFjaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jYWxsKHRoaXMsIHtcbiAgICAgICAgICBpc1ZhbGlkOiB0aGlzLmlzRm9ybVZhbGlkKCksXG4gICAgICAgICAgaXNTdWJtaXR0ZWQ6IHRoaXMuaXNTdWJtaXR0ZWQsXG4gICAgICAgICAgZmllbGRzOiB0aGlzLmdldENvbXBhdGlibGVGaWVsZHMoKSxcbiAgICAgICAgICBncm91cHM6IHsgLi4udGhpcy5ncm91cEZpZWxkcyB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldmFsaWRhdGVGaWVsZChmaWVsZFNlbGVjdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBmaWVsZFNlbGVjdG9yICE9PSBcInN0cmluZ1wiICYmICFpc0VsZW1lbnQoZmllbGRTZWxlY3RvcikpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRmllbGQgc2VsZWN0b3IgaXMgbm90IHZhbGlkLiBQbGVhc2Ugc3BlY2lmeSBhIHN0cmluZyBzZWxlY3RvciBvciBhIHZhbGlkIERPTSBlbGVtZW50LmBcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0S2V5QnlGaWVsZFNlbGVjdG9yKGZpZWxkU2VsZWN0b3IpO1xuICAgIGlmICgha2V5IHx8ICF0aGlzLmZpZWxkc1trZXldKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGaWVsZCBub3QgZm91bmQuIENoZWNrIHRoZSBmaWVsZCBzZWxlY3Rvci5gKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMudmFsaWRhdGVGaWVsZChrZXksIHRydWUpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICB0aGlzLmNsZWFyRmllbGRTdHlsZShrZXkpO1xuICAgICAgICB0aGlzLmNsZWFyRmllbGRMYWJlbChrZXkpO1xuICAgICAgICB0aGlzLnJlbmRlckZpZWxkRXJyb3Ioa2V5LCB0cnVlKTtcbiAgICAgICAgcmVzb2x2ZSghIXRoaXMuZmllbGRzW2tleV0uaXNWYWxpZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXZhbGlkYXRlR3JvdXAoZ3JvdXBTZWxlY3Rvcikge1xuICAgIGlmICh0eXBlb2YgZ3JvdXBTZWxlY3RvciAhPT0gXCJzdHJpbmdcIiAmJiAhaXNFbGVtZW50KGdyb3VwU2VsZWN0b3IpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEdyb3VwIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3Igb3IgYSB2YWxpZCBET00gZWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSB0aGlzLmdldEtleUJ5RmllbGRTZWxlY3Rvcihncm91cFNlbGVjdG9yKTtcbiAgICBpZiAoIWtleSB8fCAhdGhpcy5ncm91cEZpZWxkc1trZXldKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBHcm91cCBub3QgZm91bmQuIENoZWNrIHRoZSBncm91cCBzZWxlY3Rvci5gKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMudmFsaWRhdGVHcm91cChrZXkpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICB0aGlzLmNsZWFyRmllbGRMYWJlbChrZXkpO1xuICAgICAgICB0aGlzLnJlbmRlckdyb3VwRXJyb3Ioa2V5LCB0cnVlKTtcbiAgICAgICAgcmVzb2x2ZSghIXRoaXMuZ3JvdXBGaWVsZHNba2V5XS5pc1ZhbGlkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHZhbGlkYXRlR3JvdXAoa2V5LCBhZnRlcklucHV0Q2hhbmdlZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdyb3VwRmllbGRzW2tleV07XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICBbLi4uZ3JvdXAucnVsZXNdLnJldmVyc2UoKS5mb3JFYWNoKChydWxlKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSB0aGlzLnZhbGlkYXRlR3JvdXBSdWxlKGtleSwgZ3JvdXAuZWxlbXMsIHJ1bGUpO1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2gocmVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGxTZXR0bGVkKHByb21pc2VzKS5maW5hbGx5KCgpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIGlmIChhZnRlcklucHV0Q2hhbmdlZCkge1xuICAgICAgICAoX2EgPSB0aGlzLm9uVmFsaWRhdGVDYWxsYmFjaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywge1xuICAgICAgICAgIGlzVmFsaWQ6IHRoaXMuaXNGb3JtVmFsaWQoKSxcbiAgICAgICAgICBpc1N1Ym1pdHRlZDogdGhpcy5pc1N1Ym1pdHRlZCxcbiAgICAgICAgICBmaWVsZHM6IHRoaXMuZ2V0Q29tcGF0aWJsZUZpZWxkcygpLFxuICAgICAgICAgIGdyb3VwczogeyAuLi50aGlzLmdyb3VwRmllbGRzIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZm9jdXNJbnZhbGlkRmllbGQoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5maWVsZHMpIHtcbiAgICAgIGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZHNba2V5XTtcbiAgICAgIGlmICghZmllbGQuaXNWYWxpZCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGZpZWxkLmVsZW0uZm9jdXMoKSwgMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhZnRlclN1Ym1pdFZhbGlkYXRpb24oZm9yY2VSZXZhbGlkYXRpb24gPSBmYWxzZSkge1xuICAgIHRoaXMucmVuZGVyRXJyb3JzKGZvcmNlUmV2YWxpZGF0aW9uKTtcbiAgICBpZiAodGhpcy5nbG9iYWxDb25maWcuZm9jdXNJbnZhbGlkRmllbGQpIHtcbiAgICAgIHRoaXMuZm9jdXNJbnZhbGlkRmllbGQoKTtcbiAgICB9XG4gIH1cbiAgdmFsaWRhdGUoZm9yY2VSZXZhbGlkYXRpb24gPSBmYWxzZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMudmFsaWRhdGVGaWVsZChrZXkpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmdyb3VwRmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMudmFsaWRhdGVHcm91cChrZXkpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuYWZ0ZXJTdWJtaXRWYWxpZGF0aW9uKGZvcmNlUmV2YWxpZGF0aW9uKTtcbiAgICAgICAgKF9hID0gdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2spID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICBpc1ZhbGlkOiB0aGlzLmlzRm9ybVZhbGlkKCksXG4gICAgICAgICAgaXNTdWJtaXR0ZWQ6IHRoaXMuaXNTdWJtaXR0ZWQsXG4gICAgICAgICAgZmllbGRzOiB0aGlzLmdldENvbXBhdGlibGVGaWVsZHMoKSxcbiAgICAgICAgICBncm91cHM6IHsgLi4udGhpcy5ncm91cEZpZWxkcyB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCEhcHJvbWlzZXMubGVuZ3RoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHJldmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlSGFuZGxlcih2b2lkIDAsIHRydWUpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5nbG9iYWxDb25maWcuZm9jdXNJbnZhbGlkRmllbGQpIHtcbiAgICAgICAgICB0aGlzLmZvY3VzSW52YWxpZEZpZWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh0aGlzLmlzVmFsaWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgdmFsaWRhdGVIYW5kbGVyKGV2LCBmb3JjZVJldmFsaWRhdGlvbiA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnLmxvY2tGb3JtKSB7XG4gICAgICB0aGlzLmxvY2tGb3JtKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlKGZvcmNlUmV2YWxpZGF0aW9uKS5maW5hbGx5KCgpID0+IHtcbiAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnLmxvY2tGb3JtKSB7XG4gICAgICAgIHRoaXMudW5sb2NrRm9ybSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgICAoX2EgPSB0aGlzLm9uU3VjY2Vzc0NhbGxiYWNrKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBldik7XG4gICAgICAgIGlmICh0aGlzLmdsb2JhbENvbmZpZy5zdWJtaXRGb3JtQXV0b21hdGljYWxseSkge1xuICAgICAgICAgIChfYiA9IGV2ID09IG51bGwgPyB2b2lkIDAgOiBldi5jdXJyZW50VGFyZ2V0KSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc3VibWl0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIChfYyA9IHRoaXMub25GYWlsQ2FsbGJhY2spID09IG51bGwgPyB2b2lkIDAgOiBfYy5jYWxsKHRoaXMsIHRoaXMuZ2V0Q29tcGF0aWJsZUZpZWxkcygpLCB0aGlzLmdyb3VwRmllbGRzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzZXRGb3JtKGZvcm0pIHtcbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuZm9ybS5zZXRBdHRyaWJ1dGUoXCJub3ZhbGlkYXRlXCIsIFwibm92YWxpZGF0ZVwiKTtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuZm9ybSwgdGhpcy5mb3JtU3VibWl0SGFuZGxlcik7XG4gICAgdGhpcy5hZGRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLmZvcm0sIHRoaXMuZm9ybVN1Ym1pdEhhbmRsZXIpO1xuICB9XG4gIGFkZExpc3RlbmVyKHR5cGUsIGVsZW0sIGhhbmRsZXIpIHtcbiAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlcik7XG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKHsgdHlwZSwgZWxlbSwgZnVuYzogaGFuZGxlciB9KTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcih0eXBlLCBlbGVtLCBoYW5kbGVyKSB7XG4gICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLmZpbHRlcihcbiAgICAgIChpdGVtKSA9PiBpdGVtLnR5cGUgIT09IHR5cGUgfHwgaXRlbS5lbGVtICE9PSBlbGVtXG4gICAgKTtcbiAgfVxuICBhZGRGaWVsZChmaWVsZFNlbGVjdG9yLCBydWxlcywgY29uZmlnKSB7XG4gICAgaWYgKHR5cGVvZiBmaWVsZFNlbGVjdG9yICE9PSBcInN0cmluZ1wiICYmICFpc0VsZW1lbnQoZmllbGRTZWxlY3RvcikpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRmllbGQgc2VsZWN0b3IgaXMgbm90IHZhbGlkLiBQbGVhc2Ugc3BlY2lmeSBhIHN0cmluZyBzZWxlY3RvciBvciBhIHZhbGlkIERPTSBlbGVtZW50LmBcbiAgICAgICk7XG4gICAgfVxuICAgIGxldCBlbGVtO1xuICAgIGlmICh0eXBlb2YgZmllbGRTZWxlY3RvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZWxlbSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKGZpZWxkU2VsZWN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtID0gZmllbGRTZWxlY3RvcjtcbiAgICB9XG4gICAgaWYgKCFlbGVtKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEZpZWxkIGRvZXNuJ3QgZXhpc3QgaW4gdGhlIERPTSEgUGxlYXNlIGNoZWNrIHRoZSBmaWVsZCBzZWxlY3Rvci5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocnVsZXMpIHx8ICFydWxlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgUnVsZXMgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5IGFuZCBzaG91bGQgY29udGFpbiBhdCBsZWFzdCAxIGVsZW1lbnQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcnVsZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKCEoXCJydWxlXCIgaW4gaXRlbSB8fCBcInZhbGlkYXRvclwiIGluIGl0ZW0gfHwgXCJwbHVnaW5cIiBpbiBpdGVtKSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBgUnVsZXMgYXJndW1lbnQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBydWxlIG9yIHZhbGlkYXRvciBwcm9wZXJ0eS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW0udmFsaWRhdG9yICYmICFpdGVtLnBsdWdpbiAmJiAoIWl0ZW0ucnVsZSB8fCAhT2JqZWN0LnZhbHVlcyhSdWxlcykuaW5jbHVkZXMoaXRlbS5ydWxlKSkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgYFJ1bGUgc2hvdWxkIGJlIG9uZSBvZiB0aGVzZSB0eXBlczogJHtPYmplY3QudmFsdWVzKFJ1bGVzKS5qb2luKFxuICAgICAgICAgICAgXCIsIFwiXG4gICAgICAgICAgKX0uIFByb3ZpZGVkIHZhbHVlOiAke2l0ZW0ucnVsZX1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5zZXRLZXlCeUZpZWxkU2VsZWN0b3IoZmllbGRTZWxlY3Rvcik7XG4gICAgdGhpcy5maWVsZHNba2V5XSA9IHtcbiAgICAgIGVsZW0sXG4gICAgICBydWxlcyxcbiAgICAgIGlzVmFsaWQ6IHZvaWQgMCxcbiAgICAgIHRvdWNoZWQ6IGZhbHNlLFxuICAgICAgY29uZmlnXG4gICAgfTtcbiAgICB0aGlzLnNldExpc3RlbmVycyhlbGVtKTtcbiAgICBpZiAodGhpcy5pc1N1Ym1pdHRlZCB8fCB0aGlzLmdsb2JhbENvbmZpZy52YWxpZGF0ZUJlZm9yZVN1Ym1pdHRpbmcpIHtcbiAgICAgIHRoaXMudmFsaWRhdGVGaWVsZChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVGaWVsZChmaWVsZFNlbGVjdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBmaWVsZFNlbGVjdG9yICE9PSBcInN0cmluZ1wiICYmICFpc0VsZW1lbnQoZmllbGRTZWxlY3RvcikpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRmllbGQgc2VsZWN0b3IgaXMgbm90IHZhbGlkLiBQbGVhc2Ugc3BlY2lmeSBhIHN0cmluZyBzZWxlY3RvciBvciBhIHZhbGlkIERPTSBlbGVtZW50LmBcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0S2V5QnlGaWVsZFNlbGVjdG9yKGZpZWxkU2VsZWN0b3IpO1xuICAgIGlmICgha2V5IHx8ICF0aGlzLmZpZWxkc1trZXldKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGaWVsZCBub3QgZm91bmQuIENoZWNrIHRoZSBmaWVsZCBzZWxlY3Rvci5gKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdGhpcy5nZXRMaXN0ZW5lclR5cGUodGhpcy5maWVsZHNba2V5XS5lbGVtLnR5cGUpO1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgdGhpcy5maWVsZHNba2V5XS5lbGVtLCB0aGlzLmhhbmRsZXJDaGFuZ2UpO1xuICAgIHRoaXMuY2xlYXJFcnJvcnMoKTtcbiAgICBkZWxldGUgdGhpcy5maWVsZHNba2V5XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVHcm91cChncm91cCkge1xuICAgIGlmICh0eXBlb2YgZ3JvdXAgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgR3JvdXAgc2VsZWN0b3IgaXMgbm90IHZhbGlkLiBQbGVhc2Ugc3BlY2lmeSBhIHN0cmluZyBzZWxlY3Rvci5gXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSB0aGlzLmdldEtleUJ5RmllbGRTZWxlY3Rvcihncm91cCk7XG4gICAgaWYgKCFrZXkgfHwgIXRoaXMuZ3JvdXBGaWVsZHNba2V5XSkge1xuICAgICAgY29uc29sZS5lcnJvcihgR3JvdXAgbm90IGZvdW5kLiBDaGVjayB0aGUgZ3JvdXAgc2VsZWN0b3IuYCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGhpcy5ncm91cEZpZWxkc1trZXldLmVsZW1zLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmdldExpc3RlbmVyVHlwZShlbGVtLnR5cGUpO1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBlbGVtLCB0aGlzLmhhbmRsZXJDaGFuZ2UpO1xuICAgIH0pO1xuICAgIHRoaXMuY2xlYXJFcnJvcnMoKTtcbiAgICBkZWxldGUgdGhpcy5ncm91cEZpZWxkc1trZXldO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFkZFJlcXVpcmVkR3JvdXAoZ3JvdXBGaWVsZCwgZXJyb3JNZXNzYWdlLCBjb25maWcsIHN1Y2Nlc3NNZXNzYWdlKSB7XG4gICAgaWYgKHR5cGVvZiBncm91cEZpZWxkICE9PSBcInN0cmluZ1wiICYmICFpc0VsZW1lbnQoZ3JvdXBGaWVsZCkpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgR3JvdXAgc2VsZWN0b3IgaXMgbm90IHZhbGlkLiBQbGVhc2Ugc3BlY2lmeSBhIHN0cmluZyBzZWxlY3RvciBvciBhIHZhbGlkIERPTSBlbGVtZW50LmBcbiAgICAgICk7XG4gICAgfVxuICAgIGxldCBlbGVtO1xuICAgIGlmICh0eXBlb2YgZ3JvdXBGaWVsZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZWxlbSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKGdyb3VwRmllbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtID0gZ3JvdXBGaWVsZDtcbiAgICB9XG4gICAgaWYgKCFlbGVtKSB7XG4gICAgICB0aHJvdyBFcnJvcihgR3JvdXAgc2VsZWN0b3Igbm90IGZvdW5kISBQbGVhc2UgY2hlY2sgdGhlIGdyb3VwIHNlbGVjdG9yLmApO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dHMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtcbiAgICBjb25zdCBjaGlsZHJlbklucHV0cyA9IEFycmF5LmZyb20oaW5wdXRzKS5maWx0ZXIoKGlucHV0KSA9PiB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBnZXRDbG9zZXN0UGFyZW50KHRoaXMuZ3JvdXBGaWVsZHMsIGdldE5vZGVQYXJlbnRzKGlucHV0KSk7XG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJlbnRbMV0uZWxlbXMuZmluZCgoZWxlbTIpID0+IGVsZW0yICE9PSBpbnB1dCk7XG4gICAgfSk7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5zZXRLZXlCeUZpZWxkU2VsZWN0b3IoZ3JvdXBGaWVsZCk7XG4gICAgdGhpcy5ncm91cEZpZWxkc1trZXldID0ge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJ1bGU6IEdyb3VwUnVsZXMuUmVxdWlyZWQsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBncm91cEVsZW06IGVsZW0sXG4gICAgICBlbGVtczogY2hpbGRyZW5JbnB1dHMsXG4gICAgICB0b3VjaGVkOiBmYWxzZSxcbiAgICAgIGlzVmFsaWQ6IHZvaWQgMCxcbiAgICAgIGNvbmZpZ1xuICAgIH07XG4gICAgaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICB0aGlzLnNldExpc3RlbmVycyhpbnB1dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ2V0TGlzdGVuZXJUeXBlKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgY2FzZSBcInNlbGVjdC1vbmVcIjpcbiAgICAgIGNhc2UgXCJmaWxlXCI6XG4gICAgICBjYXNlIFwicmFkaW9cIjoge1xuICAgICAgICByZXR1cm4gXCJjaGFuZ2VcIjtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgcmV0dXJuIFwiaW5wdXRcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2V0TGlzdGVuZXJzKGVsZW0pIHtcbiAgICBjb25zdCB0eXBlID0gdGhpcy5nZXRMaXN0ZW5lclR5cGUoZWxlbS50eXBlKTtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGVsZW0sIHRoaXMuaGFuZGxlckNoYW5nZSk7XG4gICAgdGhpcy5hZGRMaXN0ZW5lcih0eXBlLCBlbGVtLCB0aGlzLmhhbmRsZXJDaGFuZ2UpO1xuICB9XG4gIGNsZWFyRmllbGRMYWJlbChrZXkpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIChfYSA9IHRoaXMuZXJyb3JMYWJlbHNba2V5XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnJlbW92ZSgpO1xuICAgIChfYiA9IHRoaXMuc3VjY2Vzc0xhYmVsc1trZXldKSA9PSBudWxsID8gdm9pZCAwIDogX2IucmVtb3ZlKCk7XG4gIH1cbiAgY2xlYXJGaWVsZFN0eWxlKGtleSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRzW2tleV07XG4gICAgY29uc3QgZXJyb3JTdHlsZSA9ICgoX2EgPSBmaWVsZC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5lcnJvckZpZWxkU3R5bGUpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yRmllbGRTdHlsZTtcbiAgICBPYmplY3Qua2V5cyhlcnJvclN0eWxlKS5mb3JFYWNoKChrZXkyKSA9PiB7XG4gICAgICBmaWVsZC5lbGVtLnN0eWxlW2tleTJdID0gXCJcIjtcbiAgICB9KTtcbiAgICBjb25zdCBzdWNjZXNzU3R5bGUgPSAoKF9iID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc3VjY2Vzc0ZpZWxkU3R5bGUpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZFN0eWxlIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKHN1Y2Nlc3NTdHlsZSkuZm9yRWFjaCgoa2V5MikgPT4ge1xuICAgICAgZmllbGQuZWxlbS5zdHlsZVtrZXkyXSA9IFwiXCI7XG4gICAgfSk7XG4gICAgZmllbGQuZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAoKF9jID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2MuZXJyb3JGaWVsZENzc0NsYXNzKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkQ3NzQ2xhc3NcbiAgICAgICksXG4gICAgICAuLi5nZXRDbGFzc0xpc3QoXG4gICAgICAgICgoX2QgPSBmaWVsZC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfZC5zdWNjZXNzRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3NcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGNsZWFyRXJyb3JzKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgT2JqZWN0LmtleXModGhpcy5lcnJvckxhYmVscykuZm9yRWFjaChcbiAgICAgIChrZXkpID0+IHRoaXMuZXJyb3JMYWJlbHNba2V5XS5yZW1vdmUoKVxuICAgICk7XG4gICAgT2JqZWN0LmtleXModGhpcy5zdWNjZXNzTGFiZWxzKS5mb3JFYWNoKFxuICAgICAgKGtleSkgPT4gdGhpcy5zdWNjZXNzTGFiZWxzW2tleV0ucmVtb3ZlKClcbiAgICApO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmllbGRzKSB7XG4gICAgICB0aGlzLmNsZWFyRmllbGRTdHlsZShrZXkpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmdyb3VwRmllbGRzKSB7XG4gICAgICBjb25zdCBncm91cCA9IHRoaXMuZ3JvdXBGaWVsZHNba2V5XTtcbiAgICAgIGNvbnN0IGVycm9yU3R5bGUgPSAoKF9hID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZXJyb3JGaWVsZFN0eWxlKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkU3R5bGU7XG4gICAgICBPYmplY3Qua2V5cyhlcnJvclN0eWxlKS5mb3JFYWNoKChrZXkyKSA9PiB7XG4gICAgICAgIGdyb3VwLmVsZW1zLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgICB2YXIgX2EyO1xuICAgICAgICAgIGVsZW0uc3R5bGVba2V5Ml0gPSBcIlwiO1xuICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgIC4uLmdldENsYXNzTGlzdChcbiAgICAgICAgICAgICAgKChfYTIgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZXJyb3JGaWVsZENzc0NsYXNzKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkQ3NzQ2xhc3NcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc3VjY2Vzc1N0eWxlID0gKChfYiA9IGdyb3VwLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnN1Y2Nlc3NGaWVsZFN0eWxlKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzRmllbGRTdHlsZSB8fCB7fTtcbiAgICAgIE9iamVjdC5rZXlzKHN1Y2Nlc3NTdHlsZSkuZm9yRWFjaCgoa2V5MikgPT4ge1xuICAgICAgICBncm91cC5lbGVtcy5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICAgICAgdmFyIF9hMjtcbiAgICAgICAgICBlbGVtLnN0eWxlW2tleTJdID0gXCJcIjtcbiAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAuLi5nZXRDbGFzc0xpc3QoXG4gICAgICAgICAgICAgICgoX2EyID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnN1Y2Nlc3NGaWVsZENzc0NsYXNzKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzRmllbGRDc3NDbGFzc1xuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMudG9vbHRpcHMgPSBbXTtcbiAgfVxuICBpc1Rvb2x0aXAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5nbG9iYWxDb25maWcudG9vbHRpcDtcbiAgfVxuICBsb2NrRm9ybSgpIHtcbiAgICBjb25zdCBlbGVtcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0XCJcbiAgICApO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgZWxlbXNbaV0uc2V0QXR0cmlidXRlKFxuICAgICAgICBcImRhdGEtanVzdC12YWxpZGF0ZS1mYWxsYmFjay1kaXNhYmxlZFwiLFxuICAgICAgICBlbGVtc1tpXS5kaXNhYmxlZCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiXG4gICAgICApO1xuICAgICAgZWxlbXNbaV0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICAgIGVsZW1zW2ldLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICAgIGVsZW1zW2ldLnN0eWxlLndlYmtpdEZpbHRlciA9IFwiZ3JheXNjYWxlKDEwMCUpXCI7XG4gICAgICBlbGVtc1tpXS5zdHlsZS5maWx0ZXIgPSBcImdyYXlzY2FsZSgxMDAlKVwiO1xuICAgIH1cbiAgfVxuICB1bmxvY2tGb3JtKCkge1xuICAgIGNvbnN0IGVsZW1zID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBcImlucHV0LCB0ZXh0YXJlYSwgYnV0dG9uLCBzZWxlY3RcIlxuICAgICk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBpZiAoZWxlbXNbaV0uZ2V0QXR0cmlidXRlKFwiZGF0YS1qdXN0LXZhbGlkYXRlLWZhbGxiYWNrLWRpc2FibGVkXCIpICE9PSBcInRydWVcIikge1xuICAgICAgICBlbGVtc1tpXS5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgIH1cbiAgICAgIGVsZW1zW2ldLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIlwiO1xuICAgICAgZWxlbXNbaV0uc3R5bGUud2Via2l0RmlsdGVyID0gXCJcIjtcbiAgICAgIGVsZW1zW2ldLnN0eWxlLmZpbHRlciA9IFwiXCI7XG4gICAgfVxuICB9XG4gIHJlbmRlclRvb2x0aXAoZWxlbSwgZXJyb3JMYWJlbCwgcG9zaXRpb24pIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQgfSA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgZXJyb3JMYWJlbFJlY3QgPSBlcnJvckxhYmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uIHx8ICgoX2EgPSB0aGlzLmdsb2JhbENvbmZpZy50b29sdGlwKSA9PSBudWxsID8gdm9pZCAwIDogX2EucG9zaXRpb24pO1xuICAgIHN3aXRjaCAocG9zKSB7XG4gICAgICBjYXNlIFwibGVmdFwiOiB7XG4gICAgICAgIGVycm9yTGFiZWwuc3R5bGUudG9wID0gYCR7dG9wICsgaGVpZ2h0IC8gMiAtIGVycm9yTGFiZWxSZWN0LmhlaWdodCAvIDJ9cHhgO1xuICAgICAgICBlcnJvckxhYmVsLnN0eWxlLmxlZnQgPSBgJHtsZWZ0IC0gZXJyb3JMYWJlbFJlY3Qud2lkdGggLSBUT09MVElQX0FSUk9XX0hFSUdIVH1weGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRvcFwiOiB7XG4gICAgICAgIGVycm9yTGFiZWwuc3R5bGUudG9wID0gYCR7dG9wIC0gZXJyb3JMYWJlbFJlY3QuaGVpZ2h0IC0gVE9PTFRJUF9BUlJPV19IRUlHSFR9cHhgO1xuICAgICAgICBlcnJvckxhYmVsLnN0eWxlLmxlZnQgPSBgJHtsZWZ0ICsgd2lkdGggLyAyIC0gZXJyb3JMYWJlbFJlY3Qud2lkdGggLyAyfXB4YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwicmlnaHRcIjoge1xuICAgICAgICBlcnJvckxhYmVsLnN0eWxlLnRvcCA9IGAke3RvcCArIGhlaWdodCAvIDIgLSBlcnJvckxhYmVsUmVjdC5oZWlnaHQgLyAyfXB4YDtcbiAgICAgICAgZXJyb3JMYWJlbC5zdHlsZS5sZWZ0ID0gYCR7bGVmdCArIHdpZHRoICsgVE9PTFRJUF9BUlJPV19IRUlHSFR9cHhgO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJib3R0b21cIjoge1xuICAgICAgICBlcnJvckxhYmVsLnN0eWxlLnRvcCA9IGAke3RvcCArIGhlaWdodCArIFRPT0xUSVBfQVJST1dfSEVJR0hUfXB4YDtcbiAgICAgICAgZXJyb3JMYWJlbC5zdHlsZS5sZWZ0ID0gYCR7bGVmdCArIHdpZHRoIC8gMiAtIGVycm9yTGFiZWxSZWN0LndpZHRoIC8gMn1weGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBlcnJvckxhYmVsLmRhdGFzZXQuZGlyZWN0aW9uID0gcG9zO1xuICAgIGNvbnN0IHJlZnJlc2ggPSAoKSA9PiB7XG4gICAgICB0aGlzLnJlbmRlclRvb2x0aXAoZWxlbSwgZXJyb3JMYWJlbCwgcG9zaXRpb24pO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZnJlc2hcbiAgICB9O1xuICB9XG4gIGNyZWF0ZUVycm9yTGFiZWxFbGVtKGtleSwgZXJyb3JNZXNzYWdlLCBjb25maWcpIHtcbiAgICBjb25zdCBlcnJvckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBlcnJvckxhYmVsLmlubmVySFRNTCA9IGVycm9yTWVzc2FnZTtcbiAgICBjb25zdCBjdXN0b21FcnJvckxhYmVsU3R5bGUgPSB0aGlzLmlzVG9vbHRpcCgpID8gY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcuZXJyb3JMYWJlbFN0eWxlIDogKGNvbmZpZyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLmVycm9yTGFiZWxTdHlsZSkgfHwgdGhpcy5nbG9iYWxDb25maWcuZXJyb3JMYWJlbFN0eWxlO1xuICAgIE9iamVjdC5hc3NpZ24oZXJyb3JMYWJlbC5zdHlsZSwgY3VzdG9tRXJyb3JMYWJlbFN0eWxlKTtcbiAgICBlcnJvckxhYmVsLmNsYXNzTGlzdC5hZGQoXG4gICAgICAuLi5nZXRDbGFzc0xpc3QoXG4gICAgICAgIChjb25maWcgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5lcnJvckxhYmVsQ3NzQ2xhc3MpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yTGFiZWxDc3NDbGFzc1xuICAgICAgKSxcbiAgICAgIFwianVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFwiXG4gICAgKTtcbiAgICBpZiAodGhpcy5pc1Rvb2x0aXAoKSkge1xuICAgICAgZXJyb3JMYWJlbC5kYXRhc2V0LnRvb2x0aXAgPSBcInRydWVcIjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnLnRlc3RpbmdNb2RlKSB7XG4gICAgICBlcnJvckxhYmVsLmRhdGFzZXQudGVzdElkID0gYGVycm9yLWxhYmVsLSR7a2V5fWA7XG4gICAgfVxuICAgIHRoaXMuZXJyb3JMYWJlbHNba2V5XSA9IGVycm9yTGFiZWw7XG4gICAgcmV0dXJuIGVycm9yTGFiZWw7XG4gIH1cbiAgY3JlYXRlU3VjY2Vzc0xhYmVsRWxlbShrZXksIHN1Y2Nlc3NNZXNzYWdlLCBjb25maWcpIHtcbiAgICBpZiAoc3VjY2Vzc01lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHN1Y2Nlc3NMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgc3VjY2Vzc0xhYmVsLmlubmVySFRNTCA9IHN1Y2Nlc3NNZXNzYWdlO1xuICAgIGNvbnN0IGN1c3RvbVN1Y2Nlc3NMYWJlbFN0eWxlID0gKGNvbmZpZyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLnN1Y2Nlc3NMYWJlbFN0eWxlKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzTGFiZWxTdHlsZTtcbiAgICBPYmplY3QuYXNzaWduKHN1Y2Nlc3NMYWJlbC5zdHlsZSwgY3VzdG9tU3VjY2Vzc0xhYmVsU3R5bGUpO1xuICAgIHN1Y2Nlc3NMYWJlbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAoY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcuc3VjY2Vzc0xhYmVsQ3NzQ2xhc3MpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NMYWJlbENzc0NsYXNzXG4gICAgICApLFxuICAgICAgXCJqdXN0LXZhbGlkYXRlLXN1Y2Nlc3MtbGFiZWxcIlxuICAgICk7XG4gICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnLnRlc3RpbmdNb2RlKSB7XG4gICAgICBzdWNjZXNzTGFiZWwuZGF0YXNldC50ZXN0SWQgPSBgc3VjY2Vzcy1sYWJlbC0ke2tleX1gO1xuICAgIH1cbiAgICB0aGlzLnN1Y2Nlc3NMYWJlbHNba2V5XSA9IHN1Y2Nlc3NMYWJlbDtcbiAgICByZXR1cm4gc3VjY2Vzc0xhYmVsO1xuICB9XG4gIHJlbmRlckVycm9yc0NvbnRhaW5lcihsYWJlbCwgZXJyb3JzQ29udGFpbmVyKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZXJyb3JzQ29udGFpbmVyIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yc0NvbnRhaW5lcjtcbiAgICBpZiAodHlwZW9mIGNvbnRhaW5lciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgZWxlbSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICBpZiAoZWxlbSkge1xuICAgICAgICBlbGVtLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBFcnJvciBjb250YWluZXIgd2l0aCAke2NvbnRhaW5lcn0gc2VsZWN0b3Igbm90IGZvdW5kLiBFcnJvcnMgd2lsbCBiZSByZW5kZXJlZCBhcyB1c3VhbGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbnRhaW5lciBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5lciAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgRXJyb3IgY29udGFpbmVyIG5vdCBmb3VuZC4gSXQgc2hvdWxkIGJlIGEgc3RyaW5nIG9yIGV4aXN0aW5nIEVsZW1lbnQuIEVycm9ycyB3aWxsIGJlIHJlbmRlcmVkIGFzIHVzdWFsYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJlbmRlckdyb3VwTGFiZWwoZWxlbSwgbGFiZWwsIGVycm9yc0NvbnRhaW5lciwgaXNTdWNjZXNzKSB7XG4gICAgaWYgKCFpc1N1Y2Nlc3MpIHtcbiAgICAgIGNvbnN0IHJlbmRlcmVkSW5FcnJvcnNDb250YWluZXIgPSB0aGlzLnJlbmRlckVycm9yc0NvbnRhaW5lcihcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGVycm9yc0NvbnRhaW5lclxuICAgICAgKTtcbiAgICAgIGlmIChyZW5kZXJlZEluRXJyb3JzQ29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxlbS5hcHBlbmRDaGlsZChsYWJlbCk7XG4gIH1cbiAgcmVuZGVyRmllbGRMYWJlbChlbGVtLCBsYWJlbCwgZXJyb3JzQ29udGFpbmVyLCBpc1N1Y2Nlc3MpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgaWYgKCFpc1N1Y2Nlc3MpIHtcbiAgICAgIGNvbnN0IHJlbmRlcmVkSW5FcnJvcnNDb250YWluZXIgPSB0aGlzLnJlbmRlckVycm9yc0NvbnRhaW5lcihcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGVycm9yc0NvbnRhaW5lclxuICAgICAgKTtcbiAgICAgIGlmIChyZW5kZXJlZEluRXJyb3JzQ29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVsZW0udHlwZSA9PT0gXCJjaGVja2JveFwiIHx8IGVsZW0udHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICBjb25zdCBsYWJlbEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBgbGFiZWxbZm9yPVwiJHtlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpfVwiXWBcbiAgICAgICk7XG4gICAgICBpZiAoKChfYiA9IChfYSA9IGVsZW0ucGFyZW50RWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnRhZ05hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfYi50b0xvd2VyQ2FzZSgpKSA9PT0gXCJsYWJlbFwiKSB7XG4gICAgICAgIChfZCA9IChfYyA9IGVsZW0ucGFyZW50RWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZC5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICB9IGVsc2UgaWYgKGxhYmVsRWxlbSkge1xuICAgICAgICAoX2UgPSBsYWJlbEVsZW0ucGFyZW50RWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIChfZiA9IGVsZW0ucGFyZW50RWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKF9nID0gZWxlbS5wYXJlbnRFbGVtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2cuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgIH1cbiAgfVxuICBzaG93TGFiZWxzKGZpZWxkcywgaXNFcnJvcikge1xuICAgIE9iamVjdC5rZXlzKGZpZWxkcykuZm9yRWFjaCgoZmllbGROYW1lLCBpKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IGZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXlCeUZpZWxkU2VsZWN0b3IoZmllbGROYW1lKTtcbiAgICAgIGlmICgha2V5IHx8ICF0aGlzLmZpZWxkc1trZXldKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZpZWxkIG5vdCBmb3VuZC4gQ2hlY2sgdGhlIGZpZWxkIHNlbGVjdG9yLmApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRzW2tleV07XG4gICAgICBmaWVsZC5pc1ZhbGlkID0gIWlzRXJyb3I7XG4gICAgICB0aGlzLmNsZWFyRmllbGRTdHlsZShrZXkpO1xuICAgICAgdGhpcy5jbGVhckZpZWxkTGFiZWwoa2V5KTtcbiAgICAgIHRoaXMucmVuZGVyRmllbGRFcnJvcihrZXksIGZhbHNlLCBlcnJvcik7XG4gICAgICBpZiAoaSA9PT0gMCAmJiB0aGlzLmdsb2JhbENvbmZpZy5mb2N1c0ludmFsaWRGaWVsZCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGZpZWxkLmVsZW0uZm9jdXMoKSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc2hvd0Vycm9ycyhmaWVsZHMpIHtcbiAgICBpZiAodHlwZW9mIGZpZWxkcyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIFwiW3Nob3dFcnJvcnNdOiBFcnJvcnMgc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGtleTogdmFsdWUgZm9ybWF0XCJcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuc2hvd0xhYmVscyhmaWVsZHMsIHRydWUpO1xuICB9XG4gIHNob3dTdWNjZXNzTGFiZWxzKGZpZWxkcykge1xuICAgIGlmICh0eXBlb2YgZmllbGRzICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJbc2hvd1N1Y2Nlc3NMYWJlbHNdOiBMYWJlbHMgc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGtleTogdmFsdWUgZm9ybWF0XCJcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuc2hvd0xhYmVscyhmaWVsZHMsIGZhbHNlKTtcbiAgfVxuICByZW5kZXJGaWVsZEVycm9yKGtleSwgZm9yY2VkID0gZmFsc2UsIG1lc3NhZ2UpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRzW2tleV07XG4gICAgaWYgKGZpZWxkLmlzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmlzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmlzVmFsaWQgPT09IHZvaWQgMCB8fCAhZm9yY2VkICYmICF0aGlzLmlzU3VibWl0dGVkICYmICFmaWVsZC50b3VjaGVkICYmIG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZmllbGQuaXNWYWxpZCkge1xuICAgICAgaWYgKCFmaWVsZC5hc3luY0NoZWNrUGVuZGluZykge1xuICAgICAgICBjb25zdCBzdWNjZXNzTGFiZWwgPSB0aGlzLmNyZWF0ZVN1Y2Nlc3NMYWJlbEVsZW0oXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIG1lc3NhZ2UgIT09IHZvaWQgMCA/IG1lc3NhZ2UgOiBmaWVsZC5zdWNjZXNzTWVzc2FnZSxcbiAgICAgICAgICBmaWVsZC5jb25maWdcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3NMYWJlbCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyRmllbGRMYWJlbChcbiAgICAgICAgICAgIGZpZWxkLmVsZW0sXG4gICAgICAgICAgICBzdWNjZXNzTGFiZWwsXG4gICAgICAgICAgICAoX2EgPSBmaWVsZC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5lcnJvcnNDb250YWluZXIsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZC5lbGVtLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAgICAgKChfYiA9IGZpZWxkLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnN1Y2Nlc3NGaWVsZENzc0NsYXNzKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzRmllbGRDc3NDbGFzc1xuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmllbGQuZWxlbS5jbGFzc0xpc3QuYWRkKFxuICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAoKF9jID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2MuZXJyb3JGaWVsZENzc0NsYXNzKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkQ3NzQ2xhc3NcbiAgICAgIClcbiAgICApO1xuICAgIGNvbnN0IGVycm9yTGFiZWwgPSB0aGlzLmNyZWF0ZUVycm9yTGFiZWxFbGVtKFxuICAgICAga2V5LFxuICAgICAgbWVzc2FnZSAhPT0gdm9pZCAwID8gbWVzc2FnZSA6IGZpZWxkLmVycm9yTWVzc2FnZSxcbiAgICAgIGZpZWxkLmNvbmZpZ1xuICAgICk7XG4gICAgdGhpcy5yZW5kZXJGaWVsZExhYmVsKFxuICAgICAgZmllbGQuZWxlbSxcbiAgICAgIGVycm9yTGFiZWwsXG4gICAgICAoX2QgPSBmaWVsZC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfZC5lcnJvcnNDb250YWluZXJcbiAgICApO1xuICAgIGlmICh0aGlzLmlzVG9vbHRpcCgpKSB7XG4gICAgICB0aGlzLnRvb2x0aXBzLnB1c2goXG4gICAgICAgIHRoaXMucmVuZGVyVG9vbHRpcChcbiAgICAgICAgICBmaWVsZC5lbGVtLFxuICAgICAgICAgIGVycm9yTGFiZWwsXG4gICAgICAgICAgKF9mID0gKF9lID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2UudG9vbHRpcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLnBvc2l0aW9uXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJlbmRlckdyb3VwRXJyb3Ioa2V5LCBmb3JjZSA9IHRydWUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdyb3VwRmllbGRzW2tleV07XG4gICAgaWYgKGdyb3VwLmlzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmlzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGdyb3VwLmlzVmFsaWQgPT09IHZvaWQgMCB8fCAhZm9yY2UgJiYgIXRoaXMuaXNTdWJtaXR0ZWQgJiYgIWdyb3VwLnRvdWNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGdyb3VwLmlzVmFsaWQpIHtcbiAgICAgIGdyb3VwLmVsZW1zLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgdmFyIF9hMiwgX2IyO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIGVsZW0uc3R5bGUsXG4gICAgICAgICAgKChfYTIgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuc3VjY2Vzc0ZpZWxkU3R5bGUpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZFN0eWxlXG4gICAgICAgICk7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICAuLi5nZXRDbGFzc0xpc3QoXG4gICAgICAgICAgICAoKF9iMiA9IGdyb3VwLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi5zdWNjZXNzRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3NcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NMYWJlbCA9IHRoaXMuY3JlYXRlU3VjY2Vzc0xhYmVsRWxlbShcbiAgICAgICAga2V5LFxuICAgICAgICBncm91cC5zdWNjZXNzTWVzc2FnZSxcbiAgICAgICAgZ3JvdXAuY29uZmlnXG4gICAgICApO1xuICAgICAgaWYgKHN1Y2Nlc3NMYWJlbCkge1xuICAgICAgICB0aGlzLnJlbmRlckdyb3VwTGFiZWwoXG4gICAgICAgICAgZ3JvdXAuZ3JvdXBFbGVtLFxuICAgICAgICAgIHN1Y2Nlc3NMYWJlbCxcbiAgICAgICAgICAoX2EgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5lcnJvcnNDb250YWluZXIsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlzVmFsaWQgPSBmYWxzZTtcbiAgICBncm91cC5lbGVtcy5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICB2YXIgX2EyLCBfYjI7XG4gICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICBlbGVtLnN0eWxlLFxuICAgICAgICAoKF9hMiA9IGdyb3VwLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5lcnJvckZpZWxkU3R5bGUpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yRmllbGRTdHlsZVxuICAgICAgKTtcbiAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcbiAgICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAgICgoX2IyID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLmVycm9yRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuZXJyb3JGaWVsZENzc0NsYXNzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSk7XG4gICAgY29uc3QgZXJyb3JMYWJlbCA9IHRoaXMuY3JlYXRlRXJyb3JMYWJlbEVsZW0oXG4gICAgICBrZXksXG4gICAgICBncm91cC5lcnJvck1lc3NhZ2UsXG4gICAgICBncm91cC5jb25maWdcbiAgICApO1xuICAgIHRoaXMucmVuZGVyR3JvdXBMYWJlbChcbiAgICAgIGdyb3VwLmdyb3VwRWxlbSxcbiAgICAgIGVycm9yTGFiZWwsXG4gICAgICAoX2IgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYi5lcnJvcnNDb250YWluZXJcbiAgICApO1xuICAgIGlmICh0aGlzLmlzVG9vbHRpcCgpKSB7XG4gICAgICB0aGlzLnRvb2x0aXBzLnB1c2goXG4gICAgICAgIHRoaXMucmVuZGVyVG9vbHRpcChcbiAgICAgICAgICBncm91cC5ncm91cEVsZW0sXG4gICAgICAgICAgZXJyb3JMYWJlbCxcbiAgICAgICAgICAoX2QgPSAoX2MgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYy50b29sdGlwKSA9PSBudWxsID8gdm9pZCAwIDogX2QucG9zaXRpb25cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyRXJyb3JzKGZvcmNlUmV2YWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICBpZiAoIXRoaXMuaXNTdWJtaXR0ZWQgJiYgIWZvcmNlUmV2YWxpZGF0aW9uICYmICF0aGlzLmdsb2JhbENvbmZpZy52YWxpZGF0ZUJlZm9yZVN1Ym1pdHRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jbGVhckVycm9ycygpO1xuICAgIHRoaXMuaXNWYWxpZCA9IHRydWU7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5ncm91cEZpZWxkcykge1xuICAgICAgdGhpcy5yZW5kZXJHcm91cEVycm9yKGtleSk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmllbGRzKSB7XG4gICAgICB0aGlzLnJlbmRlckZpZWxkRXJyb3Ioa2V5KTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LnR5cGUsIGV2ZW50LmVsZW0sIGV2ZW50LmZ1bmMpO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHRoaXMuY3VzdG9tU3R5bGVUYWdzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHRoaXMuY3VzdG9tU3R5bGVUYWdzW2tleV0ucmVtb3ZlKCk7XG4gICAgfSk7XG4gICAgdGhpcy5jbGVhckVycm9ycygpO1xuICAgIGlmICh0aGlzLmdsb2JhbENvbmZpZy5sb2NrRm9ybSkge1xuICAgICAgdGhpcy51bmxvY2tGb3JtKCk7XG4gICAgfVxuICB9XG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gICAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgaW5pdGlhbGl6ZSB0aGUgbGlicmFyeSEgRm9ybSBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbml0aWFsaXplKHRoaXMuZm9ybSwgdGhpcy5nbG9iYWxDb25maWcpO1xuICAgICAgT2JqZWN0LmtleXModGhpcy5maWVsZHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBmaWVsZFNlbGVjdG9yID0gdGhpcy5nZXRGaWVsZFNlbGVjdG9yQnlLZXkoa2V5KTtcbiAgICAgICAgaWYgKGZpZWxkU2VsZWN0b3IpIHtcbiAgICAgICAgICB0aGlzLmFkZEZpZWxkKFxuICAgICAgICAgICAgZmllbGRTZWxlY3RvcixcbiAgICAgICAgICAgIFsuLi50aGlzLmZpZWxkc1trZXldLnJ1bGVzXSxcbiAgICAgICAgICAgIHRoaXMuZmllbGRzW2tleV0uY29uZmlnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHNldEN1cnJlbnRMb2NhbGUobG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbGUgIT09IFwic3RyaW5nXCIgJiYgbG9jYWxlICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDdXJyZW50IGxvY2FsZSBzaG91bGQgYmUgYSBzdHJpbmdcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY3VycmVudExvY2FsZSA9IGxvY2FsZTtcbiAgICBpZiAodGhpcy5pc1N1Ym1pdHRlZCkge1xuICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuICBvblN1Y2Nlc3MoY2FsbGJhY2spIHtcbiAgICB0aGlzLm9uU3VjY2Vzc0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb25GYWlsKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vbkZhaWxDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uVmFsaWRhdGUoY2FsbGJhY2spIHtcbiAgICB0aGlzLm9uVmFsaWRhdGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5leHBvcnQge1xuICBDdXN0b21TdHlsZVRhZ0lkcyxcbiAgR3JvdXBSdWxlcyxcbiAgUnVsZXMsXG4gIEp1c3RWYWxpZGF0ZSBhcyBkZWZhdWx0XG59O1xuIiwiZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25Gb3JtQ29uZmlnID0ge1xuICBlcnJvckZpZWxkQ3NzQ2xhc3M6IFwiaW5wdXQtLWludmFsaWRcIixcbiAgZXJyb3JMYWJlbFN0eWxlOiB7fSxcbiAgZXJyb3JMYWJlbENzc0NsYXNzOiBbXCJmb3JtX19maWVsZC1lcnJvclwiXSxcbn07XG5cbmNvbnN0IHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZSA9IHtcbiAgcnVsZTogXCJyZXF1aXJlZFwiLFxuICBlcnJvck1lc3NhZ2U6IFwi0J7QsdGP0LfQsNGC0LXQu9GM0L3QvtC1INC/0L7Qu9C1XCIsXG59O1xuXG5leHBvcnQgY29uc3QgcGhvbmVGaWVsZFZhbGlkYXRpb25SdWxlcyA9IFtcbiAgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlLFxuICB7XG4gICAgcnVsZTogXCJjdXN0b21SZWdleHBcIixcbiAgICB2YWx1ZTogL14oXFwrNylbXFxzLV1cXCgoWzAtOV17M30pXFwpW1xccy1dKFswLTldezN9KVtcXHMtXShbMC05XXsyfSlbXFxzLV0oWzAtOV17Mn0pL2dpLFxuICAgIGVycm9yTWVzc2FnZTogXCLQndC10LLQtdGA0L3QvtC1INC30L3QsNGH0LXQvdC40LVcIixcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMgPSBbXG4gIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZSxcbiAge1xuICAgIHJ1bGU6IFwibWluTGVuZ3RoXCIsXG4gICAgdmFsdWU6IDIsXG4gICAgZXJyb3JNZXNzYWdlOiBcItCX0L3QsNGH0LXQvdC40LUg0YHQu9C40YjQutC+0Lwg0LrQvtGA0L7RgtC60L7QtVwiLFxuICB9LFxuICB7XG4gICAgcnVsZTogXCJtYXhMZW5ndGhcIixcbiAgICB2YWx1ZTogNTAsXG4gICAgZXJyb3JNZXNzYWdlOiBcItCX0L3QsNGH0LXQvdC40LUg0YHQu9C40YjQutC+0Lwg0LTQu9C40L3QvdC+0LVcIixcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCBlbWFpbEZpZWxkVmFsaWRhdGlvblJ1bGVzID0gW1xuICByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGUsXG4gIHtcbiAgICBydWxlOiBcImVtYWlsXCIsXG4gICAgZXJyb3JNZXNzYWdlOiBcItCd0LXQstC10YDQvdC+0LUg0LfQvdCw0YfQtdC90LjQtVwiLFxuICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMgPSBbcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlXTtcblxuZXhwb3J0IGNvbnN0IGludGVnZXJGaWVsZFZhbGlkYXRpb25SdWxlcyA9IFtcbiAgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlLFxuICB7XG4gICAgcnVsZTogXCJpbnRlZ2VyXCIsXG4gICAgZXJyb3JNZXNzYWdlOiBcItCS0LLQtdC00LjRgtC1INGH0LjRgdC70L5cIixcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWcgPSB7XG4gIGVycm9yRmllbGRDc3NDbGFzczogXCJzZWxlY3QtLWludmFsaWRcIixcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtU2VuZENvbmZpZyhwbGFpbkZvcm1EYXRhKSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGxhaW5Gb3JtRGF0YSksXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBvblZhbGlkYXRpb25TdWNjZXNzID0gKGZvcm0sIGFjdGlvblVybCwgc3VjY2VzcywgZXJyb3IpID0+IHtcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XG4gIGNvbnN0IHBsYWluRm9ybURhdGEgPSBPYmplY3QuZnJvbUVudHJpZXMoZm9ybURhdGEuZW50cmllcygpKTtcbiAgZmV0Y2goYWN0aW9uVXJsLCBmb3JtU2VuZENvbmZpZyhwbGFpbkZvcm1EYXRhKSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIHN1Y2Nlc3MoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3IoKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2VsZWN0SGFzVmFsdWUgPSAoc2VsZWN0KSA9PiB7XG4gIGlmIChzZWxlY3QudmFsdWUubGVuZ3RoICE9PSAwKSBzZWxlY3QuY2xhc3NMaXN0LmFkZChcInNlbGVjdC0taGFzLXZhbHVlXCIpO1xuICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52YWx1ZS5sZW5ndGggIT09IDAgPyB0aGlzLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3QtLWhhcy12YWx1ZVwiKSA6IHRoaXMuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdC0taGFzLXZhbHVlXCIpO1xuICB9KTtcbn07XG4iLCJpbXBvcnQgeyByZWFkeSB9IGZyb20gXCIuLi8uLi9qcy91dGlscy9kb2N1bWVudFJlYWR5LmpzXCI7XG5pbXBvcnQgSnVzdFZhbGlkYXRlIGZyb20gXCJqdXN0LXZhbGlkYXRlXCI7XG5pbXBvcnQge1xuICB2YWxpZGF0aW9uRm9ybUNvbmZpZyxcbiAgcGhvbmVGaWVsZFZhbGlkYXRpb25SdWxlcyxcbiAgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzLFxuICBlbWFpbEZpZWxkVmFsaWRhdGlvblJ1bGVzLFxuICByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzLFxuICBpbnRlZ2VyRmllbGRWYWxpZGF0aW9uUnVsZXMsXG4gIHNlbGVjdEZpZWxkVmFsaWRhdGlvbkNvbmZpZyxcbiAgb25WYWxpZGF0aW9uU3VjY2Vzcyxcbn0gZnJvbSBcIi4uLy4uL2pzL2NvbW1vbi9mb3JtVmFyaWFibGVzLmpzXCI7XG5cbmNvbnN0IHN1Y2Nlc3NGbiA9ICgpID0+IHtcbiAgYWxlcnQoXCJzdWNjZXNzXCIpO1xufTtcbmNvbnN0IGVycm9yRm4gPSAoKSA9PiB7XG4gIGFsZXJ0KFwiZXJyb3JcIik7XG59O1xuXG5yZWFkeShmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGZvcm1NeURhdGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvcm1NeURhdGFcIik7XG4gIGNvbnN0IGZvcm1QYXltZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtUGF5bWVudFwiKTtcbiAgY29uc3QgZm9ybUZlZWRCYWNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtRmVlZEJhY2tcIik7XG4gIGNvbnN0IGZvcm1BZGRGaWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtQWRkRmlsZVwiKTtcblxuICBjb25zdCBmb3JtVmlzYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9ybVZpc2FcIik7XG4gIGNvbnN0IGZvcm1BdGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtQXRlc1wiKTtcbiAgY29uc3QgZm9ybVdvcmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvcm1Xb3JrXCIpO1xuICBjb25zdCBmb3JtQ2l0aXplbnNoaXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvcm1DaXRpemVuc2hpcFwiKTtcbiAgY29uc3QgZm9ybUludFBhc3Nwb3J0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtSW50UGFzc3BvcnRcIik7XG4gIGNvbnN0IGZvcm1JbnZpdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvcm1JbnZpdGVcIik7XG4gIGNvbnN0IGZvcm1BdmlhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtQXZpYVwiKTtcbiAgY29uc3QgZm9ybUJ1c2luZXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtQnVzaW5lc3NcIik7XG4gIGNvbnN0IGZvcm1NZWRpY2FsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtTWVkaWNhbFwiKTtcbiAgY29uc3QgZm9ybU90aGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9ybU90aGVyc1wiKTtcbiAgY29uc3QgZm9ybUNhbGxiYWNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtQ2FsbGJhY2tcIik7XG5cbiAgaWYgKGZvcm1WaXNhKSB7XG4gICAgY29uc3QgYWN0aW9uVXJsID0gZm9ybVZpc2EuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGNvbnN0IGZvcm1WaXNhVmFsaWRhdGUgPSBuZXcgSnVzdFZhbGlkYXRlKGZvcm1WaXNhLCB2YWxpZGF0aW9uRm9ybUNvbmZpZyk7XG5cbiAgICBmb3JtVmlzYVZhbGlkYXRlXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbGFzdG5hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSd0eXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2NpdGl6ZW5zaGlwJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcInNlbGVjdFtuYW1lPSd2aXNhVHlwZSddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMsIHNlbGVjdEZpZWxkVmFsaWRhdGlvbkNvbmZpZylcbiAgICAgIC5hZGRGaWVsZChcInNlbGVjdFtuYW1lPSdjb3VudHJ5J11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcywgc2VsZWN0RmllbGRWYWxpZGF0aW9uQ29uZmlnKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nYW1vdW50J11cIiwgaW50ZWdlckZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nZGF0ZVN0YXJ0J11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2RhdGVFbmQnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLm9uU3VjY2VzcygoKSA9PiB7XG4gICAgICAgIG9uVmFsaWRhdGlvblN1Y2Nlc3MoZm9ybVZpc2EsIGFjdGlvblVybCwgc3VjY2Vzc0ZuLCBlcnJvckZuKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgaWYgKGZvcm1BdGVzKSB7XG4gICAgY29uc3QgYWN0aW9uVXJsID0gZm9ybUF0ZXMuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGNvbnN0IGZvcm1BdGVzVmFsaWRhdGUgPSBuZXcgSnVzdFZhbGlkYXRlKGZvcm1BdGVzLCB2YWxpZGF0aW9uRm9ybUNvbmZpZyk7XG5cbiAgICBmb3JtQXRlc1ZhbGlkYXRlXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbGFzdG5hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSd0eXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2NpdGl6ZW5zaGlwJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2Ftb3VudCddXCIsIGludGVnZXJGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2RhdGVTdGFydCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdkYXRlRW5kJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5vblN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICBvblZhbGlkYXRpb25TdWNjZXNzKGZvcm1BdGVzLCBhY3Rpb25VcmwsIHN1Y2Nlc3NGbiwgZXJyb3JGbik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGlmIChmb3JtV29yaykge1xuICAgIGNvbnN0IGFjdGlvblVybCA9IGZvcm1Xb3JrLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBjb25zdCBmb3JtV29ya1ZhbGlkYXRlID0gbmV3IEp1c3RWYWxpZGF0ZShmb3JtV29yaywgdmFsaWRhdGlvbkZvcm1Db25maWcpO1xuXG4gICAgZm9ybVdvcmtWYWxpZGF0ZVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ncGhvbmUnXVwiLCBwaG9uZUZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbmFtZSddXCIsIHRleHRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2xhc3RuYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nZW1haWwnXVwiLCBlbWFpbEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ndHlwZSddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdjaXRpemVuc2hpcCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJzZWxlY3RbbmFtZT0nY291bnRyeSddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMsIHNlbGVjdEZpZWxkVmFsaWRhdGlvbkNvbmZpZylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2Ftb3VudCddXCIsIGludGVnZXJGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2RhdGVTdGFydCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdkYXRlRW5kJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5vblN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICBvblZhbGlkYXRpb25TdWNjZXNzKGZvcm1Xb3JrLCBhY3Rpb25VcmwsIHN1Y2Nlc3NGbiwgZXJyb3JGbik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGlmIChmb3JtQ2l0aXplbnNoaXApIHtcbiAgICBjb25zdCBhY3Rpb25VcmwgPSBmb3JtQ2l0aXplbnNoaXAuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGNvbnN0IGZvcm1DaXRpemVuc2hpcFZhbGlkYXRlID0gbmV3IEp1c3RWYWxpZGF0ZShmb3JtQ2l0aXplbnNoaXAsIHZhbGlkYXRpb25Gb3JtQ29uZmlnKTtcblxuICAgIGZvcm1DaXRpemVuc2hpcFZhbGlkYXRlXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbGFzdG5hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSd0eXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcInNlbGVjdFtuYW1lPSdjaXRpemVuc2hpcENvdW50cnknXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzLCBzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWcpXG4gICAgICAuYWRkRmllbGQoXCJzZWxlY3RbbmFtZT0ncHJvZ3JhbSddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMsIHNlbGVjdEZpZWxkVmFsaWRhdGlvbkNvbmZpZylcbiAgICAgIC5hZGRGaWVsZChcInNlbGVjdFtuYW1lPSdjcmltaW5hbFJlY29yZCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMsIHNlbGVjdEZpZWxkVmFsaWRhdGlvbkNvbmZpZylcbiAgICAgIC5vblN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICBvblZhbGlkYXRpb25TdWNjZXNzKGZvcm1DaXRpemVuc2hpcCwgYWN0aW9uVXJsLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZm9ybUludFBhc3Nwb3J0KSB7XG4gICAgY29uc3QgYWN0aW9uVXJsID0gZm9ybUludFBhc3Nwb3J0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBjb25zdCBmb3JtSW50UGFzc3BvcnRWYWxpZGF0ZSA9IG5ldyBKdXN0VmFsaWRhdGUoZm9ybUludFBhc3Nwb3J0LCB2YWxpZGF0aW9uRm9ybUNvbmZpZyk7XG5cbiAgICBmb3JtSW50UGFzc3BvcnRWYWxpZGF0ZVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ncGhvbmUnXVwiLCBwaG9uZUZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbmFtZSddXCIsIHRleHRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2xhc3RuYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nZW1haWwnXVwiLCBlbWFpbEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ndHlwZSddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJzZWxlY3RbbmFtZT0nYWdlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcywgc2VsZWN0RmllbGRWYWxpZGF0aW9uQ29uZmlnKVxuICAgICAgLmFkZEZpZWxkKFwic2VsZWN0W25hbWU9J21pbGl0YXJ5SWQnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzLCBzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWcpXG4gICAgICAuYWRkRmllbGQoXCJzZWxlY3RbbmFtZT0nZGVidCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMsIHNlbGVjdEZpZWxkVmFsaWRhdGlvbkNvbmZpZylcbiAgICAgIC5vblN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICBvblZhbGlkYXRpb25TdWNjZXNzKGZvcm1JbnRQYXNzcG9ydCwgYWN0aW9uVXJsLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZm9ybUludml0ZSkge1xuICAgIGNvbnN0IGFjdGlvblVybCA9IGZvcm1JbnZpdGUuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGNvbnN0IGZvcm1JbnZpdGVWYWxpZGF0ZSA9IG5ldyBKdXN0VmFsaWRhdGUoZm9ybUludml0ZSwgdmFsaWRhdGlvbkZvcm1Db25maWcpO1xuXG4gICAgZm9ybUludml0ZVZhbGlkYXRlXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbGFzdG5hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSd0eXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcInNlbGVjdFtuYW1lPSdpbnZpdGVUeXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcywgc2VsZWN0RmllbGRWYWxpZGF0aW9uQ29uZmlnKVxuICAgICAgLmFkZEZpZWxkKFwic2VsZWN0W25hbWU9J3N0YXlEdXJhdGlvbiddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMsIHNlbGVjdEZpZWxkVmFsaWRhdGlvbkNvbmZpZylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2ludml0ZWVDb3VudHJ5J11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLm9uU3VjY2VzcygoKSA9PiB7XG4gICAgICAgIG9uVmFsaWRhdGlvblN1Y2Nlc3MoZm9ybUludml0ZSwgYWN0aW9uVXJsLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZm9ybUF2aWEpIHtcbiAgICBjb25zdCBhY3Rpb25VcmwgPSBmb3JtQXZpYS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgY29uc3QgZm9ybUF2aWFWYWxpZGF0ZSA9IG5ldyBKdXN0VmFsaWRhdGUoZm9ybUF2aWEsIHZhbGlkYXRpb25Gb3JtQ29uZmlnKTtcblxuICAgIGZvcm1BdmlhVmFsaWRhdGVcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J3Bob25lJ11cIiwgcGhvbmVGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J25hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdsYXN0bmFtZSddXCIsIHRleHRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2VtYWlsJ11cIiwgZW1haWxGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J3R5cGUnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwic2VsZWN0W25hbWU9J3NlcnZpY2VUeXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcywgc2VsZWN0RmllbGRWYWxpZGF0aW9uQ29uZmlnKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ncGFzc2VuZ2Vyc051bWJlciddXCIsIGludGVnZXJGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J3doYXREYXRlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5vblN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICBvblZhbGlkYXRpb25TdWNjZXNzKGZvcm1BdmlhLCBhY3Rpb25VcmwsIHN1Y2Nlc3NGbiwgZXJyb3JGbik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGlmIChmb3JtQnVzaW5lc3MpIHtcbiAgICBjb25zdCBhY3Rpb25VcmwgPSBmb3JtQnVzaW5lc3MuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGNvbnN0IGZvcm1CdXNpbmVzc1ZhbGlkYXRlID0gbmV3IEp1c3RWYWxpZGF0ZShmb3JtQnVzaW5lc3MsIHZhbGlkYXRpb25Gb3JtQ29uZmlnKTtcblxuICAgIGZvcm1CdXNpbmVzc1ZhbGlkYXRlXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbGFzdG5hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSd0eXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2NpdGl6ZW5zaGlwJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcInNlbGVjdFtuYW1lPSdpbnZpdGVUeXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcywgc2VsZWN0RmllbGRWYWxpZGF0aW9uQ29uZmlnKVxuICAgICAgLmFkZEZpZWxkKFwic2VsZWN0W25hbWU9J2NvdW50cnknXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzLCBzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWcpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdhbW91bnQnXVwiLCBpbnRlZ2VyRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdkYXRlU3RhcnQnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nZGF0ZUVuZCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAub25TdWNjZXNzKCgpID0+IHtcbiAgICAgICAgb25WYWxpZGF0aW9uU3VjY2Vzcyhmb3JtQnVzaW5lc3MsIGFjdGlvblVybCwgc3VjY2Vzc0ZuLCBlcnJvckZuKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgaWYgKGZvcm1NZWRpY2FsKSB7XG4gICAgY29uc3QgYWN0aW9uVXJsID0gZm9ybU1lZGljYWwuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGNvbnN0IGZvcm1NZWRpY2FsVmFsaWRhdGUgPSBuZXcgSnVzdFZhbGlkYXRlKGZvcm1NZWRpY2FsLCB2YWxpZGF0aW9uRm9ybUNvbmZpZyk7XG5cbiAgICBmb3JtTWVkaWNhbFZhbGlkYXRlXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbGFzdG5hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSd0eXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2NpdGl6ZW5zaGlwJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcInNlbGVjdFtuYW1lPSdpbnZpdGVUeXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcywgc2VsZWN0RmllbGRWYWxpZGF0aW9uQ29uZmlnKVxuICAgICAgLmFkZEZpZWxkKFwic2VsZWN0W25hbWU9J2NvdW50cnknXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzLCBzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWcpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdhbW91bnQnXVwiLCBpbnRlZ2VyRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdkYXRlU3RhcnQnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nZGF0ZUVuZCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAub25TdWNjZXNzKCgpID0+IHtcbiAgICAgICAgb25WYWxpZGF0aW9uU3VjY2Vzcyhmb3JtTWVkaWNhbCwgYWN0aW9uVXJsLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZm9ybU90aGVycykge1xuICAgIGNvbnN0IGFjdGlvblVybCA9IGZvcm1PdGhlcnMuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGNvbnN0IGZvcm1PdGhlcnNWYWxpZGF0ZSA9IG5ldyBKdXN0VmFsaWRhdGUoZm9ybU90aGVycywgdmFsaWRhdGlvbkZvcm1Db25maWcpO1xuXG4gICAgZm9ybU90aGVyc1ZhbGlkYXRlXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbGFzdG5hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSd0eXBlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5vblN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICBvblZhbGlkYXRpb25TdWNjZXNzKGZvcm1PdGhlcnMsIGFjdGlvblVybCwgc3VjY2Vzc0ZuLCBlcnJvckZuKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgaWYgKGZvcm1NeURhdGEpIHtcbiAgICBjb25zdCBhY3Rpb25VcmwgPSBmb3JtTXlEYXRhLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBjb25zdCBmb3JtTXlEYXRhVmFsaWRhdGUgPSBuZXcgSnVzdFZhbGlkYXRlKGZvcm1NeURhdGEsIHZhbGlkYXRpb25Gb3JtQ29uZmlnKTtcblxuICAgIGZvcm1NeURhdGFWYWxpZGF0ZVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ncGhvbmUnXVwiLCBwaG9uZUZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbmFtZSddXCIsIHRleHRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2xhc3RuYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbWlkZGxlTmFtZSddXCIsIHRleHRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2VtYWlsJ11cIiwgZW1haWxGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2JpcnRoZGF5J11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2N1cnJlbnRDaXRpemVuc2hpcCddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdpbnRQYXNzTnVtYmVyJ11cIiwgW1xuICAgICAgICB7XG4gICAgICAgICAgcnVsZTogXCJyZXF1aXJlZFwiLFxuICAgICAgICAgIGVycm9yTWVzc2FnZTogXCLQntCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LVcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJ1bGU6IFwiY3VzdG9tUmVnZXhwXCIsXG4gICAgICAgICAgdmFsdWU6IC9cXGR7Mn1cXHNcXGR7N30vZ2ksXG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiBcItCd0LXQstC10YDQvdC+0LUg0LfQvdCw0YfQtdC90LjQtVwiLFxuICAgICAgICB9LFxuICAgICAgXSlcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2ludElzc3VlZEJ5J11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2ludElzc3VlRGF0ZSddXCIsIHJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdpbnRFeHBpcnlEYXRlJ11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J3Bhc3NOdW1iZXInXVwiLCBbXG4gICAgICAgIHtcbiAgICAgICAgICBydWxlOiBcInJlcXVpcmVkXCIsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiBcItCe0LHRj9C30LDRgtC10LvRjNC90L7QtSDQv9C+0LvQtVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcnVsZTogXCJjdXN0b21SZWdleHBcIixcbiAgICAgICAgICB2YWx1ZTogL1xcZHs0fVxcc1xcZHs2fS9naSxcbiAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwi0J3QtdCy0LXRgNC90L7QtSDQt9C90LDRh9C10L3QuNC1XCIsXG4gICAgICAgIH0sXG4gICAgICBdKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ncGFzc0lzc3VlZEJ5J11cIiwgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J3Bhc3NJc3N1ZURhdGUnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ncGFzc0V4cGlyeURhdGUnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLm9uU3VjY2VzcygoKSA9PiB7XG4gICAgICAgIG9uVmFsaWRhdGlvblN1Y2Nlc3MoZm9ybU15RGF0YSwgYWN0aW9uVXJsLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZm9ybVBheW1lbnQpIHtcbiAgICBjb25zdCBhY3Rpb25VcmwgPSBmb3JtUGF5bWVudC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgY29uc3QgZm9ybVBheW1lbnRWYWxpZGF0ZSA9IG5ldyBKdXN0VmFsaWRhdGUoZm9ybVBheW1lbnQsIHZhbGlkYXRpb25Gb3JtQ29uZmlnKTtcblxuICAgIGZvcm1QYXltZW50VmFsaWRhdGVcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J3Bob25lJ11cIiwgcGhvbmVGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J25hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdzdW0nXVwiLCBpbnRlZ2VyRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAub25TdWNjZXNzKCgpID0+IHtcbiAgICAgICAgb25WYWxpZGF0aW9uU3VjY2Vzcyhmb3JtUGF5bWVudCwgYWN0aW9uVXJsLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZm9ybUZlZWRCYWNrKSB7XG4gICAgY29uc3QgYWN0aW9uVXJsID0gZm9ybUZlZWRCYWNrLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBjb25zdCBmb3JtRmVlZEJhY2tWYWxpZGF0ZSA9IG5ldyBKdXN0VmFsaWRhdGUoZm9ybUZlZWRCYWNrLCB2YWxpZGF0aW9uRm9ybUNvbmZpZyk7XG5cbiAgICBmb3JtRmVlZEJhY2tWYWxpZGF0ZVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0ncGhvbmUnXVwiLCBwaG9uZUZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nbmFtZSddXCIsIHRleHRGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J2VtYWlsJ11cIiwgZW1haWxGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5vblN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICBvblZhbGlkYXRpb25TdWNjZXNzKGZvcm1GZWVkQmFjaywgYWN0aW9uVXJsLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZm9ybUFkZEZpbGUpIHtcbiAgICBjb25zdCBhY3Rpb25VcmwgPSBmb3JtQWRkRmlsZS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgY29uc3QgZm9ybUFkZEZpbGVWYWxpZGF0ZSA9IG5ldyBKdXN0VmFsaWRhdGUoZm9ybUFkZEZpbGUsIHZhbGlkYXRpb25Gb3JtQ29uZmlnKTtcblxuICAgIGZvcm1BZGRGaWxlVmFsaWRhdGVcbiAgICAgIC5hZGRGaWVsZChcbiAgICAgICAgXCJbbmFtZT0nZG9jJ11cIixcbiAgICAgICAgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6IFwibWluRmlsZXNDb3VudFwiLFxuICAgICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwi0J3Rg9C20L3QviDQstGL0LHRgNCw0YLRjCDRhNCw0LnQu1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcnVsZTogXCJtYXhGaWxlc0NvdW50XCIsXG4gICAgICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCLQntCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LVcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6IFwiZmlsZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgIGZpbGVzOiB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogW1wieGxzXCIsIFwieGxzeFwiLCBcImRvY1wiLCBcImRvY3hcIiwgXCJwbmdcIiwgXCJqcGdcIiwgXCJqcGVnXCIsIFwicGRmXCJdLFxuICAgICAgICAgICAgICAgIG1heFNpemU6IDVfMDAwXzAwMCxcbiAgICAgICAgICAgICAgICBtaW5TaXplOiAxXzAwMCxcbiAgICAgICAgICAgICAgICB0eXBlczogW1xuICAgICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIixcbiAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vbXN3b3JkXCIsXG4gICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL3BkZlwiLFxuICAgICAgICAgICAgICAgICAgXCJpbWFnZS9qcGVnXCIsXG4gICAgICAgICAgICAgICAgICBcImltYWdlL2pwZ1wiLFxuICAgICAgICAgICAgICAgICAgXCJpbWFnZS9wbmdcIixcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogYNCk0LDQudC7INC00L7Qu9C20LXQvSDQsdGL0YLRjCDQtNC+0LrRg9C80LXQvdGC0L7QvCAoeGxzLCB4bHN4LCBkb2MsIGRvY3gsIHBkZikg0LjQu9C4wqDQuNC30L7QsdGA0LDQttC10L3QuNC10LwgKHBuZywganBnLCBqcGVnKSxcbiAgICAgICAgICAgICAg0LzQsNC60YHQuNC80LDQu9GM0L3Ri9C5INGA0LDQt9C80LXRgCDRhNCw0LnQu9CwIDVtYmAsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAge1xuICAgICAgICAgIGVycm9yRmllbGRDc3NDbGFzczogXCJpbnB1dC1maWxlX19pbnB1dC0taW52YWxpZFwiLFxuICAgICAgICAgIGVycm9yTGFiZWxDc3NDbGFzczogXCJpbnB1dC1maWxlX19lcnJvclwiLFxuICAgICAgICB9LFxuICAgICAgKVxuICAgICAgLm9uU3VjY2VzcygoKSA9PiB7XG4gICAgICAgIG9uVmFsaWRhdGlvblN1Y2Nlc3MoZm9ybUFkZEZpbGUsIGFjdGlvblVybCwgc3VjY2Vzc0ZuLCBlcnJvckZuKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgaWYgKGZvcm1DYWxsYmFjaykge1xuICAgIGNvbnN0IGFjdGlvblVybCA9IGZvcm1DYWxsYmFjay5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgY29uc3QgZm9ybUNhbGxiYWNrVmFsaWRhdGUgPSBuZXcgSnVzdFZhbGlkYXRlKGZvcm1DYWxsYmFjaywgdmFsaWRhdGlvbkZvcm1Db25maWcpO1xuXG4gICAgZm9ybUNhbGxiYWNrVmFsaWRhdGVcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J3Bob25lJ11cIiwgcGhvbmVGaWVsZFZhbGlkYXRpb25SdWxlcylcbiAgICAgIC5hZGRGaWVsZChcImlucHV0W25hbWU9J25hbWUnXVwiLCB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdlbWFpbCddXCIsIGVtYWlsRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdjaXR5J11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLm9uU3VjY2VzcygoKSA9PiB7XG4gICAgICAgIG9uVmFsaWRhdGlvblN1Y2Nlc3MoXG4gICAgICAgICAgZm9ybUNhbGxiYWNrLFxuICAgICAgICAgIGFjdGlvblVybCxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKFwiL3RoYW5rcy9cIik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvckZuLFxuICAgICAgICApO1xuICAgICAgfSk7XG4gIH1cbn0pO1xuIiwiaW1wb3J0IHsgcmVhZHkgfSBmcm9tIFwiLi4vLi4vanMvdXRpbHMvZG9jdW1lbnRSZWFkeS5qc1wiO1xuXG5yZWFkeShmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGZvcm1TZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvcm1TZXRcIik7XG5cbiAgaWYgKGZvcm1TZXQpIHtcbiAgICBjb25zdCBzZXJ2aWNlVHlwZVNlbGVjdCA9IGZvcm1TZXQucXVlcnlTZWxlY3RvcihcIiNzZXJ2aWNlXCIpO1xuICAgIGNvbnN0IGZvcm1TZXRQYW5lcyA9IGZvcm1TZXQucXVlcnlTZWxlY3RvckFsbChcIi5mb3JtLXNldF9fcGFuZVwiKTtcblxuICAgIHNldEFjdGl2ZVBhbmUoZm9ybVNldFBhbmVzLCBzZXJ2aWNlVHlwZVNlbGVjdC52YWx1ZSk7XG5cbiAgICBzZXJ2aWNlVHlwZVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlKSA9PiB7XG4gICAgICBzZXRBY3RpdmVQYW5lKGZvcm1TZXRQYW5lcywgZS50YXJnZXQudmFsdWUpO1xuICAgIH0pO1xuICB9XG59KTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlUGFuZShwYW5lcywgaWQpIHtcbiAgZm9yIChsZXQgcGFuZSBvZiBwYW5lcykge1xuICAgIGlmIChwYW5lLmRhdGFzZXQuZm9ybSA9PT0gaWQpIHBhbmUuY2xhc3NMaXN0LmFkZChcImZvcm0tc2V0X19wYW5lLS1hY3RpdmVcIik7XG4gICAgZWxzZSBwYW5lLmNsYXNzTGlzdC5yZW1vdmUoXCJmb3JtLXNldF9fcGFuZS0tYWN0aXZlXCIpO1xuICB9XG59XG4iLCIvKiogQ2hlY2tzIGlmIHZhbHVlIGlzIHN0cmluZyAqL1xuZnVuY3Rpb24gaXNTdHJpbmcoc3RyKSB7XG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbi8qKiBDaGVja3MgaWYgdmFsdWUgaXMgb2JqZWN0ICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgdmFyIF9vYmokY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCAmJiAob2JqID09IG51bGwgfHwgKF9vYmokY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3IpID09IG51bGwgPyB2b2lkIDAgOiBfb2JqJGNvbnN0cnVjdG9yLm5hbWUpID09PSAnT2JqZWN0Jztcbn1cbmZ1bmN0aW9uIHBpY2sob2JqLCBrZXlzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGtleXMpKSByZXR1cm4gcGljayhvYmosIChfLCBrKSA9PiBrZXlzLmluY2x1ZGVzKGspKTtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChhY2MsIF9yZWYpID0+IHtcbiAgICBsZXQgW2ssIHZdID0gX3JlZjtcbiAgICBpZiAoa2V5cyh2LCBrKSkgYWNjW2tdID0gdjtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5cbi8qKiBEaXJlY3Rpb24gKi9cbmNvbnN0IERJUkVDVElPTiA9IHtcbiAgTk9ORTogJ05PTkUnLFxuICBMRUZUOiAnTEVGVCcsXG4gIEZPUkNFX0xFRlQ6ICdGT1JDRV9MRUZUJyxcbiAgUklHSFQ6ICdSSUdIVCcsXG4gIEZPUkNFX1JJR0hUOiAnRk9SQ0VfUklHSFQnXG59O1xuXG4vKiogRGlyZWN0aW9uICovXG5cbmZ1bmN0aW9uIGZvcmNlRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgRElSRUNUSU9OLkxFRlQ6XG4gICAgICByZXR1cm4gRElSRUNUSU9OLkZPUkNFX0xFRlQ7XG4gICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG4gICAgICByZXR1cm4gRElSRUNUSU9OLkZPUkNFX1JJR0hUO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICB9XG59XG5cbi8qKiBFc2NhcGVzIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb250cm9sIGNoYXJzICovXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFtcXF0vXFxcXF0pL2csICdcXFxcJDEnKTtcbn1cblxuLy8gY2xvbmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Vwb2JlcmV6a2luL2Zhc3QtZGVlcC1lcXVhbCB3aXRoIHNtYWxsIGNoYW5nZXNcbmZ1bmN0aW9uIG9iamVjdEluY2x1ZGVzKGIsIGEpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuICBjb25zdCBhcnJBID0gQXJyYXkuaXNBcnJheShhKSxcbiAgICBhcnJCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgbGV0IGk7XG4gIGlmIChhcnJBICYmIGFyckIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgaWYgKCFvYmplY3RJbmNsdWRlcyhhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZSxcbiAgICAgIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG4gICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG4gICAgaWYgKGRhdGVBICE9IGRhdGVCKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHAsXG4gICAgICByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICBpZiAocmVnZXhwQSAmJiByZWdleHBCKSByZXR1cm4gYS50b1N0cmluZygpID09IGIudG9TdHJpbmcoKTtcbiAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIC8vIGlmIChrZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgaWYgKCFvYmplY3RJbmNsdWRlcyhiW2tleXNbaV1dLCBhW2tleXNbaV1dKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKiBTZWxlY3Rpb24gcmFuZ2UgKi9cblxuZXhwb3J0IHsgRElSRUNUSU9OLCBlc2NhcGVSZWdFeHAsIGZvcmNlRGlyZWN0aW9uLCBpc09iamVjdCwgaXNTdHJpbmcsIG9iamVjdEluY2x1ZGVzLCBwaWNrIH07XG4iLCJpbXBvcnQgeyBESVJFQ1RJT04gfSBmcm9tICcuL3V0aWxzLmpzJztcblxuLyoqIFByb3ZpZGVzIGRldGFpbHMgb2YgY2hhbmdpbmcgaW5wdXQgKi9cbmNsYXNzIEFjdGlvbkRldGFpbHMge1xuICAvKiogQ3VycmVudCBpbnB1dCB2YWx1ZSAqL1xuXG4gIC8qKiBDdXJyZW50IGN1cnNvciBwb3NpdGlvbiAqL1xuXG4gIC8qKiBPbGQgaW5wdXQgdmFsdWUgKi9cblxuICAvKiogT2xkIHNlbGVjdGlvbiAqL1xuXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdHMpO1xuXG4gICAgLy8gZG91YmxlIGNoZWNrIGlmIGxlZnQgcGFydCB3YXMgY2hhbmdlZCAoYXV0b2ZpbGxpbmcsIG90aGVyIG5vbi1zdGFuZGFyZCBpbnB1dCB0cmlnZ2VycylcbiAgICB3aGlsZSAodGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLnN0YXJ0Q2hhbmdlUG9zKSAhPT0gdGhpcy5vbGRWYWx1ZS5zbGljZSgwLCB0aGlzLnN0YXJ0Q2hhbmdlUG9zKSkge1xuICAgICAgLS10aGlzLm9sZFNlbGVjdGlvbi5zdGFydDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5zZXJ0ZWRDb3VudCkge1xuICAgICAgLy8gZG91YmxlIGNoZWNrIHJpZ2h0IHBhcnRcbiAgICAgIHdoaWxlICh0aGlzLnZhbHVlLnNsaWNlKHRoaXMuY3Vyc29yUG9zKSAhPT0gdGhpcy5vbGRWYWx1ZS5zbGljZSh0aGlzLm9sZFNlbGVjdGlvbi5lbmQpKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlLmxlbmd0aCAtIHRoaXMuY3Vyc29yUG9zIDwgdGhpcy5vbGRWYWx1ZS5sZW5ndGggLSB0aGlzLm9sZFNlbGVjdGlvbi5lbmQpICsrdGhpcy5vbGRTZWxlY3Rpb24uZW5kO2Vsc2UgKyt0aGlzLmN1cnNvclBvcztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogU3RhcnQgY2hhbmdpbmcgcG9zaXRpb24gKi9cbiAgZ2V0IHN0YXJ0Q2hhbmdlUG9zKCkge1xuICAgIHJldHVybiBNYXRoLm1pbih0aGlzLmN1cnNvclBvcywgdGhpcy5vbGRTZWxlY3Rpb24uc3RhcnQpO1xuICB9XG5cbiAgLyoqIEluc2VydGVkIHN5bWJvbHMgY291bnQgKi9cbiAgZ2V0IGluc2VydGVkQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yUG9zIC0gdGhpcy5zdGFydENoYW5nZVBvcztcbiAgfVxuXG4gIC8qKiBJbnNlcnRlZCBzeW1ib2xzICovXG4gIGdldCBpbnNlcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5zdWJzdHIodGhpcy5zdGFydENoYW5nZVBvcywgdGhpcy5pbnNlcnRlZENvdW50KTtcbiAgfVxuXG4gIC8qKiBSZW1vdmVkIHN5bWJvbHMgY291bnQgKi9cbiAgZ2V0IHJlbW92ZWRDb3VudCgpIHtcbiAgICAvLyBNYXRoLm1heCBmb3Igb3Bwb3NpdGUgb3BlcmF0aW9uXG4gICAgcmV0dXJuIE1hdGgubWF4KHRoaXMub2xkU2VsZWN0aW9uLmVuZCAtIHRoaXMuc3RhcnRDaGFuZ2VQb3MgfHxcbiAgICAvLyBmb3IgRGVsZXRlXG4gICAgdGhpcy5vbGRWYWx1ZS5sZW5ndGggLSB0aGlzLnZhbHVlLmxlbmd0aCwgMCk7XG4gIH1cblxuICAvKiogUmVtb3ZlZCBzeW1ib2xzICovXG4gIGdldCByZW1vdmVkKCkge1xuICAgIHJldHVybiB0aGlzLm9sZFZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLnJlbW92ZWRDb3VudCk7XG4gIH1cblxuICAvKiogVW5jaGFuZ2VkIGhlYWQgc3ltYm9scyAqL1xuICBnZXQgaGVhZCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5zdWJzdHJpbmcoMCwgdGhpcy5zdGFydENoYW5nZVBvcyk7XG4gIH1cblxuICAvKiogVW5jaGFuZ2VkIHRhaWwgc3ltYm9scyAqL1xuICBnZXQgdGFpbCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5zdWJzdHJpbmcodGhpcy5zdGFydENoYW5nZVBvcyArIHRoaXMuaW5zZXJ0ZWRDb3VudCk7XG4gIH1cblxuICAvKiogUmVtb3ZlIGRpcmVjdGlvbiAqL1xuICBnZXQgcmVtb3ZlRGlyZWN0aW9uKCkge1xuICAgIGlmICghdGhpcy5yZW1vdmVkQ291bnQgfHwgdGhpcy5pbnNlcnRlZENvdW50KSByZXR1cm4gRElSRUNUSU9OLk5PTkU7XG5cbiAgICAvLyBhbGlnbiByaWdodCBpZiBkZWxldGUgYXQgcmlnaHRcbiAgICByZXR1cm4gKHRoaXMub2xkU2VsZWN0aW9uLmVuZCA9PT0gdGhpcy5jdXJzb3JQb3MgfHwgdGhpcy5vbGRTZWxlY3Rpb24uc3RhcnQgPT09IHRoaXMuY3Vyc29yUG9zKSAmJlxuICAgIC8vIGlmIG5vdCByYW5nZSByZW1vdmVkIChldmVudCB3aXRoIGJhY2tzcGFjZSlcbiAgICB0aGlzLm9sZFNlbGVjdGlvbi5lbmQgPT09IHRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0ID8gRElSRUNUSU9OLlJJR0hUIDogRElSRUNUSU9OLkxFRlQ7XG4gIH1cbn1cblxuZXhwb3J0IHsgQWN0aW9uRGV0YWlscyBhcyBkZWZhdWx0IH07XG4iLCIvKiogQXBwbGllcyBtYXNrIG9uIGVsZW1lbnQgKi9cbmZ1bmN0aW9uIElNYXNrKGVsLCBvcHRzKSB7XG4gIC8vIGN1cnJlbnRseSBhdmFpbGFibGUgb25seSBmb3IgaW5wdXQtbGlrZSBlbGVtZW50c1xuICByZXR1cm4gbmV3IElNYXNrLklucHV0TWFzayhlbCwgb3B0cyk7XG59XG5cbmV4cG9ydCB7IElNYXNrIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGlzU3RyaW5nLCBpc09iamVjdCwgcGljayB9IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcblxuLy8gVE9ETyBjYW4ndCB1c2Ugb3ZlcmxvYWRzIGhlcmUgYmVjYXVzZSBvZiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzUwNzU0XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogc3RyaW5nKTogdHlwZW9mIE1hc2tlZFBhdHRlcm47XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogRGF0ZUNvbnN0cnVjdG9yKTogdHlwZW9mIE1hc2tlZERhdGU7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogTnVtYmVyQ29uc3RydWN0b3IpOiB0eXBlb2YgTWFza2VkTnVtYmVyO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IEFycmF5PGFueT4gfCBBcnJheUNvbnN0cnVjdG9yKTogdHlwZW9mIE1hc2tlZER5bmFtaWM7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogTWFza2VkRGF0ZSk6IHR5cGVvZiBNYXNrZWREYXRlO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IE1hc2tlZE51bWJlcik6IHR5cGVvZiBNYXNrZWROdW1iZXI7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogTWFza2VkRW51bSk6IHR5cGVvZiBNYXNrZWRFbnVtO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IE1hc2tlZFJhbmdlKTogdHlwZW9mIE1hc2tlZFJhbmdlO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IE1hc2tlZFJlZ0V4cCk6IHR5cGVvZiBNYXNrZWRSZWdFeHA7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogTWFza2VkRnVuY3Rpb24pOiB0eXBlb2YgTWFza2VkRnVuY3Rpb247XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogTWFza2VkUGF0dGVybik6IHR5cGVvZiBNYXNrZWRQYXR0ZXJuO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IE1hc2tlZER5bmFtaWMpOiB0eXBlb2YgTWFza2VkRHluYW1pYztcbi8vIGV4cG9ydCBmdW5jdGlvbiBtYXNrZWRDbGFzcyhtYXNrOiBNYXNrZWQpOiB0eXBlb2YgTWFza2VkO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IHR5cGVvZiBNYXNrZWQpOiB0eXBlb2YgTWFza2VkO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IHR5cGVvZiBNYXNrZWREYXRlKTogdHlwZW9mIE1hc2tlZERhdGU7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogdHlwZW9mIE1hc2tlZE51bWJlcik6IHR5cGVvZiBNYXNrZWROdW1iZXI7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogdHlwZW9mIE1hc2tlZEVudW0pOiB0eXBlb2YgTWFza2VkRW51bTtcbi8vIGV4cG9ydCBmdW5jdGlvbiBtYXNrZWRDbGFzcyhtYXNrOiB0eXBlb2YgTWFza2VkUmFuZ2UpOiB0eXBlb2YgTWFza2VkUmFuZ2U7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogdHlwZW9mIE1hc2tlZFJlZ0V4cCk6IHR5cGVvZiBNYXNrZWRSZWdFeHA7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogdHlwZW9mIE1hc2tlZEZ1bmN0aW9uKTogdHlwZW9mIE1hc2tlZEZ1bmN0aW9uO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IHR5cGVvZiBNYXNrZWRQYXR0ZXJuKTogdHlwZW9mIE1hc2tlZFBhdHRlcm47XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogdHlwZW9mIE1hc2tlZER5bmFtaWMpOiB0eXBlb2YgTWFza2VkRHluYW1pYztcbi8vIGV4cG9ydCBmdW5jdGlvbiBtYXNrZWRDbGFzczxNYXNrIGV4dGVuZHMgdHlwZW9mIE1hc2tlZD4gKG1hc2s6IE1hc2spOiBNYXNrO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2s6IFJlZ0V4cCk6IHR5cGVvZiBNYXNrZWRSZWdFeHA7XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzazogKHZhbHVlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiBib29sZWFuKTogdHlwZW9mIE1hc2tlZEZ1bmN0aW9uO1xuXG4vKiogR2V0IE1hc2tlZCBjbGFzcyBieSBtYXNrIHR5cGUgKi9cbmZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2spIC8qIFRPRE8gKi97XG4gIGlmIChtYXNrID09IG51bGwpIHRocm93IG5ldyBFcnJvcignbWFzayBwcm9wZXJ0eSBzaG91bGQgYmUgZGVmaW5lZCcpO1xuICBpZiAobWFzayBpbnN0YW5jZW9mIFJlZ0V4cCkgcmV0dXJuIElNYXNrLk1hc2tlZFJlZ0V4cDtcbiAgaWYgKGlzU3RyaW5nKG1hc2spKSByZXR1cm4gSU1hc2suTWFza2VkUGF0dGVybjtcbiAgaWYgKG1hc2sgPT09IERhdGUpIHJldHVybiBJTWFzay5NYXNrZWREYXRlO1xuICBpZiAobWFzayA9PT0gTnVtYmVyKSByZXR1cm4gSU1hc2suTWFza2VkTnVtYmVyO1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXNrKSB8fCBtYXNrID09PSBBcnJheSkgcmV0dXJuIElNYXNrLk1hc2tlZER5bmFtaWM7XG4gIGlmIChJTWFzay5NYXNrZWQgJiYgbWFzay5wcm90b3R5cGUgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpIHJldHVybiBtYXNrO1xuICBpZiAoSU1hc2suTWFza2VkICYmIG1hc2sgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpIHJldHVybiBtYXNrLmNvbnN0cnVjdG9yO1xuICBpZiAobWFzayBpbnN0YW5jZW9mIEZ1bmN0aW9uKSByZXR1cm4gSU1hc2suTWFza2VkRnVuY3Rpb247XG4gIGNvbnNvbGUud2FybignTWFzayBub3QgZm91bmQgZm9yIG1hc2snLCBtYXNrKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gIHJldHVybiBJTWFzay5NYXNrZWQ7XG59XG5mdW5jdGlvbiBub3JtYWxpemVPcHRzKG9wdHMpIHtcbiAgaWYgKCFvcHRzKSB0aHJvdyBuZXcgRXJyb3IoJ09wdGlvbnMgaW4gbm90IGRlZmluZWQnKTtcbiAgaWYgKElNYXNrLk1hc2tlZCkge1xuICAgIGlmIChvcHRzLnByb3RvdHlwZSBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgcmV0dXJuIHtcbiAgICAgIG1hc2s6IG9wdHNcbiAgICB9O1xuXG4gICAgLypcbiAgICAgIGhhbmRsZSBjYXNlcyBsaWtlOlxuICAgICAgMSkgb3B0cyA9IE1hc2tlZFxuICAgICAgMikgb3B0cyA9IHsgbWFzazogTWFza2VkLCAuLi5pbnN0YW5jZU9wdHMgfVxuICAgICovXG4gICAgY29uc3Qge1xuICAgICAgbWFzayA9IHVuZGVmaW5lZCxcbiAgICAgIC4uLmluc3RhbmNlT3B0c1xuICAgIH0gPSBvcHRzIGluc3RhbmNlb2YgSU1hc2suTWFza2VkID8ge1xuICAgICAgbWFzazogb3B0c1xuICAgIH0gOiBpc09iamVjdChvcHRzKSAmJiBvcHRzLm1hc2sgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQgPyBvcHRzIDoge307XG4gICAgaWYgKG1hc2spIHtcbiAgICAgIGNvbnN0IF9tYXNrID0gbWFzay5tYXNrO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucGljayhtYXNrLCAoXywgaykgPT4gIWsuc3RhcnRzV2l0aCgnXycpKSxcbiAgICAgICAgbWFzazogbWFzay5jb25zdHJ1Y3RvcixcbiAgICAgICAgX21hc2ssXG4gICAgICAgIC4uLmluc3RhbmNlT3B0c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc09iamVjdChvcHRzKSkgcmV0dXJuIHtcbiAgICBtYXNrOiBvcHRzXG4gIH07XG4gIHJldHVybiB7XG4gICAgLi4ub3B0c1xuICB9O1xufVxuXG4vLyBUT0RPIGNhbid0IHVzZSBvdmVybG9hZHMgaGVyZSBiZWNhdXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNTA3NTRcblxuLy8gRnJvbSBtYXNrZWRcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1hc2s8T3B0cyBleHRlbmRzIE1hc2tlZCwgUmV0dXJuTWFza2VkPU9wdHM+IChvcHRzOiBPcHRzKTogUmV0dXJuTWFza2VkO1xuLy8gLy8gRnJvbSBtYXNrZWQgY2xhc3Ncbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1hc2s8T3B0cyBleHRlbmRzIE1hc2tlZE9wdGlvbnM8dHlwZW9mIE1hc2tlZD4sIFJldHVybk1hc2tlZCBleHRlbmRzIE1hc2tlZD1JbnN0YW5jZVR5cGU8T3B0c1snbWFzayddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWREYXRlPiwgUmV0dXJuTWFza2VkIGV4dGVuZHMgTWFza2VkRGF0ZT1NYXNrZWREYXRlPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWROdW1iZXI+LCBSZXR1cm5NYXNrZWQgZXh0ZW5kcyBNYXNrZWROdW1iZXI9TWFza2VkTnVtYmVyPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWRFbnVtPiwgUmV0dXJuTWFza2VkIGV4dGVuZHMgTWFza2VkRW51bT1NYXNrZWRFbnVtPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWRSYW5nZT4sIFJldHVybk1hc2tlZCBleHRlbmRzIE1hc2tlZFJhbmdlPU1hc2tlZFJhbmdlPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWRSZWdFeHA+LCBSZXR1cm5NYXNrZWQgZXh0ZW5kcyBNYXNrZWRSZWdFeHA9TWFza2VkUmVnRXhwPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWRGdW5jdGlvbj4sIFJldHVybk1hc2tlZCBleHRlbmRzIE1hc2tlZEZ1bmN0aW9uPU1hc2tlZEZ1bmN0aW9uPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWRQYXR0ZXJuPiwgUmV0dXJuTWFza2VkIGV4dGVuZHMgTWFza2VkUGF0dGVybj1NYXNrZWRQYXR0ZXJuPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXNrPE9wdHMgZXh0ZW5kcyBNYXNrZWRPcHRpb25zPHR5cGVvZiBNYXNrZWREeW5hbWljPiwgUmV0dXJuTWFza2VkIGV4dGVuZHMgTWFza2VkRHluYW1pYz1NYXNrZWREeW5hbWljPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG4vLyAvLyBGcm9tIG1hc2sgb3B0c1xuLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWFzazxPcHRzIGV4dGVuZHMgTWFza2VkT3B0aW9uczxNYXNrZWQ+LCBSZXR1cm5NYXNrZWQ9T3B0cyBleHRlbmRzIE1hc2tlZE9wdGlvbnM8aW5mZXIgTT4gPyBNIDogbmV2ZXI+IChvcHRzOiBPcHRzKTogUmV0dXJuTWFza2VkO1xuLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWFzazxPcHRzIGV4dGVuZHMgTWFza2VkTnVtYmVyT3B0aW9ucywgUmV0dXJuTWFza2VkIGV4dGVuZHMgTWFza2VkTnVtYmVyPU1hc2tlZE51bWJlcjxPcHRzWydwYXJlbnQnXT4+IChvcHRzOiBPcHRzKTogUmV0dXJuTWFza2VkO1xuLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWFzazxPcHRzIGV4dGVuZHMgTWFza2VkRGF0ZUZhY3RvcnlPcHRpb25zLCBSZXR1cm5NYXNrZWQgZXh0ZW5kcyBNYXNrZWREYXRlPU1hc2tlZERhdGU8T3B0c1sncGFyZW50J10+PiAob3B0czogT3B0cyk6IFJldHVybk1hc2tlZDtcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1hc2s8T3B0cyBleHRlbmRzIE1hc2tlZEVudW1PcHRpb25zLCBSZXR1cm5NYXNrZWQgZXh0ZW5kcyBNYXNrZWRFbnVtPU1hc2tlZEVudW08T3B0c1sncGFyZW50J10+PiAob3B0czogT3B0cyk6IFJldHVybk1hc2tlZDtcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1hc2s8T3B0cyBleHRlbmRzIE1hc2tlZFJhbmdlT3B0aW9ucywgUmV0dXJuTWFza2VkIGV4dGVuZHMgTWFza2VkUmFuZ2U9TWFza2VkUmFuZ2U8T3B0c1sncGFyZW50J10+PiAob3B0czogT3B0cyk6IFJldHVybk1hc2tlZDtcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1hc2s8T3B0cyBleHRlbmRzIE1hc2tlZFBhdHRlcm5PcHRpb25zLCBSZXR1cm5NYXNrZWQgZXh0ZW5kcyBNYXNrZWRQYXR0ZXJuPU1hc2tlZFBhdHRlcm48T3B0c1sncGFyZW50J10+PiAob3B0czogT3B0cyk6IFJldHVybk1hc2tlZDtcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1hc2s8T3B0cyBleHRlbmRzIE1hc2tlZER5bmFtaWNPcHRpb25zLCBSZXR1cm5NYXNrZWQgZXh0ZW5kcyBNYXNrZWREeW5hbWljPU1hc2tlZER5bmFtaWM8T3B0c1sncGFyZW50J10+PiAob3B0czogT3B0cyk6IFJldHVybk1hc2tlZDtcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1hc2s8T3B0cyBleHRlbmRzIE1hc2tlZE9wdGlvbnM8UmVnRXhwPiwgUmV0dXJuTWFza2VkIGV4dGVuZHMgTWFza2VkUmVnRXhwPU1hc2tlZFJlZ0V4cDxPcHRzWydwYXJlbnQnXT4+IChvcHRzOiBPcHRzKTogUmV0dXJuTWFza2VkO1xuLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWFzazxPcHRzIGV4dGVuZHMgTWFza2VkT3B0aW9uczxGdW5jdGlvbj4sIFJldHVybk1hc2tlZCBleHRlbmRzIE1hc2tlZEZ1bmN0aW9uPU1hc2tlZEZ1bmN0aW9uPE9wdHNbJ3BhcmVudCddPj4gKG9wdHM6IE9wdHMpOiBSZXR1cm5NYXNrZWQ7XG5cbi8qKiBDcmVhdGVzIG5ldyB7QGxpbmsgTWFza2VkfSBkZXBlbmRpbmcgb24gbWFzayB0eXBlICovXG5mdW5jdGlvbiBjcmVhdGVNYXNrKG9wdHMpIHtcbiAgaWYgKElNYXNrLk1hc2tlZCAmJiBvcHRzIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gb3B0cztcbiAgY29uc3Qgbk9wdHMgPSBub3JtYWxpemVPcHRzKG9wdHMpO1xuICBjb25zdCBNYXNrZWRDbGFzcyA9IG1hc2tlZENsYXNzKG5PcHRzLm1hc2spO1xuICBpZiAoIU1hc2tlZENsYXNzKSB0aHJvdyBuZXcgRXJyb3IoXCJNYXNrZWQgY2xhc3MgaXMgbm90IGZvdW5kIGZvciBwcm92aWRlZCBtYXNrIFwiICsgbk9wdHMubWFzayArIFwiLCBhcHByb3ByaWF0ZSBtb2R1bGUgbmVlZHMgdG8gYmUgaW1wb3J0ZWQgbWFudWFsbHkgYmVmb3JlIGNyZWF0aW5nIG1hc2suXCIpO1xuICBpZiAobk9wdHMubWFzayA9PT0gTWFza2VkQ2xhc3MpIGRlbGV0ZSBuT3B0cy5tYXNrO1xuICBpZiAobk9wdHMuX21hc2spIHtcbiAgICBuT3B0cy5tYXNrID0gbk9wdHMuX21hc2s7XG4gICAgZGVsZXRlIG5PcHRzLl9tYXNrO1xuICB9XG4gIHJldHVybiBuZXcgTWFza2VkQ2xhc3Mobk9wdHMpO1xufVxuSU1hc2suY3JlYXRlTWFzayA9IGNyZWF0ZU1hc2s7XG5cbmV4cG9ydCB7IGNyZWF0ZU1hc2sgYXMgZGVmYXVsdCwgbWFza2VkQ2xhc3MsIG5vcm1hbGl6ZU9wdHMgfTtcbiIsImltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5cbi8qKiAgR2VuZXJpYyBlbGVtZW50IEFQSSB0byB1c2Ugd2l0aCBtYXNrICovXG5jbGFzcyBNYXNrRWxlbWVudCB7XG4gIC8qKiAqL1xuXG4gIC8qKiAqL1xuXG4gIC8qKiAqL1xuXG4gIC8qKiBTYWZlbHkgcmV0dXJucyBzZWxlY3Rpb24gc3RhcnQgKi9cbiAgZ2V0IHNlbGVjdGlvblN0YXJ0KCkge1xuICAgIGxldCBzdGFydDtcbiAgICB0cnkge1xuICAgICAgc3RhcnQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25TdGFydDtcbiAgICB9IGNhdGNoIHt9XG4gICAgcmV0dXJuIHN0YXJ0ICE9IG51bGwgPyBzdGFydCA6IHRoaXMudmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgLyoqIFNhZmVseSByZXR1cm5zIHNlbGVjdGlvbiBlbmQgKi9cbiAgZ2V0IHNlbGVjdGlvbkVuZCgpIHtcbiAgICBsZXQgZW5kO1xuICAgIHRyeSB7XG4gICAgICBlbmQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25FbmQ7XG4gICAgfSBjYXRjaCB7fVxuICAgIHJldHVybiBlbmQgIT0gbnVsbCA/IGVuZCA6IHRoaXMudmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgLyoqIFNhZmVseSBzZXRzIGVsZW1lbnQgc2VsZWN0aW9uICovXG4gIHNlbGVjdChzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YXJ0ID09IG51bGwgfHwgZW5kID09IG51bGwgfHwgc3RhcnQgPT09IHRoaXMuc2VsZWN0aW9uU3RhcnQgJiYgZW5kID09PSB0aGlzLnNlbGVjdGlvbkVuZCkgcmV0dXJuO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl91bnNhZmVTZWxlY3Qoc3RhcnQsIGVuZCk7XG4gICAgfSBjYXRjaCB7fVxuICB9XG5cbiAgLyoqICovXG4gIGdldCBpc0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqICovXG5cbiAgLyoqICovXG5cbiAgLyoqICovXG59XG5JTWFzay5NYXNrRWxlbWVudCA9IE1hc2tFbGVtZW50O1xuXG5leHBvcnQgeyBNYXNrRWxlbWVudCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgTWFza0VsZW1lbnQgZnJvbSAnLi9tYXNrLWVsZW1lbnQuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcblxuY29uc3QgS0VZX1ogPSA5MDtcbmNvbnN0IEtFWV9ZID0gODk7XG5cbi8qKiBCcmlkZ2UgYmV0d2VlbiBIVE1MRWxlbWVudCBhbmQge0BsaW5rIE1hc2tlZH0gKi9cbmNsYXNzIEhUTUxNYXNrRWxlbWVudCBleHRlbmRzIE1hc2tFbGVtZW50IHtcbiAgLyoqIEhUTUxFbGVtZW50IHRvIHVzZSBtYXNrIG9uICovXG5cbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLl9vbktleWRvd24gPSB0aGlzLl9vbktleWRvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbklucHV0ID0gdGhpcy5fb25JbnB1dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uQmVmb3JlaW5wdXQgPSB0aGlzLl9vbkJlZm9yZWlucHV0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Db21wb3NpdGlvbkVuZCA9IHRoaXMuX29uQ29tcG9zaXRpb25FbmQuYmluZCh0aGlzKTtcbiAgfVxuICBnZXQgcm9vdEVsZW1lbnQoKSB7XG4gICAgdmFyIF90aGlzJGlucHV0JGdldFJvb3RObywgX3RoaXMkaW5wdXQkZ2V0Um9vdE5vMiwgX3RoaXMkaW5wdXQ7XG4gICAgcmV0dXJuIChfdGhpcyRpbnB1dCRnZXRSb290Tm8gPSAoX3RoaXMkaW5wdXQkZ2V0Um9vdE5vMiA9IChfdGhpcyRpbnB1dCA9IHRoaXMuaW5wdXQpLmdldFJvb3ROb2RlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkaW5wdXQkZ2V0Um9vdE5vMi5jYWxsKF90aGlzJGlucHV0KSkgIT0gbnVsbCA/IF90aGlzJGlucHV0JGdldFJvb3RObyA6IGRvY3VtZW50O1xuICB9XG5cbiAgLyoqIElzIGVsZW1lbnQgaW4gZm9jdXMgKi9cbiAgZ2V0IGlzQWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0ID09PSB0aGlzLnJvb3RFbGVtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICAvKiogQmluZHMgSFRNTEVsZW1lbnQgZXZlbnRzIHRvIG1hc2sgaW50ZXJuYWwgZXZlbnRzICovXG4gIGJpbmRFdmVudHMoaGFuZGxlcnMpIHtcbiAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleWRvd24pO1xuICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbklucHV0KTtcbiAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZWlucHV0JywgdGhpcy5fb25CZWZvcmVpbnB1dCk7XG4gICAgdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIHRoaXMuX29uQ29tcG9zaXRpb25FbmQpO1xuICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGhhbmRsZXJzLmRyb3ApO1xuICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVycy5jbGljayk7XG4gICAgdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZXJzLmZvY3VzKTtcbiAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoYW5kbGVycy5jb21taXQpO1xuICAgIHRoaXMuX2hhbmRsZXJzID0gaGFuZGxlcnM7XG4gIH1cbiAgX29uS2V5ZG93bihlKSB7XG4gICAgaWYgKHRoaXMuX2hhbmRsZXJzLnJlZG8gJiYgKGUua2V5Q29kZSA9PT0gS0VZX1ogJiYgZS5zaGlmdEtleSAmJiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSkgfHwgZS5rZXlDb2RlID09PSBLRVlfWSAmJiBlLmN0cmxLZXkpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlcnMucmVkbyhlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2hhbmRsZXJzLnVuZG8gJiYgZS5rZXlDb2RlID09PSBLRVlfWiAmJiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVycy51bmRvKGUpO1xuICAgIH1cbiAgICBpZiAoIWUuaXNDb21wb3NpbmcpIHRoaXMuX2hhbmRsZXJzLnNlbGVjdGlvbkNoYW5nZShlKTtcbiAgfVxuICBfb25CZWZvcmVpbnB1dChlKSB7XG4gICAgaWYgKGUuaW5wdXRUeXBlID09PSAnaGlzdG9yeVVuZG8nICYmIHRoaXMuX2hhbmRsZXJzLnVuZG8pIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVycy51bmRvKGUpO1xuICAgIH1cbiAgICBpZiAoZS5pbnB1dFR5cGUgPT09ICdoaXN0b3J5UmVkbycgJiYgdGhpcy5faGFuZGxlcnMucmVkbykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZXJzLnJlZG8oZSk7XG4gICAgfVxuICB9XG4gIF9vbkNvbXBvc2l0aW9uRW5kKGUpIHtcbiAgICB0aGlzLl9oYW5kbGVycy5pbnB1dChlKTtcbiAgfVxuICBfb25JbnB1dChlKSB7XG4gICAgaWYgKCFlLmlzQ29tcG9zaW5nKSB0aGlzLl9oYW5kbGVycy5pbnB1dChlKTtcbiAgfVxuXG4gIC8qKiBVbmJpbmRzIEhUTUxFbGVtZW50IGV2ZW50cyB0byBtYXNrIGludGVybmFsIGV2ZW50cyAqL1xuICB1bmJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlkb3duKTtcbiAgICB0aGlzLmlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5fb25JbnB1dCk7XG4gICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmVpbnB1dCcsIHRoaXMuX29uQmVmb3JlaW5wdXQpO1xuICAgIHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCB0aGlzLl9vbkNvbXBvc2l0aW9uRW5kKTtcbiAgICB0aGlzLmlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLl9oYW5kbGVycy5kcm9wKTtcbiAgICB0aGlzLmlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5faGFuZGxlcnMuY2xpY2spO1xuICAgIHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9oYW5kbGVycy5mb2N1cyk7XG4gICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5faGFuZGxlcnMuY29tbWl0KTtcbiAgICB0aGlzLl9oYW5kbGVycyA9IHt9O1xuICB9XG59XG5JTWFzay5IVE1MTWFza0VsZW1lbnQgPSBIVE1MTWFza0VsZW1lbnQ7XG5cbmV4cG9ydCB7IEhUTUxNYXNrRWxlbWVudCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgSFRNTE1hc2tFbGVtZW50IGZyb20gJy4vaHRtbC1tYXNrLWVsZW1lbnQuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi9tYXNrLWVsZW1lbnQuanMnO1xuXG4vKiogQnJpZGdlIGJldHdlZW4gSW5wdXRFbGVtZW50IGFuZCB7QGxpbmsgTWFza2VkfSAqL1xuY2xhc3MgSFRNTElucHV0TWFza0VsZW1lbnQgZXh0ZW5kcyBIVE1MTWFza0VsZW1lbnQge1xuICAvKiogSW5wdXRFbGVtZW50IHRvIHVzZSBtYXNrIG9uICovXG5cbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcihpbnB1dCk7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICB9XG5cbiAgLyoqIFJldHVybnMgSW5wdXRFbGVtZW50IHNlbGVjdGlvbiBzdGFydCAqL1xuICBnZXQgX3Vuc2FmZVNlbGVjdGlvblN0YXJ0KCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0LnNlbGVjdGlvblN0YXJ0ICE9IG51bGwgPyB0aGlzLmlucHV0LnNlbGVjdGlvblN0YXJ0IDogdGhpcy52YWx1ZS5sZW5ndGg7XG4gIH1cblxuICAvKiogUmV0dXJucyBJbnB1dEVsZW1lbnQgc2VsZWN0aW9uIGVuZCAqL1xuICBnZXQgX3Vuc2FmZVNlbGVjdGlvbkVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5zZWxlY3Rpb25FbmQ7XG4gIH1cblxuICAvKiogU2V0cyBJbnB1dEVsZW1lbnQgc2VsZWN0aW9uICovXG4gIF91bnNhZmVTZWxlY3Qoc3RhcnQsIGVuZCkge1xuICAgIHRoaXMuaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0LnZhbHVlO1xuICB9XG4gIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuSU1hc2suSFRNTE1hc2tFbGVtZW50ID0gSFRNTE1hc2tFbGVtZW50O1xuXG5leHBvcnQgeyBIVE1MSW5wdXRNYXNrRWxlbWVudCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgSFRNTE1hc2tFbGVtZW50IGZyb20gJy4vaHRtbC1tYXNrLWVsZW1lbnQuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi9tYXNrLWVsZW1lbnQuanMnO1xuXG5jbGFzcyBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgZXh0ZW5kcyBIVE1MTWFza0VsZW1lbnQge1xuICAvKiogUmV0dXJucyBIVE1MRWxlbWVudCBzZWxlY3Rpb24gc3RhcnQgKi9cbiAgZ2V0IF91bnNhZmVTZWxlY3Rpb25TdGFydCgpIHtcbiAgICBjb25zdCByb290ID0gdGhpcy5yb290RWxlbWVudDtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xuICAgIGNvbnN0IGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICAgIGNvbnN0IGZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICBpZiAoZm9jdXNPZmZzZXQgPT0gbnVsbCB8fCBhbmNob3JPZmZzZXQgPT0gbnVsbCB8fCBhbmNob3JPZmZzZXQgPCBmb2N1c09mZnNldCkge1xuICAgICAgcmV0dXJuIGFuY2hvck9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIGZvY3VzT2Zmc2V0O1xuICB9XG5cbiAgLyoqIFJldHVybnMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uIGVuZCAqL1xuICBnZXQgX3Vuc2FmZVNlbGVjdGlvbkVuZCgpIHtcbiAgICBjb25zdCByb290ID0gdGhpcy5yb290RWxlbWVudDtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xuICAgIGNvbnN0IGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICAgIGNvbnN0IGZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICBpZiAoZm9jdXNPZmZzZXQgPT0gbnVsbCB8fCBhbmNob3JPZmZzZXQgPT0gbnVsbCB8fCBhbmNob3JPZmZzZXQgPiBmb2N1c09mZnNldCkge1xuICAgICAgcmV0dXJuIGFuY2hvck9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIGZvY3VzT2Zmc2V0O1xuICB9XG5cbiAgLyoqIFNldHMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uICovXG4gIF91bnNhZmVTZWxlY3Qoc3RhcnQsIGVuZCkge1xuICAgIGlmICghdGhpcy5yb290RWxlbWVudC5jcmVhdGVSYW5nZSkgcmV0dXJuO1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5yb290RWxlbWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHRoaXMuaW5wdXQuZmlyc3RDaGlsZCB8fCB0aGlzLmlucHV0LCBzdGFydCk7XG4gICAgcmFuZ2Uuc2V0RW5kKHRoaXMuaW5wdXQubGFzdENoaWxkIHx8IHRoaXMuaW5wdXQsIGVuZCk7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gcm9vdC5nZXRTZWxlY3Rpb24gJiYgcm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBIVE1MRWxlbWVudCB2YWx1ZSAqL1xuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgfHwgJyc7XG4gIH1cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9XG59XG5JTWFzay5IVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgPSBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQ7XG5cbmV4cG9ydCB7IEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCBhcyBkZWZhdWx0IH07XG4iLCJjbGFzcyBJbnB1dEhpc3Rvcnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXRlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudEluZGV4ID0gMDtcbiAgfVxuICBnZXQgY3VycmVudFN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlc1t0aGlzLmN1cnJlbnRJbmRleF07XG4gIH1cbiAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVzLmxlbmd0aCA9PT0gMDtcbiAgfVxuICBwdXNoKHN0YXRlKSB7XG4gICAgLy8gaWYgY3VycmVudCBpbmRleCBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGVsZW1lbnQgdGhlbiByZW1vdmUgdGhlIGZ1dHVyZVxuICAgIGlmICh0aGlzLmN1cnJlbnRJbmRleCA8IHRoaXMuc3RhdGVzLmxlbmd0aCAtIDEpIHRoaXMuc3RhdGVzLmxlbmd0aCA9IHRoaXMuY3VycmVudEluZGV4ICsgMTtcbiAgICB0aGlzLnN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICBpZiAodGhpcy5zdGF0ZXMubGVuZ3RoID4gSW5wdXRIaXN0b3J5Lk1BWF9MRU5HVEgpIHRoaXMuc3RhdGVzLnNoaWZ0KCk7XG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSB0aGlzLnN0YXRlcy5sZW5ndGggLSAxO1xuICB9XG4gIGdvKHN0ZXBzKSB7XG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSBNYXRoLm1pbihNYXRoLm1heCh0aGlzLmN1cnJlbnRJbmRleCArIHN0ZXBzLCAwKSwgdGhpcy5zdGF0ZXMubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFN0YXRlO1xuICB9XG4gIHVuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ28oLTEpO1xuICB9XG4gIHJlZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ28oKzEpO1xuICB9XG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc3RhdGVzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSAwO1xuICB9XG59XG5JbnB1dEhpc3RvcnkuTUFYX0xFTkdUSCA9IDEwMDtcblxuZXhwb3J0IHsgSW5wdXRIaXN0b3J5IGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IERJUkVDVElPTiB9IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0IEFjdGlvbkRldGFpbHMgZnJvbSAnLi4vY29yZS9hY3Rpb24tZGV0YWlscy5qcyc7XG5pbXBvcnQgY3JlYXRlTWFzaywgeyBtYXNrZWRDbGFzcyB9IGZyb20gJy4uL21hc2tlZC9mYWN0b3J5LmpzJztcbmltcG9ydCBNYXNrRWxlbWVudCBmcm9tICcuL21hc2stZWxlbWVudC5qcyc7XG5pbXBvcnQgSFRNTElucHV0TWFza0VsZW1lbnQgZnJvbSAnLi9odG1sLWlucHV0LW1hc2stZWxlbWVudC5qcyc7XG5pbXBvcnQgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50IGZyb20gJy4vaHRtbC1jb250ZW50ZWRpdGFibGUtbWFzay1lbGVtZW50LmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5pbXBvcnQgSW5wdXRIaXN0b3J5IGZyb20gJy4vaW5wdXQtaGlzdG9yeS5qcyc7XG5pbXBvcnQgJy4vaHRtbC1tYXNrLWVsZW1lbnQuanMnO1xuXG4vKiogTGlzdGVucyB0byBlbGVtZW50IGV2ZW50cyBhbmQgY29udHJvbHMgY2hhbmdlcyBiZXR3ZWVuIGVsZW1lbnQgYW5kIHtAbGluayBNYXNrZWR9ICovXG5jbGFzcyBJbnB1dE1hc2sge1xuICAvKipcbiAgICBWaWV3IGVsZW1lbnRcbiAgKi9cblxuICAvKiogSW50ZXJuYWwge0BsaW5rIE1hc2tlZH0gbW9kZWwgKi9cblxuICBjb25zdHJ1Y3RvcihlbCwgb3B0cykge1xuICAgIHRoaXMuZWwgPSBlbCBpbnN0YW5jZW9mIE1hc2tFbGVtZW50ID8gZWwgOiBlbC5pc0NvbnRlbnRFZGl0YWJsZSAmJiBlbC50YWdOYW1lICE9PSAnSU5QVVQnICYmIGVsLnRhZ05hbWUgIT09ICdURVhUQVJFQScgPyBuZXcgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50KGVsKSA6IG5ldyBIVE1MSW5wdXRNYXNrRWxlbWVudChlbCk7XG4gICAgdGhpcy5tYXNrZWQgPSBjcmVhdGVNYXNrKG9wdHMpO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuX3ZhbHVlID0gJyc7XG4gICAgdGhpcy5fdW5tYXNrZWRWYWx1ZSA9ICcnO1xuICAgIHRoaXMuX3Jhd0lucHV0VmFsdWUgPSAnJztcbiAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSW5wdXRIaXN0b3J5KCk7XG4gICAgdGhpcy5fc2F2ZVNlbGVjdGlvbiA9IHRoaXMuX3NhdmVTZWxlY3Rpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbklucHV0ID0gdGhpcy5fb25JbnB1dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uQ2hhbmdlID0gdGhpcy5fb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkRyb3AgPSB0aGlzLl9vbkRyb3AuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkZvY3VzID0gdGhpcy5fb25Gb2N1cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uQ2xpY2sgPSB0aGlzLl9vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25VbmRvID0gdGhpcy5fb25VbmRvLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25SZWRvID0gdGhpcy5fb25SZWRvLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hbGlnbkN1cnNvciA9IHRoaXMuYWxpZ25DdXJzb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFsaWduQ3Vyc29yRnJpZW5kbHkgPSB0aGlzLmFsaWduQ3Vyc29yRnJpZW5kbHkuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9iaW5kRXZlbnRzKCk7XG5cbiAgICAvLyByZWZyZXNoXG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgIHRoaXMuX29uQ2hhbmdlKCk7XG4gIH1cbiAgbWFza0VxdWFscyhtYXNrKSB7XG4gICAgdmFyIF90aGlzJG1hc2tlZDtcbiAgICByZXR1cm4gbWFzayA9PSBudWxsIHx8ICgoX3RoaXMkbWFza2VkID0gdGhpcy5tYXNrZWQpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRtYXNrZWQubWFza0VxdWFscyhtYXNrKSk7XG4gIH1cblxuICAvKiogTWFza2VkICovXG4gIGdldCBtYXNrKCkge1xuICAgIHJldHVybiB0aGlzLm1hc2tlZC5tYXNrO1xuICB9XG4gIHNldCBtYXNrKG1hc2spIHtcbiAgICBpZiAodGhpcy5tYXNrRXF1YWxzKG1hc2spKSByZXR1cm47XG4gICAgaWYgKCEobWFzayBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgJiYgdGhpcy5tYXNrZWQuY29uc3RydWN0b3IgPT09IG1hc2tlZENsYXNzKG1hc2spKSB7XG4gICAgICAvLyBUT0RPIFwiYW55XCIgbm8gaWRlYVxuICAgICAgdGhpcy5tYXNrZWQudXBkYXRlT3B0aW9ucyh7XG4gICAgICAgIG1hc2tcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtYXNrZWQgPSBtYXNrIGluc3RhbmNlb2YgSU1hc2suTWFza2VkID8gbWFzayA6IGNyZWF0ZU1hc2soe1xuICAgICAgbWFza1xuICAgIH0pO1xuICAgIG1hc2tlZC51bm1hc2tlZFZhbHVlID0gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcbiAgICB0aGlzLm1hc2tlZCA9IG1hc2tlZDtcbiAgfVxuXG4gIC8qKiBSYXcgdmFsdWUgKi9cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuICBzZXQgdmFsdWUoc3RyKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IHN0cikgcmV0dXJuO1xuICAgIHRoaXMubWFza2VkLnZhbHVlID0gc3RyO1xuICAgIHRoaXMudXBkYXRlQ29udHJvbCgnYXV0bycpO1xuICB9XG5cbiAgLyoqIFVubWFza2VkIHZhbHVlICovXG4gIGdldCB1bm1hc2tlZFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl91bm1hc2tlZFZhbHVlO1xuICB9XG4gIHNldCB1bm1hc2tlZFZhbHVlKHN0cikge1xuICAgIGlmICh0aGlzLnVubWFza2VkVmFsdWUgPT09IHN0cikgcmV0dXJuO1xuICAgIHRoaXMubWFza2VkLnVubWFza2VkVmFsdWUgPSBzdHI7XG4gICAgdGhpcy51cGRhdGVDb250cm9sKCdhdXRvJyk7XG4gIH1cblxuICAvKiogUmF3IGlucHV0IHZhbHVlICovXG4gIGdldCByYXdJbnB1dFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9yYXdJbnB1dFZhbHVlO1xuICB9XG4gIHNldCByYXdJbnB1dFZhbHVlKHN0cikge1xuICAgIGlmICh0aGlzLnJhd0lucHV0VmFsdWUgPT09IHN0cikgcmV0dXJuO1xuICAgIHRoaXMubWFza2VkLnJhd0lucHV0VmFsdWUgPSBzdHI7XG4gICAgdGhpcy51cGRhdGVDb250cm9sKCk7XG4gICAgdGhpcy5hbGlnbkN1cnNvcigpO1xuICB9XG5cbiAgLyoqIFR5cGVkIHVubWFza2VkIHZhbHVlICovXG4gIGdldCB0eXBlZFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLm1hc2tlZC50eXBlZFZhbHVlO1xuICB9XG4gIHNldCB0eXBlZFZhbHVlKHZhbCkge1xuICAgIGlmICh0aGlzLm1hc2tlZC50eXBlZFZhbHVlRXF1YWxzKHZhbCkpIHJldHVybjtcbiAgICB0aGlzLm1hc2tlZC50eXBlZFZhbHVlID0gdmFsO1xuICAgIHRoaXMudXBkYXRlQ29udHJvbCgnYXV0bycpO1xuICB9XG5cbiAgLyoqIERpc3BsYXkgdmFsdWUgKi9cbiAgZ2V0IGRpc3BsYXlWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQuZGlzcGxheVZhbHVlO1xuICB9XG5cbiAgLyoqIFN0YXJ0cyBsaXN0ZW5pbmcgdG8gZWxlbWVudCBldmVudHMgKi9cbiAgX2JpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5lbC5iaW5kRXZlbnRzKHtcbiAgICAgIHNlbGVjdGlvbkNoYW5nZTogdGhpcy5fc2F2ZVNlbGVjdGlvbixcbiAgICAgIGlucHV0OiB0aGlzLl9vbklucHV0LFxuICAgICAgZHJvcDogdGhpcy5fb25Ecm9wLFxuICAgICAgY2xpY2s6IHRoaXMuX29uQ2xpY2ssXG4gICAgICBmb2N1czogdGhpcy5fb25Gb2N1cyxcbiAgICAgIGNvbW1pdDogdGhpcy5fb25DaGFuZ2UsXG4gICAgICB1bmRvOiB0aGlzLl9vblVuZG8sXG4gICAgICByZWRvOiB0aGlzLl9vblJlZG9cbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBTdG9wcyBsaXN0ZW5pbmcgdG8gZWxlbWVudCBldmVudHMgKi9cbiAgX3VuYmluZEV2ZW50cygpIHtcbiAgICBpZiAodGhpcy5lbCkgdGhpcy5lbC51bmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIC8qKiBGaXJlcyBjdXN0b20gZXZlbnQgKi9cbiAgX2ZpcmVFdmVudChldiwgZSkge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldl07XG4gICAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybjtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChsID0+IGwoZSkpO1xuICB9XG5cbiAgLyoqIEN1cnJlbnQgc2VsZWN0aW9uIHN0YXJ0ICovXG4gIGdldCBzZWxlY3Rpb25TdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3Vyc29yQ2hhbmdpbmcgPyB0aGlzLl9jaGFuZ2luZ0N1cnNvclBvcyA6IHRoaXMuZWwuc2VsZWN0aW9uU3RhcnQ7XG4gIH1cblxuICAvKiogQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gKi9cbiAgZ2V0IGN1cnNvclBvcygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3Vyc29yQ2hhbmdpbmcgPyB0aGlzLl9jaGFuZ2luZ0N1cnNvclBvcyA6IHRoaXMuZWwuc2VsZWN0aW9uRW5kO1xuICB9XG4gIHNldCBjdXJzb3JQb3MocG9zKSB7XG4gICAgaWYgKCF0aGlzLmVsIHx8ICF0aGlzLmVsLmlzQWN0aXZlKSByZXR1cm47XG4gICAgdGhpcy5lbC5zZWxlY3QocG9zLCBwb3MpO1xuICAgIHRoaXMuX3NhdmVTZWxlY3Rpb24oKTtcbiAgfVxuXG4gIC8qKiBTdG9yZXMgY3VycmVudCBzZWxlY3Rpb24gKi9cbiAgX3NhdmVTZWxlY3Rpb24oIC8qIGV2ICovXG4gICkge1xuICAgIGlmICh0aGlzLmRpc3BsYXlWYWx1ZSAhPT0gdGhpcy5lbC52YWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKCdFbGVtZW50IHZhbHVlIHdhcyBjaGFuZ2VkIG91dHNpZGUgb2YgbWFzay4gU3luY3Jvbml6ZSBtYXNrIHVzaW5nIGBtYXNrLnVwZGF0ZVZhbHVlKClgIHRvIHdvcmsgcHJvcGVybHkuJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgICB0aGlzLl9zZWxlY3Rpb24gPSB7XG4gICAgICBzdGFydDogdGhpcy5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogdGhpcy5jdXJzb3JQb3NcbiAgICB9O1xuICB9XG5cbiAgLyoqIFN5bmNyb25pemVzIG1vZGVsIHZhbHVlIGZyb20gdmlldyAqL1xuICB1cGRhdGVWYWx1ZSgpIHtcbiAgICB0aGlzLm1hc2tlZC52YWx1ZSA9IHRoaXMuZWwudmFsdWU7XG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLm1hc2tlZC52YWx1ZTtcbiAgICB0aGlzLl91bm1hc2tlZFZhbHVlID0gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcbiAgICB0aGlzLl9yYXdJbnB1dFZhbHVlID0gdGhpcy5tYXNrZWQucmF3SW5wdXRWYWx1ZTtcbiAgfVxuXG4gIC8qKiBTeW5jcm9uaXplcyB2aWV3IGZyb20gbW9kZWwgdmFsdWUsIGZpcmVzIGNoYW5nZSBldmVudHMgKi9cbiAgdXBkYXRlQ29udHJvbChjdXJzb3JQb3MpIHtcbiAgICBjb25zdCBuZXdVbm1hc2tlZFZhbHVlID0gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMubWFza2VkLnZhbHVlO1xuICAgIGNvbnN0IG5ld1Jhd0lucHV0VmFsdWUgPSB0aGlzLm1hc2tlZC5yYXdJbnB1dFZhbHVlO1xuICAgIGNvbnN0IG5ld0Rpc3BsYXlWYWx1ZSA9IHRoaXMuZGlzcGxheVZhbHVlO1xuICAgIGNvbnN0IGlzQ2hhbmdlZCA9IHRoaXMudW5tYXNrZWRWYWx1ZSAhPT0gbmV3VW5tYXNrZWRWYWx1ZSB8fCB0aGlzLnZhbHVlICE9PSBuZXdWYWx1ZSB8fCB0aGlzLl9yYXdJbnB1dFZhbHVlICE9PSBuZXdSYXdJbnB1dFZhbHVlO1xuICAgIHRoaXMuX3VubWFza2VkVmFsdWUgPSBuZXdVbm1hc2tlZFZhbHVlO1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgdGhpcy5fcmF3SW5wdXRWYWx1ZSA9IG5ld1Jhd0lucHV0VmFsdWU7XG4gICAgaWYgKHRoaXMuZWwudmFsdWUgIT09IG5ld0Rpc3BsYXlWYWx1ZSkgdGhpcy5lbC52YWx1ZSA9IG5ld0Rpc3BsYXlWYWx1ZTtcbiAgICBpZiAoY3Vyc29yUG9zID09PSAnYXV0bycpIHRoaXMuYWxpZ25DdXJzb3IoKTtlbHNlIGlmIChjdXJzb3JQb3MgIT0gbnVsbCkgdGhpcy5jdXJzb3JQb3MgPSBjdXJzb3JQb3M7XG4gICAgaWYgKGlzQ2hhbmdlZCkgdGhpcy5fZmlyZUNoYW5nZUV2ZW50cygpO1xuICAgIGlmICghdGhpcy5faGlzdG9yeUNoYW5naW5nICYmIChpc0NoYW5nZWQgfHwgdGhpcy5oaXN0b3J5LmlzRW1wdHkpKSB0aGlzLmhpc3RvcnkucHVzaCh7XG4gICAgICB1bm1hc2tlZFZhbHVlOiBuZXdVbm1hc2tlZFZhbHVlLFxuICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgIHN0YXJ0OiB0aGlzLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IHRoaXMuY3Vyc29yUG9zXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKiogVXBkYXRlcyBvcHRpb25zIHdpdGggZGVlcCBlcXVhbCBjaGVjaywgcmVjcmVhdGVzIHtAbGluayBNYXNrZWR9IG1vZGVsIGlmIG1hc2sgdHlwZSBjaGFuZ2VzICovXG4gIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIGNvbnN0IHtcbiAgICAgIG1hc2ssXG4gICAgICAuLi5yZXN0T3B0c1xuICAgIH0gPSBvcHRzOyAvLyBUT0RPIHR5cGVzLCB5ZXMsIG1hc2sgaXMgb3B0aW9uYWxcblxuICAgIGNvbnN0IHVwZGF0ZU1hc2sgPSAhdGhpcy5tYXNrRXF1YWxzKG1hc2spO1xuICAgIGNvbnN0IHVwZGF0ZU9wdHMgPSB0aGlzLm1hc2tlZC5vcHRpb25zSXNDaGFuZ2VkKHJlc3RPcHRzKTtcbiAgICBpZiAodXBkYXRlTWFzaykgdGhpcy5tYXNrID0gbWFzaztcbiAgICBpZiAodXBkYXRlT3B0cykgdGhpcy5tYXNrZWQudXBkYXRlT3B0aW9ucyhyZXN0T3B0cyk7IC8vIFRPRE9cblxuICAgIGlmICh1cGRhdGVNYXNrIHx8IHVwZGF0ZU9wdHMpIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuICB9XG5cbiAgLyoqIFVwZGF0ZXMgY3Vyc29yICovXG4gIHVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpIHtcbiAgICBpZiAoY3Vyc29yUG9zID09IG51bGwpIHJldHVybjtcbiAgICB0aGlzLmN1cnNvclBvcyA9IGN1cnNvclBvcztcblxuICAgIC8vIGFsc28gcXVldWUgY2hhbmdlIGN1cnNvciBmb3IgbW9iaWxlIGJyb3dzZXJzXG4gICAgdGhpcy5fZGVsYXlVcGRhdGVDdXJzb3IoY3Vyc29yUG9zKTtcbiAgfVxuXG4gIC8qKiBEZWxheXMgY3Vyc29yIHVwZGF0ZSB0byBzdXBwb3J0IG1vYmlsZSBicm93c2VycyAqL1xuICBfZGVsYXlVcGRhdGVDdXJzb3IoY3Vyc29yUG9zKSB7XG4gICAgdGhpcy5fYWJvcnRVcGRhdGVDdXJzb3IoKTtcbiAgICB0aGlzLl9jaGFuZ2luZ0N1cnNvclBvcyA9IGN1cnNvclBvcztcbiAgICB0aGlzLl9jdXJzb3JDaGFuZ2luZyA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmVsKSByZXR1cm47IC8vIGlmIHdhcyBkZXN0cm95ZWRcbiAgICAgIHRoaXMuY3Vyc29yUG9zID0gdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3M7XG4gICAgICB0aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpO1xuICAgIH0sIDEwKTtcbiAgfVxuXG4gIC8qKiBGaXJlcyBjdXN0b20gZXZlbnRzICovXG4gIF9maXJlQ2hhbmdlRXZlbnRzKCkge1xuICAgIHRoaXMuX2ZpcmVFdmVudCgnYWNjZXB0JywgdGhpcy5faW5wdXRFdmVudCk7XG4gICAgaWYgKHRoaXMubWFza2VkLmlzQ29tcGxldGUpIHRoaXMuX2ZpcmVFdmVudCgnY29tcGxldGUnLCB0aGlzLl9pbnB1dEV2ZW50KTtcbiAgfVxuXG4gIC8qKiBBYm9ydHMgZGVsYXllZCBjdXJzb3IgdXBkYXRlICovXG4gIF9hYm9ydFVwZGF0ZUN1cnNvcigpIHtcbiAgICBpZiAodGhpcy5fY3Vyc29yQ2hhbmdpbmcpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9jdXJzb3JDaGFuZ2luZyk7XG4gICAgICBkZWxldGUgdGhpcy5fY3Vyc29yQ2hhbmdpbmc7XG4gICAgfVxuICB9XG5cbiAgLyoqIEFsaWducyBjdXJzb3IgdG8gbmVhcmVzdCBhdmFpbGFibGUgcG9zaXRpb24gKi9cbiAgYWxpZ25DdXJzb3IoKSB7XG4gICAgdGhpcy5jdXJzb3JQb3MgPSB0aGlzLm1hc2tlZC5uZWFyZXN0SW5wdXRQb3ModGhpcy5tYXNrZWQubmVhcmVzdElucHV0UG9zKHRoaXMuY3Vyc29yUG9zLCBESVJFQ1RJT04uTEVGVCkpO1xuICB9XG5cbiAgLyoqIEFsaWducyBjdXJzb3Igb25seSBpZiBzZWxlY3Rpb24gaXMgZW1wdHkgKi9cbiAgYWxpZ25DdXJzb3JGcmllbmRseSgpIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCAhPT0gdGhpcy5jdXJzb3JQb3MpIHJldHVybjsgLy8gc2tpcCBpZiByYW5nZSBpcyBzZWxlY3RlZFxuICAgIHRoaXMuYWxpZ25DdXJzb3IoKTtcbiAgfVxuXG4gIC8qKiBBZGRzIGxpc3RlbmVyIG9uIGN1c3RvbSBldmVudCAqL1xuICBvbihldiwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzW2V2XSkgdGhpcy5fbGlzdGVuZXJzW2V2XSA9IFtdO1xuICAgIHRoaXMuX2xpc3RlbmVyc1tldl0ucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBSZW1vdmVzIGN1c3RvbSBldmVudCBsaXN0ZW5lciAqL1xuICBvZmYoZXYsIGhhbmRsZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1tldl0pIHJldHVybiB0aGlzO1xuICAgIGlmICghaGFuZGxlcikge1xuICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldl07XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY29uc3QgaEluZGV4ID0gdGhpcy5fbGlzdGVuZXJzW2V2XS5pbmRleE9mKGhhbmRsZXIpO1xuICAgIGlmIChoSW5kZXggPj0gMCkgdGhpcy5fbGlzdGVuZXJzW2V2XS5zcGxpY2UoaEluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBIYW5kbGVzIHZpZXcgaW5wdXQgZXZlbnQgKi9cbiAgX29uSW5wdXQoZSkge1xuICAgIHRoaXMuX2lucHV0RXZlbnQgPSBlO1xuICAgIHRoaXMuX2Fib3J0VXBkYXRlQ3Vyc29yKCk7XG4gICAgY29uc3QgZGV0YWlscyA9IG5ldyBBY3Rpb25EZXRhaWxzKHtcbiAgICAgIC8vIG5ldyBzdGF0ZVxuICAgICAgdmFsdWU6IHRoaXMuZWwudmFsdWUsXG4gICAgICBjdXJzb3JQb3M6IHRoaXMuY3Vyc29yUG9zLFxuICAgICAgLy8gb2xkIHN0YXRlXG4gICAgICBvbGRWYWx1ZTogdGhpcy5kaXNwbGF5VmFsdWUsXG4gICAgICBvbGRTZWxlY3Rpb246IHRoaXMuX3NlbGVjdGlvblxuICAgIH0pO1xuICAgIGNvbnN0IG9sZFJhd1ZhbHVlID0gdGhpcy5tYXNrZWQucmF3SW5wdXRWYWx1ZTtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLm1hc2tlZC5zcGxpY2UoZGV0YWlscy5zdGFydENoYW5nZVBvcywgZGV0YWlscy5yZW1vdmVkLmxlbmd0aCwgZGV0YWlscy5pbnNlcnRlZCwgZGV0YWlscy5yZW1vdmVEaXJlY3Rpb24sIHtcbiAgICAgIGlucHV0OiB0cnVlLFxuICAgICAgcmF3OiB0cnVlXG4gICAgfSkub2Zmc2V0O1xuXG4gICAgLy8gZm9yY2UgYWxpZ24gaW4gcmVtb3ZlIGRpcmVjdGlvbiBvbmx5IGlmIG5vIGlucHV0IGNoYXJzIHdlcmUgcmVtb3ZlZFxuICAgIC8vIG90aGVyd2lzZSB3ZSBzdGlsbCBuZWVkIHRvIGFsaWduIHdpdGggTk9ORSAodG8gZ2V0IG91dCBmcm9tIGZpeGVkIHN5bWJvbHMgZm9yIGluc3RhbmNlKVxuICAgIGNvbnN0IHJlbW92ZURpcmVjdGlvbiA9IG9sZFJhd1ZhbHVlID09PSB0aGlzLm1hc2tlZC5yYXdJbnB1dFZhbHVlID8gZGV0YWlscy5yZW1vdmVEaXJlY3Rpb24gOiBESVJFQ1RJT04uTk9ORTtcbiAgICBsZXQgY3Vyc29yUG9zID0gdGhpcy5tYXNrZWQubmVhcmVzdElucHV0UG9zKGRldGFpbHMuc3RhcnRDaGFuZ2VQb3MgKyBvZmZzZXQsIHJlbW92ZURpcmVjdGlvbik7XG4gICAgaWYgKHJlbW92ZURpcmVjdGlvbiAhPT0gRElSRUNUSU9OLk5PTkUpIGN1cnNvclBvcyA9IHRoaXMubWFza2VkLm5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MsIERJUkVDVElPTi5OT05FKTtcbiAgICB0aGlzLnVwZGF0ZUNvbnRyb2woY3Vyc29yUG9zKTtcbiAgICBkZWxldGUgdGhpcy5faW5wdXRFdmVudDtcbiAgfVxuXG4gIC8qKiBIYW5kbGVzIHZpZXcgY2hhbmdlIGV2ZW50IGFuZCBjb21taXRzIG1vZGVsIHZhbHVlICovXG4gIF9vbkNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5kaXNwbGF5VmFsdWUgIT09IHRoaXMuZWwudmFsdWUpIHRoaXMudXBkYXRlVmFsdWUoKTtcbiAgICB0aGlzLm1hc2tlZC5kb0NvbW1pdCgpO1xuICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuICAgIHRoaXMuX3NhdmVTZWxlY3Rpb24oKTtcbiAgfVxuXG4gIC8qKiBIYW5kbGVzIHZpZXcgZHJvcCBldmVudCwgcHJldmVudHMgYnkgZGVmYXVsdCAqL1xuICBfb25Ecm9wKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIC8qKiBSZXN0b3JlIGxhc3Qgc2VsZWN0aW9uIG9uIGZvY3VzICovXG4gIF9vbkZvY3VzKGV2KSB7XG4gICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XG4gIH1cblxuICAvKiogUmVzdG9yZSBsYXN0IHNlbGVjdGlvbiBvbiBmb2N1cyAqL1xuICBfb25DbGljayhldikge1xuICAgIHRoaXMuYWxpZ25DdXJzb3JGcmllbmRseSgpO1xuICB9XG4gIF9vblVuZG8oKSB7XG4gICAgdGhpcy5fYXBwbHlIaXN0b3J5U3RhdGUodGhpcy5oaXN0b3J5LnVuZG8oKSk7XG4gIH1cbiAgX29uUmVkbygpIHtcbiAgICB0aGlzLl9hcHBseUhpc3RvcnlTdGF0ZSh0aGlzLmhpc3RvcnkucmVkbygpKTtcbiAgfVxuICBfYXBwbHlIaXN0b3J5U3RhdGUoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlKSByZXR1cm47XG4gICAgdGhpcy5faGlzdG9yeUNoYW5naW5nID0gdHJ1ZTtcbiAgICB0aGlzLnVubWFza2VkVmFsdWUgPSBzdGF0ZS51bm1hc2tlZFZhbHVlO1xuICAgIHRoaXMuZWwuc2VsZWN0KHN0YXRlLnNlbGVjdGlvbi5zdGFydCwgc3RhdGUuc2VsZWN0aW9uLmVuZCk7XG4gICAgdGhpcy5fc2F2ZVNlbGVjdGlvbigpO1xuICAgIHRoaXMuX2hpc3RvcnlDaGFuZ2luZyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqIFVuYmluZCB2aWV3IGV2ZW50cyBhbmQgcmVtb3ZlcyBlbGVtZW50IHJlZmVyZW5jZSAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3VuYmluZEV2ZW50cygpO1xuICAgIHRoaXMuX2xpc3RlbmVycy5sZW5ndGggPSAwO1xuICAgIGRlbGV0ZSB0aGlzLmVsO1xuICB9XG59XG5JTWFzay5JbnB1dE1hc2sgPSBJbnB1dE1hc2s7XG5cbmV4cG9ydCB7IElucHV0TWFzayBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgSU1hc2sgZnJvbSAnLi9ob2xkZXIuanMnO1xuXG4vKiogUHJvdmlkZXMgZGV0YWlscyBvZiBjaGFuZ2luZyBtb2RlbCB2YWx1ZSAqL1xuY2xhc3MgQ2hhbmdlRGV0YWlscyB7XG4gIC8qKiBJbnNlcnRlZCBzeW1ib2xzICovXG5cbiAgLyoqIEFkZGl0aW9uYWwgb2Zmc2V0IGlmIGFueSBjaGFuZ2VzIG9jY3VycmVkIGJlZm9yZSB0YWlsICovXG5cbiAgLyoqIFJhdyBpbnNlcnRlZCBpcyB1c2VkIGJ5IGR5bmFtaWMgbWFzayAqL1xuXG4gIC8qKiBDYW4gc2tpcCBjaGFycyAqL1xuXG4gIHN0YXRpYyBub3JtYWxpemUocHJlcCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByZXApID8gcHJlcCA6IFtwcmVwLCBuZXcgQ2hhbmdlRGV0YWlscygpXTtcbiAgfVxuICBjb25zdHJ1Y3RvcihkZXRhaWxzKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG4gICAgICBpbnNlcnRlZDogJycsXG4gICAgICByYXdJbnNlcnRlZDogJycsXG4gICAgICB0YWlsU2hpZnQ6IDAsXG4gICAgICBza2lwOiBmYWxzZVxuICAgIH0sIGRldGFpbHMpO1xuICB9XG5cbiAgLyoqIEFnZ3JlZ2F0ZSBjaGFuZ2VzICovXG4gIGFnZ3JlZ2F0ZShkZXRhaWxzKSB7XG4gICAgdGhpcy5pbnNlcnRlZCArPSBkZXRhaWxzLmluc2VydGVkO1xuICAgIHRoaXMucmF3SW5zZXJ0ZWQgKz0gZGV0YWlscy5yYXdJbnNlcnRlZDtcbiAgICB0aGlzLnRhaWxTaGlmdCArPSBkZXRhaWxzLnRhaWxTaGlmdDtcbiAgICB0aGlzLnNraXAgPSB0aGlzLnNraXAgfHwgZGV0YWlscy5za2lwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIFRvdGFsIG9mZnNldCBjb25zaWRlcmluZyBhbGwgY2hhbmdlcyAqL1xuICBnZXQgb2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLnRhaWxTaGlmdCArIHRoaXMuaW5zZXJ0ZWQubGVuZ3RoO1xuICB9XG4gIGdldCBjb25zdW1lZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnJhd0luc2VydGVkKSB8fCB0aGlzLnNraXA7XG4gIH1cbiAgZXF1YWxzKGRldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRlZCA9PT0gZGV0YWlscy5pbnNlcnRlZCAmJiB0aGlzLnRhaWxTaGlmdCA9PT0gZGV0YWlscy50YWlsU2hpZnQgJiYgdGhpcy5yYXdJbnNlcnRlZCA9PT0gZGV0YWlscy5yYXdJbnNlcnRlZCAmJiB0aGlzLnNraXAgPT09IGRldGFpbHMuc2tpcDtcbiAgfVxufVxuSU1hc2suQ2hhbmdlRGV0YWlscyA9IENoYW5nZURldGFpbHM7XG5cbmV4cG9ydCB7IENoYW5nZURldGFpbHMgYXMgZGVmYXVsdCB9O1xuIiwiLyoqIFByb3ZpZGVzIGRldGFpbHMgb2YgY29udGludW91cyBleHRyYWN0ZWQgdGFpbCAqL1xuY2xhc3MgQ29udGludW91c1RhaWxEZXRhaWxzIHtcbiAgLyoqIFRhaWwgdmFsdWUgYXMgc3RyaW5nICovXG5cbiAgLyoqIFRhaWwgc3RhcnQgcG9zaXRpb24gKi9cblxuICAvKiogU3RhcnQgcG9zaXRpb24gKi9cblxuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgZnJvbSwgc3RvcCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICB2YWx1ZSA9ICcnO1xuICAgIH1cbiAgICBpZiAoZnJvbSA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tID0gMDtcbiAgICB9XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgdGhpcy5zdG9wID0gc3RvcDtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuICBleHRlbmQodGFpbCkge1xuICAgIHRoaXMudmFsdWUgKz0gU3RyaW5nKHRhaWwpO1xuICB9XG4gIGFwcGVuZFRvKG1hc2tlZCkge1xuICAgIHJldHVybiBtYXNrZWQuYXBwZW5kKHRoaXMudG9TdHJpbmcoKSwge1xuICAgICAgdGFpbDogdHJ1ZVxuICAgIH0pLmFnZ3JlZ2F0ZShtYXNrZWQuX2FwcGVuZFBsYWNlaG9sZGVyKCkpO1xuICB9XG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBmcm9tOiB0aGlzLmZyb20sXG4gICAgICBzdG9wOiB0aGlzLnN0b3BcbiAgICB9O1xuICB9XG4gIHNldCBzdGF0ZShzdGF0ZSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgc3RhdGUpO1xuICB9XG4gIHVuc2hpZnQoYmVmb3JlUG9zKSB7XG4gICAgaWYgKCF0aGlzLnZhbHVlLmxlbmd0aCB8fCBiZWZvcmVQb3MgIT0gbnVsbCAmJiB0aGlzLmZyb20gPj0gYmVmb3JlUG9zKSByZXR1cm4gJyc7XG4gICAgY29uc3Qgc2hpZnRDaGFyID0gdGhpcy52YWx1ZVswXTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5zbGljZSgxKTtcbiAgICByZXR1cm4gc2hpZnRDaGFyO1xuICB9XG4gIHNoaWZ0KCkge1xuICAgIGlmICghdGhpcy52YWx1ZS5sZW5ndGgpIHJldHVybiAnJztcbiAgICBjb25zdCBzaGlmdENoYXIgPSB0aGlzLnZhbHVlW3RoaXMudmFsdWUubGVuZ3RoIC0gMV07XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgLTEpO1xuICAgIHJldHVybiBzaGlmdENoYXI7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ29udGludW91c1RhaWxEZXRhaWxzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBDaGFuZ2VEZXRhaWxzIGZyb20gJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0IENvbnRpbnVvdXNUYWlsRGV0YWlscyBmcm9tICcuLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCB7IGlzU3RyaW5nLCBESVJFQ1RJT04sIG9iamVjdEluY2x1ZGVzLCBmb3JjZURpcmVjdGlvbiB9IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcblxuLyoqIEFwcGVuZCBmbGFncyAqL1xuXG4vKiogRXh0cmFjdCBmbGFncyAqL1xuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy82MjIzXG5cbi8qKiBQcm92aWRlcyBjb21tb24gbWFza2luZyBzdHVmZiAqL1xuY2xhc3MgTWFza2VkIHtcbiAgLyoqICovXG5cbiAgLyoqICovXG5cbiAgLyoqIFRyYW5zZm9ybXMgdmFsdWUgYmVmb3JlIG1hc2sgcHJvY2Vzc2luZyAqL1xuXG4gIC8qKiBUcmFuc2Zvcm1zIGVhY2ggY2hhciBiZWZvcmUgbWFzayBwcm9jZXNzaW5nICovXG5cbiAgLyoqIFZhbGlkYXRlcyBpZiB2YWx1ZSBpcyBhY2NlcHRhYmxlICovXG5cbiAgLyoqIERvZXMgYWRkaXRpb25hbCBwcm9jZXNzaW5nIGF0IHRoZSBlbmQgb2YgZWRpdGluZyAqL1xuXG4gIC8qKiBGb3JtYXQgdHlwZWQgdmFsdWUgdG8gc3RyaW5nICovXG5cbiAgLyoqIFBhcnNlIHN0cmluZyB0byBnZXQgdHlwZWQgdmFsdWUgKi9cblxuICAvKiogRW5hYmxlIGNoYXJhY3RlcnMgb3ZlcndyaXRpbmcgKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICB0aGlzLl91cGRhdGUoe1xuICAgICAgLi4uTWFza2VkLkRFRkFVTFRTLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBTZXRzIGFuZCBhcHBsaWVzIG5ldyBvcHRpb25zICovXG4gIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIGlmICghdGhpcy5vcHRpb25zSXNDaGFuZ2VkKG9wdHMpKSByZXR1cm47XG4gICAgdGhpcy53aXRoVmFsdWVSZWZyZXNoKHRoaXMuX3VwZGF0ZS5iaW5kKHRoaXMsIG9wdHMpKTtcbiAgfVxuXG4gIC8qKiBTZXRzIG5ldyBvcHRpb25zICovXG4gIF91cGRhdGUob3B0cykge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG4gIH1cblxuICAvKiogTWFzayBzdGF0ZSAqL1xuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF92YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIF9yYXdJbnB1dFZhbHVlOiB0aGlzLnJhd0lucHV0VmFsdWVcbiAgICB9O1xuICB9XG4gIHNldCBzdGF0ZShzdGF0ZSkge1xuICAgIHRoaXMuX3ZhbHVlID0gc3RhdGUuX3ZhbHVlO1xuICB9XG5cbiAgLyoqIFJlc2V0cyB2YWx1ZSAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLl92YWx1ZSA9ICcnO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5yZXNvbHZlKHZhbHVlLCB7XG4gICAgICBpbnB1dDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqIFJlc29sdmUgbmV3IHZhbHVlICovXG4gIHJlc29sdmUodmFsdWUsIGZsYWdzKSB7XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge1xuICAgICAgICBpbnB1dDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuYXBwZW5kKHZhbHVlLCBmbGFncywgJycpO1xuICAgIHRoaXMuZG9Db21taXQoKTtcbiAgfVxuICBnZXQgdW5tYXNrZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuICBzZXQgdW5tYXNrZWRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMucmVzb2x2ZSh2YWx1ZSwge30pO1xuICB9XG4gIGdldCB0eXBlZFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlID8gdGhpcy5wYXJzZSh0aGlzLnZhbHVlLCB0aGlzKSA6IHRoaXMudW5tYXNrZWRWYWx1ZTtcbiAgfVxuICBzZXQgdHlwZWRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmZvcm1hdCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZm9ybWF0KHZhbHVlLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51bm1hc2tlZFZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKiogVmFsdWUgdGhhdCBpbmNsdWRlcyByYXcgdXNlciBpbnB1dCAqL1xuICBnZXQgcmF3SW5wdXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5leHRyYWN0SW5wdXQoMCwgdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoLCB7XG4gICAgICByYXc6IHRydWVcbiAgICB9KTtcbiAgfVxuICBzZXQgcmF3SW5wdXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMucmVzb2x2ZSh2YWx1ZSwge1xuICAgICAgcmF3OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgZ2V0IGRpc3BsYXlWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuICBnZXQgaXNDb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBnZXQgaXNGaWxsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZTtcbiAgfVxuXG4gIC8qKiBGaW5kcyBuZWFyZXN0IGlucHV0IHBvc2l0aW9uIGluIGRpcmVjdGlvbiAqL1xuICBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zLCBkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gY3Vyc29yUG9zO1xuICB9XG4gIHRvdGFsSW5wdXRQb3NpdGlvbnMoZnJvbVBvcywgdG9Qb3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5taW4odGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoLCB0b1BvcyAtIGZyb21Qb3MpO1xuICB9XG5cbiAgLyoqIEV4dHJhY3RzIHZhbHVlIGluIHJhbmdlIGNvbnNpZGVyaW5nIGZsYWdzICovXG4gIGV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kaXNwbGF5VmFsdWUuc2xpY2UoZnJvbVBvcywgdG9Qb3MpO1xuICB9XG5cbiAgLyoqIEV4dHJhY3RzIHRhaWwgaW4gcmFuZ2UgKi9cbiAgZXh0cmFjdFRhaWwoZnJvbVBvcywgdG9Qb3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyh0aGlzLmV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcyksIGZyb21Qb3MpO1xuICB9XG5cbiAgLyoqIEFwcGVuZHMgdGFpbCAqL1xuICBhcHBlbmRUYWlsKHRhaWwpIHtcbiAgICBpZiAoaXNTdHJpbmcodGFpbCkpIHRhaWwgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsKSk7XG4gICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8odGhpcyk7XG4gIH1cblxuICAvKiogQXBwZW5kcyBjaGFyICovXG4gIF9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncykge1xuICAgIGlmICghY2gpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIHRoaXMuX3ZhbHVlICs9IGNoO1xuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscyh7XG4gICAgICBpbnNlcnRlZDogY2gsXG4gICAgICByYXdJbnNlcnRlZDogY2hcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBBcHBlbmRzIGNoYXIgKi9cbiAgX2FwcGVuZENoYXIoY2gsIGZsYWdzLCBjaGVja1RhaWwpIHtcbiAgICBpZiAoZmxhZ3MgPT09IHZvaWQgMCkge1xuICAgICAgZmxhZ3MgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgY29uc2lzdGVudFN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgZGV0YWlscztcbiAgICBbY2gsIGRldGFpbHNdID0gdGhpcy5kb1ByZXBhcmVDaGFyKGNoLCBmbGFncyk7XG4gICAgaWYgKGNoKSB7XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5fYXBwZW5kQ2hhclJhdyhjaCwgZmxhZ3MpKTtcblxuICAgICAgLy8gVE9ETyBoYW5kbGUgYHNraXBgP1xuXG4gICAgICAvLyB0cnkgYGF1dG9maXhgIGxvb2thaGVhZFxuICAgICAgaWYgKCFkZXRhaWxzLnJhd0luc2VydGVkICYmIHRoaXMuYXV0b2ZpeCA9PT0gJ3BhZCcpIHtcbiAgICAgICAgY29uc3Qgbm9GaXhTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBjb25zaXN0ZW50U3RhdGU7XG4gICAgICAgIGxldCBmaXhEZXRhaWxzID0gdGhpcy5wYWQoZmxhZ3MpO1xuICAgICAgICBjb25zdCBjaERldGFpbHMgPSB0aGlzLl9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncyk7XG4gICAgICAgIGZpeERldGFpbHMgPSBmaXhEZXRhaWxzLmFnZ3JlZ2F0ZShjaERldGFpbHMpO1xuXG4gICAgICAgIC8vIGlmIGZpeCB3YXMgYXBwbGllZCBvclxuICAgICAgICAvLyBpZiBkZXRhaWxzIGFyZSBlcXVhbCB1c2Ugc2tpcCByZXN0b3Jpbmcgc3RhdGUgb3B0aW1pemF0aW9uXG4gICAgICAgIGlmIChjaERldGFpbHMucmF3SW5zZXJ0ZWQgfHwgZml4RGV0YWlscy5lcXVhbHMoZGV0YWlscykpIHtcbiAgICAgICAgICBkZXRhaWxzID0gZml4RGV0YWlscztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gbm9GaXhTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGV0YWlscy5pbnNlcnRlZCkge1xuICAgICAgbGV0IGNvbnNpc3RlbnRUYWlsO1xuICAgICAgbGV0IGFwcGVuZGVkID0gdGhpcy5kb1ZhbGlkYXRlKGZsYWdzKSAhPT0gZmFsc2U7XG4gICAgICBpZiAoYXBwZW5kZWQgJiYgY2hlY2tUYWlsICE9IG51bGwpIHtcbiAgICAgICAgLy8gdmFsaWRhdGlvbiBvaywgY2hlY2sgdGFpbFxuICAgICAgICBjb25zdCBiZWZvcmVUYWlsU3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAodGhpcy5vdmVyd3JpdGUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb25zaXN0ZW50VGFpbCA9IGNoZWNrVGFpbC5zdGF0ZTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRldGFpbHMucmF3SW5zZXJ0ZWQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNoZWNrVGFpbC51bnNoaWZ0KHRoaXMuZGlzcGxheVZhbHVlLmxlbmd0aCAtIGRldGFpbHMudGFpbFNoaWZ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRhaWxEZXRhaWxzID0gdGhpcy5hcHBlbmRUYWlsKGNoZWNrVGFpbCk7XG4gICAgICAgIGFwcGVuZGVkID0gdGFpbERldGFpbHMucmF3SW5zZXJ0ZWQubGVuZ3RoID09PSBjaGVja1RhaWwudG9TdHJpbmcoKS5sZW5ndGg7XG5cbiAgICAgICAgLy8gbm90IG9rLCB0cnkgc2hpZnRcbiAgICAgICAgaWYgKCEoYXBwZW5kZWQgJiYgdGFpbERldGFpbHMuaW5zZXJ0ZWQpICYmIHRoaXMub3ZlcndyaXRlID09PSAnc2hpZnQnKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IGJlZm9yZVRhaWxTdGF0ZTtcbiAgICAgICAgICBjb25zaXN0ZW50VGFpbCA9IGNoZWNrVGFpbC5zdGF0ZTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRldGFpbHMucmF3SW5zZXJ0ZWQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNoZWNrVGFpbC5zaGlmdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0YWlsRGV0YWlscyA9IHRoaXMuYXBwZW5kVGFpbChjaGVja1RhaWwpO1xuICAgICAgICAgIGFwcGVuZGVkID0gdGFpbERldGFpbHMucmF3SW5zZXJ0ZWQubGVuZ3RoID09PSBjaGVja1RhaWwudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBvaywgcm9sbGJhY2sgc3RhdGUgYWZ0ZXIgdGFpbFxuICAgICAgICBpZiAoYXBwZW5kZWQgJiYgdGFpbERldGFpbHMuaW5zZXJ0ZWQpIHRoaXMuc3RhdGUgPSBiZWZvcmVUYWlsU3RhdGU7XG4gICAgICB9XG5cbiAgICAgIC8vIHJldmVydCBhbGwgaWYgc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgIGlmICghYXBwZW5kZWQpIHtcbiAgICAgICAgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBjb25zaXN0ZW50U3RhdGU7XG4gICAgICAgIGlmIChjaGVja1RhaWwgJiYgY29uc2lzdGVudFRhaWwpIGNoZWNrVGFpbC5zdGF0ZSA9IGNvbnNpc3RlbnRUYWlsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuXG4gIC8qKiBBcHBlbmRzIG9wdGlvbmFsIHBsYWNlaG9sZGVyIGF0IHRoZSBlbmQgKi9cbiAgX2FwcGVuZFBsYWNlaG9sZGVyKCkge1xuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICB9XG5cbiAgLyoqIEFwcGVuZHMgb3B0aW9uYWwgZWFnZXIgcGxhY2Vob2xkZXIgYXQgdGhlIGVuZCAqL1xuICBfYXBwZW5kRWFnZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gIH1cblxuICAvKiogQXBwZW5kcyBzeW1ib2xzIGNvbnNpZGVyaW5nIGZsYWdzICovXG4gIGFwcGVuZChzdHIsIGZsYWdzLCB0YWlsKSB7XG4gICAgaWYgKCFpc1N0cmluZyhzdHIpKSB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICBjb25zdCBjaGVja1RhaWwgPSBpc1N0cmluZyh0YWlsKSA/IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWwpKSA6IHRhaWw7XG4gICAgaWYgKGZsYWdzICE9IG51bGwgJiYgZmxhZ3MudGFpbCkgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IGRldGFpbHM7XG4gICAgW3N0ciwgZGV0YWlsc10gPSB0aGlzLmRvUHJlcGFyZShzdHIsIGZsYWdzKTtcbiAgICBmb3IgKGxldCBjaSA9IDA7IGNpIDwgc3RyLmxlbmd0aDsgKytjaSkge1xuICAgICAgY29uc3QgZCA9IHRoaXMuX2FwcGVuZENoYXIoc3RyW2NpXSwgZmxhZ3MsIGNoZWNrVGFpbCk7XG4gICAgICBpZiAoIWQucmF3SW5zZXJ0ZWQgJiYgIXRoaXMuZG9Ta2lwSW52YWxpZChzdHJbY2ldLCBmbGFncywgY2hlY2tUYWlsKSkgYnJlYWs7XG4gICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShkKTtcbiAgICB9XG4gICAgaWYgKCh0aGlzLmVhZ2VyID09PSB0cnVlIHx8IHRoaXMuZWFnZXIgPT09ICdhcHBlbmQnKSAmJiBmbGFncyAhPSBudWxsICYmIGZsYWdzLmlucHV0ICYmIHN0cikge1xuICAgICAgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5fYXBwZW5kRWFnZXIoKSk7XG4gICAgfVxuXG4gICAgLy8gYXBwZW5kIHRhaWwgYnV0IGFnZ3JlZ2F0ZSBvbmx5IHRhaWxTaGlmdFxuICAgIGlmIChjaGVja1RhaWwgIT0gbnVsbCkge1xuICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5hcHBlbmRUYWlsKGNoZWNrVGFpbCkudGFpbFNoaWZ0O1xuICAgICAgLy8gVE9ETyBpdCdzIGEgZ29vZCBpZGVhIHRvIGNsZWFyIHN0YXRlIGFmdGVyIGFwcGVuZGluZyBlbmRzXG4gICAgICAvLyBidXQgaXQgY2F1c2VzIGJ1Z3Mgd2hlbiBvbmUgYXBwZW5kIGNhbGxzIGFub3RoZXIgKHdoZW4gZHluYW1pYyBkaXNwYXRjaCBzZXQgcmF3SW5wdXRWYWx1ZSlcbiAgICAgIC8vIHRoaXMuX3Jlc2V0QmVmb3JlVGFpbFN0YXRlKCk7XG4gICAgfVxuICAgIHJldHVybiBkZXRhaWxzO1xuICB9XG4gIHJlbW92ZShmcm9tUG9zLCB0b1Bvcykge1xuICAgIGlmIChmcm9tUG9zID09PSB2b2lkIDApIHtcbiAgICAgIGZyb21Qb3MgPSAwO1xuICAgIH1cbiAgICBpZiAodG9Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgdG9Qb3MgPSB0aGlzLmRpc3BsYXlWYWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5kaXNwbGF5VmFsdWUuc2xpY2UoMCwgZnJvbVBvcykgKyB0aGlzLmRpc3BsYXlWYWx1ZS5zbGljZSh0b1Bvcyk7XG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gIH1cblxuICAvKiogQ2FsbHMgZnVuY3Rpb24gYW5kIHJlYXBwbGllcyBjdXJyZW50IHZhbHVlICovXG4gIHdpdGhWYWx1ZVJlZnJlc2goZm4pIHtcbiAgICBpZiAodGhpcy5fcmVmcmVzaGluZyB8fCAhdGhpcy5faW5pdGlhbGl6ZWQpIHJldHVybiBmbigpO1xuICAgIHRoaXMuX3JlZnJlc2hpbmcgPSB0cnVlO1xuICAgIGNvbnN0IHJhd0lucHV0ID0gdGhpcy5yYXdJbnB1dFZhbHVlO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBjb25zdCByZXQgPSBmbigpO1xuICAgIHRoaXMucmF3SW5wdXRWYWx1ZSA9IHJhd0lucHV0O1xuICAgIC8vIGFwcGVuZCBsb3N0IHRyYWlsaW5nIGNoYXJzIGF0IHRoZSBlbmRcbiAgICBpZiAodGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlICE9PSB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKHRoaXMudmFsdWUpID09PSAwKSB7XG4gICAgICB0aGlzLmFwcGVuZCh2YWx1ZS5zbGljZSh0aGlzLmRpc3BsYXlWYWx1ZS5sZW5ndGgpLCB7fSwgJycpO1xuICAgICAgdGhpcy5kb0NvbW1pdCgpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fcmVmcmVzaGluZztcbiAgICByZXR1cm4gcmV0O1xuICB9XG4gIHJ1bklzb2xhdGVkKGZuKSB7XG4gICAgaWYgKHRoaXMuX2lzb2xhdGVkIHx8ICF0aGlzLl9pbml0aWFsaXplZCkgcmV0dXJuIGZuKHRoaXMpO1xuICAgIHRoaXMuX2lzb2xhdGVkID0gdHJ1ZTtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcmV0ID0gZm4odGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIGRlbGV0ZSB0aGlzLl9pc29sYXRlZDtcbiAgICByZXR1cm4gcmV0O1xuICB9XG4gIGRvU2tpcEludmFsaWQoY2gsIGZsYWdzLCBjaGVja1RhaWwpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnNraXBJbnZhbGlkKTtcbiAgfVxuXG4gIC8qKiBQcmVwYXJlcyBzdHJpbmcgYmVmb3JlIG1hc2sgcHJvY2Vzc2luZyAqL1xuICBkb1ByZXBhcmUoc3RyLCBmbGFncykge1xuICAgIGlmIChmbGFncyA9PT0gdm9pZCAwKSB7XG4gICAgICBmbGFncyA9IHt9O1xuICAgIH1cbiAgICByZXR1cm4gQ2hhbmdlRGV0YWlscy5ub3JtYWxpemUodGhpcy5wcmVwYXJlID8gdGhpcy5wcmVwYXJlKHN0ciwgdGhpcywgZmxhZ3MpIDogc3RyKTtcbiAgfVxuXG4gIC8qKiBQcmVwYXJlcyBlYWNoIGNoYXIgYmVmb3JlIG1hc2sgcHJvY2Vzc2luZyAqL1xuICBkb1ByZXBhcmVDaGFyKHN0ciwgZmxhZ3MpIHtcbiAgICBpZiAoZmxhZ3MgPT09IHZvaWQgMCkge1xuICAgICAgZmxhZ3MgPSB7fTtcbiAgICB9XG4gICAgcmV0dXJuIENoYW5nZURldGFpbHMubm9ybWFsaXplKHRoaXMucHJlcGFyZUNoYXIgPyB0aGlzLnByZXBhcmVDaGFyKHN0ciwgdGhpcywgZmxhZ3MpIDogc3RyKTtcbiAgfVxuXG4gIC8qKiBWYWxpZGF0ZXMgaWYgdmFsdWUgaXMgYWNjZXB0YWJsZSAqL1xuICBkb1ZhbGlkYXRlKGZsYWdzKSB7XG4gICAgcmV0dXJuICghdGhpcy52YWxpZGF0ZSB8fCB0aGlzLnZhbGlkYXRlKHRoaXMudmFsdWUsIHRoaXMsIGZsYWdzKSkgJiYgKCF0aGlzLnBhcmVudCB8fCB0aGlzLnBhcmVudC5kb1ZhbGlkYXRlKGZsYWdzKSk7XG4gIH1cblxuICAvKiogRG9lcyBhZGRpdGlvbmFsIHByb2Nlc3NpbmcgYXQgdGhlIGVuZCBvZiBlZGl0aW5nICovXG4gIGRvQ29tbWl0KCkge1xuICAgIGlmICh0aGlzLmNvbW1pdCkgdGhpcy5jb21taXQodGhpcy52YWx1ZSwgdGhpcyk7XG4gIH1cbiAgc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgaW5zZXJ0ZWQsIHJlbW92ZURpcmVjdGlvbiwgZmxhZ3MpIHtcbiAgICBpZiAoaW5zZXJ0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgaW5zZXJ0ZWQgPSAnJztcbiAgICB9XG4gICAgaWYgKHJlbW92ZURpcmVjdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICByZW1vdmVEaXJlY3Rpb24gPSBESVJFQ1RJT04uTk9ORTtcbiAgICB9XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge1xuICAgICAgICBpbnB1dDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdGFpbFBvcyA9IHN0YXJ0ICsgZGVsZXRlQ291bnQ7XG4gICAgY29uc3QgdGFpbCA9IHRoaXMuZXh0cmFjdFRhaWwodGFpbFBvcyk7XG4gICAgY29uc3QgZWFnZXJSZW1vdmUgPSB0aGlzLmVhZ2VyID09PSB0cnVlIHx8IHRoaXMuZWFnZXIgPT09ICdyZW1vdmUnO1xuICAgIGxldCBvbGRSYXdWYWx1ZTtcbiAgICBpZiAoZWFnZXJSZW1vdmUpIHtcbiAgICAgIHJlbW92ZURpcmVjdGlvbiA9IGZvcmNlRGlyZWN0aW9uKHJlbW92ZURpcmVjdGlvbik7XG4gICAgICBvbGRSYXdWYWx1ZSA9IHRoaXMuZXh0cmFjdElucHV0KDAsIHRhaWxQb3MsIHtcbiAgICAgICAgcmF3OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0Q2hhbmdlUG9zID0gc3RhcnQ7XG4gICAgY29uc3QgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cbiAgICAvLyBpZiBpdCBpcyBqdXN0IGRlbGV0aW9uIHdpdGhvdXQgaW5zZXJ0aW9uXG4gICAgaWYgKHJlbW92ZURpcmVjdGlvbiAhPT0gRElSRUNUSU9OLk5PTkUpIHtcbiAgICAgIHN0YXJ0Q2hhbmdlUG9zID0gdGhpcy5uZWFyZXN0SW5wdXRQb3Moc3RhcnQsIGRlbGV0ZUNvdW50ID4gMSAmJiBzdGFydCAhPT0gMCAmJiAhZWFnZXJSZW1vdmUgPyBESVJFQ1RJT04uTk9ORSA6IHJlbW92ZURpcmVjdGlvbik7XG5cbiAgICAgIC8vIGFkanVzdCB0YWlsU2hpZnQgaWYgc3RhcnQgd2FzIGFsaWduZWRcbiAgICAgIGRldGFpbHMudGFpbFNoaWZ0ID0gc3RhcnRDaGFuZ2VQb3MgLSBzdGFydDtcbiAgICB9XG4gICAgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5yZW1vdmUoc3RhcnRDaGFuZ2VQb3MpKTtcbiAgICBpZiAoZWFnZXJSZW1vdmUgJiYgcmVtb3ZlRGlyZWN0aW9uICE9PSBESVJFQ1RJT04uTk9ORSAmJiBvbGRSYXdWYWx1ZSA9PT0gdGhpcy5yYXdJbnB1dFZhbHVlKSB7XG4gICAgICBpZiAocmVtb3ZlRGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfTEVGVCkge1xuICAgICAgICBsZXQgdmFsTGVuZ3RoO1xuICAgICAgICB3aGlsZSAob2xkUmF3VmFsdWUgPT09IHRoaXMucmF3SW5wdXRWYWx1ZSAmJiAodmFsTGVuZ3RoID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoKSkge1xuICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKG5ldyBDaGFuZ2VEZXRhaWxzKHtcbiAgICAgICAgICAgIHRhaWxTaGlmdDogLTFcbiAgICAgICAgICB9KSkuYWdncmVnYXRlKHRoaXMucmVtb3ZlKHZhbExlbmd0aCAtIDEpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZW1vdmVEaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9SSUdIVCkge1xuICAgICAgICB0YWlsLnVuc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRldGFpbHMuYWdncmVnYXRlKHRoaXMuYXBwZW5kKGluc2VydGVkLCBmbGFncywgdGFpbCkpO1xuICB9XG4gIG1hc2tFcXVhbHMobWFzaykge1xuICAgIHJldHVybiB0aGlzLm1hc2sgPT09IG1hc2s7XG4gIH1cbiAgb3B0aW9uc0lzQ2hhbmdlZChvcHRzKSB7XG4gICAgcmV0dXJuICFvYmplY3RJbmNsdWRlcyh0aGlzLCBvcHRzKTtcbiAgfVxuICB0eXBlZFZhbHVlRXF1YWxzKHZhbHVlKSB7XG4gICAgY29uc3QgdHZhbCA9IHRoaXMudHlwZWRWYWx1ZTtcbiAgICByZXR1cm4gdmFsdWUgPT09IHR2YWwgfHwgTWFza2VkLkVNUFRZX1ZBTFVFUy5pbmNsdWRlcyh2YWx1ZSkgJiYgTWFza2VkLkVNUFRZX1ZBTFVFUy5pbmNsdWRlcyh0dmFsKSB8fCAodGhpcy5mb3JtYXQgPyB0aGlzLmZvcm1hdCh2YWx1ZSwgdGhpcykgPT09IHRoaXMuZm9ybWF0KHRoaXMudHlwZWRWYWx1ZSwgdGhpcykgOiBmYWxzZSk7XG4gIH1cbiAgcGFkKGZsYWdzKSB7XG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gIH1cbn1cbk1hc2tlZC5ERUZBVUxUUyA9IHtcbiAgc2tpcEludmFsaWQ6IHRydWVcbn07XG5NYXNrZWQuRU1QVFlfVkFMVUVTID0gW3VuZGVmaW5lZCwgbnVsbCwgJyddO1xuSU1hc2suTWFza2VkID0gTWFza2VkO1xuXG5leHBvcnQgeyBNYXNrZWQgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0IENvbnRpbnVvdXNUYWlsRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi8uLi9jb3JlL2hvbGRlci5qcyc7XG5cbmNsYXNzIENodW5rc1RhaWxEZXRhaWxzIHtcbiAgLyoqICovXG5cbiAgY29uc3RydWN0b3IoY2h1bmtzLCBmcm9tKSB7XG4gICAgaWYgKGNodW5rcyA9PT0gdm9pZCAwKSB7XG4gICAgICBjaHVua3MgPSBbXTtcbiAgICB9XG4gICAgaWYgKGZyb20gPT09IHZvaWQgMCkge1xuICAgICAgZnJvbSA9IDA7XG4gICAgfVxuICAgIHRoaXMuY2h1bmtzID0gY2h1bmtzO1xuICAgIHRoaXMuZnJvbSA9IGZyb207XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2h1bmtzLm1hcChTdHJpbmcpLmpvaW4oJycpO1xuICB9XG4gIGV4dGVuZCh0YWlsQ2h1bmspIHtcbiAgICBpZiAoIVN0cmluZyh0YWlsQ2h1bmspKSByZXR1cm47XG4gICAgdGFpbENodW5rID0gaXNTdHJpbmcodGFpbENodW5rKSA/IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWxDaHVuaykpIDogdGFpbENodW5rO1xuICAgIGNvbnN0IGxhc3RDaHVuayA9IHRoaXMuY2h1bmtzW3RoaXMuY2h1bmtzLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IGV4dGVuZExhc3QgPSBsYXN0Q2h1bmsgJiYgKFxuICAgIC8vIGlmIHN0b3BzIGFyZSBzYW1lIG9yIHRhaWwgaGFzIG5vIHN0b3BcbiAgICBsYXN0Q2h1bmsuc3RvcCA9PT0gdGFpbENodW5rLnN0b3AgfHwgdGFpbENodW5rLnN0b3AgPT0gbnVsbCkgJiZcbiAgICAvLyBpZiB0YWlsIGNodW5rIGdvZXMganVzdCBhZnRlciBsYXN0IGNodW5rXG4gICAgdGFpbENodW5rLmZyb20gPT09IGxhc3RDaHVuay5mcm9tICsgbGFzdENodW5rLnRvU3RyaW5nKCkubGVuZ3RoO1xuICAgIGlmICh0YWlsQ2h1bmsgaW5zdGFuY2VvZiBDb250aW51b3VzVGFpbERldGFpbHMpIHtcbiAgICAgIC8vIGNoZWNrIHRoZSBhYmlsaXR5IHRvIGV4dGVuZCBwcmV2aW91cyBjaHVua1xuICAgICAgaWYgKGV4dGVuZExhc3QpIHtcbiAgICAgICAgLy8gZXh0ZW5kIHByZXZpb3VzIGNodW5rXG4gICAgICAgIGxhc3RDaHVuay5leHRlbmQodGFpbENodW5rLnRvU3RyaW5nKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYXBwZW5kIG5ldyBjaHVua1xuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRhaWxDaHVuayk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0YWlsQ2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscykge1xuICAgICAgaWYgKHRhaWxDaHVuay5zdG9wID09IG51bGwpIHtcbiAgICAgICAgLy8gdW53cmFwIGZsb2F0aW5nIGNodW5rcyB0byBwYXJlbnQsIGtlZXBpbmcgYGZyb21gIHBvc1xuICAgICAgICBsZXQgZmlyc3RUYWlsQ2h1bms7XG4gICAgICAgIHdoaWxlICh0YWlsQ2h1bmsuY2h1bmtzLmxlbmd0aCAmJiB0YWlsQ2h1bmsuY2h1bmtzWzBdLnN0b3AgPT0gbnVsbCkge1xuICAgICAgICAgIGZpcnN0VGFpbENodW5rID0gdGFpbENodW5rLmNodW5rcy5zaGlmdCgpOyAvLyBub3QgcG9zc2libGUgdG8gYmUgYHVuZGVmaW5lZGAgYmVjYXVzZSBsZW5ndGggd2FzIGNoZWNrZWQgYWJvdmVcbiAgICAgICAgICBmaXJzdFRhaWxDaHVuay5mcm9tICs9IHRhaWxDaHVuay5mcm9tO1xuICAgICAgICAgIHRoaXMuZXh0ZW5kKGZpcnN0VGFpbENodW5rKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBpZiB0YWlsIGNodW5rIHN0aWxsIGhhcyB2YWx1ZVxuICAgICAgaWYgKHRhaWxDaHVuay50b1N0cmluZygpKSB7XG4gICAgICAgIC8vIGlmIGNodW5rcyBjb250YWlucyBzdG9wcywgdGhlbiBwb3B1cCBzdG9wIHRvIGNvbnRhaW5lclxuICAgICAgICB0YWlsQ2h1bmsuc3RvcCA9IHRhaWxDaHVuay5ibG9ja0luZGV4O1xuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRhaWxDaHVuayk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFwcGVuZFRvKG1hc2tlZCkge1xuICAgIGlmICghKG1hc2tlZCBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZFBhdHRlcm4pKSB7XG4gICAgICBjb25zdCB0YWlsID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyh0aGlzLnRvU3RyaW5nKCkpO1xuICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8obWFza2VkKTtcbiAgICB9XG4gICAgY29uc3QgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgZm9yIChsZXQgY2kgPSAwOyBjaSA8IHRoaXMuY2h1bmtzLmxlbmd0aDsgKytjaSkge1xuICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLmNodW5rc1tjaV07XG4gICAgICBjb25zdCBsYXN0QmxvY2tJdGVyID0gbWFza2VkLl9tYXBQb3NUb0Jsb2NrKG1hc2tlZC5kaXNwbGF5VmFsdWUubGVuZ3RoKTtcbiAgICAgIGNvbnN0IHN0b3AgPSBjaHVuay5zdG9wO1xuICAgICAgbGV0IGNodW5rQmxvY2s7XG4gICAgICBpZiAoc3RvcCAhPSBudWxsICYmIChcbiAgICAgIC8vIGlmIGJsb2NrIG5vdCBmb3VuZCBvciBzdG9wIGlzIGJlaGluZCBsYXN0QmxvY2tcbiAgICAgICFsYXN0QmxvY2tJdGVyIHx8IGxhc3RCbG9ja0l0ZXIuaW5kZXggPD0gc3RvcCkpIHtcbiAgICAgICAgaWYgKGNodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMgfHxcbiAgICAgICAgLy8gZm9yIGNvbnRpbnVvdXMgYmxvY2sgYWxzbyBjaGVjayBpZiBzdG9wIGlzIGV4aXN0XG4gICAgICAgIG1hc2tlZC5fc3RvcHMuaW5kZXhPZihzdG9wKSA+PSAwKSB7XG4gICAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUobWFza2VkLl9hcHBlbmRQbGFjZWhvbGRlcihzdG9wKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2h1bmtCbG9jayA9IGNodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMgJiYgbWFza2VkLl9ibG9ja3Nbc3RvcF07XG4gICAgICB9XG4gICAgICBpZiAoY2h1bmtCbG9jaykge1xuICAgICAgICBjb25zdCB0YWlsRGV0YWlscyA9IGNodW5rQmxvY2suYXBwZW5kVGFpbChjaHVuayk7XG4gICAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRhaWxEZXRhaWxzKTtcblxuICAgICAgICAvLyBnZXQgbm90IGluc2VydGVkIGNoYXJzXG4gICAgICAgIGNvbnN0IHJlbWFpbkNoYXJzID0gY2h1bmsudG9TdHJpbmcoKS5zbGljZSh0YWlsRGV0YWlscy5yYXdJbnNlcnRlZC5sZW5ndGgpO1xuICAgICAgICBpZiAocmVtYWluQ2hhcnMpIGRldGFpbHMuYWdncmVnYXRlKG1hc2tlZC5hcHBlbmQocmVtYWluQ2hhcnMsIHtcbiAgICAgICAgICB0YWlsOiB0cnVlXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRldGFpbHMuYWdncmVnYXRlKG1hc2tlZC5hcHBlbmQoY2h1bmsudG9TdHJpbmcoKSwge1xuICAgICAgICAgIHRhaWw6IHRydWVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNodW5rczogdGhpcy5jaHVua3MubWFwKGMgPT4gYy5zdGF0ZSksXG4gICAgICBmcm9tOiB0aGlzLmZyb20sXG4gICAgICBzdG9wOiB0aGlzLnN0b3AsXG4gICAgICBibG9ja0luZGV4OiB0aGlzLmJsb2NrSW5kZXhcbiAgICB9O1xuICB9XG4gIHNldCBzdGF0ZShzdGF0ZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNodW5rcyxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHN0YXRlO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xuICAgIHRoaXMuY2h1bmtzID0gY2h1bmtzLm1hcChjc3RhdGUgPT4ge1xuICAgICAgY29uc3QgY2h1bmsgPSBcImNodW5rc1wiIGluIGNzdGF0ZSA/IG5ldyBDaHVua3NUYWlsRGV0YWlscygpIDogbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscygpO1xuICAgICAgY2h1bmsuc3RhdGUgPSBjc3RhdGU7XG4gICAgICByZXR1cm4gY2h1bms7XG4gICAgfSk7XG4gIH1cbiAgdW5zaGlmdChiZWZvcmVQb3MpIHtcbiAgICBpZiAoIXRoaXMuY2h1bmtzLmxlbmd0aCB8fCBiZWZvcmVQb3MgIT0gbnVsbCAmJiB0aGlzLmZyb20gPj0gYmVmb3JlUG9zKSByZXR1cm4gJyc7XG4gICAgY29uc3QgY2h1bmtTaGlmdFBvcyA9IGJlZm9yZVBvcyAhPSBudWxsID8gYmVmb3JlUG9zIC0gdGhpcy5mcm9tIDogYmVmb3JlUG9zO1xuICAgIGxldCBjaSA9IDA7XG4gICAgd2hpbGUgKGNpIDwgdGhpcy5jaHVua3MubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjaHVuayA9IHRoaXMuY2h1bmtzW2NpXTtcbiAgICAgIGNvbnN0IHNoaWZ0Q2hhciA9IGNodW5rLnVuc2hpZnQoY2h1bmtTaGlmdFBvcyk7XG4gICAgICBpZiAoY2h1bmsudG9TdHJpbmcoKSkge1xuICAgICAgICAvLyBjaHVuayBzdGlsbCBjb250YWlucyB2YWx1ZVxuICAgICAgICAvLyBidXQgbm90IHNoaWZ0ZWQgLSBtZWFucyBubyBtb3JlIGF2YWlsYWJsZSBjaGFycyB0byBzaGlmdFxuICAgICAgICBpZiAoIXNoaWZ0Q2hhcikgYnJlYWs7XG4gICAgICAgICsrY2k7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjbGVhbiBpZiBjaHVuayBoYXMgbm8gdmFsdWVcbiAgICAgICAgdGhpcy5jaHVua3Muc3BsaWNlKGNpLCAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaGlmdENoYXIpIHJldHVybiBzaGlmdENoYXI7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuICBzaGlmdCgpIHtcbiAgICBpZiAoIXRoaXMuY2h1bmtzLmxlbmd0aCkgcmV0dXJuICcnO1xuICAgIGxldCBjaSA9IHRoaXMuY2h1bmtzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKDAgPD0gY2kpIHtcbiAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5jaHVua3NbY2ldO1xuICAgICAgY29uc3Qgc2hpZnRDaGFyID0gY2h1bmsuc2hpZnQoKTtcbiAgICAgIGlmIChjaHVuay50b1N0cmluZygpKSB7XG4gICAgICAgIC8vIGNodW5rIHN0aWxsIGNvbnRhaW5zIHZhbHVlXG4gICAgICAgIC8vIGJ1dCBub3Qgc2hpZnRlZCAtIG1lYW5zIG5vIG1vcmUgYXZhaWxhYmxlIGNoYXJzIHRvIHNoaWZ0XG4gICAgICAgIGlmICghc2hpZnRDaGFyKSBicmVhaztcbiAgICAgICAgLS1jaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNsZWFuIGlmIGNodW5rIGhhcyBubyB2YWx1ZVxuICAgICAgICB0aGlzLmNodW5rcy5zcGxpY2UoY2ksIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHNoaWZ0Q2hhcikgcmV0dXJuIHNoaWZ0Q2hhcjtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbmV4cG9ydCB7IENodW5rc1RhaWxEZXRhaWxzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IERJUkVDVElPTiB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMuanMnO1xuXG5jbGFzcyBQYXR0ZXJuQ3Vyc29yIHtcbiAgY29uc3RydWN0b3IobWFza2VkLCBwb3MpIHtcbiAgICB0aGlzLm1hc2tlZCA9IG1hc2tlZDtcbiAgICB0aGlzLl9sb2cgPSBbXTtcbiAgICBjb25zdCB7XG4gICAgICBvZmZzZXQsXG4gICAgICBpbmRleFxuICAgIH0gPSBtYXNrZWQuX21hcFBvc1RvQmxvY2socG9zKSB8fCAocG9zIDwgMCA/XG4gICAgLy8gZmlyc3RcbiAgICB7XG4gICAgICBpbmRleDogMCxcbiAgICAgIG9mZnNldDogMFxuICAgIH0gOlxuICAgIC8vIGxhc3RcbiAgICB7XG4gICAgICBpbmRleDogdGhpcy5tYXNrZWQuX2Jsb2Nrcy5sZW5ndGgsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9KTtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5vayA9IGZhbHNlO1xuICB9XG4gIGdldCBibG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQuX2Jsb2Nrc1t0aGlzLmluZGV4XTtcbiAgfVxuICBnZXQgcG9zKCkge1xuICAgIHJldHVybiB0aGlzLm1hc2tlZC5fYmxvY2tTdGFydFBvcyh0aGlzLmluZGV4KSArIHRoaXMub2Zmc2V0O1xuICB9XG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgb2s6IHRoaXMub2tcbiAgICB9O1xuICB9XG4gIHNldCBzdGF0ZShzKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzKTtcbiAgfVxuICBwdXNoU3RhdGUoKSB7XG4gICAgdGhpcy5fbG9nLnB1c2godGhpcy5zdGF0ZSk7XG4gIH1cbiAgcG9wU3RhdGUoKSB7XG4gICAgY29uc3QgcyA9IHRoaXMuX2xvZy5wb3AoKTtcbiAgICBpZiAocykgdGhpcy5zdGF0ZSA9IHM7XG4gICAgcmV0dXJuIHM7XG4gIH1cbiAgYmluZEJsb2NrKCkge1xuICAgIGlmICh0aGlzLmJsb2NrKSByZXR1cm47XG4gICAgaWYgKHRoaXMuaW5kZXggPCAwKSB7XG4gICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy5tYXNrZWQuX2Jsb2Nrcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuaW5kZXggPSB0aGlzLm1hc2tlZC5fYmxvY2tzLmxlbmd0aCAtIDE7XG4gICAgICB0aGlzLm9mZnNldCA9IHRoaXMuYmxvY2suZGlzcGxheVZhbHVlLmxlbmd0aDsgLy8gVE9ETyB0aGlzIGlzIHN0dXBpZCB0eXBlIGVycm9yLCBgYmxvY2tgIGRlcGVuZHMgb24gaW5kZXggdGhhdCB3YXMgY2hhbmdlZCBhYm92ZVxuICAgIH1cbiAgfVxuICBfcHVzaExlZnQoZm4pIHtcbiAgICB0aGlzLnB1c2hTdGF0ZSgpO1xuICAgIGZvciAodGhpcy5iaW5kQmxvY2soKTsgMCA8PSB0aGlzLmluZGV4OyAtLXRoaXMuaW5kZXgsIHRoaXMub2Zmc2V0ID0gKChfdGhpcyRibG9jayA9IHRoaXMuYmxvY2spID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRibG9jay5kaXNwbGF5VmFsdWUubGVuZ3RoKSB8fCAwKSB7XG4gICAgICB2YXIgX3RoaXMkYmxvY2s7XG4gICAgICBpZiAoZm4oKSkgcmV0dXJuIHRoaXMub2sgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vayA9IGZhbHNlO1xuICB9XG4gIF9wdXNoUmlnaHQoZm4pIHtcbiAgICB0aGlzLnB1c2hTdGF0ZSgpO1xuICAgIGZvciAodGhpcy5iaW5kQmxvY2soKTsgdGhpcy5pbmRleCA8IHRoaXMubWFza2VkLl9ibG9ja3MubGVuZ3RoOyArK3RoaXMuaW5kZXgsIHRoaXMub2Zmc2V0ID0gMCkge1xuICAgICAgaWYgKGZuKCkpIHJldHVybiB0aGlzLm9rID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub2sgPSBmYWxzZTtcbiAgfVxuICBwdXNoTGVmdEJlZm9yZUZpbGxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaExlZnQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuYmxvY2suaXNGaXhlZCB8fCAhdGhpcy5ibG9jay52YWx1ZSkgcmV0dXJuO1xuICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmJsb2NrLm5lYXJlc3RJbnB1dFBvcyh0aGlzLm9mZnNldCwgRElSRUNUSU9OLkZPUkNFX0xFRlQpO1xuICAgICAgaWYgKHRoaXMub2Zmc2V0ICE9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICBwdXNoTGVmdEJlZm9yZUlucHV0KCkge1xuICAgIC8vIGNhc2VzOlxuICAgIC8vIGZpbGxlZCBpbnB1dDogMDB8XG4gICAgLy8gb3B0aW9uYWwgZW1wdHkgaW5wdXQ6IDAwW118XG4gICAgLy8gbmVzdGVkIGJsb2NrOiBYWDxbXT58XG4gICAgcmV0dXJuIHRoaXMuX3B1c2hMZWZ0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmJsb2NrLmlzRml4ZWQpIHJldHVybjtcbiAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5ibG9jay5uZWFyZXN0SW5wdXRQb3ModGhpcy5vZmZzZXQsIERJUkVDVElPTi5MRUZUKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG4gIHB1c2hMZWZ0QmVmb3JlUmVxdWlyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2hMZWZ0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmJsb2NrLmlzRml4ZWQgfHwgdGhpcy5ibG9jay5pc09wdGlvbmFsICYmICF0aGlzLmJsb2NrLnZhbHVlKSByZXR1cm47XG4gICAgICB0aGlzLm9mZnNldCA9IHRoaXMuYmxvY2submVhcmVzdElucHV0UG9zKHRoaXMub2Zmc2V0LCBESVJFQ1RJT04uTEVGVCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICBwdXNoUmlnaHRCZWZvcmVGaWxsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2hSaWdodCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5ibG9jay5pc0ZpeGVkIHx8ICF0aGlzLmJsb2NrLnZhbHVlKSByZXR1cm47XG4gICAgICB0aGlzLm9mZnNldCA9IHRoaXMuYmxvY2submVhcmVzdElucHV0UG9zKHRoaXMub2Zmc2V0LCBESVJFQ1RJT04uRk9SQ0VfUklHSFQpO1xuICAgICAgaWYgKHRoaXMub2Zmc2V0ICE9PSB0aGlzLmJsb2NrLnZhbHVlLmxlbmd0aCkgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcHVzaFJpZ2h0QmVmb3JlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2hSaWdodCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5ibG9jay5pc0ZpeGVkKSByZXR1cm47XG5cbiAgICAgIC8vIGNvbnN0IG8gPSB0aGlzLm9mZnNldDtcbiAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5ibG9jay5uZWFyZXN0SW5wdXRQb3ModGhpcy5vZmZzZXQsIERJUkVDVElPTi5OT05FKTtcbiAgICAgIC8vIEhBQ0sgY2FzZXMgbGlrZSAoU1RJTEwgRE9FUyBOT1QgV09SSyBGT1IgTkVTVEVEKVxuICAgICAgLy8gYWF8WFxuICAgICAgLy8gYWE8WHxbXT5YXyAgICAtIHRoaXMgd2lsbCBub3Qgd29ya1xuICAgICAgLy8gaWYgKG8gJiYgbyA9PT0gdGhpcy5vZmZzZXQgJiYgdGhpcy5ibG9jayBpbnN0YW5jZW9mIFBhdHRlcm5JbnB1dERlZmluaXRpb24pIGNvbnRpbnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcHVzaFJpZ2h0QmVmb3JlUmVxdWlyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2hSaWdodCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5ibG9jay5pc0ZpeGVkIHx8IHRoaXMuYmxvY2suaXNPcHRpb25hbCAmJiAhdGhpcy5ibG9jay52YWx1ZSkgcmV0dXJuO1xuXG4gICAgICAvLyBUT0RPIGNoZWNrIHxbKl1YWF9cbiAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5ibG9jay5uZWFyZXN0SW5wdXRQb3ModGhpcy5vZmZzZXQsIERJUkVDVElPTi5OT05FKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IFBhdHRlcm5DdXJzb3IgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgeyBESVJFQ1RJT04sIGlzU3RyaW5nIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgQ29udGludW91c1RhaWxEZXRhaWxzIGZyb20gJy4uLy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuLi8uLi9jb3JlL2hvbGRlci5qcyc7XG5cbmNsYXNzIFBhdHRlcm5GaXhlZERlZmluaXRpb24ge1xuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcbiAgICB0aGlzLl92YWx1ZSA9ICcnO1xuICAgIHRoaXMuaXNGaXhlZCA9IHRydWU7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuICBnZXQgdW5tYXNrZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1VubWFza2luZyA/IHRoaXMudmFsdWUgOiAnJztcbiAgfVxuICBnZXQgcmF3SW5wdXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNSYXdJbnB1dCA/IHRoaXMudmFsdWUgOiAnJztcbiAgfVxuICBnZXQgZGlzcGxheVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX2lzUmF3SW5wdXQgPSBmYWxzZTtcbiAgICB0aGlzLl92YWx1ZSA9ICcnO1xuICB9XG4gIHJlbW92ZShmcm9tUG9zLCB0b1Bvcykge1xuICAgIGlmIChmcm9tUG9zID09PSB2b2lkIDApIHtcbiAgICAgIGZyb21Qb3MgPSAwO1xuICAgIH1cbiAgICBpZiAodG9Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgdG9Qb3MgPSB0aGlzLl92YWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5fdmFsdWUuc2xpY2UoMCwgZnJvbVBvcykgKyB0aGlzLl92YWx1ZS5zbGljZSh0b1Bvcyk7XG4gICAgaWYgKCF0aGlzLl92YWx1ZSkgdGhpcy5faXNSYXdJbnB1dCA9IGZhbHNlO1xuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICB9XG4gIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MsIGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT09IHZvaWQgMCkge1xuICAgICAgZGlyZWN0aW9uID0gRElSRUNUSU9OLk5PTkU7XG4gICAgfVxuICAgIGNvbnN0IG1pblBvcyA9IDA7XG4gICAgY29uc3QgbWF4UG9zID0gdGhpcy5fdmFsdWUubGVuZ3RoO1xuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfTEVGVDpcbiAgICAgICAgcmV0dXJuIG1pblBvcztcbiAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XG4gICAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcbiAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX1JJR0hUOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG1heFBvcztcbiAgICB9XG4gIH1cbiAgdG90YWxJbnB1dFBvc2l0aW9ucyhmcm9tUG9zLCB0b1Bvcykge1xuICAgIGlmIChmcm9tUG9zID09PSB2b2lkIDApIHtcbiAgICAgIGZyb21Qb3MgPSAwO1xuICAgIH1cbiAgICBpZiAodG9Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgdG9Qb3MgPSB0aGlzLl92YWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pc1Jhd0lucHV0ID8gdG9Qb3MgLSBmcm9tUG9zIDogMDtcbiAgfVxuICBleHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MsIGZsYWdzKSB7XG4gICAgaWYgKGZyb21Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgZnJvbVBvcyA9IDA7XG4gICAgfVxuICAgIGlmICh0b1BvcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0b1BvcyA9IHRoaXMuX3ZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIHJldHVybiBmbGFncy5yYXcgJiYgdGhpcy5faXNSYXdJbnB1dCAmJiB0aGlzLl92YWx1ZS5zbGljZShmcm9tUG9zLCB0b1BvcykgfHwgJyc7XG4gIH1cbiAgZ2V0IGlzQ29tcGxldGUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZ2V0IGlzRmlsbGVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuX3ZhbHVlKTtcbiAgfVxuICBfYXBwZW5kQ2hhcihjaCwgZmxhZ3MpIHtcbiAgICBpZiAoZmxhZ3MgPT09IHZvaWQgMCkge1xuICAgICAgZmxhZ3MgPSB7fTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNGaWxsZWQpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIGNvbnN0IGFwcGVuZEVhZ2VyID0gdGhpcy5lYWdlciA9PT0gdHJ1ZSB8fCB0aGlzLmVhZ2VyID09PSAnYXBwZW5kJztcbiAgICBjb25zdCBhcHBlbmRlZCA9IHRoaXMuY2hhciA9PT0gY2g7XG4gICAgY29uc3QgaXNSZXNvbHZlZCA9IGFwcGVuZGVkICYmICh0aGlzLmlzVW5tYXNraW5nIHx8IGZsYWdzLmlucHV0IHx8IGZsYWdzLnJhdykgJiYgKCFmbGFncy5yYXcgfHwgIWFwcGVuZEVhZ2VyKSAmJiAhZmxhZ3MudGFpbDtcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoe1xuICAgICAgaW5zZXJ0ZWQ6IHRoaXMuY2hhcixcbiAgICAgIHJhd0luc2VydGVkOiBpc1Jlc29sdmVkID8gdGhpcy5jaGFyIDogJydcbiAgICB9KTtcbiAgICB0aGlzLl92YWx1ZSA9IHRoaXMuY2hhcjtcbiAgICB0aGlzLl9pc1Jhd0lucHV0ID0gaXNSZXNvbHZlZCAmJiAoZmxhZ3MucmF3IHx8IGZsYWdzLmlucHV0KTtcbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBfYXBwZW5kRWFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGVuZENoYXIodGhpcy5jaGFyLCB7XG4gICAgICB0YWlsOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgX2FwcGVuZFBsYWNlaG9sZGVyKCkge1xuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIGlmICh0aGlzLmlzRmlsbGVkKSByZXR1cm4gZGV0YWlscztcbiAgICB0aGlzLl92YWx1ZSA9IGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLmNoYXI7XG4gICAgcmV0dXJuIGRldGFpbHM7XG4gIH1cbiAgZXh0cmFjdFRhaWwoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoJycpO1xuICB9XG4gIGFwcGVuZFRhaWwodGFpbCkge1xuICAgIGlmIChpc1N0cmluZyh0YWlsKSkgdGFpbCA9IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWwpKTtcbiAgICByZXR1cm4gdGFpbC5hcHBlbmRUbyh0aGlzKTtcbiAgfVxuICBhcHBlbmQoc3RyLCBmbGFncywgdGFpbCkge1xuICAgIGNvbnN0IGRldGFpbHMgPSB0aGlzLl9hcHBlbmRDaGFyKHN0clswXSwgZmxhZ3MpO1xuICAgIGlmICh0YWlsICE9IG51bGwpIHtcbiAgICAgIGRldGFpbHMudGFpbFNoaWZ0ICs9IHRoaXMuYXBwZW5kVGFpbCh0YWlsKS50YWlsU2hpZnQ7XG4gICAgfVxuICAgIHJldHVybiBkZXRhaWxzO1xuICB9XG4gIGRvQ29tbWl0KCkge31cbiAgZ2V0IHN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfdmFsdWU6IHRoaXMuX3ZhbHVlLFxuICAgICAgX3Jhd0lucHV0VmFsdWU6IHRoaXMucmF3SW5wdXRWYWx1ZVxuICAgIH07XG4gIH1cbiAgc2V0IHN0YXRlKHN0YXRlKSB7XG4gICAgdGhpcy5fdmFsdWUgPSBzdGF0ZS5fdmFsdWU7XG4gICAgdGhpcy5faXNSYXdJbnB1dCA9IEJvb2xlYW4oc3RhdGUuX3Jhd0lucHV0VmFsdWUpO1xuICB9XG4gIHBhZChmbGFncykge1xuICAgIHJldHVybiB0aGlzLl9hcHBlbmRQbGFjZWhvbGRlcigpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBhdHRlcm5GaXhlZERlZmluaXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IGNyZWF0ZU1hc2sgZnJvbSAnLi4vZmFjdG9yeS5qcyc7XG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCB7IERJUkVDVElPTiB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0ICcuLi8uLi9jb3JlL2hvbGRlci5qcyc7XG5cbmNsYXNzIFBhdHRlcm5JbnB1dERlZmluaXRpb24ge1xuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgY29uc3Qge1xuICAgICAgcGFyZW50LFxuICAgICAgaXNPcHRpb25hbCxcbiAgICAgIHBsYWNlaG9sZGVyQ2hhcixcbiAgICAgIGRpc3BsYXlDaGFyLFxuICAgICAgbGF6eSxcbiAgICAgIGVhZ2VyLFxuICAgICAgLi4ubWFza09wdHNcbiAgICB9ID0gb3B0cztcbiAgICB0aGlzLm1hc2tlZCA9IGNyZWF0ZU1hc2sobWFza09wdHMpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgcGFyZW50LFxuICAgICAgaXNPcHRpb25hbCxcbiAgICAgIHBsYWNlaG9sZGVyQ2hhcixcbiAgICAgIGRpc3BsYXlDaGFyLFxuICAgICAgbGF6eSxcbiAgICAgIGVhZ2VyXG4gICAgfSk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5pc0ZpbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMubWFza2VkLnJlc2V0KCk7XG4gIH1cbiAgcmVtb3ZlKGZyb21Qb3MsIHRvUG9zKSB7XG4gICAgaWYgKGZyb21Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgZnJvbVBvcyA9IDA7XG4gICAgfVxuICAgIGlmICh0b1BvcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0b1BvcyA9IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoZnJvbVBvcyA9PT0gMCAmJiB0b1BvcyA+PSAxKSB7XG4gICAgICB0aGlzLmlzRmlsbGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5tYXNrZWQucmVtb3ZlKGZyb21Qb3MsIHRvUG9zKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLm1hc2tlZC52YWx1ZSB8fCAodGhpcy5pc0ZpbGxlZCAmJiAhdGhpcy5pc09wdGlvbmFsID8gdGhpcy5wbGFjZWhvbGRlckNoYXIgOiAnJyk7XG4gIH1cbiAgZ2V0IHVubWFza2VkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XG4gIH1cbiAgZ2V0IHJhd0lucHV0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFza2VkLnJhd0lucHV0VmFsdWU7XG4gIH1cbiAgZ2V0IGRpc3BsYXlWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQudmFsdWUgJiYgdGhpcy5kaXNwbGF5Q2hhciB8fCB0aGlzLnZhbHVlO1xuICB9XG4gIGdldCBpc0NvbXBsZXRlKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMubWFza2VkLnZhbHVlKSB8fCB0aGlzLmlzT3B0aW9uYWw7XG4gIH1cbiAgX2FwcGVuZENoYXIoY2gsIGZsYWdzKSB7XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIGlmICh0aGlzLmlzRmlsbGVkKSByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMubWFza2VkLnN0YXRlO1xuICAgIC8vIHNpbXVsYXRlIGlucHV0XG4gICAgbGV0IGRldGFpbHMgPSB0aGlzLm1hc2tlZC5fYXBwZW5kQ2hhcihjaCwgdGhpcy5jdXJyZW50TWFza0ZsYWdzKGZsYWdzKSk7XG4gICAgaWYgKGRldGFpbHMuaW5zZXJ0ZWQgJiYgdGhpcy5kb1ZhbGlkYXRlKGZsYWdzKSA9PT0gZmFsc2UpIHtcbiAgICAgIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgICAgdGhpcy5tYXNrZWQuc3RhdGUgPSBzdGF0ZTtcbiAgICB9XG4gICAgaWYgKCFkZXRhaWxzLmluc2VydGVkICYmICF0aGlzLmlzT3B0aW9uYWwgJiYgIXRoaXMubGF6eSAmJiAhZmxhZ3MuaW5wdXQpIHtcbiAgICAgIGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLnBsYWNlaG9sZGVyQ2hhcjtcbiAgICB9XG4gICAgZGV0YWlscy5za2lwID0gIWRldGFpbHMuaW5zZXJ0ZWQgJiYgIXRoaXMuaXNPcHRpb25hbDtcbiAgICB0aGlzLmlzRmlsbGVkID0gQm9vbGVhbihkZXRhaWxzLmluc2VydGVkKTtcbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBhcHBlbmQoc3RyLCBmbGFncywgdGFpbCkge1xuICAgIC8vIFRPRE8gcHJvYmFibHkgc2hvdWxkIGJlIGRvbmUgdmlhIF9hcHBlbmRDaGFyXG4gICAgcmV0dXJuIHRoaXMubWFza2VkLmFwcGVuZChzdHIsIHRoaXMuY3VycmVudE1hc2tGbGFncyhmbGFncyksIHRhaWwpO1xuICB9XG4gIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcbiAgICBpZiAodGhpcy5pc0ZpbGxlZCB8fCB0aGlzLmlzT3B0aW9uYWwpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIHRoaXMuaXNGaWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscyh7XG4gICAgICBpbnNlcnRlZDogdGhpcy5wbGFjZWhvbGRlckNoYXJcbiAgICB9KTtcbiAgfVxuICBfYXBwZW5kRWFnZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gIH1cbiAgZXh0cmFjdFRhaWwoZnJvbVBvcywgdG9Qb3MpIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQuZXh0cmFjdFRhaWwoZnJvbVBvcywgdG9Qb3MpO1xuICB9XG4gIGFwcGVuZFRhaWwodGFpbCkge1xuICAgIHJldHVybiB0aGlzLm1hc2tlZC5hcHBlbmRUYWlsKHRhaWwpO1xuICB9XG4gIGV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1hc2tlZC5leHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MsIGZsYWdzKTtcbiAgfVxuICBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zLCBkaXJlY3Rpb24pIHtcbiAgICBpZiAoZGlyZWN0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIGRpcmVjdGlvbiA9IERJUkVDVElPTi5OT05FO1xuICAgIH1cbiAgICBjb25zdCBtaW5Qb3MgPSAwO1xuICAgIGNvbnN0IG1heFBvcyA9IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgIGNvbnN0IGJvdW5kUG9zID0gTWF0aC5taW4oTWF0aC5tYXgoY3Vyc29yUG9zLCBtaW5Qb3MpLCBtYXhQb3MpO1xuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfTEVGVDpcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZSA/IGJvdW5kUG9zIDogbWluUG9zO1xuICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG4gICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9SSUdIVDpcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZSA/IGJvdW5kUG9zIDogbWF4UG9zO1xuICAgICAgY2FzZSBESVJFQ1RJT04uTk9ORTpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBib3VuZFBvcztcbiAgICB9XG4gIH1cbiAgdG90YWxJbnB1dFBvc2l0aW9ucyhmcm9tUG9zLCB0b1Bvcykge1xuICAgIGlmIChmcm9tUG9zID09PSB2b2lkIDApIHtcbiAgICAgIGZyb21Qb3MgPSAwO1xuICAgIH1cbiAgICBpZiAodG9Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgdG9Qb3MgPSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsdWUuc2xpY2UoZnJvbVBvcywgdG9Qb3MpLmxlbmd0aDtcbiAgfVxuICBkb1ZhbGlkYXRlKGZsYWdzKSB7XG4gICAgcmV0dXJuIHRoaXMubWFza2VkLmRvVmFsaWRhdGUodGhpcy5jdXJyZW50TWFza0ZsYWdzKGZsYWdzKSkgJiYgKCF0aGlzLnBhcmVudCB8fCB0aGlzLnBhcmVudC5kb1ZhbGlkYXRlKHRoaXMuY3VycmVudE1hc2tGbGFncyhmbGFncykpKTtcbiAgfVxuICBkb0NvbW1pdCgpIHtcbiAgICB0aGlzLm1hc2tlZC5kb0NvbW1pdCgpO1xuICB9XG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX3ZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgX3Jhd0lucHV0VmFsdWU6IHRoaXMucmF3SW5wdXRWYWx1ZSxcbiAgICAgIG1hc2tlZDogdGhpcy5tYXNrZWQuc3RhdGUsXG4gICAgICBpc0ZpbGxlZDogdGhpcy5pc0ZpbGxlZFxuICAgIH07XG4gIH1cbiAgc2V0IHN0YXRlKHN0YXRlKSB7XG4gICAgdGhpcy5tYXNrZWQuc3RhdGUgPSBzdGF0ZS5tYXNrZWQ7XG4gICAgdGhpcy5pc0ZpbGxlZCA9IHN0YXRlLmlzRmlsbGVkO1xuICB9XG4gIGN1cnJlbnRNYXNrRmxhZ3MoZmxhZ3MpIHtcbiAgICB2YXIgX2ZsYWdzJF9iZWZvcmVUYWlsU3RhO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5mbGFncyxcbiAgICAgIF9iZWZvcmVUYWlsU3RhdGU6IChmbGFncyA9PSBudWxsIHx8IChfZmxhZ3MkX2JlZm9yZVRhaWxTdGEgPSBmbGFncy5fYmVmb3JlVGFpbFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2ZsYWdzJF9iZWZvcmVUYWlsU3RhLm1hc2tlZCkgfHwgKGZsYWdzID09IG51bGwgPyB2b2lkIDAgOiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlKVxuICAgIH07XG4gIH1cbiAgcGFkKGZsYWdzKSB7XG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gIH1cbn1cblBhdHRlcm5JbnB1dERlZmluaXRpb24uREVGQVVMVF9ERUZJTklUSU9OUyA9IHtcbiAgJzAnOiAvXFxkLyxcbiAgJ2EnOiAvW1xcdTAwNDEtXFx1MDA1QVxcdTAwNjEtXFx1MDA3QVxcdTAwQUFcXHUwMEI1XFx1MDBCQVxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyN1xcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMFxcdTA4QTItXFx1MDhBQ1xcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdGXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzNcXHUwQzM1LVxcdTBDMzlcXHUwQzNEXFx1MEM1OFxcdTBDNTlcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ2MFxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFDXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlDMS1cXHUxOUM3XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OTdcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3OEVcXHVBNzkwLVxcdUE3OTNcXHVBN0EwLVxcdUE3QUFcXHVBN0Y4LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTgwLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCQzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ10vLFxuICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjA3NTA3MFxuICAnKic6IC8uL1xufTtcblxuZXhwb3J0IHsgUGF0dGVybklucHV0RGVmaW5pdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgTWFza2VkIGZyb20gJy4vYmFzZS5qcyc7XG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvdXRpbHMuanMnO1xuXG4vKiogTWFza2luZyBieSBSZWdFeHAgKi9cbmNsYXNzIE1hc2tlZFJlZ0V4cCBleHRlbmRzIE1hc2tlZCB7XG4gIC8qKiAqL1xuXG4gIC8qKiBFbmFibGUgY2hhcmFjdGVycyBvdmVyd3JpdGluZyAqL1xuXG4gIC8qKiAqL1xuXG4gIC8qKiAqL1xuXG4gIC8qKiAqL1xuXG4gIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIHN1cGVyLnVwZGF0ZU9wdGlvbnMob3B0cyk7XG4gIH1cbiAgX3VwZGF0ZShvcHRzKSB7XG4gICAgY29uc3QgbWFzayA9IG9wdHMubWFzaztcbiAgICBpZiAobWFzaykgb3B0cy52YWxpZGF0ZSA9IHZhbHVlID0+IHZhbHVlLnNlYXJjaChtYXNrKSA+PSAwO1xuICAgIHN1cGVyLl91cGRhdGUob3B0cyk7XG4gIH1cbn1cbklNYXNrLk1hc2tlZFJlZ0V4cCA9IE1hc2tlZFJlZ0V4cDtcblxuZXhwb3J0IHsgTWFza2VkUmVnRXhwIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBDaGFuZ2VEZXRhaWxzIGZyb20gJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCB7IERJUkVDVElPTiB9IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0IE1hc2tlZCBmcm9tICcuL2Jhc2UuanMnO1xuaW1wb3J0IGNyZWF0ZU1hc2ssIHsgbm9ybWFsaXplT3B0cyB9IGZyb20gJy4vZmFjdG9yeS5qcyc7XG5pbXBvcnQgQ2h1bmtzVGFpbERldGFpbHMgZnJvbSAnLi9wYXR0ZXJuL2NodW5rLXRhaWwtZGV0YWlscy5qcyc7XG5pbXBvcnQgUGF0dGVybkN1cnNvciBmcm9tICcuL3BhdHRlcm4vY3Vyc29yLmpzJztcbmltcG9ydCBQYXR0ZXJuRml4ZWREZWZpbml0aW9uIGZyb20gJy4vcGF0dGVybi9maXhlZC1kZWZpbml0aW9uLmpzJztcbmltcG9ydCBQYXR0ZXJuSW5wdXREZWZpbml0aW9uIGZyb20gJy4vcGF0dGVybi9pbnB1dC1kZWZpbml0aW9uLmpzJztcbmltcG9ydCAnLi9yZWdleHAuanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcblxuLyoqIFBhdHRlcm4gbWFzayAqL1xuY2xhc3MgTWFza2VkUGF0dGVybiBleHRlbmRzIE1hc2tlZCB7XG4gIC8qKiAqL1xuXG4gIC8qKiAqL1xuXG4gIC8qKiBTaW5nbGUgY2hhciBmb3IgZW1wdHkgaW5wdXQgKi9cblxuICAvKiogU2luZ2xlIGNoYXIgZm9yIGZpbGxlZCBpbnB1dCAqL1xuXG4gIC8qKiBTaG93IHBsYWNlaG9sZGVyIG9ubHkgd2hlbiBuZWVkZWQgKi9cblxuICAvKiogRW5hYmxlIGNoYXJhY3RlcnMgb3ZlcndyaXRpbmcgKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4uTWFza2VkUGF0dGVybi5ERUZBVUxUUyxcbiAgICAgIC4uLm9wdHMsXG4gICAgICBkZWZpbml0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgUGF0dGVybklucHV0RGVmaW5pdGlvbi5ERUZBVUxUX0RFRklOSVRJT05TLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmRlZmluaXRpb25zKVxuICAgIH0pO1xuICB9XG4gIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIHN1cGVyLnVwZGF0ZU9wdGlvbnMob3B0cyk7XG4gIH1cbiAgX3VwZGF0ZShvcHRzKSB7XG4gICAgb3B0cy5kZWZpbml0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmaW5pdGlvbnMsIG9wdHMuZGVmaW5pdGlvbnMpO1xuICAgIHN1cGVyLl91cGRhdGUob3B0cyk7XG4gICAgdGhpcy5fcmVidWlsZE1hc2soKTtcbiAgfVxuICBfcmVidWlsZE1hc2soKSB7XG4gICAgY29uc3QgZGVmcyA9IHRoaXMuZGVmaW5pdGlvbnM7XG4gICAgdGhpcy5fYmxvY2tzID0gW107XG4gICAgdGhpcy5leHBvc2VCbG9jayA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdG9wcyA9IFtdO1xuICAgIHRoaXMuX21hc2tlZEJsb2NrcyA9IHt9O1xuICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLm1hc2s7XG4gICAgaWYgKCFwYXR0ZXJuIHx8ICFkZWZzKSByZXR1cm47XG4gICAgbGV0IHVubWFza2luZ0Jsb2NrID0gZmFsc2U7XG4gICAgbGV0IG9wdGlvbmFsQmxvY2sgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLmJsb2Nrcykge1xuICAgICAgICBjb25zdCBwID0gcGF0dGVybi5zbGljZShpKTtcbiAgICAgICAgY29uc3QgYk5hbWVzID0gT2JqZWN0LmtleXModGhpcy5ibG9ja3MpLmZpbHRlcihiTmFtZSA9PiBwLmluZGV4T2YoYk5hbWUpID09PSAwKTtcbiAgICAgICAgLy8gb3JkZXIgYnkga2V5IGxlbmd0aFxuICAgICAgICBiTmFtZXMuc29ydCgoYSwgYikgPT4gYi5sZW5ndGggLSBhLmxlbmd0aCk7XG4gICAgICAgIC8vIHVzZSBibG9jayBuYW1lIHdpdGggbWF4IGxlbmd0aFxuICAgICAgICBjb25zdCBiTmFtZSA9IGJOYW1lc1swXTtcbiAgICAgICAgaWYgKGJOYW1lKSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZXhwb3NlLFxuICAgICAgICAgICAgcmVwZWF0LFxuICAgICAgICAgICAgLi4uYk9wdHNcbiAgICAgICAgICB9ID0gbm9ybWFsaXplT3B0cyh0aGlzLmJsb2Nrc1tiTmFtZV0pOyAvLyBUT0RPIHR5cGUgT3B0czxBcmcgJiBFeHRyYT5cbiAgICAgICAgICBjb25zdCBibG9ja09wdHMgPSB7XG4gICAgICAgICAgICBsYXp5OiB0aGlzLmxhenksXG4gICAgICAgICAgICBlYWdlcjogdGhpcy5lYWdlcixcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyQ2hhcjogdGhpcy5wbGFjZWhvbGRlckNoYXIsXG4gICAgICAgICAgICBkaXNwbGF5Q2hhcjogdGhpcy5kaXNwbGF5Q2hhcixcbiAgICAgICAgICAgIG92ZXJ3cml0ZTogdGhpcy5vdmVyd3JpdGUsXG4gICAgICAgICAgICBhdXRvZml4OiB0aGlzLmF1dG9maXgsXG4gICAgICAgICAgICAuLi5iT3B0cyxcbiAgICAgICAgICAgIHJlcGVhdCxcbiAgICAgICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgICAgIH07XG4gICAgICAgICAgY29uc3QgbWFza2VkQmxvY2sgPSByZXBlYXQgIT0gbnVsbCA/IG5ldyBJTWFzay5SZXBlYXRCbG9jayhibG9ja09wdHMgLyogVE9ETyAqLykgOiBjcmVhdGVNYXNrKGJsb2NrT3B0cyk7XG4gICAgICAgICAgaWYgKG1hc2tlZEJsb2NrKSB7XG4gICAgICAgICAgICB0aGlzLl9ibG9ja3MucHVzaChtYXNrZWRCbG9jayk7XG4gICAgICAgICAgICBpZiAoZXhwb3NlKSB0aGlzLmV4cG9zZUJsb2NrID0gbWFza2VkQmxvY2s7XG5cbiAgICAgICAgICAgIC8vIHN0b3JlIGJsb2NrIGluZGV4XG4gICAgICAgICAgICBpZiAoIXRoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0pIHRoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0ucHVzaCh0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkgKz0gYk5hbWUubGVuZ3RoIC0gMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGNoYXIgPSBwYXR0ZXJuW2ldO1xuICAgICAgbGV0IGlzSW5wdXQgPSAoY2hhciBpbiBkZWZzKTtcbiAgICAgIGlmIChjaGFyID09PSBNYXNrZWRQYXR0ZXJuLlNUT1BfQ0hBUikge1xuICAgICAgICB0aGlzLl9zdG9wcy5wdXNoKHRoaXMuX2Jsb2Nrcy5sZW5ndGgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFyID09PSAneycgfHwgY2hhciA9PT0gJ30nKSB7XG4gICAgICAgIHVubWFza2luZ0Jsb2NrID0gIXVubWFza2luZ0Jsb2NrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFyID09PSAnWycgfHwgY2hhciA9PT0gJ10nKSB7XG4gICAgICAgIG9wdGlvbmFsQmxvY2sgPSAhb3B0aW9uYWxCbG9jaztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoY2hhciA9PT0gTWFza2VkUGF0dGVybi5FU0NBUEVfQ0hBUikge1xuICAgICAgICArK2k7XG4gICAgICAgIGNoYXIgPSBwYXR0ZXJuW2ldO1xuICAgICAgICBpZiAoIWNoYXIpIGJyZWFrO1xuICAgICAgICBpc0lucHV0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBkZWYgPSBpc0lucHV0ID8gbmV3IFBhdHRlcm5JbnB1dERlZmluaXRpb24oe1xuICAgICAgICBpc09wdGlvbmFsOiBvcHRpb25hbEJsb2NrLFxuICAgICAgICBsYXp5OiB0aGlzLmxhenksXG4gICAgICAgIGVhZ2VyOiB0aGlzLmVhZ2VyLFxuICAgICAgICBwbGFjZWhvbGRlckNoYXI6IHRoaXMucGxhY2Vob2xkZXJDaGFyLFxuICAgICAgICBkaXNwbGF5Q2hhcjogdGhpcy5kaXNwbGF5Q2hhcixcbiAgICAgICAgLi4ubm9ybWFsaXplT3B0cyhkZWZzW2NoYXJdKSxcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSA6IG5ldyBQYXR0ZXJuRml4ZWREZWZpbml0aW9uKHtcbiAgICAgICAgY2hhcixcbiAgICAgICAgZWFnZXI6IHRoaXMuZWFnZXIsXG4gICAgICAgIGlzVW5tYXNraW5nOiB1bm1hc2tpbmdCbG9ja1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9ibG9ja3MucHVzaChkZWYpO1xuICAgIH1cbiAgfVxuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN1cGVyLnN0YXRlLFxuICAgICAgX2Jsb2NrczogdGhpcy5fYmxvY2tzLm1hcChiID0+IGIuc3RhdGUpXG4gICAgfTtcbiAgfVxuICBzZXQgc3RhdGUoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIF9ibG9ja3MsXG4gICAgICAuLi5tYXNrZWRTdGF0ZVxuICAgIH0gPSBzdGF0ZTtcbiAgICB0aGlzLl9ibG9ja3MuZm9yRWFjaCgoYiwgYmkpID0+IGIuc3RhdGUgPSBfYmxvY2tzW2JpXSk7XG4gICAgc3VwZXIuc3RhdGUgPSBtYXNrZWRTdGF0ZTtcbiAgfVxuICByZXNldCgpIHtcbiAgICBzdXBlci5yZXNldCgpO1xuICAgIHRoaXMuX2Jsb2Nrcy5mb3JFYWNoKGIgPT4gYi5yZXNldCgpKTtcbiAgfVxuICBnZXQgaXNDb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBvc2VCbG9jayA/IHRoaXMuZXhwb3NlQmxvY2suaXNDb21wbGV0ZSA6IHRoaXMuX2Jsb2Nrcy5ldmVyeShiID0+IGIuaXNDb21wbGV0ZSk7XG4gIH1cbiAgZ2V0IGlzRmlsbGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3MuZXZlcnkoYiA9PiBiLmlzRmlsbGVkKTtcbiAgfVxuICBnZXQgaXNGaXhlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmV2ZXJ5KGIgPT4gYi5pc0ZpeGVkKTtcbiAgfVxuICBnZXQgaXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmV2ZXJ5KGIgPT4gYi5pc09wdGlvbmFsKTtcbiAgfVxuICBkb0NvbW1pdCgpIHtcbiAgICB0aGlzLl9ibG9ja3MuZm9yRWFjaChiID0+IGIuZG9Db21taXQoKSk7XG4gICAgc3VwZXIuZG9Db21taXQoKTtcbiAgfVxuICBnZXQgdW5tYXNrZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBvc2VCbG9jayA/IHRoaXMuZXhwb3NlQmxvY2sudW5tYXNrZWRWYWx1ZSA6IHRoaXMuX2Jsb2Nrcy5yZWR1Y2UoKHN0ciwgYikgPT4gc3RyICs9IGIudW5tYXNrZWRWYWx1ZSwgJycpO1xuICB9XG4gIHNldCB1bm1hc2tlZFZhbHVlKHVubWFza2VkVmFsdWUpIHtcbiAgICBpZiAodGhpcy5leHBvc2VCbG9jaykge1xuICAgICAgY29uc3QgdGFpbCA9IHRoaXMuZXh0cmFjdFRhaWwodGhpcy5fYmxvY2tTdGFydFBvcyh0aGlzLl9ibG9ja3MuaW5kZXhPZih0aGlzLmV4cG9zZUJsb2NrKSkgKyB0aGlzLmV4cG9zZUJsb2NrLmRpc3BsYXlWYWx1ZS5sZW5ndGgpO1xuICAgICAgdGhpcy5leHBvc2VCbG9jay51bm1hc2tlZFZhbHVlID0gdW5tYXNrZWRWYWx1ZTtcbiAgICAgIHRoaXMuYXBwZW5kVGFpbCh0YWlsKTtcbiAgICAgIHRoaXMuZG9Db21taXQoKTtcbiAgICB9IGVsc2Ugc3VwZXIudW5tYXNrZWRWYWx1ZSA9IHVubWFza2VkVmFsdWU7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmV4cG9zZUJsb2NrID8gdGhpcy5leHBvc2VCbG9jay52YWx1ZSA6XG4gICAgLy8gVE9ETyByZXR1cm4gX3ZhbHVlIHdoZW4gbm90IGluIGNoYW5nZT9cbiAgICB0aGlzLl9ibG9ja3MucmVkdWNlKChzdHIsIGIpID0+IHN0ciArPSBiLnZhbHVlLCAnJyk7XG4gIH1cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZXhwb3NlQmxvY2spIHtcbiAgICAgIGNvbnN0IHRhaWwgPSB0aGlzLmV4dHJhY3RUYWlsKHRoaXMuX2Jsb2NrU3RhcnRQb3ModGhpcy5fYmxvY2tzLmluZGV4T2YodGhpcy5leHBvc2VCbG9jaykpICsgdGhpcy5leHBvc2VCbG9jay5kaXNwbGF5VmFsdWUubGVuZ3RoKTtcbiAgICAgIHRoaXMuZXhwb3NlQmxvY2sudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuYXBwZW5kVGFpbCh0YWlsKTtcbiAgICAgIHRoaXMuZG9Db21taXQoKTtcbiAgICB9IGVsc2Ugc3VwZXIudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBnZXQgdHlwZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBvc2VCbG9jayA/IHRoaXMuZXhwb3NlQmxvY2sudHlwZWRWYWx1ZSA6IHN1cGVyLnR5cGVkVmFsdWU7XG4gIH1cbiAgc2V0IHR5cGVkVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodGhpcy5leHBvc2VCbG9jaykge1xuICAgICAgY29uc3QgdGFpbCA9IHRoaXMuZXh0cmFjdFRhaWwodGhpcy5fYmxvY2tTdGFydFBvcyh0aGlzLl9ibG9ja3MuaW5kZXhPZih0aGlzLmV4cG9zZUJsb2NrKSkgKyB0aGlzLmV4cG9zZUJsb2NrLmRpc3BsYXlWYWx1ZS5sZW5ndGgpO1xuICAgICAgdGhpcy5leHBvc2VCbG9jay50eXBlZFZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLmFwcGVuZFRhaWwodGFpbCk7XG4gICAgICB0aGlzLmRvQ29tbWl0KCk7XG4gICAgfSBlbHNlIHN1cGVyLnR5cGVkVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBnZXQgZGlzcGxheVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVkdWNlKChzdHIsIGIpID0+IHN0ciArPSBiLmRpc3BsYXlWYWx1ZSwgJycpO1xuICB9XG4gIGFwcGVuZFRhaWwodGFpbCkge1xuICAgIHJldHVybiBzdXBlci5hcHBlbmRUYWlsKHRhaWwpLmFnZ3JlZ2F0ZSh0aGlzLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcbiAgfVxuICBfYXBwZW5kRWFnZXIoKSB7XG4gICAgdmFyIF90aGlzJF9tYXBQb3NUb0Jsb2NrO1xuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIGxldCBzdGFydEJsb2NrSW5kZXggPSAoX3RoaXMkX21hcFBvc1RvQmxvY2sgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKHRoaXMuZGlzcGxheVZhbHVlLmxlbmd0aCkpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRfbWFwUG9zVG9CbG9jay5pbmRleDtcbiAgICBpZiAoc3RhcnRCbG9ja0luZGV4ID09IG51bGwpIHJldHVybiBkZXRhaWxzO1xuXG4gICAgLy8gVE9ETyB0ZXN0IGlmIGl0IHdvcmtzIGZvciBuZXN0ZWQgcGF0dGVybiBtYXNrc1xuICAgIGlmICh0aGlzLl9ibG9ja3Nbc3RhcnRCbG9ja0luZGV4XS5pc0ZpbGxlZCkgKytzdGFydEJsb2NrSW5kZXg7XG4gICAgZm9yIChsZXQgYmkgPSBzdGFydEJsb2NrSW5kZXg7IGJpIDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytiaSkge1xuICAgICAgY29uc3QgZCA9IHRoaXMuX2Jsb2Nrc1tiaV0uX2FwcGVuZEVhZ2VyKCk7XG4gICAgICBpZiAoIWQuaW5zZXJ0ZWQpIGJyZWFrO1xuICAgICAgZGV0YWlscy5hZ2dyZWdhdGUoZCk7XG4gICAgfVxuICAgIHJldHVybiBkZXRhaWxzO1xuICB9XG4gIF9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncykge1xuICAgIGlmIChmbGFncyA9PT0gdm9pZCAwKSB7XG4gICAgICBmbGFncyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBibG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKHRoaXMuZGlzcGxheVZhbHVlLmxlbmd0aCk7XG4gICAgY29uc3QgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgaWYgKCFibG9ja0l0ZXIpIHJldHVybiBkZXRhaWxzO1xuICAgIGZvciAobGV0IGJpID0gYmxvY2tJdGVyLmluZGV4LCBibG9jazsgYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldOyArK2JpKSB7XG4gICAgICB2YXIgX2ZsYWdzJF9iZWZvcmVUYWlsU3RhO1xuICAgICAgY29uc3QgYmxvY2tEZXRhaWxzID0gYmxvY2suX2FwcGVuZENoYXIoY2gsIHtcbiAgICAgICAgLi4uZmxhZ3MsXG4gICAgICAgIF9iZWZvcmVUYWlsU3RhdGU6IChfZmxhZ3MkX2JlZm9yZVRhaWxTdGEgPSBmbGFncy5fYmVmb3JlVGFpbFN0YXRlKSA9PSBudWxsIHx8IChfZmxhZ3MkX2JlZm9yZVRhaWxTdGEgPSBfZmxhZ3MkX2JlZm9yZVRhaWxTdGEuX2Jsb2NrcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mbGFncyRfYmVmb3JlVGFpbFN0YVtiaV1cbiAgICAgIH0pO1xuICAgICAgZGV0YWlscy5hZ2dyZWdhdGUoYmxvY2tEZXRhaWxzKTtcbiAgICAgIGlmIChibG9ja0RldGFpbHMuY29uc3VtZWQpIGJyZWFrOyAvLyBnbyBuZXh0IGNoYXJcbiAgICB9XG4gICAgcmV0dXJuIGRldGFpbHM7XG4gIH1cbiAgZXh0cmFjdFRhaWwoZnJvbVBvcywgdG9Qb3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBjaHVua1RhaWwgPSBuZXcgQ2h1bmtzVGFpbERldGFpbHMoKTtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdG9Qb3MpIHJldHVybiBjaHVua1RhaWw7XG4gICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoZnJvbVBvcywgdG9Qb3MsIChiLCBiaSwgYkZyb21Qb3MsIGJUb1BvcykgPT4ge1xuICAgICAgY29uc3QgYmxvY2tDaHVuayA9IGIuZXh0cmFjdFRhaWwoYkZyb21Qb3MsIGJUb1Bvcyk7XG4gICAgICBibG9ja0NodW5rLnN0b3AgPSB0aGlzLl9maW5kU3RvcEJlZm9yZShiaSk7XG4gICAgICBibG9ja0NodW5rLmZyb20gPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKGJpKTtcbiAgICAgIGlmIChibG9ja0NodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMpIGJsb2NrQ2h1bmsuYmxvY2tJbmRleCA9IGJpO1xuICAgICAgY2h1bmtUYWlsLmV4dGVuZChibG9ja0NodW5rKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2h1bmtUYWlsO1xuICB9XG4gIGV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MgPT09IHZvaWQgMCkge1xuICAgICAgZmxhZ3MgPSB7fTtcbiAgICB9XG4gICAgaWYgKGZyb21Qb3MgPT09IHRvUG9zKSByZXR1cm4gJyc7XG4gICAgbGV0IGlucHV0ID0gJyc7XG4gICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoZnJvbVBvcywgdG9Qb3MsIChiLCBfLCBmcm9tUG9zLCB0b1BvcykgPT4ge1xuICAgICAgaW5wdXQgKz0gYi5leHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MsIGZsYWdzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgX2ZpbmRTdG9wQmVmb3JlKGJsb2NrSW5kZXgpIHtcbiAgICBsZXQgc3RvcEJlZm9yZTtcbiAgICBmb3IgKGxldCBzaSA9IDA7IHNpIDwgdGhpcy5fc3RvcHMubGVuZ3RoOyArK3NpKSB7XG4gICAgICBjb25zdCBzdG9wID0gdGhpcy5fc3RvcHNbc2ldO1xuICAgICAgaWYgKHN0b3AgPD0gYmxvY2tJbmRleCkgc3RvcEJlZm9yZSA9IHN0b3A7ZWxzZSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHN0b3BCZWZvcmU7XG4gIH1cblxuICAvKiogQXBwZW5kcyBwbGFjZWhvbGRlciBkZXBlbmRpbmcgb24gbGF6aW5lc3MgKi9cbiAgX2FwcGVuZFBsYWNlaG9sZGVyKHRvQmxvY2tJbmRleCkge1xuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIGlmICh0aGlzLmxhenkgJiYgdG9CbG9ja0luZGV4ID09IG51bGwpIHJldHVybiBkZXRhaWxzO1xuICAgIGNvbnN0IHN0YXJ0QmxvY2tJdGVyID0gdGhpcy5fbWFwUG9zVG9CbG9jayh0aGlzLmRpc3BsYXlWYWx1ZS5sZW5ndGgpO1xuICAgIGlmICghc3RhcnRCbG9ja0l0ZXIpIHJldHVybiBkZXRhaWxzO1xuICAgIGNvbnN0IHN0YXJ0QmxvY2tJbmRleCA9IHN0YXJ0QmxvY2tJdGVyLmluZGV4O1xuICAgIGNvbnN0IGVuZEJsb2NrSW5kZXggPSB0b0Jsb2NrSW5kZXggIT0gbnVsbCA/IHRvQmxvY2tJbmRleCA6IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7XG4gICAgdGhpcy5fYmxvY2tzLnNsaWNlKHN0YXJ0QmxvY2tJbmRleCwgZW5kQmxvY2tJbmRleCkuZm9yRWFjaChiID0+IHtcbiAgICAgIGlmICghYi5sYXp5IHx8IHRvQmxvY2tJbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHZhciBfYmxvY2tzMjtcbiAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUoYi5fYXBwZW5kUGxhY2Vob2xkZXIoKF9ibG9ja3MyID0gYi5fYmxvY2tzKSA9PSBudWxsID8gdm9pZCAwIDogX2Jsb2NrczIubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRldGFpbHM7XG4gIH1cblxuICAvKiogRmluZHMgYmxvY2sgaW4gcG9zICovXG4gIF9tYXBQb3NUb0Jsb2NrKHBvcykge1xuICAgIGxldCBhY2NWYWwgPSAnJztcbiAgICBmb3IgKGxldCBiaSA9IDA7IGJpIDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytiaSkge1xuICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xuICAgICAgY29uc3QgYmxvY2tTdGFydFBvcyA9IGFjY1ZhbC5sZW5ndGg7XG4gICAgICBhY2NWYWwgKz0gYmxvY2suZGlzcGxheVZhbHVlO1xuICAgICAgaWYgKHBvcyA8PSBhY2NWYWwubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5kZXg6IGJpLFxuICAgICAgICAgIG9mZnNldDogcG9zIC0gYmxvY2tTdGFydFBvc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfYmxvY2tTdGFydFBvcyhibG9ja0luZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrcy5zbGljZSgwLCBibG9ja0luZGV4KS5yZWR1Y2UoKHBvcywgYikgPT4gcG9zICs9IGIuZGlzcGxheVZhbHVlLmxlbmd0aCwgMCk7XG4gIH1cbiAgX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MsIHRvUG9zLCBmbikge1xuICAgIGlmICh0b1BvcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0b1BvcyA9IHRoaXMuZGlzcGxheVZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgZnJvbUJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2soZnJvbVBvcyk7XG4gICAgaWYgKGZyb21CbG9ja0l0ZXIpIHtcbiAgICAgIGNvbnN0IHRvQmxvY2tJdGVyID0gdGhpcy5fbWFwUG9zVG9CbG9jayh0b1Bvcyk7XG4gICAgICAvLyBwcm9jZXNzIGZpcnN0IGJsb2NrXG4gICAgICBjb25zdCBpc1NhbWVCbG9jayA9IHRvQmxvY2tJdGVyICYmIGZyb21CbG9ja0l0ZXIuaW5kZXggPT09IHRvQmxvY2tJdGVyLmluZGV4O1xuICAgICAgY29uc3QgZnJvbUJsb2NrU3RhcnRQb3MgPSBmcm9tQmxvY2tJdGVyLm9mZnNldDtcbiAgICAgIGNvbnN0IGZyb21CbG9ja0VuZFBvcyA9IHRvQmxvY2tJdGVyICYmIGlzU2FtZUJsb2NrID8gdG9CbG9ja0l0ZXIub2Zmc2V0IDogdGhpcy5fYmxvY2tzW2Zyb21CbG9ja0l0ZXIuaW5kZXhdLmRpc3BsYXlWYWx1ZS5sZW5ndGg7XG4gICAgICBmbih0aGlzLl9ibG9ja3NbZnJvbUJsb2NrSXRlci5pbmRleF0sIGZyb21CbG9ja0l0ZXIuaW5kZXgsIGZyb21CbG9ja1N0YXJ0UG9zLCBmcm9tQmxvY2tFbmRQb3MpO1xuICAgICAgaWYgKHRvQmxvY2tJdGVyICYmICFpc1NhbWVCbG9jaykge1xuICAgICAgICAvLyBwcm9jZXNzIGludGVybWVkaWF0ZSBibG9ja3NcbiAgICAgICAgZm9yIChsZXQgYmkgPSBmcm9tQmxvY2tJdGVyLmluZGV4ICsgMTsgYmkgPCB0b0Jsb2NrSXRlci5pbmRleDsgKytiaSkge1xuICAgICAgICAgIGZuKHRoaXMuX2Jsb2Nrc1tiaV0sIGJpLCAwLCB0aGlzLl9ibG9ja3NbYmldLmRpc3BsYXlWYWx1ZS5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJvY2VzcyBsYXN0IGJsb2NrXG4gICAgICAgIGZuKHRoaXMuX2Jsb2Nrc1t0b0Jsb2NrSXRlci5pbmRleF0sIHRvQmxvY2tJdGVyLmluZGV4LCAwLCB0b0Jsb2NrSXRlci5vZmZzZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZW1vdmUoZnJvbVBvcywgdG9Qb3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVEZXRhaWxzID0gc3VwZXIucmVtb3ZlKGZyb21Qb3MsIHRvUG9zKTtcbiAgICB0aGlzLl9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zLCB0b1BvcywgKGIsIF8sIGJGcm9tUG9zLCBiVG9Qb3MpID0+IHtcbiAgICAgIHJlbW92ZURldGFpbHMuYWdncmVnYXRlKGIucmVtb3ZlKGJGcm9tUG9zLCBiVG9Qb3MpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVtb3ZlRGV0YWlscztcbiAgfVxuICBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zLCBkaXJlY3Rpb24pIHtcbiAgICBpZiAoZGlyZWN0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIGRpcmVjdGlvbiA9IERJUkVDVElPTi5OT05FO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2Jsb2Nrcy5sZW5ndGgpIHJldHVybiAwO1xuICAgIGNvbnN0IGN1cnNvciA9IG5ldyBQYXR0ZXJuQ3Vyc29yKHRoaXMsIGN1cnNvclBvcyk7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLk5PTkUpIHtcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIE5PTkUgc2hvdWxkIG9ubHkgZ28gb3V0IGZyb20gZml4ZWQgdG8gdGhlIHJpZ2h0IVxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgaWYgKGN1cnNvci5wdXNoUmlnaHRCZWZvcmVJbnB1dCgpKSByZXR1cm4gY3Vyc29yLnBvcztcbiAgICAgIGN1cnNvci5wb3BTdGF0ZSgpO1xuICAgICAgaWYgKGN1cnNvci5wdXNoTGVmdEJlZm9yZUlucHV0KCkpIHJldHVybiBjdXJzb3IucG9zO1xuICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheVZhbHVlLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBGT1JDRSBpcyBvbmx5IGFib3V0IGF8KiBvdGhlcndpc2UgaXMgMFxuICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5MRUZUIHx8IGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlQpIHtcbiAgICAgIC8vIHRyeSB0byBicmVhayBmYXN0IHdoZW4gKnxhXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTEVGVCkge1xuICAgICAgICBjdXJzb3IucHVzaFJpZ2h0QmVmb3JlRmlsbGVkKCk7XG4gICAgICAgIGlmIChjdXJzb3Iub2sgJiYgY3Vyc29yLnBvcyA9PT0gY3Vyc29yUG9zKSByZXR1cm4gY3Vyc29yUG9zO1xuICAgICAgICBjdXJzb3IucG9wU3RhdGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gZm9yd2FyZCBmbG93XG4gICAgICBjdXJzb3IucHVzaExlZnRCZWZvcmVJbnB1dCgpO1xuICAgICAgY3Vyc29yLnB1c2hMZWZ0QmVmb3JlUmVxdWlyZWQoKTtcbiAgICAgIGN1cnNvci5wdXNoTGVmdEJlZm9yZUZpbGxlZCgpO1xuXG4gICAgICAvLyBiYWNrd2FyZCBmbG93XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTEVGVCkge1xuICAgICAgICBjdXJzb3IucHVzaFJpZ2h0QmVmb3JlSW5wdXQoKTtcbiAgICAgICAgY3Vyc29yLnB1c2hSaWdodEJlZm9yZVJlcXVpcmVkKCk7XG4gICAgICAgIGlmIChjdXJzb3Iub2sgJiYgY3Vyc29yLnBvcyA8PSBjdXJzb3JQb3MpIHJldHVybiBjdXJzb3IucG9zO1xuICAgICAgICBjdXJzb3IucG9wU3RhdGUoKTtcbiAgICAgICAgaWYgKGN1cnNvci5vayAmJiBjdXJzb3IucG9zIDw9IGN1cnNvclBvcykgcmV0dXJuIGN1cnNvci5wb3M7XG4gICAgICAgIGN1cnNvci5wb3BTdGF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnNvci5vaykgcmV0dXJuIGN1cnNvci5wb3M7XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfTEVGVCkgcmV0dXJuIDA7XG4gICAgICBjdXJzb3IucG9wU3RhdGUoKTtcbiAgICAgIGlmIChjdXJzb3Iub2spIHJldHVybiBjdXJzb3IucG9zO1xuICAgICAgY3Vyc29yLnBvcFN0YXRlKCk7XG4gICAgICBpZiAoY3Vyc29yLm9rKSByZXR1cm4gY3Vyc29yLnBvcztcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uUklHSFQgfHwgZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfUklHSFQpIHtcbiAgICAgIC8vIGZvcndhcmQgZmxvd1xuICAgICAgY3Vyc29yLnB1c2hSaWdodEJlZm9yZUlucHV0KCk7XG4gICAgICBjdXJzb3IucHVzaFJpZ2h0QmVmb3JlUmVxdWlyZWQoKTtcbiAgICAgIGlmIChjdXJzb3IucHVzaFJpZ2h0QmVmb3JlRmlsbGVkKCkpIHJldHVybiBjdXJzb3IucG9zO1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX1JJR0hUKSByZXR1cm4gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuXG4gICAgICAvLyBiYWNrd2FyZCBmbG93XG4gICAgICBjdXJzb3IucG9wU3RhdGUoKTtcbiAgICAgIGlmIChjdXJzb3Iub2spIHJldHVybiBjdXJzb3IucG9zO1xuICAgICAgY3Vyc29yLnBvcFN0YXRlKCk7XG4gICAgICBpZiAoY3Vyc29yLm9rKSByZXR1cm4gY3Vyc29yLnBvcztcbiAgICAgIHJldHVybiB0aGlzLm5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MsIERJUkVDVElPTi5MRUZUKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnNvclBvcztcbiAgfVxuICB0b3RhbElucHV0UG9zaXRpb25zKGZyb21Qb3MsIHRvUG9zKSB7XG4gICAgaWYgKGZyb21Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgZnJvbVBvcyA9IDA7XG4gICAgfVxuICAgIGlmICh0b1BvcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0b1BvcyA9IHRoaXMuZGlzcGxheVZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICB0aGlzLl9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zLCB0b1BvcywgKGIsIF8sIGJGcm9tUG9zLCBiVG9Qb3MpID0+IHtcbiAgICAgIHRvdGFsICs9IGIudG90YWxJbnB1dFBvc2l0aW9ucyhiRnJvbVBvcywgYlRvUG9zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG90YWw7XG4gIH1cblxuICAvKiogR2V0IGJsb2NrIGJ5IG5hbWUgKi9cbiAgbWFza2VkQmxvY2sobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hc2tlZEJsb2NrcyhuYW1lKVswXTtcbiAgfVxuXG4gIC8qKiBHZXQgYWxsIGJsb2NrcyBieSBuYW1lICovXG4gIG1hc2tlZEJsb2NrcyhuYW1lKSB7XG4gICAgY29uc3QgaW5kaWNlcyA9IHRoaXMuX21hc2tlZEJsb2Nrc1tuYW1lXTtcbiAgICBpZiAoIWluZGljZXMpIHJldHVybiBbXTtcbiAgICByZXR1cm4gaW5kaWNlcy5tYXAoZ2kgPT4gdGhpcy5fYmxvY2tzW2dpXSk7XG4gIH1cbiAgcGFkKGZsYWdzKSB7XG4gICAgY29uc3QgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoMCwgdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoLCBiID0+IGRldGFpbHMuYWdncmVnYXRlKGIucGFkKGZsYWdzKSkpO1xuICAgIHJldHVybiBkZXRhaWxzO1xuICB9XG59XG5NYXNrZWRQYXR0ZXJuLkRFRkFVTFRTID0ge1xuICAuLi5NYXNrZWQuREVGQVVMVFMsXG4gIGxhenk6IHRydWUsXG4gIHBsYWNlaG9sZGVyQ2hhcjogJ18nXG59O1xuTWFza2VkUGF0dGVybi5TVE9QX0NIQVIgPSAnYCc7XG5NYXNrZWRQYXR0ZXJuLkVTQ0FQRV9DSEFSID0gJ1xcXFwnO1xuTWFza2VkUGF0dGVybi5JbnB1dERlZmluaXRpb24gPSBQYXR0ZXJuSW5wdXREZWZpbml0aW9uO1xuTWFza2VkUGF0dGVybi5GaXhlZERlZmluaXRpb24gPSBQYXR0ZXJuRml4ZWREZWZpbml0aW9uO1xuSU1hc2suTWFza2VkUGF0dGVybiA9IE1hc2tlZFBhdHRlcm47XG5cbmV4cG9ydCB7IE1hc2tlZFBhdHRlcm4gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xuaW1wb3J0IE1hc2tlZFBhdHRlcm4gZnJvbSAnLi9wYXR0ZXJuLmpzJztcbmltcG9ydCAnLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgJy4vYmFzZS5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuL2ZhY3RvcnkuanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vY2h1bmstdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2N1cnNvci5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9maXhlZC1kZWZpbml0aW9uLmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2lucHV0LWRlZmluaXRpb24uanMnO1xuaW1wb3J0ICcuL3JlZ2V4cC5qcyc7XG5cbi8qKiBQYXR0ZXJuIHdoaWNoIGFjY2VwdHMgcmFuZ2VzICovXG5jbGFzcyBNYXNrZWRSYW5nZSBleHRlbmRzIE1hc2tlZFBhdHRlcm4ge1xuICAvKipcbiAgICBPcHRpb25hbGx5IHNldHMgbWF4IGxlbmd0aCBvZiBwYXR0ZXJuLlxuICAgIFVzZWQgd2hlbiBwYXR0ZXJuIGxlbmd0aCBpcyBsb25nZXIgdGhlbiBgdG9gIHBhcmFtIGxlbmd0aC4gUGFkcyB6ZXJvcyBhdCBzdGFydCBpbiB0aGlzIGNhc2UuXG4gICovXG5cbiAgLyoqIE1pbiBib3VuZCAqL1xuXG4gIC8qKiBNYXggYm91bmQgKi9cblxuICBnZXQgX21hdGNoRnJvbSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXhMZW5ndGggLSBTdHJpbmcodGhpcy5mcm9tKS5sZW5ndGg7XG4gIH1cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpOyAvLyBtYXNrIHdpbGwgYmUgY3JlYXRlZCBpbiBfdXBkYXRlXG4gIH1cbiAgdXBkYXRlT3B0aW9ucyhvcHRzKSB7XG4gICAgc3VwZXIudXBkYXRlT3B0aW9ucyhvcHRzKTtcbiAgfVxuICBfdXBkYXRlKG9wdHMpIHtcbiAgICBjb25zdCB7XG4gICAgICB0byA9IHRoaXMudG8gfHwgMCxcbiAgICAgIGZyb20gPSB0aGlzLmZyb20gfHwgMCxcbiAgICAgIG1heExlbmd0aCA9IHRoaXMubWF4TGVuZ3RoIHx8IDAsXG4gICAgICBhdXRvZml4ID0gdGhpcy5hdXRvZml4LFxuICAgICAgLi4ucGF0dGVybk9wdHNcbiAgICB9ID0gb3B0cztcbiAgICB0aGlzLnRvID0gdG87XG4gICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICB0aGlzLm1heExlbmd0aCA9IE1hdGgubWF4KFN0cmluZyh0bykubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgIHRoaXMuYXV0b2ZpeCA9IGF1dG9maXg7XG4gICAgY29uc3QgZnJvbVN0ciA9IFN0cmluZyh0aGlzLmZyb20pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuICAgIGNvbnN0IHRvU3RyID0gU3RyaW5nKHRoaXMudG8pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuICAgIGxldCBzYW1lQ2hhcnNDb3VudCA9IDA7XG4gICAgd2hpbGUgKHNhbWVDaGFyc0NvdW50IDwgdG9TdHIubGVuZ3RoICYmIHRvU3RyW3NhbWVDaGFyc0NvdW50XSA9PT0gZnJvbVN0cltzYW1lQ2hhcnNDb3VudF0pICsrc2FtZUNoYXJzQ291bnQ7XG4gICAgcGF0dGVybk9wdHMubWFzayA9IHRvU3RyLnNsaWNlKDAsIHNhbWVDaGFyc0NvdW50KS5yZXBsYWNlKC8wL2csICdcXFxcMCcpICsgJzAnLnJlcGVhdCh0aGlzLm1heExlbmd0aCAtIHNhbWVDaGFyc0NvdW50KTtcbiAgICBzdXBlci5fdXBkYXRlKHBhdHRlcm5PcHRzKTtcbiAgfVxuICBnZXQgaXNDb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gc3VwZXIuaXNDb21wbGV0ZSAmJiBCb29sZWFuKHRoaXMudmFsdWUpO1xuICB9XG4gIGJvdW5kYXJpZXMoc3RyKSB7XG4gICAgbGV0IG1pbnN0ciA9ICcnO1xuICAgIGxldCBtYXhzdHIgPSAnJztcbiAgICBjb25zdCBbLCBwbGFjZWhvbGRlciwgbnVtXSA9IHN0ci5tYXRjaCgvXihcXEQqKShcXGQqKShcXEQqKS8pIHx8IFtdO1xuICAgIGlmIChudW0pIHtcbiAgICAgIG1pbnN0ciA9ICcwJy5yZXBlYXQocGxhY2Vob2xkZXIubGVuZ3RoKSArIG51bTtcbiAgICAgIG1heHN0ciA9ICc5Jy5yZXBlYXQocGxhY2Vob2xkZXIubGVuZ3RoKSArIG51bTtcbiAgICB9XG4gICAgbWluc3RyID0gbWluc3RyLnBhZEVuZCh0aGlzLm1heExlbmd0aCwgJzAnKTtcbiAgICBtYXhzdHIgPSBtYXhzdHIucGFkRW5kKHRoaXMubWF4TGVuZ3RoLCAnOScpO1xuICAgIHJldHVybiBbbWluc3RyLCBtYXhzdHJdO1xuICB9XG4gIGRvUHJlcGFyZUNoYXIoY2gsIGZsYWdzKSB7XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIGxldCBkZXRhaWxzO1xuICAgIFtjaCwgZGV0YWlsc10gPSBzdXBlci5kb1ByZXBhcmVDaGFyKGNoLnJlcGxhY2UoL1xcRC9nLCAnJyksIGZsYWdzKTtcbiAgICBpZiAoIWNoKSBkZXRhaWxzLnNraXAgPSAhdGhpcy5pc0NvbXBsZXRlO1xuICAgIHJldHVybiBbY2gsIGRldGFpbHNdO1xuICB9XG4gIF9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncykge1xuICAgIGlmIChmbGFncyA9PT0gdm9pZCAwKSB7XG4gICAgICBmbGFncyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIXRoaXMuYXV0b2ZpeCB8fCB0aGlzLnZhbHVlLmxlbmd0aCArIDEgPiB0aGlzLm1heExlbmd0aCkgcmV0dXJuIHN1cGVyLl9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncyk7XG4gICAgY29uc3QgZnJvbVN0ciA9IFN0cmluZyh0aGlzLmZyb20pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuICAgIGNvbnN0IHRvU3RyID0gU3RyaW5nKHRoaXMudG8pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xuICAgIGNvbnN0IFttaW5zdHIsIG1heHN0cl0gPSB0aGlzLmJvdW5kYXJpZXModGhpcy52YWx1ZSArIGNoKTtcbiAgICBpZiAoTnVtYmVyKG1heHN0cikgPCB0aGlzLmZyb20pIHJldHVybiBzdXBlci5fYXBwZW5kQ2hhclJhdyhmcm9tU3RyW3RoaXMudmFsdWUubGVuZ3RoXSwgZmxhZ3MpO1xuICAgIGlmIChOdW1iZXIobWluc3RyKSA+IHRoaXMudG8pIHtcbiAgICAgIGlmICghZmxhZ3MudGFpbCAmJiB0aGlzLmF1dG9maXggPT09ICdwYWQnICYmIHRoaXMudmFsdWUubGVuZ3RoICsgMSA8IHRoaXMubWF4TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5fYXBwZW5kQ2hhclJhdyhmcm9tU3RyW3RoaXMudmFsdWUubGVuZ3RoXSwgZmxhZ3MpLmFnZ3JlZ2F0ZSh0aGlzLl9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cGVyLl9hcHBlbmRDaGFyUmF3KHRvU3RyW3RoaXMudmFsdWUubGVuZ3RoXSwgZmxhZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuX2FwcGVuZENoYXJSYXcoY2gsIGZsYWdzKTtcbiAgfVxuICBkb1ZhbGlkYXRlKGZsYWdzKSB7XG4gICAgY29uc3Qgc3RyID0gdGhpcy52YWx1ZTtcbiAgICBjb25zdCBmaXJzdE5vblplcm8gPSBzdHIuc2VhcmNoKC9bXjBdLyk7XG4gICAgaWYgKGZpcnN0Tm9uWmVybyA9PT0gLTEgJiYgc3RyLmxlbmd0aCA8PSB0aGlzLl9tYXRjaEZyb20pIHJldHVybiB0cnVlO1xuICAgIGNvbnN0IFttaW5zdHIsIG1heHN0cl0gPSB0aGlzLmJvdW5kYXJpZXMoc3RyKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tIDw9IE51bWJlcihtYXhzdHIpICYmIE51bWJlcihtaW5zdHIpIDw9IHRoaXMudG8gJiYgc3VwZXIuZG9WYWxpZGF0ZShmbGFncyk7XG4gIH1cbiAgcGFkKGZsYWdzKSB7XG4gICAgY29uc3QgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID09PSB0aGlzLm1heExlbmd0aCkgcmV0dXJuIGRldGFpbHM7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIGNvbnN0IHBhZExlbmd0aCA9IHRoaXMubWF4TGVuZ3RoIC0gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgaWYgKHBhZExlbmd0aCkge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWRMZW5ndGg7ICsraSkge1xuICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShzdXBlci5fYXBwZW5kQ2hhclJhdygnMCcsIGZsYWdzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGVuZCB0YWlsXG4gICAgICB2YWx1ZS5zcGxpdCgnJykuZm9yRWFjaChjaCA9PiB0aGlzLl9hcHBlbmRDaGFyUmF3KGNoKSk7XG4gICAgfVxuICAgIHJldHVybiBkZXRhaWxzO1xuICB9XG59XG5JTWFzay5NYXNrZWRSYW5nZSA9IE1hc2tlZFJhbmdlO1xuXG5leHBvcnQgeyBNYXNrZWRSYW5nZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgTWFza2VkUGF0dGVybiBmcm9tICcuL3BhdHRlcm4uanMnO1xuaW1wb3J0IE1hc2tlZFJhbmdlIGZyb20gJy4vcmFuZ2UuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuL2Jhc2UuanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9mYWN0b3J5LmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2NodW5rLXRhaWwtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9jdXJzb3IuanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vZml4ZWQtZGVmaW5pdGlvbi5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9pbnB1dC1kZWZpbml0aW9uLmpzJztcbmltcG9ydCAnLi9yZWdleHAuanMnO1xuXG5jb25zdCBEZWZhdWx0UGF0dGVybiA9ICdkey59YG17Ln1gWSc7XG5cbi8vIE1ha2UgZm9ybWF0IGFuZCBwYXJzZSByZXF1aXJlZCB3aGVuIHBhdHRlcm4gaXMgcHJvdmlkZWRcblxuLyoqIERhdGUgbWFzayAqL1xuY2xhc3MgTWFza2VkRGF0ZSBleHRlbmRzIE1hc2tlZFBhdHRlcm4ge1xuICBzdGF0aWMgZXh0cmFjdFBhdHRlcm5PcHRpb25zKG9wdHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBtYXNrLFxuICAgICAgcGF0dGVybixcbiAgICAgIC4uLnBhdHRlcm5PcHRzXG4gICAgfSA9IG9wdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhdHRlcm5PcHRzLFxuICAgICAgbWFzazogaXNTdHJpbmcobWFzaykgPyBtYXNrIDogcGF0dGVyblxuICAgIH07XG4gIH1cblxuICAvKiogUGF0dGVybiBtYXNrIGZvciBkYXRlIGFjY29yZGluZyB0byB7QGxpbmsgTWFza2VkRGF0ZSNmb3JtYXR9ICovXG5cbiAgLyoqIFN0YXJ0IGRhdGUgKi9cblxuICAvKiogRW5kIGRhdGUgKi9cblxuICAvKiogRm9ybWF0IHR5cGVkIHZhbHVlIHRvIHN0cmluZyAqL1xuXG4gIC8qKiBQYXJzZSBzdHJpbmcgdG8gZ2V0IHR5cGVkIHZhbHVlICovXG5cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKE1hc2tlZERhdGUuZXh0cmFjdFBhdHRlcm5PcHRpb25zKHtcbiAgICAgIC4uLk1hc2tlZERhdGUuREVGQVVMVFMsXG4gICAgICAuLi5vcHRzXG4gICAgfSkpO1xuICB9XG4gIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIHN1cGVyLnVwZGF0ZU9wdGlvbnMob3B0cyk7XG4gIH1cbiAgX3VwZGF0ZShvcHRzKSB7XG4gICAgY29uc3Qge1xuICAgICAgbWFzayxcbiAgICAgIHBhdHRlcm4sXG4gICAgICBibG9ja3MsXG4gICAgICAuLi5wYXR0ZXJuT3B0c1xuICAgIH0gPSB7XG4gICAgICAuLi5NYXNrZWREYXRlLkRFRkFVTFRTLFxuICAgICAgLi4ub3B0c1xuICAgIH07XG4gICAgY29uc3QgcGF0dGVybkJsb2NrcyA9IE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZERhdGUuR0VUX0RFRkFVTFRfQkxPQ0tTKCkpO1xuICAgIC8vIGFkanVzdCB5ZWFyIGJsb2NrXG4gICAgaWYgKG9wdHMubWluKSBwYXR0ZXJuQmxvY2tzLlkuZnJvbSA9IG9wdHMubWluLmdldEZ1bGxZZWFyKCk7XG4gICAgaWYgKG9wdHMubWF4KSBwYXR0ZXJuQmxvY2tzLlkudG8gPSBvcHRzLm1heC5nZXRGdWxsWWVhcigpO1xuICAgIGlmIChvcHRzLm1pbiAmJiBvcHRzLm1heCAmJiBwYXR0ZXJuQmxvY2tzLlkuZnJvbSA9PT0gcGF0dGVybkJsb2Nrcy5ZLnRvKSB7XG4gICAgICBwYXR0ZXJuQmxvY2tzLm0uZnJvbSA9IG9wdHMubWluLmdldE1vbnRoKCkgKyAxO1xuICAgICAgcGF0dGVybkJsb2Nrcy5tLnRvID0gb3B0cy5tYXguZ2V0TW9udGgoKSArIDE7XG4gICAgICBpZiAocGF0dGVybkJsb2Nrcy5tLmZyb20gPT09IHBhdHRlcm5CbG9ja3MubS50bykge1xuICAgICAgICBwYXR0ZXJuQmxvY2tzLmQuZnJvbSA9IG9wdHMubWluLmdldERhdGUoKTtcbiAgICAgICAgcGF0dGVybkJsb2Nrcy5kLnRvID0gb3B0cy5tYXguZ2V0RGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHBhdHRlcm5CbG9ja3MsIHRoaXMuYmxvY2tzLCBibG9ja3MpO1xuICAgIHN1cGVyLl91cGRhdGUoe1xuICAgICAgLi4ucGF0dGVybk9wdHMsXG4gICAgICBtYXNrOiBpc1N0cmluZyhtYXNrKSA/IG1hc2sgOiBwYXR0ZXJuLFxuICAgICAgYmxvY2tzOiBwYXR0ZXJuQmxvY2tzXG4gICAgfSk7XG4gIH1cbiAgZG9WYWxpZGF0ZShmbGFncykge1xuICAgIGNvbnN0IGRhdGUgPSB0aGlzLmRhdGU7XG4gICAgcmV0dXJuIHN1cGVyLmRvVmFsaWRhdGUoZmxhZ3MpICYmICghdGhpcy5pc0NvbXBsZXRlIHx8IHRoaXMuaXNEYXRlRXhpc3QodGhpcy52YWx1ZSkgJiYgZGF0ZSAhPSBudWxsICYmICh0aGlzLm1pbiA9PSBudWxsIHx8IHRoaXMubWluIDw9IGRhdGUpICYmICh0aGlzLm1heCA9PSBudWxsIHx8IGRhdGUgPD0gdGhpcy5tYXgpKTtcbiAgfVxuXG4gIC8qKiBDaGVja3MgaWYgZGF0ZSBpcyBleGlzdHMgKi9cbiAgaXNEYXRlRXhpc3Qoc3RyKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KHRoaXMucGFyc2Uoc3RyLCB0aGlzKSwgdGhpcykuaW5kZXhPZihzdHIpID49IDA7XG4gIH1cblxuICAvKiogUGFyc2VkIERhdGUgKi9cbiAgZ2V0IGRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZWRWYWx1ZTtcbiAgfVxuICBzZXQgZGF0ZShkYXRlKSB7XG4gICAgdGhpcy50eXBlZFZhbHVlID0gZGF0ZTtcbiAgfVxuICBnZXQgdHlwZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlID8gc3VwZXIudHlwZWRWYWx1ZSA6IG51bGw7XG4gIH1cbiAgc2V0IHR5cGVkVmFsdWUodmFsdWUpIHtcbiAgICBzdXBlci50eXBlZFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgbWFza0VxdWFscyhtYXNrKSB7XG4gICAgcmV0dXJuIG1hc2sgPT09IERhdGUgfHwgc3VwZXIubWFza0VxdWFscyhtYXNrKTtcbiAgfVxuICBvcHRpb25zSXNDaGFuZ2VkKG9wdHMpIHtcbiAgICByZXR1cm4gc3VwZXIub3B0aW9uc0lzQ2hhbmdlZChNYXNrZWREYXRlLmV4dHJhY3RQYXR0ZXJuT3B0aW9ucyhvcHRzKSk7XG4gIH1cbn1cbk1hc2tlZERhdGUuR0VUX0RFRkFVTFRfQkxPQ0tTID0gKCkgPT4gKHtcbiAgZDoge1xuICAgIG1hc2s6IE1hc2tlZFJhbmdlLFxuICAgIGZyb206IDEsXG4gICAgdG86IDMxLFxuICAgIG1heExlbmd0aDogMlxuICB9LFxuICBtOiB7XG4gICAgbWFzazogTWFza2VkUmFuZ2UsXG4gICAgZnJvbTogMSxcbiAgICB0bzogMTIsXG4gICAgbWF4TGVuZ3RoOiAyXG4gIH0sXG4gIFk6IHtcbiAgICBtYXNrOiBNYXNrZWRSYW5nZSxcbiAgICBmcm9tOiAxOTAwLFxuICAgIHRvOiA5OTk5XG4gIH1cbn0pO1xuTWFza2VkRGF0ZS5ERUZBVUxUUyA9IHtcbiAgLi4uTWFza2VkUGF0dGVybi5ERUZBVUxUUyxcbiAgbWFzazogRGF0ZSxcbiAgcGF0dGVybjogRGVmYXVsdFBhdHRlcm4sXG4gIGZvcm1hdDogKGRhdGUsIG1hc2tlZCkgPT4ge1xuICAgIGlmICghZGF0ZSkgcmV0dXJuICcnO1xuICAgIGNvbnN0IGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgcmV0dXJuIFtkYXksIG1vbnRoLCB5ZWFyXS5qb2luKCcuJyk7XG4gIH0sXG4gIHBhcnNlOiAoc3RyLCBtYXNrZWQpID0+IHtcbiAgICBjb25zdCBbZGF5LCBtb250aCwgeWVhcl0gPSBzdHIuc3BsaXQoJy4nKS5tYXAoTnVtYmVyKTtcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXkpO1xuICB9XG59O1xuSU1hc2suTWFza2VkRGF0ZSA9IE1hc2tlZERhdGU7XG5cbmV4cG9ydCB7IE1hc2tlZERhdGUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgRElSRUNUSU9OLCBvYmplY3RJbmNsdWRlcyB9IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xuaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgY3JlYXRlTWFzaywgeyBub3JtYWxpemVPcHRzIH0gZnJvbSAnLi9mYWN0b3J5LmpzJztcbmltcG9ydCBNYXNrZWQgZnJvbSAnLi9iYXNlLmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuXG4vKiogRHluYW1pYyBtYXNrIGZvciBjaG9vc2luZyBhcHByb3ByaWF0ZSBtYXNrIGluIHJ1bi10aW1lICovXG5jbGFzcyBNYXNrZWREeW5hbWljIGV4dGVuZHMgTWFza2VkIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIC4uLk1hc2tlZER5bmFtaWMuREVGQVVMVFMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgdGhpcy5jdXJyZW50TWFzayA9IHVuZGVmaW5lZDtcbiAgfVxuICB1cGRhdGVPcHRpb25zKG9wdHMpIHtcbiAgICBzdXBlci51cGRhdGVPcHRpb25zKG9wdHMpO1xuICB9XG4gIF91cGRhdGUob3B0cykge1xuICAgIHN1cGVyLl91cGRhdGUob3B0cyk7XG4gICAgaWYgKCdtYXNrJyBpbiBvcHRzKSB7XG4gICAgICB0aGlzLmV4cG9zZU1hc2sgPSB1bmRlZmluZWQ7XG4gICAgICAvLyBtYXNrIGNvdWxkIGJlIHRvdGFsbHkgZHluYW1pYyB3aXRoIG9ubHkgYGRpc3BhdGNoYCBvcHRpb25cbiAgICAgIHRoaXMuY29tcGlsZWRNYXNrcyA9IEFycmF5LmlzQXJyYXkob3B0cy5tYXNrKSA/IG9wdHMubWFzay5tYXAobSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBleHBvc2UsXG4gICAgICAgICAgLi4ubWFza09wdHNcbiAgICAgICAgfSA9IG5vcm1hbGl6ZU9wdHMobSk7XG4gICAgICAgIGNvbnN0IG1hc2tlZCA9IGNyZWF0ZU1hc2soe1xuICAgICAgICAgIG92ZXJ3cml0ZTogdGhpcy5fb3ZlcndyaXRlLFxuICAgICAgICAgIGVhZ2VyOiB0aGlzLl9lYWdlcixcbiAgICAgICAgICBza2lwSW52YWxpZDogdGhpcy5fc2tpcEludmFsaWQsXG4gICAgICAgICAgLi4ubWFza09wdHNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChleHBvc2UpIHRoaXMuZXhwb3NlTWFzayA9IG1hc2tlZDtcbiAgICAgICAgcmV0dXJuIG1hc2tlZDtcbiAgICAgIH0pIDogW107XG5cbiAgICAgIC8vIHRoaXMuY3VycmVudE1hc2sgPSB0aGlzLmRvRGlzcGF0Y2goJycpOyAvLyBwcm9iYWJseSBub3QgbmVlZGVkIGJ1dCBsZXRzIHNlZVxuICAgIH1cbiAgfVxuICBfYXBwZW5kQ2hhclJhdyhjaCwgZmxhZ3MpIHtcbiAgICBpZiAoZmxhZ3MgPT09IHZvaWQgMCkge1xuICAgICAgZmxhZ3MgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgZGV0YWlscyA9IHRoaXMuX2FwcGx5RGlzcGF0Y2goY2gsIGZsYWdzKTtcbiAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xuICAgICAgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5jdXJyZW50TWFzay5fYXBwZW5kQ2hhcihjaCwgdGhpcy5jdXJyZW50TWFza0ZsYWdzKGZsYWdzKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBfYXBwbHlEaXNwYXRjaChhcHBlbmRlZCwgZmxhZ3MsIHRhaWwpIHtcbiAgICBpZiAoYXBwZW5kZWQgPT09IHZvaWQgMCkge1xuICAgICAgYXBwZW5kZWQgPSAnJztcbiAgICB9XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIGlmICh0YWlsID09PSB2b2lkIDApIHtcbiAgICAgIHRhaWwgPSAnJztcbiAgICB9XG4gICAgY29uc3QgcHJldlZhbHVlQmVmb3JlVGFpbCA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSAhPSBudWxsID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLnZhbHVlO1xuICAgIGNvbnN0IGlucHV0VmFsdWUgPSB0aGlzLnJhd0lucHV0VmFsdWU7XG4gICAgY29uc3QgaW5zZXJ0VmFsdWUgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgIT0gbnVsbCA/IGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUuX3Jhd0lucHV0VmFsdWUgOiBpbnB1dFZhbHVlO1xuICAgIGNvbnN0IHRhaWxWYWx1ZSA9IGlucHV0VmFsdWUuc2xpY2UoaW5zZXJ0VmFsdWUubGVuZ3RoKTtcbiAgICBjb25zdCBwcmV2TWFzayA9IHRoaXMuY3VycmVudE1hc2s7XG4gICAgY29uc3QgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgY29uc3QgcHJldk1hc2tTdGF0ZSA9IHByZXZNYXNrID09IG51bGwgPyB2b2lkIDAgOiBwcmV2TWFzay5zdGF0ZTtcblxuICAgIC8vIGNsb25lIGZsYWdzIHRvIHByZXZlbnQgb3ZlcndyaXRpbmcgYF9iZWZvcmVUYWlsU3RhdGVgXG4gICAgdGhpcy5jdXJyZW50TWFzayA9IHRoaXMuZG9EaXNwYXRjaChhcHBlbmRlZCwge1xuICAgICAgLi4uZmxhZ3NcbiAgICB9LCB0YWlsKTtcblxuICAgIC8vIHJlc3RvcmUgc3RhdGUgYWZ0ZXIgZGlzcGF0Y2hcbiAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xuICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2sgIT09IHByZXZNYXNrKSB7XG4gICAgICAgIC8vIGlmIG1hc2sgY2hhbmdlZCByZWFwcGx5IGlucHV0XG4gICAgICAgIHRoaXMuY3VycmVudE1hc2sucmVzZXQoKTtcbiAgICAgICAgaWYgKGluc2VydFZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50TWFzay5hcHBlbmQoaW5zZXJ0VmFsdWUsIHtcbiAgICAgICAgICAgIHJhdzogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRldGFpbHMudGFpbFNoaWZ0ID0gdGhpcy5jdXJyZW50TWFzay52YWx1ZS5sZW5ndGggLSBwcmV2VmFsdWVCZWZvcmVUYWlsLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFpbFZhbHVlKSB7XG4gICAgICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5jdXJyZW50TWFzay5hcHBlbmQodGFpbFZhbHVlLCB7XG4gICAgICAgICAgICByYXc6IHRydWUsXG4gICAgICAgICAgICB0YWlsOiB0cnVlXG4gICAgICAgICAgfSkudGFpbFNoaWZ0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHByZXZNYXNrU3RhdGUpIHtcbiAgICAgICAgLy8gRGlzcGF0Y2ggY2FuIGRvIHNvbWV0aGluZyBiYWQgd2l0aCBzdGF0ZSwgc29cbiAgICAgICAgLy8gcmVzdG9yZSBwcmV2IG1hc2sgc3RhdGVcbiAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IHByZXZNYXNrU3RhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXRhaWxzO1xuICB9XG4gIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcbiAgICBjb25zdCBkZXRhaWxzID0gdGhpcy5fYXBwbHlEaXNwYXRjaCgpO1xuICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XG4gICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLmN1cnJlbnRNYXNrLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRldGFpbHM7XG4gIH1cbiAgX2FwcGVuZEVhZ2VyKCkge1xuICAgIGNvbnN0IGRldGFpbHMgPSB0aGlzLl9hcHBseURpc3BhdGNoKCk7XG4gICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcbiAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRoaXMuY3VycmVudE1hc2suX2FwcGVuZEVhZ2VyKCkpO1xuICAgIH1cbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBhcHBlbmRUYWlsKHRhaWwpIHtcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICBpZiAodGFpbCkgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5fYXBwbHlEaXNwYXRjaCgnJywge30sIHRhaWwpKTtcbiAgICByZXR1cm4gZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2suYXBwZW5kVGFpbCh0YWlsKSA6IHN1cGVyLmFwcGVuZFRhaWwodGFpbCkpO1xuICB9XG4gIGN1cnJlbnRNYXNrRmxhZ3MoZmxhZ3MpIHtcbiAgICB2YXIgX2ZsYWdzJF9iZWZvcmVUYWlsU3RhLCBfZmxhZ3MkX2JlZm9yZVRhaWxTdGEyO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5mbGFncyxcbiAgICAgIF9iZWZvcmVUYWlsU3RhdGU6ICgoX2ZsYWdzJF9iZWZvcmVUYWlsU3RhID0gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mbGFncyRfYmVmb3JlVGFpbFN0YS5jdXJyZW50TWFza1JlZikgPT09IHRoaXMuY3VycmVudE1hc2sgJiYgKChfZmxhZ3MkX2JlZm9yZVRhaWxTdGEyID0gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mbGFncyRfYmVmb3JlVGFpbFN0YTIuY3VycmVudE1hc2spIHx8IGZsYWdzLl9iZWZvcmVUYWlsU3RhdGVcbiAgICB9O1xuICB9XG4gIGRvRGlzcGF0Y2goYXBwZW5kZWQsIGZsYWdzLCB0YWlsKSB7XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIGlmICh0YWlsID09PSB2b2lkIDApIHtcbiAgICAgIHRhaWwgPSAnJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goYXBwZW5kZWQsIHRoaXMsIGZsYWdzLCB0YWlsKTtcbiAgfVxuICBkb1ZhbGlkYXRlKGZsYWdzKSB7XG4gICAgcmV0dXJuIHN1cGVyLmRvVmFsaWRhdGUoZmxhZ3MpICYmICghdGhpcy5jdXJyZW50TWFzayB8fCB0aGlzLmN1cnJlbnRNYXNrLmRvVmFsaWRhdGUodGhpcy5jdXJyZW50TWFza0ZsYWdzKGZsYWdzKSkpO1xuICB9XG4gIGRvUHJlcGFyZShzdHIsIGZsYWdzKSB7XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIGxldCBbcywgZGV0YWlsc10gPSBzdXBlci5kb1ByZXBhcmUoc3RyLCBmbGFncyk7XG4gICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcbiAgICAgIGxldCBjdXJyZW50RGV0YWlscztcbiAgICAgIFtzLCBjdXJyZW50RGV0YWlsc10gPSBzdXBlci5kb1ByZXBhcmUocywgdGhpcy5jdXJyZW50TWFza0ZsYWdzKGZsYWdzKSk7XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5hZ2dyZWdhdGUoY3VycmVudERldGFpbHMpO1xuICAgIH1cbiAgICByZXR1cm4gW3MsIGRldGFpbHNdO1xuICB9XG4gIGRvUHJlcGFyZUNoYXIoc3RyLCBmbGFncykge1xuICAgIGlmIChmbGFncyA9PT0gdm9pZCAwKSB7XG4gICAgICBmbGFncyA9IHt9O1xuICAgIH1cbiAgICBsZXQgW3MsIGRldGFpbHNdID0gc3VwZXIuZG9QcmVwYXJlQ2hhcihzdHIsIGZsYWdzKTtcbiAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xuICAgICAgbGV0IGN1cnJlbnREZXRhaWxzO1xuICAgICAgW3MsIGN1cnJlbnREZXRhaWxzXSA9IHN1cGVyLmRvUHJlcGFyZUNoYXIocywgdGhpcy5jdXJyZW50TWFza0ZsYWdzKGZsYWdzKSk7XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5hZ2dyZWdhdGUoY3VycmVudERldGFpbHMpO1xuICAgIH1cbiAgICByZXR1cm4gW3MsIGRldGFpbHNdO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHZhciBfdGhpcyRjdXJyZW50TWFzaztcbiAgICAoX3RoaXMkY3VycmVudE1hc2sgPSB0aGlzLmN1cnJlbnRNYXNrKSA9PSBudWxsIHx8IF90aGlzJGN1cnJlbnRNYXNrLnJlc2V0KCk7XG4gICAgdGhpcy5jb21waWxlZE1hc2tzLmZvckVhY2gobSA9PiBtLnJlc2V0KCkpO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBvc2VNYXNrID8gdGhpcy5leHBvc2VNYXNrLnZhbHVlIDogdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudmFsdWUgOiAnJztcbiAgfVxuICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICBpZiAodGhpcy5leHBvc2VNYXNrKSB7XG4gICAgICB0aGlzLmV4cG9zZU1hc2sudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuY3VycmVudE1hc2sgPSB0aGlzLmV4cG9zZU1hc2s7XG4gICAgICB0aGlzLl9hcHBseURpc3BhdGNoKCk7XG4gICAgfSBlbHNlIHN1cGVyLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgZ2V0IHVubWFza2VkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwb3NlTWFzayA/IHRoaXMuZXhwb3NlTWFzay51bm1hc2tlZFZhbHVlIDogdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudW5tYXNrZWRWYWx1ZSA6ICcnO1xuICB9XG4gIHNldCB1bm1hc2tlZFZhbHVlKHVubWFza2VkVmFsdWUpIHtcbiAgICBpZiAodGhpcy5leHBvc2VNYXNrKSB7XG4gICAgICB0aGlzLmV4cG9zZU1hc2sudW5tYXNrZWRWYWx1ZSA9IHVubWFza2VkVmFsdWU7XG4gICAgICB0aGlzLmN1cnJlbnRNYXNrID0gdGhpcy5leHBvc2VNYXNrO1xuICAgICAgdGhpcy5fYXBwbHlEaXNwYXRjaCgpO1xuICAgIH0gZWxzZSBzdXBlci51bm1hc2tlZFZhbHVlID0gdW5tYXNrZWRWYWx1ZTtcbiAgfVxuICBnZXQgdHlwZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBvc2VNYXNrID8gdGhpcy5leHBvc2VNYXNrLnR5cGVkVmFsdWUgOiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay50eXBlZFZhbHVlIDogJyc7XG4gIH1cbiAgc2V0IHR5cGVkVmFsdWUodHlwZWRWYWx1ZSkge1xuICAgIGlmICh0aGlzLmV4cG9zZU1hc2spIHtcbiAgICAgIHRoaXMuZXhwb3NlTWFzay50eXBlZFZhbHVlID0gdHlwZWRWYWx1ZTtcbiAgICAgIHRoaXMuY3VycmVudE1hc2sgPSB0aGlzLmV4cG9zZU1hc2s7XG4gICAgICB0aGlzLl9hcHBseURpc3BhdGNoKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB1bm1hc2tlZFZhbHVlID0gU3RyaW5nKHR5cGVkVmFsdWUpO1xuXG4gICAgLy8gZG91YmxlIGNoZWNrIGl0XG4gICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcbiAgICAgIHRoaXMuY3VycmVudE1hc2sudHlwZWRWYWx1ZSA9IHR5cGVkVmFsdWU7XG4gICAgICB1bm1hc2tlZFZhbHVlID0gdGhpcy5jdXJyZW50TWFzay51bm1hc2tlZFZhbHVlO1xuICAgIH1cbiAgICB0aGlzLnVubWFza2VkVmFsdWUgPSB1bm1hc2tlZFZhbHVlO1xuICB9XG4gIGdldCBkaXNwbGF5VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyB0aGlzLmN1cnJlbnRNYXNrLmRpc3BsYXlWYWx1ZSA6ICcnO1xuICB9XG4gIGdldCBpc0NvbXBsZXRlKCkge1xuICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazI7XG4gICAgcmV0dXJuIEJvb2xlYW4oKF90aGlzJGN1cnJlbnRNYXNrMiA9IHRoaXMuY3VycmVudE1hc2spID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjdXJyZW50TWFzazIuaXNDb21wbGV0ZSk7XG4gIH1cbiAgZ2V0IGlzRmlsbGVkKCkge1xuICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazM7XG4gICAgcmV0dXJuIEJvb2xlYW4oKF90aGlzJGN1cnJlbnRNYXNrMyA9IHRoaXMuY3VycmVudE1hc2spID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjdXJyZW50TWFzazMuaXNGaWxsZWQpO1xuICB9XG4gIHJlbW92ZShmcm9tUG9zLCB0b1Bvcykge1xuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XG4gICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLmN1cnJlbnRNYXNrLnJlbW92ZShmcm9tUG9zLCB0b1BvcykpXG4gICAgICAvLyB1cGRhdGUgd2l0aCBkaXNwYXRjaFxuICAgICAgLmFnZ3JlZ2F0ZSh0aGlzLl9hcHBseURpc3BhdGNoKCkpO1xuICAgIH1cbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBnZXQgc3RhdGUoKSB7XG4gICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrNDtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3VwZXIuc3RhdGUsXG4gICAgICBfcmF3SW5wdXRWYWx1ZTogdGhpcy5yYXdJbnB1dFZhbHVlLFxuICAgICAgY29tcGlsZWRNYXNrczogdGhpcy5jb21waWxlZE1hc2tzLm1hcChtID0+IG0uc3RhdGUpLFxuICAgICAgY3VycmVudE1hc2tSZWY6IHRoaXMuY3VycmVudE1hc2ssXG4gICAgICBjdXJyZW50TWFzazogKF90aGlzJGN1cnJlbnRNYXNrNCA9IHRoaXMuY3VycmVudE1hc2spID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjdXJyZW50TWFzazQuc3RhdGVcbiAgICB9O1xuICB9XG4gIHNldCBzdGF0ZShzdGF0ZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbXBpbGVkTWFza3MsXG4gICAgICBjdXJyZW50TWFza1JlZixcbiAgICAgIGN1cnJlbnRNYXNrLFxuICAgICAgLi4ubWFza2VkU3RhdGVcbiAgICB9ID0gc3RhdGU7XG4gICAgaWYgKGNvbXBpbGVkTWFza3MpIHRoaXMuY29tcGlsZWRNYXNrcy5mb3JFYWNoKChtLCBtaSkgPT4gbS5zdGF0ZSA9IGNvbXBpbGVkTWFza3NbbWldKTtcbiAgICBpZiAoY3VycmVudE1hc2tSZWYgIT0gbnVsbCkge1xuICAgICAgdGhpcy5jdXJyZW50TWFzayA9IGN1cnJlbnRNYXNrUmVmO1xuICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IGN1cnJlbnRNYXNrO1xuICAgIH1cbiAgICBzdXBlci5zdGF0ZSA9IG1hc2tlZFN0YXRlO1xuICB9XG4gIGV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2suZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zLCBmbGFncykgOiAnJztcbiAgfVxuICBleHRyYWN0VGFpbChmcm9tUG9zLCB0b1Bvcykge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay5leHRyYWN0VGFpbChmcm9tUG9zLCB0b1BvcykgOiBzdXBlci5leHRyYWN0VGFpbChmcm9tUG9zLCB0b1Bvcyk7XG4gIH1cbiAgZG9Db21taXQoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHRoaXMuY3VycmVudE1hc2suZG9Db21taXQoKTtcbiAgICBzdXBlci5kb0NvbW1pdCgpO1xuICB9XG4gIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MsIGRpcmVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay5uZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zLCBkaXJlY3Rpb24pIDogc3VwZXIubmVhcmVzdElucHV0UG9zKGN1cnNvclBvcywgZGlyZWN0aW9uKTtcbiAgfVxuICBnZXQgb3ZlcndyaXRlKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay5vdmVyd3JpdGUgOiB0aGlzLl9vdmVyd3JpdGU7XG4gIH1cbiAgc2V0IG92ZXJ3cml0ZShvdmVyd3JpdGUpIHtcbiAgICB0aGlzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG4gIH1cbiAgZ2V0IGVhZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay5lYWdlciA6IHRoaXMuX2VhZ2VyO1xuICB9XG4gIHNldCBlYWdlcihlYWdlcikge1xuICAgIHRoaXMuX2VhZ2VyID0gZWFnZXI7XG4gIH1cbiAgZ2V0IHNraXBJbnZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay5za2lwSW52YWxpZCA6IHRoaXMuX3NraXBJbnZhbGlkO1xuICB9XG4gIHNldCBza2lwSW52YWxpZChza2lwSW52YWxpZCkge1xuICAgIHRoaXMuX3NraXBJbnZhbGlkID0gc2tpcEludmFsaWQ7XG4gIH1cbiAgZ2V0IGF1dG9maXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyB0aGlzLmN1cnJlbnRNYXNrLmF1dG9maXggOiB0aGlzLl9hdXRvZml4O1xuICB9XG4gIHNldCBhdXRvZml4KGF1dG9maXgpIHtcbiAgICB0aGlzLl9hdXRvZml4ID0gYXV0b2ZpeDtcbiAgfVxuICBtYXNrRXF1YWxzKG1hc2spIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXNrKSA/IHRoaXMuY29tcGlsZWRNYXNrcy5ldmVyeSgobSwgbWkpID0+IHtcbiAgICAgIGlmICghbWFza1ttaV0pIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWFzazogb2xkTWFzayxcbiAgICAgICAgLi4ucmVzdE9wdHNcbiAgICAgIH0gPSBtYXNrW21pXTtcbiAgICAgIHJldHVybiBvYmplY3RJbmNsdWRlcyhtLCByZXN0T3B0cykgJiYgbS5tYXNrRXF1YWxzKG9sZE1hc2spO1xuICAgIH0pIDogc3VwZXIubWFza0VxdWFscyhtYXNrKTtcbiAgfVxuICB0eXBlZFZhbHVlRXF1YWxzKHZhbHVlKSB7XG4gICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrNTtcbiAgICByZXR1cm4gQm9vbGVhbigoX3RoaXMkY3VycmVudE1hc2s1ID0gdGhpcy5jdXJyZW50TWFzaykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGN1cnJlbnRNYXNrNS50eXBlZFZhbHVlRXF1YWxzKHZhbHVlKSk7XG4gIH1cbn1cbi8qKiBDdXJyZW50bHkgY2hvc2VuIG1hc2sgKi9cbi8qKiBDdXJyZW50bHkgY2hvc2VuIG1hc2sgKi9cbi8qKiBDb21wbGlsZWQge0BsaW5rIE1hc2tlZH0gb3B0aW9ucyAqL1xuLyoqIENob29zZXMge0BsaW5rIE1hc2tlZH0gZGVwZW5kaW5nIG9uIGlucHV0IHZhbHVlICovXG5NYXNrZWREeW5hbWljLkRFRkFVTFRTID0ge1xuICAuLi5NYXNrZWQuREVGQVVMVFMsXG4gIGRpc3BhdGNoOiAoYXBwZW5kZWQsIG1hc2tlZCwgZmxhZ3MsIHRhaWwpID0+IHtcbiAgICBpZiAoIW1hc2tlZC5jb21waWxlZE1hc2tzLmxlbmd0aCkgcmV0dXJuO1xuICAgIGNvbnN0IGlucHV0VmFsdWUgPSBtYXNrZWQucmF3SW5wdXRWYWx1ZTtcblxuICAgIC8vIHNpbXVsYXRlIGlucHV0XG4gICAgY29uc3QgaW5wdXRzID0gbWFza2VkLmNvbXBpbGVkTWFza3MubWFwKChtLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgaXNDdXJyZW50ID0gbWFza2VkLmN1cnJlbnRNYXNrID09PSBtO1xuICAgICAgY29uc3Qgc3RhcnRJbnB1dFBvcyA9IGlzQ3VycmVudCA/IG0uZGlzcGxheVZhbHVlLmxlbmd0aCA6IG0ubmVhcmVzdElucHV0UG9zKG0uZGlzcGxheVZhbHVlLmxlbmd0aCwgRElSRUNUSU9OLkZPUkNFX0xFRlQpO1xuICAgICAgaWYgKG0ucmF3SW5wdXRWYWx1ZSAhPT0gaW5wdXRWYWx1ZSkge1xuICAgICAgICBtLnJlc2V0KCk7XG4gICAgICAgIG0uYXBwZW5kKGlucHV0VmFsdWUsIHtcbiAgICAgICAgICByYXc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0N1cnJlbnQpIHtcbiAgICAgICAgbS5yZW1vdmUoc3RhcnRJbnB1dFBvcyk7XG4gICAgICB9XG4gICAgICBtLmFwcGVuZChhcHBlbmRlZCwgbWFza2VkLmN1cnJlbnRNYXNrRmxhZ3MoZmxhZ3MpKTtcbiAgICAgIG0uYXBwZW5kVGFpbCh0YWlsKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4LFxuICAgICAgICB3ZWlnaHQ6IG0ucmF3SW5wdXRWYWx1ZS5sZW5ndGgsXG4gICAgICAgIHRvdGFsSW5wdXRQb3NpdGlvbnM6IG0udG90YWxJbnB1dFBvc2l0aW9ucygwLCBNYXRoLm1heChzdGFydElucHV0UG9zLCBtLm5lYXJlc3RJbnB1dFBvcyhtLmRpc3BsYXlWYWx1ZS5sZW5ndGgsIERJUkVDVElPTi5GT1JDRV9MRUZUKSkpXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gcG9wIG1hc2tzIHdpdGggbG9uZ2VyIHZhbHVlcyBmaXJzdFxuICAgIGlucHV0cy5zb3J0KChpMSwgaTIpID0+IGkyLndlaWdodCAtIGkxLndlaWdodCB8fCBpMi50b3RhbElucHV0UG9zaXRpb25zIC0gaTEudG90YWxJbnB1dFBvc2l0aW9ucyk7XG4gICAgcmV0dXJuIG1hc2tlZC5jb21waWxlZE1hc2tzW2lucHV0c1swXS5pbmRleF07XG4gIH1cbn07XG5JTWFzay5NYXNrZWREeW5hbWljID0gTWFza2VkRHluYW1pYztcblxuZXhwb3J0IHsgTWFza2VkRHluYW1pYyBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgTWFza2VkUGF0dGVybiBmcm9tICcuL3BhdHRlcm4uanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCBDaGFuZ2VEZXRhaWxzIGZyb20gJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0IHsgRElSRUNUSU9OIH0gZnJvbSAnLi4vY29yZS91dGlscy5qcyc7XG5pbXBvcnQgQ29udGludW91c1RhaWxEZXRhaWxzIGZyb20gJy4uL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuL2Jhc2UuanMnO1xuaW1wb3J0ICcuL2ZhY3RvcnkuanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vY2h1bmstdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2N1cnNvci5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9maXhlZC1kZWZpbml0aW9uLmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2lucHV0LWRlZmluaXRpb24uanMnO1xuaW1wb3J0ICcuL3JlZ2V4cC5qcyc7XG5cbi8qKiBQYXR0ZXJuIHdoaWNoIHZhbGlkYXRlcyBlbnVtIHZhbHVlcyAqL1xuY2xhc3MgTWFza2VkRW51bSBleHRlbmRzIE1hc2tlZFBhdHRlcm4ge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4uTWFza2VkRW51bS5ERUZBVUxUUyxcbiAgICAgIC4uLm9wdHNcbiAgICB9KTsgLy8gbWFzayB3aWxsIGJlIGNyZWF0ZWQgaW4gX3VwZGF0ZVxuICB9XG4gIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIHN1cGVyLnVwZGF0ZU9wdGlvbnMob3B0cyk7XG4gIH1cbiAgX3VwZGF0ZShvcHRzKSB7XG4gICAgY29uc3Qge1xuICAgICAgZW51bTogZW51bV8sXG4gICAgICAuLi5lb3B0c1xuICAgIH0gPSBvcHRzO1xuICAgIGlmIChlbnVtXykge1xuICAgICAgY29uc3QgbGVuZ3RocyA9IGVudW1fLm1hcChlID0+IGUubGVuZ3RoKTtcbiAgICAgIGNvbnN0IHJlcXVpcmVkTGVuZ3RoID0gTWF0aC5taW4oLi4ubGVuZ3Rocyk7XG4gICAgICBjb25zdCBvcHRpb25hbExlbmd0aCA9IE1hdGgubWF4KC4uLmxlbmd0aHMpIC0gcmVxdWlyZWRMZW5ndGg7XG4gICAgICBlb3B0cy5tYXNrID0gJyonLnJlcGVhdChyZXF1aXJlZExlbmd0aCk7XG4gICAgICBpZiAob3B0aW9uYWxMZW5ndGgpIGVvcHRzLm1hc2sgKz0gJ1snICsgJyonLnJlcGVhdChvcHRpb25hbExlbmd0aCkgKyAnXSc7XG4gICAgICB0aGlzLmVudW0gPSBlbnVtXztcbiAgICB9XG4gICAgc3VwZXIuX3VwZGF0ZShlb3B0cyk7XG4gIH1cbiAgX2FwcGVuZENoYXJSYXcoY2gsIGZsYWdzKSB7XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoRnJvbSA9IE1hdGgubWluKHRoaXMubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5GT1JDRV9SSUdIVCksIHRoaXMudmFsdWUubGVuZ3RoKTtcbiAgICBjb25zdCBtYXRjaGVzID0gdGhpcy5lbnVtLmZpbHRlcihlID0+IHRoaXMubWF0Y2hWYWx1ZShlLCB0aGlzLnVubWFza2VkVmFsdWUgKyBjaCwgbWF0Y2hGcm9tKSk7XG4gICAgaWYgKG1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoMCwgdGhpcy52YWx1ZS5sZW5ndGgsIChiLCBiaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1jaCA9IG1hdGNoZXNbMF1bYmldO1xuICAgICAgICAgIGlmIChiaSA+PSB0aGlzLnZhbHVlLmxlbmd0aCB8fCBtY2ggPT09IGIudmFsdWUpIHJldHVybjtcbiAgICAgICAgICBiLnJlc2V0KCk7XG4gICAgICAgICAgYi5fYXBwZW5kQ2hhcihtY2gsIGZsYWdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBkID0gc3VwZXIuX2FwcGVuZENoYXJSYXcobWF0Y2hlc1swXVt0aGlzLnZhbHVlLmxlbmd0aF0sIGZsYWdzKTtcbiAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBtYXRjaGVzWzBdLnNsaWNlKHRoaXMudW5tYXNrZWRWYWx1ZS5sZW5ndGgpLnNwbGl0KCcnKS5mb3JFYWNoKG1jaCA9PiBkLmFnZ3JlZ2F0ZShzdXBlci5fYXBwZW5kQ2hhclJhdyhtY2gpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKHtcbiAgICAgIHNraXA6ICF0aGlzLmlzQ29tcGxldGVcbiAgICB9KTtcbiAgfVxuICBleHRyYWN0VGFpbChmcm9tUG9zLCB0b1Bvcykge1xuICAgIGlmIChmcm9tUG9zID09PSB2b2lkIDApIHtcbiAgICAgIGZyb21Qb3MgPSAwO1xuICAgIH1cbiAgICBpZiAodG9Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgdG9Qb3MgPSB0aGlzLmRpc3BsYXlWYWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIC8vIGp1c3QgZHJvcCB0YWlsXG4gICAgcmV0dXJuIG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoJycsIGZyb21Qb3MpO1xuICB9XG4gIHJlbW92ZShmcm9tUG9zLCB0b1Bvcykge1xuICAgIGlmIChmcm9tUG9zID09PSB2b2lkIDApIHtcbiAgICAgIGZyb21Qb3MgPSAwO1xuICAgIH1cbiAgICBpZiAodG9Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgdG9Qb3MgPSB0aGlzLmRpc3BsYXlWYWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGlmIChmcm9tUG9zID09PSB0b1BvcykgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG4gICAgY29uc3QgbWF0Y2hGcm9tID0gTWF0aC5taW4oc3VwZXIubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5GT1JDRV9SSUdIVCksIHRoaXMudmFsdWUubGVuZ3RoKTtcbiAgICBsZXQgcG9zO1xuICAgIGZvciAocG9zID0gZnJvbVBvczsgcG9zID49IDA7IC0tcG9zKSB7XG4gICAgICBjb25zdCBtYXRjaGVzID0gdGhpcy5lbnVtLmZpbHRlcihlID0+IHRoaXMubWF0Y2hWYWx1ZShlLCB0aGlzLnZhbHVlLnNsaWNlKG1hdGNoRnJvbSwgcG9zKSwgbWF0Y2hGcm9tKSk7XG4gICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPiAxKSBicmVhaztcbiAgICB9XG4gICAgY29uc3QgZGV0YWlscyA9IHN1cGVyLnJlbW92ZShwb3MsIHRvUG9zKTtcbiAgICBkZXRhaWxzLnRhaWxTaGlmdCArPSBwb3MgLSBmcm9tUG9zO1xuICAgIHJldHVybiBkZXRhaWxzO1xuICB9XG4gIGdldCBpc0NvbXBsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLmVudW0uaW5kZXhPZih0aGlzLnZhbHVlKSA+PSAwO1xuICB9XG59XG4vKiogTWF0Y2ggZW51bSB2YWx1ZSAqL1xuTWFza2VkRW51bS5ERUZBVUxUUyA9IHtcbiAgLi4uTWFza2VkUGF0dGVybi5ERUZBVUxUUyxcbiAgbWF0Y2hWYWx1ZTogKGVzdHIsIGlzdHIsIG1hdGNoRnJvbSkgPT4gZXN0ci5pbmRleE9mKGlzdHIsIG1hdGNoRnJvbSkgPT09IG1hdGNoRnJvbVxufTtcbklNYXNrLk1hc2tlZEVudW0gPSBNYXNrZWRFbnVtO1xuXG5leHBvcnQgeyBNYXNrZWRFbnVtIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBNYXNrZWQgZnJvbSAnLi9iYXNlLmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XG5pbXBvcnQgJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi4vY29yZS91dGlscy5qcyc7XG5cbi8qKiBNYXNraW5nIGJ5IGN1c3RvbSBGdW5jdGlvbiAqL1xuY2xhc3MgTWFza2VkRnVuY3Rpb24gZXh0ZW5kcyBNYXNrZWQge1xuICAvKiogKi9cblxuICAvKiogRW5hYmxlIGNoYXJhY3RlcnMgb3ZlcndyaXRpbmcgKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICAvKiogKi9cblxuICB1cGRhdGVPcHRpb25zKG9wdHMpIHtcbiAgICBzdXBlci51cGRhdGVPcHRpb25zKG9wdHMpO1xuICB9XG4gIF91cGRhdGUob3B0cykge1xuICAgIHN1cGVyLl91cGRhdGUoe1xuICAgICAgLi4ub3B0cyxcbiAgICAgIHZhbGlkYXRlOiBvcHRzLm1hc2tcbiAgICB9KTtcbiAgfVxufVxuSU1hc2suTWFza2VkRnVuY3Rpb24gPSBNYXNrZWRGdW5jdGlvbjtcblxuZXhwb3J0IHsgTWFza2VkRnVuY3Rpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZXNjYXBlUmVnRXhwLCBESVJFQ1RJT04gfSBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCBDaGFuZ2VEZXRhaWxzIGZyb20gJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuaW1wb3J0IE1hc2tlZCBmcm9tICcuL2Jhc2UuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5cbnZhciBfTWFza2VkTnVtYmVyO1xuLyoqIE51bWJlciBtYXNrICovXG5jbGFzcyBNYXNrZWROdW1iZXIgZXh0ZW5kcyBNYXNrZWQge1xuICAvKiogU2luZ2xlIGNoYXIgKi9cblxuICAvKiogU2luZ2xlIGNoYXIgKi9cblxuICAvKiogQXJyYXkgb2Ygc2luZ2xlIGNoYXJzICovXG5cbiAgLyoqICovXG5cbiAgLyoqICovXG5cbiAgLyoqIERpZ2l0cyBhZnRlciBwb2ludCAqL1xuXG4gIC8qKiBGbGFnIHRvIHJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgZW5kIG9mIGVkaXRpbmcgKi9cblxuICAvKiogRmxhZyB0byBwYWQgdHJhaWxpbmcgemVyb3MgYWZ0ZXIgcG9pbnQgaW4gdGhlIGVuZCBvZiBlZGl0aW5nICovXG5cbiAgLyoqIEVuYWJsZSBjaGFyYWN0ZXJzIG92ZXJ3cml0aW5nICovXG5cbiAgLyoqICovXG5cbiAgLyoqICovXG5cbiAgLyoqICovXG5cbiAgLyoqIEZvcm1hdCB0eXBlZCB2YWx1ZSB0byBzdHJpbmcgKi9cblxuICAvKiogUGFyc2Ugc3RyaW5nIHRvIGdldCB0eXBlZCB2YWx1ZSAqL1xuXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi5NYXNrZWROdW1iZXIuREVGQVVMVFMsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlT3B0aW9ucyhvcHRzKSB7XG4gICAgc3VwZXIudXBkYXRlT3B0aW9ucyhvcHRzKTtcbiAgfVxuICBfdXBkYXRlKG9wdHMpIHtcbiAgICBzdXBlci5fdXBkYXRlKG9wdHMpO1xuICAgIHRoaXMuX3VwZGF0ZVJlZ0V4cHMoKTtcbiAgfVxuICBfdXBkYXRlUmVnRXhwcygpIHtcbiAgICBjb25zdCBzdGFydCA9ICdeJyArICh0aGlzLmFsbG93TmVnYXRpdmUgPyAnWyt8XFxcXC1dPycgOiAnJyk7XG4gICAgY29uc3QgbWlkID0gJ1xcXFxkKic7XG4gICAgY29uc3QgZW5kID0gKHRoaXMuc2NhbGUgPyBcIihcIiArIGVzY2FwZVJlZ0V4cCh0aGlzLnJhZGl4KSArIFwiXFxcXGR7MCxcIiArIHRoaXMuc2NhbGUgKyBcIn0pP1wiIDogJycpICsgJyQnO1xuICAgIHRoaXMuX251bWJlclJlZ0V4cCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWQgKyBlbmQpO1xuICAgIHRoaXMuX21hcFRvUmFkaXhSZWdFeHAgPSBuZXcgUmVnRXhwKFwiW1wiICsgdGhpcy5tYXBUb1JhZGl4Lm1hcChlc2NhcGVSZWdFeHApLmpvaW4oJycpICsgXCJdXCIsICdnJyk7XG4gICAgdGhpcy5fdGhvdXNhbmRzU2VwYXJhdG9yUmVnRXhwID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodGhpcy50aG91c2FuZHNTZXBhcmF0b3IpLCAnZycpO1xuICB9XG4gIF9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UodGhpcy5fdGhvdXNhbmRzU2VwYXJhdG9yUmVnRXhwLCAnJyk7XG4gIH1cbiAgX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpIHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yOTAxMTAyL2hvdy10by1wcmludC1hLW51bWJlci13aXRoLWNvbW1hcy1hcy10aG91c2FuZHMtc2VwYXJhdG9ycy1pbi1qYXZhc2NyaXB0XG4gICAgY29uc3QgcGFydHMgPSB2YWx1ZS5zcGxpdCh0aGlzLnJhZGl4KTtcbiAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKTtcbiAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcbiAgfVxuICBkb1ByZXBhcmVDaGFyKGNoLCBmbGFncykge1xuICAgIGlmIChmbGFncyA9PT0gdm9pZCAwKSB7XG4gICAgICBmbGFncyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBbcHJlcENoLCBkZXRhaWxzXSA9IHN1cGVyLmRvUHJlcGFyZUNoYXIodGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLnNjYWxlICYmIHRoaXMubWFwVG9SYWRpeC5sZW5ndGggJiYgKFxuICAgIC8qXG4gICAgICByYWRpeCBzaG91bGQgYmUgbWFwcGVkIHdoZW5cbiAgICAgIDEpIGlucHV0IGlzIGRvbmUgZnJvbSBrZXlib2FyZCA9IGZsYWdzLmlucHV0ICYmIGZsYWdzLnJhd1xuICAgICAgMikgdW5tYXNrZWQgdmFsdWUgaXMgc2V0ID0gIWZsYWdzLmlucHV0ICYmICFmbGFncy5yYXdcbiAgICAgIGFuZCBzaG91bGQgbm90IGJlIG1hcHBlZCB3aGVuXG4gICAgICAxKSB2YWx1ZSBpcyBzZXQgPSBmbGFncy5pbnB1dCAmJiAhZmxhZ3MucmF3XG4gICAgICAyKSByYXcgdmFsdWUgaXMgc2V0ID0gIWZsYWdzLmlucHV0ICYmIGZsYWdzLnJhd1xuICAgICovXG4gICAgZmxhZ3MuaW5wdXQgJiYgZmxhZ3MucmF3IHx8ICFmbGFncy5pbnB1dCAmJiAhZmxhZ3MucmF3KSA/IGNoLnJlcGxhY2UodGhpcy5fbWFwVG9SYWRpeFJlZ0V4cCwgdGhpcy5yYWRpeCkgOiBjaCksIGZsYWdzKTtcbiAgICBpZiAoY2ggJiYgIXByZXBDaCkgZGV0YWlscy5za2lwID0gdHJ1ZTtcbiAgICBpZiAocHJlcENoICYmICF0aGlzLmFsbG93UG9zaXRpdmUgJiYgIXRoaXMudmFsdWUgJiYgcHJlcENoICE9PSAnLScpIGRldGFpbHMuYWdncmVnYXRlKHRoaXMuX2FwcGVuZENoYXIoJy0nKSk7XG4gICAgcmV0dXJuIFtwcmVwQ2gsIGRldGFpbHNdO1xuICB9XG4gIF9zZXBhcmF0b3JzQ291bnQodG8sIGV4dGVuZE9uU2VwYXJhdG9ycykge1xuICAgIGlmIChleHRlbmRPblNlcGFyYXRvcnMgPT09IHZvaWQgMCkge1xuICAgICAgZXh0ZW5kT25TZXBhcmF0b3JzID0gZmFsc2U7XG4gICAgfVxuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgdG87ICsrcG9zKSB7XG4gICAgICBpZiAodGhpcy5fdmFsdWUuaW5kZXhPZih0aGlzLnRob3VzYW5kc1NlcGFyYXRvciwgcG9zKSA9PT0gcG9zKSB7XG4gICAgICAgICsrY291bnQ7XG4gICAgICAgIGlmIChleHRlbmRPblNlcGFyYXRvcnMpIHRvICs9IHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG4gIF9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2Uoc2xpY2UpIHtcbiAgICBpZiAoc2xpY2UgPT09IHZvaWQgMCkge1xuICAgICAgc2xpY2UgPSB0aGlzLl92YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NlcGFyYXRvcnNDb3VudCh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHNsaWNlKS5sZW5ndGgsIHRydWUpO1xuICB9XG4gIGV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICBbZnJvbVBvcywgdG9Qb3NdID0gdGhpcy5fYWRqdXN0UmFuZ2VXaXRoU2VwYXJhdG9ycyhmcm9tUG9zLCB0b1Bvcyk7XG4gICAgcmV0dXJuIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMoc3VwZXIuZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zLCBmbGFncykpO1xuICB9XG4gIF9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncykge1xuICAgIGlmIChmbGFncyA9PT0gdm9pZCAwKSB7XG4gICAgICBmbGFncyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBwcmV2QmVmb3JlVGFpbFZhbHVlID0gZmxhZ3MudGFpbCAmJiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLl92YWx1ZTtcbiAgICBjb25zdCBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCA9IHRoaXMuX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZShwcmV2QmVmb3JlVGFpbFZhbHVlKTtcbiAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModGhpcy52YWx1ZSk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl92YWx1ZTtcbiAgICB0aGlzLl92YWx1ZSArPSBjaDtcbiAgICBjb25zdCBudW0gPSB0aGlzLm51bWJlcjtcbiAgICBsZXQgYWNjZXB0ZWQgPSAhaXNOYU4obnVtKTtcbiAgICBsZXQgc2tpcCA9IGZhbHNlO1xuICAgIGlmIChhY2NlcHRlZCkge1xuICAgICAgbGV0IGZpeGVkTnVtO1xuICAgICAgaWYgKHRoaXMubWluICE9IG51bGwgJiYgdGhpcy5taW4gPCAwICYmIHRoaXMubnVtYmVyIDwgdGhpcy5taW4pIGZpeGVkTnVtID0gdGhpcy5taW47XG4gICAgICBpZiAodGhpcy5tYXggIT0gbnVsbCAmJiB0aGlzLm1heCA+IDAgJiYgdGhpcy5udW1iZXIgPiB0aGlzLm1heCkgZml4ZWROdW0gPSB0aGlzLm1heDtcbiAgICAgIGlmIChmaXhlZE51bSAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLmF1dG9maXgpIHtcbiAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuZm9ybWF0KGZpeGVkTnVtLCB0aGlzKS5yZXBsYWNlKE1hc2tlZE51bWJlci5VTk1BU0tFRF9SQURJWCwgdGhpcy5yYWRpeCk7XG4gICAgICAgICAgc2tpcCB8fCAoc2tpcCA9IG9sZFZhbHVlID09PSB0aGlzLl92YWx1ZSAmJiAhZmxhZ3MudGFpbCk7IC8vIGlmIG5vdCBjaGFuZ2VkIG9uIHRhaWwgaXQncyBzdGlsbCBvayB0byBwcm9jZWVkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWNjZXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWNjZXB0ZWQgJiYgKGFjY2VwdGVkID0gQm9vbGVhbih0aGlzLl92YWx1ZS5tYXRjaCh0aGlzLl9udW1iZXJSZWdFeHApKSk7XG4gICAgfVxuICAgIGxldCBhcHBlbmREZXRhaWxzO1xuICAgIGlmICghYWNjZXB0ZWQpIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gb2xkVmFsdWU7XG4gICAgICBhcHBlbmREZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwZW5kRGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKHtcbiAgICAgICAgaW5zZXJ0ZWQ6IHRoaXMuX3ZhbHVlLnNsaWNlKG9sZFZhbHVlLmxlbmd0aCksXG4gICAgICAgIHJhd0luc2VydGVkOiBza2lwID8gJycgOiBjaCxcbiAgICAgICAgc2tpcFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5faW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLl92YWx1ZSk7XG4gICAgY29uc3QgYmVmb3JlVGFpbFZhbHVlID0gZmxhZ3MudGFpbCAmJiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLl92YWx1ZTtcbiAgICBjb25zdCBiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlKGJlZm9yZVRhaWxWYWx1ZSk7XG4gICAgYXBwZW5kRGV0YWlscy50YWlsU2hpZnQgKz0gKGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgLSBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCkgKiB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XG4gICAgcmV0dXJuIGFwcGVuZERldGFpbHM7XG4gIH1cbiAgX2ZpbmRTZXBhcmF0b3JBcm91bmQocG9zKSB7XG4gICAgaWYgKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSB7XG4gICAgICBjb25zdCBzZWFyY2hGcm9tID0gcG9zIC0gdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoICsgMTtcbiAgICAgIGNvbnN0IHNlcGFyYXRvclBvcyA9IHRoaXMudmFsdWUuaW5kZXhPZih0aGlzLnRob3VzYW5kc1NlcGFyYXRvciwgc2VhcmNoRnJvbSk7XG4gICAgICBpZiAoc2VwYXJhdG9yUG9zIDw9IHBvcykgcmV0dXJuIHNlcGFyYXRvclBvcztcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIF9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzKGZyb20sIHRvKSB7XG4gICAgY29uc3Qgc2VwYXJhdG9yQXJvdW5kRnJvbVBvcyA9IHRoaXMuX2ZpbmRTZXBhcmF0b3JBcm91bmQoZnJvbSk7XG4gICAgaWYgKHNlcGFyYXRvckFyb3VuZEZyb21Qb3MgPj0gMCkgZnJvbSA9IHNlcGFyYXRvckFyb3VuZEZyb21Qb3M7XG4gICAgY29uc3Qgc2VwYXJhdG9yQXJvdW5kVG9Qb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKHRvKTtcbiAgICBpZiAoc2VwYXJhdG9yQXJvdW5kVG9Qb3MgPj0gMCkgdG8gPSBzZXBhcmF0b3JBcm91bmRUb1BvcyArIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcbiAgICByZXR1cm4gW2Zyb20sIHRvXTtcbiAgfVxuICByZW1vdmUoZnJvbVBvcywgdG9Qb3MpIHtcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgaWYgKHRvUG9zID09PSB2b2lkIDApIHtcbiAgICAgIHRvUG9zID0gdGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICBbZnJvbVBvcywgdG9Qb3NdID0gdGhpcy5fYWRqdXN0UmFuZ2VXaXRoU2VwYXJhdG9ycyhmcm9tUG9zLCB0b1Bvcyk7XG4gICAgY29uc3QgdmFsdWVCZWZvcmVQb3MgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIGZyb21Qb3MpO1xuICAgIGNvbnN0IHZhbHVlQWZ0ZXJQb3MgPSB0aGlzLnZhbHVlLnNsaWNlKHRvUG9zKTtcbiAgICBjb25zdCBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCA9IHRoaXMuX3NlcGFyYXRvcnNDb3VudCh2YWx1ZUJlZm9yZVBvcy5sZW5ndGgpO1xuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5faW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHZhbHVlQmVmb3JlUG9zICsgdmFsdWVBZnRlclBvcykpO1xuICAgIGNvbnN0IGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UodmFsdWVCZWZvcmVQb3MpO1xuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscyh7XG4gICAgICB0YWlsU2hpZnQ6IChiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50IC0gcHJldkJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQpICogdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoXG4gICAgfSk7XG4gIH1cbiAgbmVhcmVzdElucHV0UG9zKGN1cnNvclBvcywgZGlyZWN0aW9uKSB7XG4gICAgaWYgKCF0aGlzLnRob3VzYW5kc1NlcGFyYXRvcikgcmV0dXJuIGN1cnNvclBvcztcbiAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgY2FzZSBESVJFQ1RJT04uTk9ORTpcbiAgICAgIGNhc2UgRElSRUNUSU9OLkxFRlQ6XG4gICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3Qgc2VwYXJhdG9yQXRMZWZ0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MgLSAxKTtcbiAgICAgICAgICBpZiAoc2VwYXJhdG9yQXRMZWZ0UG9zID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcGFyYXRvckF0TGVmdEVuZFBvcyA9IHNlcGFyYXRvckF0TGVmdFBvcyArIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjdXJzb3JQb3MgPCBzZXBhcmF0b3JBdExlZnRFbmRQb3MgfHwgdGhpcy52YWx1ZS5sZW5ndGggPD0gc2VwYXJhdG9yQXRMZWZ0RW5kUG9zIHx8IGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlcGFyYXRvckF0TGVmdFBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxuICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBzZXBhcmF0b3JBdFJpZ2h0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MpO1xuICAgICAgICAgIGlmIChzZXBhcmF0b3JBdFJpZ2h0UG9zID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBzZXBhcmF0b3JBdFJpZ2h0UG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Vyc29yUG9zO1xuICB9XG4gIGRvQ29tbWl0KCkge1xuICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICBjb25zdCBudW1iZXIgPSB0aGlzLm51bWJlcjtcbiAgICAgIGxldCB2YWxpZG51bSA9IG51bWJlcjtcblxuICAgICAgLy8gY2hlY2sgYm91bmRzXG4gICAgICBpZiAodGhpcy5taW4gIT0gbnVsbCkgdmFsaWRudW0gPSBNYXRoLm1heCh2YWxpZG51bSwgdGhpcy5taW4pO1xuICAgICAgaWYgKHRoaXMubWF4ICE9IG51bGwpIHZhbGlkbnVtID0gTWF0aC5taW4odmFsaWRudW0sIHRoaXMubWF4KTtcbiAgICAgIGlmICh2YWxpZG51bSAhPT0gbnVtYmVyKSB0aGlzLnVubWFza2VkVmFsdWUgPSB0aGlzLmZvcm1hdCh2YWxpZG51bSwgdGhpcyk7XG4gICAgICBsZXQgZm9ybWF0dGVkID0gdGhpcy52YWx1ZTtcbiAgICAgIGlmICh0aGlzLm5vcm1hbGl6ZVplcm9zKSBmb3JtYXR0ZWQgPSB0aGlzLl9ub3JtYWxpemVaZXJvcyhmb3JtYXR0ZWQpO1xuICAgICAgaWYgKHRoaXMucGFkRnJhY3Rpb25hbFplcm9zICYmIHRoaXMuc2NhbGUgPiAwKSBmb3JtYXR0ZWQgPSB0aGlzLl9wYWRGcmFjdGlvbmFsWmVyb3MoZm9ybWF0dGVkKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gZm9ybWF0dGVkO1xuICAgIH1cbiAgICBzdXBlci5kb0NvbW1pdCgpO1xuICB9XG4gIF9ub3JtYWxpemVaZXJvcyh2YWx1ZSkge1xuICAgIGNvbnN0IHBhcnRzID0gdGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh2YWx1ZSkuc3BsaXQodGhpcy5yYWRpeCk7XG5cbiAgICAvLyByZW1vdmUgbGVhZGluZyB6ZXJvc1xuICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXihcXEQqKSgwKikoXFxkKikvLCAobWF0Y2gsIHNpZ24sIHplcm9zLCBudW0pID0+IHNpZ24gKyBudW0pO1xuICAgIC8vIGFkZCBsZWFkaW5nIHplcm9cbiAgICBpZiAodmFsdWUubGVuZ3RoICYmICEvXFxkJC8udGVzdChwYXJ0c1swXSkpIHBhcnRzWzBdID0gcGFydHNbMF0gKyAnMCc7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucmVwbGFjZSgvMCokLywgJycpOyAvLyByZW1vdmUgdHJhaWxpbmcgemVyb3NcbiAgICAgIGlmICghcGFydHNbMV0ubGVuZ3RoKSBwYXJ0cy5sZW5ndGggPSAxOyAvLyByZW1vdmUgZnJhY3Rpb25hbFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyhwYXJ0cy5qb2luKHRoaXMucmFkaXgpKTtcbiAgfVxuICBfcGFkRnJhY3Rpb25hbFplcm9zKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQodGhpcy5yYWRpeCk7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHBhcnRzLnB1c2goJycpO1xuICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucGFkRW5kKHRoaXMuc2NhbGUsICcwJyk7XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4odGhpcy5yYWRpeCk7XG4gIH1cbiAgZG9Ta2lwSW52YWxpZChjaCwgZmxhZ3MsIGNoZWNrVGFpbCkge1xuICAgIGlmIChmbGFncyA9PT0gdm9pZCAwKSB7XG4gICAgICBmbGFncyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBkcm9wRnJhY3Rpb25hbCA9IHRoaXMuc2NhbGUgPT09IDAgJiYgY2ggIT09IHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yICYmIChjaCA9PT0gdGhpcy5yYWRpeCB8fCBjaCA9PT0gTWFza2VkTnVtYmVyLlVOTUFTS0VEX1JBRElYIHx8IHRoaXMubWFwVG9SYWRpeC5pbmNsdWRlcyhjaCkpO1xuICAgIHJldHVybiBzdXBlci5kb1NraXBJbnZhbGlkKGNoLCBmbGFncywgY2hlY2tUYWlsKSAmJiAhZHJvcEZyYWN0aW9uYWw7XG4gIH1cbiAgZ2V0IHVubWFza2VkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModGhpcy5fbm9ybWFsaXplWmVyb3ModGhpcy52YWx1ZSkpLnJlcGxhY2UodGhpcy5yYWRpeCwgTWFza2VkTnVtYmVyLlVOTUFTS0VEX1JBRElYKTtcbiAgfVxuICBzZXQgdW5tYXNrZWRWYWx1ZSh1bm1hc2tlZFZhbHVlKSB7XG4gICAgc3VwZXIudW5tYXNrZWRWYWx1ZSA9IHVubWFza2VkVmFsdWU7XG4gIH1cbiAgZ2V0IHR5cGVkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UodGhpcy51bm1hc2tlZFZhbHVlLCB0aGlzKTtcbiAgfVxuICBzZXQgdHlwZWRWYWx1ZShuKSB7XG4gICAgdGhpcy5yYXdJbnB1dFZhbHVlID0gdGhpcy5mb3JtYXQobiwgdGhpcykucmVwbGFjZShNYXNrZWROdW1iZXIuVU5NQVNLRURfUkFESVgsIHRoaXMucmFkaXgpO1xuICB9XG5cbiAgLyoqIFBhcnNlZCBOdW1iZXIgKi9cbiAgZ2V0IG51bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlZFZhbHVlO1xuICB9XG4gIHNldCBudW1iZXIobnVtYmVyKSB7XG4gICAgdGhpcy50eXBlZFZhbHVlID0gbnVtYmVyO1xuICB9XG4gIGdldCBhbGxvd05lZ2F0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLm1pbiAhPSBudWxsICYmIHRoaXMubWluIDwgMCB8fCB0aGlzLm1heCAhPSBudWxsICYmIHRoaXMubWF4IDwgMDtcbiAgfVxuICBnZXQgYWxsb3dQb3NpdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5taW4gIT0gbnVsbCAmJiB0aGlzLm1pbiA+IDAgfHwgdGhpcy5tYXggIT0gbnVsbCAmJiB0aGlzLm1heCA+IDA7XG4gIH1cbiAgdHlwZWRWYWx1ZUVxdWFscyh2YWx1ZSkge1xuICAgIC8vIGhhbmRsZSAgMCAtPiAnJyBjYXNlICh0eXBlZCA9IDAgZXZlbiBpZiB2YWx1ZSA9ICcnKVxuICAgIC8vIGZvciBkZXRhaWxzIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdU5tQW5OZVIvaW1hc2tqcy9pc3N1ZXMvMTM0XG4gICAgcmV0dXJuIChzdXBlci50eXBlZFZhbHVlRXF1YWxzKHZhbHVlKSB8fCBNYXNrZWROdW1iZXIuRU1QVFlfVkFMVUVTLmluY2x1ZGVzKHZhbHVlKSAmJiBNYXNrZWROdW1iZXIuRU1QVFlfVkFMVUVTLmluY2x1ZGVzKHRoaXMudHlwZWRWYWx1ZSkpICYmICEodmFsdWUgPT09IDAgJiYgdGhpcy52YWx1ZSA9PT0gJycpO1xuICB9XG59XG5fTWFza2VkTnVtYmVyID0gTWFza2VkTnVtYmVyO1xuTWFza2VkTnVtYmVyLlVOTUFTS0VEX1JBRElYID0gJy4nO1xuTWFza2VkTnVtYmVyLkVNUFRZX1ZBTFVFUyA9IFsuLi5NYXNrZWQuRU1QVFlfVkFMVUVTLCAwXTtcbk1hc2tlZE51bWJlci5ERUZBVUxUUyA9IHtcbiAgLi4uTWFza2VkLkRFRkFVTFRTLFxuICBtYXNrOiBOdW1iZXIsXG4gIHJhZGl4OiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJycsXG4gIG1hcFRvUmFkaXg6IFtfTWFza2VkTnVtYmVyLlVOTUFTS0VEX1JBRElYXSxcbiAgbWluOiBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUixcbiAgbWF4OiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgc2NhbGU6IDIsXG4gIG5vcm1hbGl6ZVplcm9zOiB0cnVlLFxuICBwYWRGcmFjdGlvbmFsWmVyb3M6IGZhbHNlLFxuICBwYXJzZTogTnVtYmVyLFxuICBmb3JtYXQ6IG4gPT4gbi50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7XG4gICAgdXNlR3JvdXBpbmc6IGZhbHNlLFxuICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMjBcbiAgfSlcbn07XG5JTWFzay5NYXNrZWROdW1iZXIgPSBNYXNrZWROdW1iZXI7XG5cbmV4cG9ydCB7IE1hc2tlZE51bWJlciBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgY3JlYXRlTWFzayBmcm9tICcuL2ZhY3RvcnkuanMnO1xuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcbmltcG9ydCAnLi4vY29yZS91dGlscy5qcyc7XG5cbi8qKiBNYXNrIHBpcGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyAqL1xuY29uc3QgUElQRV9UWVBFID0ge1xuICBNQVNLRUQ6ICd2YWx1ZScsXG4gIFVOTUFTS0VEOiAndW5tYXNrZWRWYWx1ZScsXG4gIFRZUEVEOiAndHlwZWRWYWx1ZSdcbn07XG4vKiogQ3JlYXRlcyBuZXcgcGlwZSBmdW5jdGlvbiBkZXBlbmRpbmcgb24gbWFzayB0eXBlLCBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIG9wdGlvbnMgKi9cbmZ1bmN0aW9uIGNyZWF0ZVBpcGUoYXJnLCBmcm9tLCB0bykge1xuICBpZiAoZnJvbSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbSA9IFBJUEVfVFlQRS5NQVNLRUQ7XG4gIH1cbiAgaWYgKHRvID09PSB2b2lkIDApIHtcbiAgICB0byA9IFBJUEVfVFlQRS5NQVNLRUQ7XG4gIH1cbiAgY29uc3QgbWFza2VkID0gY3JlYXRlTWFzayhhcmcpO1xuICByZXR1cm4gdmFsdWUgPT4gbWFza2VkLnJ1bklzb2xhdGVkKG0gPT4ge1xuICAgIG1bZnJvbV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gbVt0b107XG4gIH0pO1xufVxuXG4vKiogUGlwZXMgdmFsdWUgdGhyb3VnaCBtYXNrIGRlcGVuZGluZyBvbiBtYXNrIHR5cGUsIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gb3B0aW9ucyAqL1xuZnVuY3Rpb24gcGlwZSh2YWx1ZSwgbWFzaywgZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGNyZWF0ZVBpcGUobWFzaywgZnJvbSwgdG8pKHZhbHVlKTtcbn1cbklNYXNrLlBJUEVfVFlQRSA9IFBJUEVfVFlQRTtcbklNYXNrLmNyZWF0ZVBpcGUgPSBjcmVhdGVQaXBlO1xuSU1hc2sucGlwZSA9IHBpcGU7XG5cbmV4cG9ydCB7IFBJUEVfVFlQRSwgY3JlYXRlUGlwZSwgcGlwZSB9O1xuIiwiaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xuaW1wb3J0IGNyZWF0ZU1hc2ssIHsgbm9ybWFsaXplT3B0cyB9IGZyb20gJy4vZmFjdG9yeS5qcyc7XG5pbXBvcnQgTWFza2VkUGF0dGVybiBmcm9tICcuL3BhdHRlcm4uanMnO1xuaW1wb3J0ICcuLi9jb3JlL3V0aWxzLmpzJztcbmltcG9ydCAnLi9iYXNlLmpzJztcbmltcG9ydCAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XG5pbXBvcnQgJy4vcGF0dGVybi9jaHVuay10YWlsLWRldGFpbHMuanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vY3Vyc29yLmpzJztcbmltcG9ydCAnLi9wYXR0ZXJuL2ZpeGVkLWRlZmluaXRpb24uanMnO1xuaW1wb3J0ICcuL3BhdHRlcm4vaW5wdXQtZGVmaW5pdGlvbi5qcyc7XG5pbXBvcnQgJy4vcmVnZXhwLmpzJztcblxuLyoqIFBhdHRlcm4gbWFzayAqL1xuY2xhc3MgUmVwZWF0QmxvY2sgZXh0ZW5kcyBNYXNrZWRQYXR0ZXJuIHtcbiAgZ2V0IHJlcGVhdEZyb20oKSB7XG4gICAgdmFyIF9yZWY7XG4gICAgcmV0dXJuIChfcmVmID0gQXJyYXkuaXNBcnJheSh0aGlzLnJlcGVhdCkgPyB0aGlzLnJlcGVhdFswXSA6IHRoaXMucmVwZWF0ID09PSBJbmZpbml0eSA/IDAgOiB0aGlzLnJlcGVhdCkgIT0gbnVsbCA/IF9yZWYgOiAwO1xuICB9XG4gIGdldCByZXBlYXRUbygpIHtcbiAgICB2YXIgX3JlZjI7XG4gICAgcmV0dXJuIChfcmVmMiA9IEFycmF5LmlzQXJyYXkodGhpcy5yZXBlYXQpID8gdGhpcy5yZXBlYXRbMV0gOiB0aGlzLnJlcGVhdCkgIT0gbnVsbCA/IF9yZWYyIDogSW5maW5pdHk7XG4gIH1cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG4gIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIHN1cGVyLnVwZGF0ZU9wdGlvbnMob3B0cyk7XG4gIH1cbiAgX3VwZGF0ZShvcHRzKSB7XG4gICAgdmFyIF9yZWYzLCBfcmVmNCwgX3RoaXMkX2Jsb2NrcztcbiAgICBjb25zdCB7XG4gICAgICByZXBlYXQsXG4gICAgICAuLi5ibG9ja09wdHNcbiAgICB9ID0gbm9ybWFsaXplT3B0cyhvcHRzKTsgLy8gVE9ETyB0eXBlXG4gICAgdGhpcy5fYmxvY2tPcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fYmxvY2tPcHRzLCBibG9ja09wdHMpO1xuICAgIGNvbnN0IGJsb2NrID0gY3JlYXRlTWFzayh0aGlzLl9ibG9ja09wdHMpO1xuICAgIHRoaXMucmVwZWF0ID0gKF9yZWYzID0gKF9yZWY0ID0gcmVwZWF0ICE9IG51bGwgPyByZXBlYXQgOiBibG9jay5yZXBlYXQpICE9IG51bGwgPyBfcmVmNCA6IHRoaXMucmVwZWF0KSAhPSBudWxsID8gX3JlZjMgOiBJbmZpbml0eTsgLy8gVE9ETyB0eXBlXG5cbiAgICBzdXBlci5fdXBkYXRlKHtcbiAgICAgIG1hc2s6ICdtJy5yZXBlYXQoTWF0aC5tYXgodGhpcy5yZXBlYXRUbyA9PT0gSW5maW5pdHkgJiYgKChfdGhpcyRfYmxvY2tzID0gdGhpcy5fYmxvY2tzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkX2Jsb2Nrcy5sZW5ndGgpIHx8IDAsIHRoaXMucmVwZWF0RnJvbSkpLFxuICAgICAgYmxvY2tzOiB7XG4gICAgICAgIG06IGJsb2NrXG4gICAgICB9LFxuICAgICAgZWFnZXI6IGJsb2NrLmVhZ2VyLFxuICAgICAgb3ZlcndyaXRlOiBibG9jay5vdmVyd3JpdGUsXG4gICAgICBza2lwSW52YWxpZDogYmxvY2suc2tpcEludmFsaWQsXG4gICAgICBsYXp5OiBibG9jay5sYXp5LFxuICAgICAgcGxhY2Vob2xkZXJDaGFyOiBibG9jay5wbGFjZWhvbGRlckNoYXIsXG4gICAgICBkaXNwbGF5Q2hhcjogYmxvY2suZGlzcGxheUNoYXJcbiAgICB9KTtcbiAgfVxuICBfYWxsb2NhdGVCbG9jayhiaSkge1xuICAgIGlmIChiaSA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGgpIHJldHVybiB0aGlzLl9ibG9ja3NbYmldO1xuICAgIGlmICh0aGlzLnJlcGVhdFRvID09PSBJbmZpbml0eSB8fCB0aGlzLl9ibG9ja3MubGVuZ3RoIDwgdGhpcy5yZXBlYXRUbykge1xuICAgICAgdGhpcy5fYmxvY2tzLnB1c2goY3JlYXRlTWFzayh0aGlzLl9ibG9ja09wdHMpKTtcbiAgICAgIHRoaXMubWFzayArPSAnbSc7XG4gICAgICByZXR1cm4gdGhpcy5fYmxvY2tzW3RoaXMuX2Jsb2Nrcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH1cbiAgX2FwcGVuZENoYXJSYXcoY2gsIGZsYWdzKSB7XG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHtcbiAgICAgIGZsYWdzID0ge307XG4gICAgfVxuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuICAgIGZvciAobGV0IGJpID0gKF90aGlzJF9tYXBQb3NUb0Jsb2NrJCA9IChfdGhpcyRfbWFwUG9zVG9CbG9jayA9IHRoaXMuX21hcFBvc1RvQmxvY2sodGhpcy5kaXNwbGF5VmFsdWUubGVuZ3RoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJF9tYXBQb3NUb0Jsb2NrLmluZGV4KSAhPSBudWxsID8gX3RoaXMkX21hcFBvc1RvQmxvY2skIDogTWF0aC5tYXgodGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEsIDApLCBibG9jaywgYWxsb2NhdGVkO1xuICAgIC8vIHRyeSB0byBnZXQgYSBibG9jayBvclxuICAgIC8vIHRyeSB0byBhbGxvY2F0ZSBhIG5ldyBibG9jayBpZiBub3QgYWxsb2NhdGVkIGFscmVhZHlcbiAgICBibG9jayA9IChfdGhpcyRfYmxvY2tzJGJpID0gdGhpcy5fYmxvY2tzW2JpXSkgIT0gbnVsbCA/IF90aGlzJF9ibG9ja3MkYmkgOiBhbGxvY2F0ZWQgPSAhYWxsb2NhdGVkICYmIHRoaXMuX2FsbG9jYXRlQmxvY2soYmkpOyArK2JpKSB7XG4gICAgICB2YXIgX3RoaXMkX21hcFBvc1RvQmxvY2skLCBfdGhpcyRfbWFwUG9zVG9CbG9jaywgX3RoaXMkX2Jsb2NrcyRiaSwgX2ZsYWdzJF9iZWZvcmVUYWlsU3RhO1xuICAgICAgY29uc3QgYmxvY2tEZXRhaWxzID0gYmxvY2suX2FwcGVuZENoYXIoY2gsIHtcbiAgICAgICAgLi4uZmxhZ3MsXG4gICAgICAgIF9iZWZvcmVUYWlsU3RhdGU6IChfZmxhZ3MkX2JlZm9yZVRhaWxTdGEgPSBmbGFncy5fYmVmb3JlVGFpbFN0YXRlKSA9PSBudWxsIHx8IChfZmxhZ3MkX2JlZm9yZVRhaWxTdGEgPSBfZmxhZ3MkX2JlZm9yZVRhaWxTdGEuX2Jsb2NrcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mbGFncyRfYmVmb3JlVGFpbFN0YVtiaV1cbiAgICAgIH0pO1xuICAgICAgaWYgKGJsb2NrRGV0YWlscy5za2lwICYmIGFsbG9jYXRlZCkge1xuICAgICAgICAvLyByZW1vdmUgdGhlIGxhc3QgYWxsb2NhdGVkIGJsb2NrIGFuZCBicmVha1xuICAgICAgICB0aGlzLl9ibG9ja3MucG9wKCk7XG4gICAgICAgIHRoaXMubWFzayA9IHRoaXMubWFzay5zbGljZSgxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShibG9ja0RldGFpbHMpO1xuICAgICAgaWYgKGJsb2NrRGV0YWlscy5jb25zdW1lZCkgYnJlYWs7IC8vIGdvIG5leHQgY2hhclxuICAgIH1cbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBfdHJpbUVtcHR5VGFpbChmcm9tUG9zLCB0b1Bvcykge1xuICAgIHZhciBfdGhpcyRfbWFwUG9zVG9CbG9jazIsIF90aGlzJF9tYXBQb3NUb0Jsb2NrMztcbiAgICBpZiAoZnJvbVBvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBmcm9tUG9zID0gMDtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RCbG9ja0luZGV4ID0gTWF0aC5tYXgoKChfdGhpcyRfbWFwUG9zVG9CbG9jazIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKGZyb21Qb3MpKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkX21hcFBvc1RvQmxvY2syLmluZGV4KSB8fCAwLCB0aGlzLnJlcGVhdEZyb20sIDApO1xuICAgIGxldCBsYXN0QmxvY2tJbmRleDtcbiAgICBpZiAodG9Qb3MgIT0gbnVsbCkgbGFzdEJsb2NrSW5kZXggPSAoX3RoaXMkX21hcFBvc1RvQmxvY2szID0gdGhpcy5fbWFwUG9zVG9CbG9jayh0b1BvcykpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRfbWFwUG9zVG9CbG9jazMuaW5kZXg7XG4gICAgaWYgKGxhc3RCbG9ja0luZGV4ID09IG51bGwpIGxhc3RCbG9ja0luZGV4ID0gdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbW92ZUNvdW50ID0gMDtcbiAgICBmb3IgKGxldCBibG9ja0luZGV4ID0gbGFzdEJsb2NrSW5kZXg7IGZpcnN0QmxvY2tJbmRleCA8PSBibG9ja0luZGV4OyAtLWJsb2NrSW5kZXgsICsrcmVtb3ZlQ291bnQpIHtcbiAgICAgIGlmICh0aGlzLl9ibG9ja3NbYmxvY2tJbmRleF0udW5tYXNrZWRWYWx1ZSkgYnJlYWs7XG4gICAgfVxuICAgIGlmIChyZW1vdmVDb3VudCkge1xuICAgICAgdGhpcy5fYmxvY2tzLnNwbGljZShsYXN0QmxvY2tJbmRleCAtIHJlbW92ZUNvdW50ICsgMSwgcmVtb3ZlQ291bnQpO1xuICAgICAgdGhpcy5tYXNrID0gdGhpcy5tYXNrLnNsaWNlKHJlbW92ZUNvdW50KTtcbiAgICB9XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgc3VwZXIucmVzZXQoKTtcbiAgICB0aGlzLl90cmltRW1wdHlUYWlsKCk7XG4gIH1cbiAgcmVtb3ZlKGZyb21Qb3MsIHRvUG9zKSB7XG4gICAgaWYgKGZyb21Qb3MgPT09IHZvaWQgMCkge1xuICAgICAgZnJvbVBvcyA9IDA7XG4gICAgfVxuICAgIGlmICh0b1BvcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0b1BvcyA9IHRoaXMuZGlzcGxheVZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlRGV0YWlscyA9IHN1cGVyLnJlbW92ZShmcm9tUG9zLCB0b1Bvcyk7XG4gICAgdGhpcy5fdHJpbUVtcHR5VGFpbChmcm9tUG9zLCB0b1Bvcyk7XG4gICAgcmV0dXJuIHJlbW92ZURldGFpbHM7XG4gIH1cbiAgdG90YWxJbnB1dFBvc2l0aW9ucyhmcm9tUG9zLCB0b1Bvcykge1xuICAgIGlmIChmcm9tUG9zID09PSB2b2lkIDApIHtcbiAgICAgIGZyb21Qb3MgPSAwO1xuICAgIH1cbiAgICBpZiAodG9Qb3MgPT0gbnVsbCAmJiB0aGlzLnJlcGVhdFRvID09PSBJbmZpbml0eSkgcmV0dXJuIEluZmluaXR5O1xuICAgIHJldHVybiBzdXBlci50b3RhbElucHV0UG9zaXRpb25zKGZyb21Qb3MsIHRvUG9zKTtcbiAgfVxuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnN0YXRlO1xuICB9XG4gIHNldCBzdGF0ZShzdGF0ZSkge1xuICAgIHRoaXMuX2Jsb2Nrcy5sZW5ndGggPSBzdGF0ZS5fYmxvY2tzLmxlbmd0aDtcbiAgICB0aGlzLm1hc2sgPSB0aGlzLm1hc2suc2xpY2UoMCwgdGhpcy5fYmxvY2tzLmxlbmd0aCk7XG4gICAgc3VwZXIuc3RhdGUgPSBzdGF0ZTtcbiAgfVxufVxuSU1hc2suUmVwZWF0QmxvY2sgPSBSZXBlYXRCbG9jaztcblxuZXhwb3J0IHsgUmVwZWF0QmxvY2sgYXMgZGVmYXVsdCB9O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBJbnB1dE1hc2sgfSBmcm9tICcuL2NvbnRyb2xzL2lucHV0LmpzJztcbmltcG9ydCBJTWFzayBmcm9tICcuL2NvcmUvaG9sZGVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50IH0gZnJvbSAnLi9jb250cm9scy9odG1sLWNvbnRlbnRlZGl0YWJsZS1tYXNrLWVsZW1lbnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBIVE1MSW5wdXRNYXNrRWxlbWVudCB9IGZyb20gJy4vY29udHJvbHMvaHRtbC1pbnB1dC1tYXNrLWVsZW1lbnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBIVE1MTWFza0VsZW1lbnQgfSBmcm9tICcuL2NvbnRyb2xzL2h0bWwtbWFzay1lbGVtZW50LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza0VsZW1lbnQgfSBmcm9tICcuL2NvbnRyb2xzL21hc2stZWxlbWVudC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENoYW5nZURldGFpbHMgfSBmcm9tICcuL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xuZXhwb3J0IHsgRElSRUNUSU9OLCBmb3JjZURpcmVjdGlvbiB9IGZyb20gJy4vY29yZS91dGlscy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hc2tlZCB9IGZyb20gJy4vbWFza2VkL2Jhc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXNrZWREYXRlIH0gZnJvbSAnLi9tYXNrZWQvZGF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hc2tlZER5bmFtaWMgfSBmcm9tICcuL21hc2tlZC9keW5hbWljLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza2VkRW51bSB9IGZyb20gJy4vbWFza2VkL2VudW0uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVNYXNrLCBub3JtYWxpemVPcHRzIH0gZnJvbSAnLi9tYXNrZWQvZmFjdG9yeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hc2tlZEZ1bmN0aW9uIH0gZnJvbSAnLi9tYXNrZWQvZnVuY3Rpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXNrZWROdW1iZXIgfSBmcm9tICcuL21hc2tlZC9udW1iZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXNrZWRQYXR0ZXJuIH0gZnJvbSAnLi9tYXNrZWQvcGF0dGVybi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENodW5rc1RhaWxEZXRhaWxzIH0gZnJvbSAnLi9tYXNrZWQvcGF0dGVybi9jaHVuay10YWlsLWRldGFpbHMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYXR0ZXJuRml4ZWREZWZpbml0aW9uIH0gZnJvbSAnLi9tYXNrZWQvcGF0dGVybi9maXhlZC1kZWZpbml0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUGF0dGVybklucHV0RGVmaW5pdGlvbiB9IGZyb20gJy4vbWFza2VkL3BhdHRlcm4vaW5wdXQtZGVmaW5pdGlvbi5qcyc7XG5leHBvcnQgeyBQSVBFX1RZUEUsIGNyZWF0ZVBpcGUsIHBpcGUgfSBmcm9tICcuL21hc2tlZC9waXBlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWFza2VkUmFuZ2UgfSBmcm9tICcuL21hc2tlZC9yYW5nZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hc2tlZFJlZ0V4cCB9IGZyb20gJy4vbWFza2VkL3JlZ2V4cC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFJlcGVhdEJsb2NrIH0gZnJvbSAnLi9tYXNrZWQvcmVwZWF0LmpzJztcbmltcG9ydCAnLi9jb3JlL2FjdGlvbi1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9jb250cm9scy9pbnB1dC1oaXN0b3J5LmpzJztcbmltcG9ydCAnLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcbmltcG9ydCAnLi9tYXNrZWQvcGF0dGVybi9jdXJzb3IuanMnO1xuXG50cnkge1xuICBnbG9iYWxUaGlzLklNYXNrID0gSU1hc2s7XG59IGNhdGNoIHt9XG5cbmV4cG9ydCB7IElNYXNrIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IHJlYWR5IH0gZnJvbSBcIi4uLy4uL2pzL3V0aWxzL2RvY3VtZW50UmVhZHlcIjtcbmltcG9ydCBJTWFzayBmcm9tIFwiaW1hc2tcIjtcblxucmVhZHkoZnVuY3Rpb24gKCkge1xuICBjb25zdCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmlucHV0XCIpO1xuICBpZiAoaW5wdXRzLmxlbmd0aCAhPT0gMCkge1xuICAgIGZvciAobGV0IGlucHV0IG9mIGlucHV0cykge1xuICAgICAgaWYgKGlucHV0LnZhbHVlLmxlbmd0aCAhPT0gMCkgaW5wdXQuY2xhc3NMaXN0LmFkZChcImlucHV0LS1oYXMtdmFsdWVcIik7XG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnZhbHVlLmxlbmd0aCAhPT0gMCA/IHRoaXMuY2xhc3NMaXN0LmFkZChcImlucHV0LS1oYXMtdmFsdWVcIikgOiB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJpbnB1dC0taGFzLXZhbHVlXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGhvbmVGaWVsZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtcGhvbmUtZmllbGRdXCIpO1xuICBpZiAocGhvbmVGaWVsZHMpIHtcbiAgICBwaG9uZUZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgSU1hc2soZmllbGQsIHtcbiAgICAgICAgbGF6eTogdHJ1ZSxcbiAgICAgICAgbWFzazogXCIrezd9ICgwMDApIDAwMCAwMCAwMFwiLFxuICAgICAgICBwcmVwYXJlOiBmdW5jdGlvbiAoYXBwZW5kZWQsIG1hc2tlZCkge1xuICAgICAgICAgIGlmIChhcHBlbmRlZCA9PT0gXCI4XCIgJiYgbWFza2VkLnZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIrN1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXBwZW5kZWQ7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IG51bWJlckZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtkYXRhLW51bWJlcl1cIik7XG4gIGlmIChudW1iZXJGaWVsZHMpIHtcbiAgICBudW1iZXJGaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgIElNYXNrKGZpZWxkLCB7XG4gICAgICAgIG1hc2s6IE51bWJlcixcbiAgICAgICAgbWluOiAwLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBwYXNzcG9ydFJ1c3NpYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtkYXRhLXBhc3Nwb3J0LXJ1c3NpYV1cIik7XG4gIGlmIChwYXNzcG9ydFJ1c3NpYSkge1xuICAgIHBhc3Nwb3J0UnVzc2lhLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICBJTWFzayhmaWVsZCwge1xuICAgICAgICBsYXp5OiB0cnVlLFxuICAgICAgICBtYXNrOiBcIjAwMDAgMDAwMDAwXCIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHBhc3Nwb3J0SW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0W2RhdGEtcGFzc3BvcnQtaW50XVwiKTtcbiAgaWYgKHBhc3Nwb3J0SW50KSB7XG4gICAgcGFzc3BvcnRJbnQuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgIElNYXNrKGZpZWxkLCB7XG4gICAgICAgIGxhenk6IHRydWUsXG4gICAgICAgIG1hc2s6IFwiMDAgMDAwMDAwMFwiLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuU2xpbVNlbGVjdCA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICBjbGFzcyBDc3NDbGFzc2VzIHtcbiAgICAgICAgY29uc3RydWN0b3IoY2xhc3Nlcykge1xuICAgICAgICAgICAgaWYgKCFjbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYWluID0gY2xhc3Nlcy5tYWluIHx8ICdzcy1tYWluJztcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBjbGFzc2VzLnBsYWNlaG9sZGVyIHx8ICdzcy1wbGFjZWhvbGRlcic7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IGNsYXNzZXMudmFsdWVzIHx8ICdzcy12YWx1ZXMnO1xuICAgICAgICAgICAgdGhpcy5zaW5nbGUgPSBjbGFzc2VzLnNpbmdsZSB8fCAnc3Mtc2luZ2xlJztcbiAgICAgICAgICAgIHRoaXMubWF4ID0gY2xhc3Nlcy5tYXggfHwgJ3NzLW1heCc7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gY2xhc3Nlcy52YWx1ZSB8fCAnc3MtdmFsdWUnO1xuICAgICAgICAgICAgdGhpcy52YWx1ZVRleHQgPSBjbGFzc2VzLnZhbHVlVGV4dCB8fCAnc3MtdmFsdWUtdGV4dCc7XG4gICAgICAgICAgICB0aGlzLnZhbHVlRGVsZXRlID0gY2xhc3Nlcy52YWx1ZURlbGV0ZSB8fCAnc3MtdmFsdWUtZGVsZXRlJztcbiAgICAgICAgICAgIHRoaXMudmFsdWVPdXQgPSBjbGFzc2VzLnZhbHVlT3V0IHx8ICdzcy12YWx1ZS1vdXQnO1xuICAgICAgICAgICAgdGhpcy5kZXNlbGVjdCA9IGNsYXNzZXMuZGVzZWxlY3QgfHwgJ3NzLWRlc2VsZWN0JztcbiAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RQYXRoID0gY2xhc3Nlcy5kZXNlbGVjdFBhdGggfHwgJ00xMCwxMCBMOTAsOTAgTTEwLDkwIEw5MCwxMCc7XG4gICAgICAgICAgICB0aGlzLmFycm93ID0gY2xhc3Nlcy5hcnJvdyB8fCAnc3MtYXJyb3cnO1xuICAgICAgICAgICAgdGhpcy5hcnJvd0Nsb3NlID0gY2xhc3Nlcy5hcnJvd0Nsb3NlIHx8ICdNMTAsMzAgTDUwLDcwIEw5MCwzMCc7XG4gICAgICAgICAgICB0aGlzLmFycm93T3BlbiA9IGNsYXNzZXMuYXJyb3dPcGVuIHx8ICdNMTAsNzAgTDUwLDMwIEw5MCw3MCc7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBjbGFzc2VzLmNvbnRlbnQgfHwgJ3NzLWNvbnRlbnQnO1xuICAgICAgICAgICAgdGhpcy5vcGVuQWJvdmUgPSBjbGFzc2VzLm9wZW5BYm92ZSB8fCAnc3Mtb3Blbi1hYm92ZSc7XG4gICAgICAgICAgICB0aGlzLm9wZW5CZWxvdyA9IGNsYXNzZXMub3BlbkJlbG93IHx8ICdzcy1vcGVuLWJlbG93JztcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoID0gY2xhc3Nlcy5zZWFyY2ggfHwgJ3NzLXNlYXJjaCc7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaEhpZ2hsaWdodGVyID0gY2xhc3Nlcy5zZWFyY2hIaWdobGlnaHRlciB8fCAnc3Mtc2VhcmNoLWhpZ2hsaWdodCc7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGluZyA9IGNsYXNzZXMuc2VhcmNoaW5nIHx8ICdzcy1zZWFyY2hpbmcnO1xuICAgICAgICAgICAgdGhpcy5hZGRhYmxlID0gY2xhc3Nlcy5hZGRhYmxlIHx8ICdzcy1hZGRhYmxlJztcbiAgICAgICAgICAgIHRoaXMuYWRkYWJsZVBhdGggPSBjbGFzc2VzLmFkZGFibGVQYXRoIHx8ICdNNTAsMTAgTDUwLDkwIE0xMCw1MCBMOTAsNTAnO1xuICAgICAgICAgICAgdGhpcy5saXN0ID0gY2xhc3Nlcy5saXN0IHx8ICdzcy1saXN0JztcbiAgICAgICAgICAgIHRoaXMub3B0Z3JvdXAgPSBjbGFzc2VzLm9wdGdyb3VwIHx8ICdzcy1vcHRncm91cCc7XG4gICAgICAgICAgICB0aGlzLm9wdGdyb3VwTGFiZWwgPSBjbGFzc2VzLm9wdGdyb3VwTGFiZWwgfHwgJ3NzLW9wdGdyb3VwLWxhYmVsJztcbiAgICAgICAgICAgIHRoaXMub3B0Z3JvdXBMYWJlbFRleHQgPSBjbGFzc2VzLm9wdGdyb3VwTGFiZWxUZXh0IHx8ICdzcy1vcHRncm91cC1sYWJlbC10ZXh0JztcbiAgICAgICAgICAgIHRoaXMub3B0Z3JvdXBBY3Rpb25zID0gY2xhc3Nlcy5vcHRncm91cEFjdGlvbnMgfHwgJ3NzLW9wdGdyb3VwLWFjdGlvbnMnO1xuICAgICAgICAgICAgdGhpcy5vcHRncm91cFNlbGVjdEFsbCA9IGNsYXNzZXMub3B0Z3JvdXBTZWxlY3RBbGwgfHwgJ3NzLXNlbGVjdGFsbCc7XG4gICAgICAgICAgICB0aGlzLm9wdGdyb3VwU2VsZWN0QWxsQm94ID0gY2xhc3Nlcy5vcHRncm91cFNlbGVjdEFsbEJveCB8fCAnTTYwLDEwIEwxMCwxMCBMMTAsOTAgTDkwLDkwIEw5MCw1MCc7XG4gICAgICAgICAgICB0aGlzLm9wdGdyb3VwU2VsZWN0QWxsQ2hlY2sgPSBjbGFzc2VzLm9wdGdyb3VwU2VsZWN0QWxsQ2hlY2sgfHwgJ00zMCw0NSBMNTAsNzAgTDkwLDEwJztcbiAgICAgICAgICAgIHRoaXMub3B0Z3JvdXBDbG9zYWJsZSA9IGNsYXNzZXMub3B0Z3JvdXBDbG9zYWJsZSB8fCAnc3MtY2xvc2FibGUnO1xuICAgICAgICAgICAgdGhpcy5vcHRpb24gPSBjbGFzc2VzLm9wdGlvbiB8fCAnc3Mtb3B0aW9uJztcbiAgICAgICAgICAgIHRoaXMub3B0aW9uRGVsZXRlID0gY2xhc3Nlcy5vcHRpb25EZWxldGUgfHwgJ00xMCwxMCBMOTAsOTAgTTEwLDkwIEw5MCwxMCc7XG4gICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkID0gY2xhc3Nlcy5oaWdobGlnaHRlZCB8fCAnc3MtaGlnaGxpZ2h0ZWQnO1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gY2xhc3Nlcy5vcGVuIHx8ICdzcy1vcGVuJztcbiAgICAgICAgICAgIHRoaXMuY2xvc2UgPSBjbGFzc2VzLmNsb3NlIHx8ICdzcy1jbG9zZSc7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gY2xhc3Nlcy5zZWxlY3RlZCB8fCAnc3Mtc2VsZWN0ZWQnO1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGNsYXNzZXMuZXJyb3IgfHwgJ3NzLWVycm9yJztcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBjbGFzc2VzLmRpc2FibGVkIHx8ICdzcy1kaXNhYmxlZCc7XG4gICAgICAgICAgICB0aGlzLmhpZGUgPSBjbGFzc2VzLmhpZGUgfHwgJ3NzLWhpZGUnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVJRCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc0NsYXNzSW5UcmVlKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICBmdW5jdGlvbiBoYXNDbGFzcyhlLCBjKSB7XG4gICAgICAgICAgICBpZiAoYyAmJiBlICYmIGUuY2xhc3NMaXN0ICYmIGUuY2xhc3NMaXN0LmNvbnRhaW5zKGMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyAmJiBlICYmIGUuZGF0YXNldCAmJiBlLmRhdGFzZXQuaWQgJiYgZS5kYXRhc2V0LmlkID09PSBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBhcmVudEJ5Q2xhc3MoZSwgYykge1xuICAgICAgICAgICAgaWYgKCFlIHx8IGUgPT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNDbGFzcyhlLCBjKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEJ5Q2xhc3MoZS5wYXJlbnROb2RlLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB8fCBwYXJlbnRCeUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQgPSA1MCwgaW1tZWRpYXRlID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHNlbGY7XG4gICAgICAgICAgICBjb25zdCBsYXRlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICAgICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0VxdWFsKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGEpID09PSBKU09OLnN0cmluZ2lmeShiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24ga2ViYWJDYXNlKHN0cikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdHIucmVwbGFjZSgvW0EtWlxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBERV0vZywgKG1hdGNoKSA9PiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgcmV0dXJuIHN0clswXSA9PT0gc3RyWzBdLnRvVXBwZXJDYXNlKCkgPyByZXN1bHQuc3Vic3RyaW5nKDEpIDogcmVzdWx0O1xuICAgIH1cblxuICAgIGNsYXNzIE9wdGdyb3VwIHtcbiAgICAgICAgY29uc3RydWN0b3Iob3B0Z3JvdXApIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSAhb3B0Z3JvdXAuaWQgfHwgb3B0Z3JvdXAuaWQgPT09ICcnID8gZ2VuZXJhdGVJRCgpIDogb3B0Z3JvdXAuaWQ7XG4gICAgICAgICAgICB0aGlzLmxhYmVsID0gb3B0Z3JvdXAubGFiZWwgfHwgJyc7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEFsbCA9IG9wdGdyb3VwLnNlbGVjdEFsbCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBvcHRncm91cC5zZWxlY3RBbGw7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEFsbFRleHQgPSBvcHRncm91cC5zZWxlY3RBbGxUZXh0IHx8ICdTZWxlY3QgQWxsJztcbiAgICAgICAgICAgIHRoaXMuY2xvc2FibGUgPSBvcHRncm91cC5jbG9zYWJsZSB8fCAnb2ZmJztcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgaWYgKG9wdGdyb3VwLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb3B0Z3JvdXAub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucHVzaChuZXcgT3B0aW9uKG8pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xhc3MgT3B0aW9uIHtcbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gIW9wdGlvbi5pZCB8fCBvcHRpb24uaWQgPT09ICcnID8gZ2VuZXJhdGVJRCgpIDogb3B0aW9uLmlkO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG9wdGlvbi52YWx1ZSA9PT0gdW5kZWZpbmVkID8gb3B0aW9uLnRleHQgOiBvcHRpb24udmFsdWU7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSBvcHRpb24udGV4dCB8fCAnJztcbiAgICAgICAgICAgIHRoaXMuaHRtbCA9IG9wdGlvbi5odG1sIHx8ICcnO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZCAhPT0gdW5kZWZpbmVkID8gb3B0aW9uLnNlbGVjdGVkIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkgPSBvcHRpb24uZGlzcGxheSAhPT0gdW5kZWZpbmVkID8gb3B0aW9uLmRpc3BsYXkgOiB0cnVlO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IG9wdGlvbi5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkID8gb3B0aW9uLmRpc2FibGVkIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm1hbmRhdG9yeSA9IG9wdGlvbi5tYW5kYXRvcnkgIT09IHVuZGVmaW5lZCA/IG9wdGlvbi5tYW5kYXRvcnkgOiBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBvcHRpb24ucGxhY2Vob2xkZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbi5wbGFjZWhvbGRlciA6IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jbGFzcyA9IG9wdGlvbi5jbGFzcyB8fCAnJztcbiAgICAgICAgICAgIHRoaXMuc3R5bGUgPSBvcHRpb24uc3R5bGUgfHwgJyc7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBvcHRpb24uZGF0YSB8fCB7fTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGFzcyBTdG9yZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHR5cGUsIGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VHlwZSA9ICdzaW5nbGUnO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3JkZXIgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0aGlzLnNldERhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVEYXRhQXJyYXkoZGF0YSkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignRGF0YSBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhT2JqIG9mIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YU9iaiBpbnN0YW5jZW9mIE9wdGdyb3VwIHx8ICdsYWJlbCcgaW4gZGF0YU9iaikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISgnbGFiZWwnIGluIGRhdGFPYmopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdPcHRncm91cCBtdXN0IGhhdmUgYSBsYWJlbCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgnb3B0aW9ucycgaW4gZGF0YU9iaiAmJiBkYXRhT2JqLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG9wdGlvbiBvZiBkYXRhT2JqLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uRXJyb3IgPSB0aGlzLnZhbGlkYXRlT3B0aW9uKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvbkVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhT2JqIGluc3RhbmNlb2YgT3B0aW9uIHx8ICd0ZXh0JyBpbiBkYXRhT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25FcnJvciA9IHRoaXMudmFsaWRhdGVPcHRpb24oZGF0YU9iaik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0aW9uRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0RhdGEgb2JqZWN0IG11c3QgYmUgYSB2YWxpZCBvcHRncm91cCBvciBvcHRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0ZU9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmICghKCd0ZXh0JyBpbiBvcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignT3B0aW9uIG11c3QgaGF2ZSBhIHRleHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRpYWxUb0Z1bGxEYXRhKGRhdGEpIHtcbiAgICAgICAgICAgIGxldCBkYXRhRmluYWwgPSBbXTtcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaCgoZGF0YU9iaikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhT2JqIGluc3RhbmNlb2YgT3B0Z3JvdXAgfHwgJ2xhYmVsJyBpbiBkYXRhT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHRPcHRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICgnb3B0aW9ucycgaW4gZGF0YU9iaiAmJiBkYXRhT2JqLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFPYmoub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRPcHRpb25zLnB1c2gobmV3IE9wdGlvbihvcHRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRPcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFGaW5hbC5wdXNoKG5ldyBPcHRncm91cChkYXRhT2JqKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFPYmogaW5zdGFuY2VvZiBPcHRpb24gfHwgJ3RleHQnIGluIGRhdGFPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YUZpbmFsLnB1c2gobmV3IE9wdGlvbihkYXRhT2JqKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YUZpbmFsO1xuICAgICAgICB9XG4gICAgICAgIHNldERhdGEoZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5wYXJ0aWFsVG9GdWxsRGF0YShkYXRhKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdFR5cGUgPT09ICdzaW5nbGUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEJ5KCdpZCcsIHRoaXMuZ2V0U2VsZWN0ZWQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihudWxsLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBnZXREYXRhT3B0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihudWxsLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkT3B0aW9uKG9wdGlvbiwgYWRkVG9TdGFydCA9IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoYWRkVG9TdGFydCkge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gW25ldyBPcHRpb24ob3B0aW9uKV07XG4gICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhKGRhdGEuY29uY2F0KHRoaXMuZ2V0RGF0YSgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldERhdGEodGhpcy5nZXREYXRhKCkuY29uY2F0KG5ldyBPcHRpb24ob3B0aW9uKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldFNlbGVjdGVkQnkoc2VsZWN0ZWRUeXBlLCBzZWxlY3RlZFZhbHVlcykge1xuICAgICAgICAgICAgbGV0IGZpcnN0T3B0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBoYXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRPYmplY3RzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhT2JqIG9mIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhT2JqIGluc3RhbmNlb2YgT3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgb3B0aW9uIG9mIGRhdGFPYmoub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0T3B0aW9uID0gb3B0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gaGFzU2VsZWN0ZWQgPyBmYWxzZSA6IHNlbGVjdGVkVmFsdWVzLmluY2x1ZGVzKG9wdGlvbltzZWxlY3RlZFR5cGVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9iamVjdHMucHVzaChvcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdFR5cGUgPT09ICdzaW5nbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFPYmogaW5zdGFuY2VvZiBPcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RPcHRpb24gPSBkYXRhT2JqO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGFPYmouc2VsZWN0ZWQgPSBoYXNTZWxlY3RlZCA/IGZhbHNlIDogc2VsZWN0ZWRWYWx1ZXMuaW5jbHVkZXMoZGF0YU9ialtzZWxlY3RlZFR5cGVdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFPYmouc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT2JqZWN0cy5wdXNoKGRhdGFPYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0VHlwZSA9PT0gJ3NpbmdsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RUeXBlID09PSAnc2luZ2xlJyAmJiBmaXJzdE9wdGlvbiAmJiAhaGFzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBmaXJzdE9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRPYmplY3RzLnB1c2goZmlyc3RPcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJZHMgPSBzZWxlY3RlZFZhbHVlcy5tYXAoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKF9hID0gc2VsZWN0ZWRPYmplY3RzLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uW3NlbGVjdGVkVHlwZV0gPT09IHZhbHVlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlkKSB8fCAnJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9yZGVyID0gc2VsZWN0ZWRJZHM7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0U2VsZWN0ZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZE9wdGlvbnMoKS5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRTZWxlY3RlZFZhbHVlcygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGVkT3B0aW9ucygpLm1hcCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGdldFNlbGVjdGVkT3B0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcigob3B0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdC5zZWxlY3RlZDtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRPcHRncm91cEJ5SUQoaWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGFPYmogb2YgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFPYmogaW5zdGFuY2VvZiBPcHRncm91cCAmJiBkYXRhT2JqLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YU9iajtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBnZXRPcHRpb25CeUlEKGlkKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZmlsdGVyKChvcHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0LmlkID09PSBpZDtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmxlbmd0aCA/IG9wdGlvbnNbMF0gOiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGdldFNlbGVjdFR5cGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGdldEZpcnN0T3B0aW9uKCkge1xuICAgICAgICAgICAgbGV0IG9wdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhT2JqIG9mIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhT2JqIGluc3RhbmNlb2YgT3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gZGF0YU9iai5vcHRpb25zWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhT2JqIGluc3RhbmNlb2YgT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9IGRhdGFPYmo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZWFyY2goc2VhcmNoLCBzZWFyY2hGaWx0ZXIpIHtcbiAgICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaC50cmltKCk7XG4gICAgICAgICAgICBpZiAoc2VhcmNoID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcigob3B0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlYXJjaEZpbHRlcihvcHQsIHNlYXJjaCk7XG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBmaWx0ZXIoZmlsdGVyLCBpbmNsdWRlT3B0Z3JvdXApIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFTZWFyY2ggPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKChkYXRhT2JqKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFPYmogaW5zdGFuY2VvZiBPcHRncm91cCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0T3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBkYXRhT2JqLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlciB8fCBmaWx0ZXIob3B0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZU9wdGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTZWFyY2gucHVzaChuZXcgT3B0aW9uKG9wdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0T3B0aW9ucy5wdXNoKG5ldyBPcHRpb24ob3B0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdE9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGdyb3VwID0gbmV3IE9wdGdyb3VwKGRhdGFPYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXAub3B0aW9ucyA9IG9wdE9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhU2VhcmNoLnB1c2gob3B0Z3JvdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXRhT2JqIGluc3RhbmNlb2YgT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlsdGVyIHx8IGZpbHRlcihkYXRhT2JqKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVNlYXJjaC5wdXNoKG5ldyBPcHRpb24oZGF0YU9iaikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YVNlYXJjaDtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3RlZE9yZGVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdPcmRlciA9IFtdO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9yZGVyLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9ucy5maW5kKChvcHQpID0+IG9wdC5pZCA9PT0gaWQpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3T3JkZXIucHVzaChvcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaXNJbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5ld09yZGVyLmZvckVhY2goKHNlbGVjdGVkT3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaWQgPT09IHNlbGVjdGVkT3B0aW9uLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0luID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghaXNJbikge1xuICAgICAgICAgICAgICAgICAgICBuZXdPcmRlci5wdXNoKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3T3JkZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGFzcyBSZW5kZXIge1xuICAgICAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgY2xhc3Nlcywgc3RvcmUsIGNhbGxiYWNrcykge1xuICAgICAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICAgICAgdGhpcy5jbGFzc2VzID0gY2xhc3NlcztcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICAgICAgICAgICAgdGhpcy5tYWluID0gdGhpcy5tYWluRGl2KCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSB0aGlzLmNvbnRlbnREaXYoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ2xhc3NTdHlsZXMoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXJpYUF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvbnRlbnRMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuY29udGVudExvY2F0aW9uLmFwcGVuZENoaWxkKHRoaXMuY29udGVudC5tYWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbmFibGUoKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5kaXNhYmxlZCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuc2VhcmNoLmlucHV0LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGlzYWJsZSgpIHtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tYWluLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmRpc2FibGVkKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5zZWFyY2guaW5wdXQuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIG9wZW4oKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4uYXJyb3cucGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLmNsYXNzZXMuYXJyb3dPcGVuKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tYWluLmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5vcGVuUG9zaXRpb24gPT09ICd1cCcgPyB0aGlzLmNsYXNzZXMub3BlbkFib3ZlIDogdGhpcy5jbGFzc2VzLm9wZW5CZWxvdyk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgdGhpcy5tb3ZlQ29udGVudCgpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRPcHRpb25zID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZE9wdGlvbnMoKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJZCA9IHNlbGVjdGVkT3B0aW9uc1tzZWxlY3RlZE9wdGlvbnMubGVuZ3RoIC0gMV0uaWQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSB0aGlzLmNvbnRlbnQubGlzdC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1cIicgKyBzZWxlY3RlZElkICsgJ1wiXScpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuc3VyZUVsZW1lbnRJblZpZXcodGhpcy5jb250ZW50Lmxpc3QsIHNlbGVjdGVkT3B0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xvc2UoKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5vcGVuQWJvdmUpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1haW4uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMub3BlbkJlbG93KTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tYWluLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Lm1haW4uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMub3BlbkFib3ZlKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc2VzLm9wZW5CZWxvdyk7XG4gICAgICAgICAgICB0aGlzLm1haW4uYXJyb3cucGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLmNsYXNzZXMuYXJyb3dDbG9zZSk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlQ2xhc3NTdHlsZXMoKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5jbGFzc05hbWUgPSAnJztcbiAgICAgICAgICAgIHRoaXMubWFpbi5tYWluLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLmNsYXNzTmFtZSA9ICcnO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Lm1haW4ucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1haW4uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMubWFpbik7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQubWFpbi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5jb250ZW50KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0eWxlICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHRoaXMubWFpbi5tYWluLnN0eWxlLmNzc1RleHQgPSB0aGlzLnNldHRpbmdzLnN0eWxlO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLnN0eWxlLmNzc1RleHQgPSB0aGlzLnNldHRpbmdzLnN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY2xhc3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjIG9mIHRoaXMuc2V0dGluZ3MuY2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWluLm1haW4uY2xhc3NMaXN0LmFkZChjLnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQubWFpbi5jbGFzc0xpc3QuYWRkKGMudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvbnRlbnRQb3NpdGlvbiA9PT0gJ3JlbGF0aXZlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLmNsYXNzTGlzdC5hZGQoJ3NzLScgKyB0aGlzLnNldHRpbmdzLmNvbnRlbnRQb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlQXJpYUF0dHJpYnV0ZXMoKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5yb2xlID0gJ2NvbWJvYm94JztcbiAgICAgICAgICAgIHRoaXMubWFpbi5tYWluLnNldEF0dHJpYnV0ZSgnYXJpYS1oYXNwb3B1cCcsICdsaXN0Ym94Jyk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCB0aGlzLmNvbnRlbnQubWFpbi5pZCk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLnNldEF0dHJpYnV0ZSgncm9sZScsICdsaXN0Ym94Jyk7XG4gICAgICAgIH1cbiAgICAgICAgbWFpbkRpdigpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG1haW4uZGF0YXNldC5pZCA9IHRoaXMuc2V0dGluZ3MuaWQ7XG4gICAgICAgICAgICBtYWluLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRoaXMuc2V0dGluZ3MuYXJpYUxhYmVsKTtcbiAgICAgICAgICAgIG1haW4udGFiSW5kZXggPSAwO1xuICAgICAgICAgICAgbWFpbi5vbmtleWRvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmtleSA9PT0gJ0Fycm93RG93bicgPyB0aGlzLmhpZ2hsaWdodCgnZG93bicpIDogdGhpcy5oaWdobGlnaHQoJ3VwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWdobGlnaHRlZCA9IHRoaXMuY29udGVudC5saXN0LnF1ZXJ5U2VsZWN0b3IoJy4nICsgdGhpcy5jbGFzc2VzLmhpZ2hsaWdodGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtYWluLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5pc09wZW4gPyB0aGlzLmNhbGxiYWNrcy5jbG9zZSgpIDogdGhpcy5jYWxsYmFja3Mub3BlbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdmFsdWVzLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnZhbHVlcyk7XG4gICAgICAgICAgICBtYWluLmFwcGVuZENoaWxkKHZhbHVlcyk7XG4gICAgICAgICAgICBjb25zdCBkZXNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZGVzZWxlY3QuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuZGVzZWxlY3QpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRPcHRpb25zID0gKF9hID0gdGhpcy5zdG9yZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFNlbGVjdGVkT3B0aW9ucygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmFsbG93RGVzZWxlY3QgfHwgKHRoaXMuc2V0dGluZ3MuaXNNdWx0aXBsZSAmJiBzZWxlY3RlZE9wdGlvbnMgJiYgc2VsZWN0ZWRPcHRpb25zLmxlbmd0aCA8PSAwKSkge1xuICAgICAgICAgICAgICAgIGRlc2VsZWN0LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmhpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzZWxlY3QuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMuaGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXNlbGVjdC5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHNob3VsZERlbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZE9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhZnRlciA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrcy5iZWZvcmVDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkRGVsZXRlID0gdGhpcy5jYWxsYmFja3MuYmVmb3JlQ2hhbmdlKGFmdGVyLCBiZWZvcmUpID09PSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRGVsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldFNlbGVjdGVkKFtdLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZURlc2VsZWN0QWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdE9wdGlvbiA9IHRoaXMuc3RvcmUuZ2V0Rmlyc3RPcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZmlyc3RPcHRpb24gPyBmaXJzdE9wdGlvbi5pZCA6ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3Muc2V0U2VsZWN0ZWQoaWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZU9uU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrcy5hZnRlckNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3MuYWZ0ZXJDaGFuZ2UodGhpcy5zdG9yZS5nZXRTZWxlY3RlZE9wdGlvbnMoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGVzZWxlY3RTdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgICAgICAgICAgZGVzZWxlY3RTdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAxMDAgMTAwJyk7XG4gICAgICAgICAgICBjb25zdCBkZXNlbGVjdFBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcbiAgICAgICAgICAgIGRlc2VsZWN0UGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLmNsYXNzZXMuZGVzZWxlY3RQYXRoKTtcbiAgICAgICAgICAgIGRlc2VsZWN0U3ZnLmFwcGVuZENoaWxkKGRlc2VsZWN0UGF0aCk7XG4gICAgICAgICAgICBkZXNlbGVjdC5hcHBlbmRDaGlsZChkZXNlbGVjdFN2Zyk7XG4gICAgICAgICAgICBtYWluLmFwcGVuZENoaWxkKGRlc2VsZWN0KTtcbiAgICAgICAgICAgIGNvbnN0IGFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICAgICAgICAgIGFycm93LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmFycm93KTtcbiAgICAgICAgICAgIGFycm93LnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwIDEwMCcpO1xuICAgICAgICAgICAgY29uc3QgYXJyb3dQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XG4gICAgICAgICAgICBhcnJvd1BhdGguc2V0QXR0cmlidXRlKCdkJywgdGhpcy5jbGFzc2VzLmFycm93Q2xvc2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYWx3YXlzT3Blbikge1xuICAgICAgICAgICAgICAgIGFycm93LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmhpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyb3cuYXBwZW5kQ2hpbGQoYXJyb3dQYXRoKTtcbiAgICAgICAgICAgIG1haW4uYXBwZW5kQ2hpbGQoYXJyb3cpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgICAgIGRlc2VsZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgIG1haW46IGRlc2VsZWN0LFxuICAgICAgICAgICAgICAgICAgICBzdmc6IGRlc2VsZWN0U3ZnLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBkZXNlbGVjdFBhdGhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFycm93OiB7XG4gICAgICAgICAgICAgICAgICAgIG1haW46IGFycm93LFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhcnJvd1BhdGhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG1haW5Gb2N1cyhldmVudFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChldmVudFR5cGUgIT09ICdjbGljaycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGxhY2Vob2xkZXIoKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlck9wdGlvbiA9IHRoaXMuc3RvcmUuZmlsdGVyKChvKSA9PiBvLnBsYWNlaG9sZGVyLCBmYWxzZSk7XG4gICAgICAgICAgICBsZXQgcGxhY2Vob2xkZXJUZXh0ID0gdGhpcy5zZXR0aW5ncy5wbGFjZWhvbGRlclRleHQ7XG4gICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJPcHRpb24ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyT3B0aW9uWzBdLmh0bWwgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVGV4dCA9IHBsYWNlaG9sZGVyT3B0aW9uWzBdLmh0bWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsYWNlaG9sZGVyT3B0aW9uWzBdLnRleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVGV4dCA9IHBsYWNlaG9sZGVyT3B0aW9uWzBdLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmlubmVySFRNTCA9IHBsYWNlaG9sZGVyVGV4dDtcbiAgICAgICAgICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJWYWx1ZXMoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2luZ2xlVmFsdWUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlbmRlck11bHRpcGxlVmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURlc2VsZWN0QWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyU2luZ2xlVmFsdWUoKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuc3RvcmUuZmlsdGVyKChvKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWQgJiYgIW8ucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFNpbmdsZSA9IHNlbGVjdGVkLmxlbmd0aCA+IDAgPyBzZWxlY3RlZFswXSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkU2luZ2xlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLnZhbHVlcy5pbm5lckhUTUwgPSB0aGlzLnBsYWNlaG9sZGVyKCkub3V0ZXJIVE1MO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2luZ2xlVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBzaW5nbGVWYWx1ZS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5zaW5nbGUpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFNpbmdsZS5odG1sKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZVZhbHVlLmlubmVySFRNTCA9IHNlbGVjdGVkU2luZ2xlLmh0bWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVWYWx1ZS5pbm5lclRleHQgPSBzZWxlY3RlZFNpbmdsZS50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1haW4udmFsdWVzLmlubmVySFRNTCA9IHNpbmdsZVZhbHVlLm91dGVySFRNTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5hbGxvd0Rlc2VsZWN0IHx8ICFzZWxlY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW4uZGVzZWxlY3QubWFpbi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5oaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubWFpbi5kZXNlbGVjdC5tYWluLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc2VzLmhpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlck11bHRpcGxlVmFsdWVzKCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnROb2RlcyA9IHRoaXMubWFpbi52YWx1ZXMuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZE9wdGlvbnMgPSB0aGlzLnN0b3JlLmZpbHRlcigob3B0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdC5zZWxlY3RlZCAmJiBvcHQuZGlzcGxheTtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLnZhbHVlcy5pbm5lckhUTUwgPSB0aGlzLnBsYWNlaG9sZGVyKCkub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5tYWluLnZhbHVlcy5xdWVyeVNlbGVjdG9yKCcuJyArIHRoaXMuY2xhc3Nlcy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbnMubGVuZ3RoID4gdGhpcy5zZXR0aW5ncy5tYXhWYWx1ZXNTaG93bikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpbmdsZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgc2luZ2xlVmFsdWUuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMubWF4KTtcbiAgICAgICAgICAgICAgICBzaW5nbGVWYWx1ZS50ZXh0Q29udGVudCA9IHRoaXMuc2V0dGluZ3MubWF4VmFsdWVzTWVzc2FnZS5yZXBsYWNlKCd7bnVtYmVyfScsIHNlbGVjdGVkT3B0aW9ucy5sZW5ndGgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLnZhbHVlcy5pbm5lckhUTUwgPSBzaW5nbGVWYWx1ZS5vdXRlckhUTUw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF4VmFsdWVzTWVzc2FnZSA9IHRoaXMubWFpbi52YWx1ZXMucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLmNsYXNzZXMubWF4KTtcbiAgICAgICAgICAgICAgICBpZiAobWF4VmFsdWVzTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZXNNZXNzYWdlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmtlZXBPcmRlcikge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9ucyA9IHRoaXMuc3RvcmUuc2VsZWN0ZWRPcmRlck9wdGlvbnMoc2VsZWN0ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZW1vdmVOb2RlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gY3VycmVudE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcbiAgICAgICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm91bmQgPSBzZWxlY3RlZE9wdGlvbnMuZmlsdGVyKChvcHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHQuaWQgPT09IGlkO1xuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZm91bmQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHJlbW92ZU5vZGVzKSB7XG4gICAgICAgICAgICAgICAgbi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy52YWx1ZU91dCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1haW4udmFsdWVzLmhhc0NoaWxkTm9kZXMoKSAmJiB0aGlzLm1haW4udmFsdWVzLmNvbnRhaW5zKG4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4udmFsdWVzLnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnROb2RlcyA9IHRoaXMubWFpbi52YWx1ZXMuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgc2VsZWN0ZWRPcHRpb25zLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNob3VsZEFkZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uc1tkXS5pZCA9PT0gU3RyaW5nKGN1cnJlbnROb2Rlc1tpXS5kYXRhc2V0LmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkQWRkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5rZWVwT3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbi52YWx1ZXMuYXBwZW5kQ2hpbGQodGhpcy5tdWx0aXBsZVZhbHVlKHNlbGVjdGVkT3B0aW9uc1tkXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4udmFsdWVzLmFwcGVuZENoaWxkKHRoaXMubXVsdGlwbGVWYWx1ZShzZWxlY3RlZE9wdGlvbnNbZF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4udmFsdWVzLmluc2VydEJlZm9yZSh0aGlzLm11bHRpcGxlVmFsdWUoc2VsZWN0ZWRPcHRpb25zW2RdKSwgY3VycmVudE5vZGVzW2RdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2Rlc1tkIC0gMV0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIHRoaXMubXVsdGlwbGVWYWx1ZShzZWxlY3RlZE9wdGlvbnNbZF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBsZVZhbHVlKG9wdGlvbikge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHZhbHVlLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlLmRhdGFzZXQuaWQgPSBvcHRpb24uaWQ7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0ZXh0LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnZhbHVlVGV4dCk7XG4gICAgICAgICAgICB0ZXh0LnRleHRDb250ZW50ID0gb3B0aW9uLnRleHQ7XG4gICAgICAgICAgICB2YWx1ZS5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgICAgICAgICAgIGlmICghb3B0aW9uLm1hbmRhdG9yeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGV0ZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZURpdi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy52YWx1ZURlbGV0ZSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlRGl2Lm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNob3VsZERlbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWRPcHRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gYmVmb3JlLmZpbHRlcigobykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWQgJiYgby5pZCAhPT0gb3B0aW9uLmlkO1xuICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubWluU2VsZWN0ZWQgJiYgYWZ0ZXIubGVuZ3RoIDwgdGhpcy5zZXR0aW5ncy5taW5TZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrcy5iZWZvcmVDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZERlbGV0ZSA9IHRoaXMuY2FsbGJhY2tzLmJlZm9yZUNoYW5nZShhZnRlciwgYmVmb3JlKSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRGVsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWRJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBhZnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvIGluc3RhbmNlb2YgT3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjIG9mIG8ub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJZHMucHVzaChjLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobyBpbnN0YW5jZW9mIE9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZElkcy5wdXNoKG8uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldFNlbGVjdGVkKHNlbGVjdGVkSWRzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZU9uU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3MuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrcy5hZnRlckNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmFmdGVyQ2hhbmdlKGFmdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRGVzZWxlY3RBbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlU3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICAgICAgICAgICAgICBkZWxldGVTdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAxMDAgMTAwJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZVBhdGguc2V0QXR0cmlidXRlKCdkJywgdGhpcy5jbGFzc2VzLm9wdGlvbkRlbGV0ZSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlU3ZnLmFwcGVuZENoaWxkKGRlbGV0ZVBhdGgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZURpdi5hcHBlbmRDaGlsZChkZWxldGVTdmcpO1xuICAgICAgICAgICAgICAgIHZhbHVlLmFwcGVuZENoaWxkKGRlbGV0ZURpdik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudERpdigpIHtcbiAgICAgICAgICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG1haW4uZGF0YXNldC5pZCA9IHRoaXMuc2V0dGluZ3MuaWQ7XG4gICAgICAgICAgICBjb25zdCBzZWFyY2ggPSB0aGlzLnNlYXJjaERpdigpO1xuICAgICAgICAgICAgbWFpbi5hcHBlbmRDaGlsZChzZWFyY2gubWFpbik7XG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gdGhpcy5saXN0RGl2KCk7XG4gICAgICAgICAgICBtYWluLmFwcGVuZENoaWxkKGxpc3QpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICAgICAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgICAgICAgICAgIGxpc3Q6IGxpc3RcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbW92ZUNvbnRlbnQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jb250ZW50UG9zaXRpb24gPT09ICdyZWxhdGl2ZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVDb250ZW50QmVsb3coKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5vcGVuUG9zaXRpb24gPT09ICdkb3duJykge1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZUNvbnRlbnRCZWxvdygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2V0dGluZ3Mub3BlblBvc2l0aW9uID09PSAndXAnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlQ29udGVudEFib3ZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucHV0Q29udGVudCgpID09PSAndXAnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlQ29udGVudEFib3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVDb250ZW50QmVsb3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWFyY2hEaXYoKSB7XG4gICAgICAgICAgICBjb25zdCBtYWluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBjb25zdCBhZGRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBtYWluLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnNlYXJjaCk7XG4gICAgICAgICAgICBjb25zdCBzZWFyY2hSZXR1cm4gPSB7XG4gICAgICAgICAgICAgICAgbWFpbixcbiAgICAgICAgICAgICAgICBpbnB1dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5zaG93U2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgbWFpbi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5oaWRlKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5yZWFkT25seSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dC50eXBlID0gJ3NlYXJjaCc7XG4gICAgICAgICAgICBpbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuc2V0dGluZ3Muc2VhcmNoUGxhY2Vob2xkZXI7XG4gICAgICAgICAgICBpbnB1dC50YWJJbmRleCA9IC0xO1xuICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGhpcy5zZXR0aW5ncy5zZWFyY2hQbGFjZWhvbGRlcik7XG4gICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2F1dG9jYXBpdGFsaXplJywgJ29mZicpO1xuICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2F1dG9jb3JyZWN0JywgJ29mZicpO1xuICAgICAgICAgICAgaW5wdXQub25pbnB1dCA9IGRlYm91bmNlKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3Muc2VhcmNoKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICBpbnB1dC5vbmtleWRvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmtleSA9PT0gJ0Fycm93RG93bicgPyB0aGlzLmhpZ2hsaWdodCgnZG93bicpIDogdGhpcy5oaWdobGlnaHQoJ3VwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpZ2hsaWdodGVkID0gdGhpcy5jb250ZW50Lmxpc3QucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLmNsYXNzZXMuaGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2tzLmFkZGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRhYmxlLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0ZWQgPSB0aGlzLmNvbnRlbnQubGlzdC5xdWVyeVNlbGVjdG9yKCcuJyArIHRoaXMuY2xhc3Nlcy5oaWdobGlnaHRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbWFpbi5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFja3MuYWRkYWJsZSkge1xuICAgICAgICAgICAgICAgIGFkZGFibGUuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuYWRkYWJsZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGx1cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgICAgICAgICAgcGx1cy5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCAnMCAwIDEwMCAxMDAnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbHVzUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgICAgICAgICAgICAgIHBsdXNQYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMuY2xhc3Nlcy5hZGRhYmxlUGF0aCk7XG4gICAgICAgICAgICAgICAgcGx1cy5hcHBlbmRDaGlsZChwbHVzUGF0aCk7XG4gICAgICAgICAgICAgICAgYWRkYWJsZS5hcHBlbmRDaGlsZChwbHVzKTtcbiAgICAgICAgICAgICAgICBhZGRhYmxlLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYWxsYmFja3MuYWRkYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0VmFsdWUgPSB0aGlzLmNvbnRlbnQuc2VhcmNoLmlucHV0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0VmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuc2VhcmNoLmlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcnVuRmluaXNoID0gKG9vKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3T3B0aW9uID0gbmV3IE9wdGlvbihvbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5hZGRPcHRpb24obmV3T3B0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWRzID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKG5ld09wdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3Muc2V0U2VsZWN0ZWQoaWRzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldFNlbGVjdGVkKFtuZXdPcHRpb24uaWRdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNlYXJjaCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZU9uU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkYWJsZVZhbHVlID0gdGhpcy5jYWxsYmFja3MuYWRkYWJsZShpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZGFibGVWYWx1ZSA9PT0gZmFsc2UgfHwgYWRkYWJsZVZhbHVlID09PSB1bmRlZmluZWQgfHwgYWRkYWJsZVZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZGFibGVWYWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGFibGVWYWx1ZS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkZpbmlzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWRkYWJsZVZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJFcnJvcihhZGRhYmxlVmFsdWUubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5GaW5pc2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhZGRhYmxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5GaW5pc2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGFkZGFibGVWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYWRkYWJsZVZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhZGRhYmxlVmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJFcnJvcihhZGRhYmxlVmFsdWUubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5GaW5pc2goYWRkYWJsZVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBtYWluLmFwcGVuZENoaWxkKGFkZGFibGUpO1xuICAgICAgICAgICAgICAgIHNlYXJjaFJldHVybi5hZGRhYmxlID0ge1xuICAgICAgICAgICAgICAgICAgICBtYWluOiBhZGRhYmxlLFxuICAgICAgICAgICAgICAgICAgICBzdmc6IHBsdXMsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IHBsdXNQYXRoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hSZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2VhcmNoRm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuc2VhcmNoLmlucHV0LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0T3B0aW9ucyhub3RQbGFjZWhvbGRlciA9IGZhbHNlLCBub3REaXNhYmxlZCA9IGZhbHNlLCBub3RIaWRkZW4gPSBmYWxzZSkge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gJy4nICsgdGhpcy5jbGFzc2VzLm9wdGlvbjtcbiAgICAgICAgICAgIGlmIChub3RQbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ICs9ICc6bm90KC4nICsgdGhpcy5jbGFzc2VzLnBsYWNlaG9sZGVyICsgJyknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdERpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gJzpub3QoLicgKyB0aGlzLmNsYXNzZXMuZGlzYWJsZWQgKyAnKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gJzpub3QoLicgKyB0aGlzLmNsYXNzZXMuaGlkZSArICcpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY29udGVudC5saXN0LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpKTtcbiAgICAgICAgfVxuICAgICAgICBoaWdobGlnaHQoZGlyKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKHRydWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zWzBdLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmNsYXNzZXMuaGlnaGxpZ2h0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbMF0uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuaGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGhpZ2hsaWdodGVkID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChvLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmNsYXNzZXMuaGlnaGxpZ2h0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY2xhc3Nlcy5zZWxlY3RlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuaGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1tpXS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jbGFzc2VzLmhpZ2hsaWdodGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2T3B0aW9uID0gb3B0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcHJldk9wdGlvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5oaWdobGlnaHRlZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZQYXJlbnQgPSBwcmV2T3B0aW9uLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2UGFyZW50ICYmIHByZXZQYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY2xhc3Nlcy5vcGVuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0Z3JvdXBMYWJlbCA9IHByZXZQYXJlbnQucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLmNsYXNzZXMub3B0Z3JvdXBMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0Z3JvdXBMYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwTGFiZWwuY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0T3B0aW9uID0gb3B0aW9uc1tkaXIgPT09ICdkb3duJyA/IChpICsgMSA8IG9wdGlvbnMubGVuZ3RoID8gaSArIDEgOiAwKSA6IGkgLSAxID49IDAgPyBpIC0gMSA6IG9wdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5oaWdobGlnaHRlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5zdXJlRWxlbWVudEluVmlldyh0aGlzLmNvbnRlbnQubGlzdCwgc2VsZWN0T3B0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0UGFyZW50ID0gc2VsZWN0T3B0aW9uLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RQYXJlbnQgJiYgc2VsZWN0UGFyZW50LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmNsYXNzZXMuY2xvc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRncm91cExhYmVsID0gc2VsZWN0UGFyZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgdGhpcy5jbGFzc2VzLm9wdGdyb3VwTGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGdyb3VwTGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cExhYmVsLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnNbZGlyID09PSAnZG93bicgPyAwIDogb3B0aW9ucy5sZW5ndGggLSAxXS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5oaWdobGlnaHRlZCk7XG4gICAgICAgICAgICB0aGlzLmVuc3VyZUVsZW1lbnRJblZpZXcodGhpcy5jb250ZW50Lmxpc3QsIG9wdGlvbnNbZGlyID09PSAnZG93bicgPyAwIDogb3B0aW9ucy5sZW5ndGggLSAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdERpdigpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG9wdGlvbnMuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMubGlzdCk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJFcnJvcihlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Lmxpc3QuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZXJyb3JEaXYuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuZXJyb3IpO1xuICAgICAgICAgICAgZXJyb3JEaXYudGV4dENvbnRlbnQgPSBlcnJvcjtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5saXN0LmFwcGVuZENoaWxkKGVycm9yRGl2KTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJTZWFyY2hpbmcoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQubGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaGluZ0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgc2VhcmNoaW5nRGl2LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnNlYXJjaGluZyk7XG4gICAgICAgICAgICBzZWFyY2hpbmdEaXYudGV4dENvbnRlbnQgPSB0aGlzLnNldHRpbmdzLnNlYXJjaGluZ1RleHQ7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQubGlzdC5hcHBlbmRDaGlsZChzZWFyY2hpbmdEaXYpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlck9wdGlvbnMoZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Lmxpc3QuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub1Jlc3VsdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBub1Jlc3VsdHMuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuc2VhcmNoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFja3MuYWRkYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBub1Jlc3VsdHMuaW5uZXJIVE1MID0gdGhpcy5zZXR0aW5ncy5hZGRhYmxlVGV4dC5yZXBsYWNlKCd7dmFsdWV9JywgdGhpcy5jb250ZW50LnNlYXJjaC5pbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub1Jlc3VsdHMuaW5uZXJIVE1MID0gdGhpcy5zZXR0aW5ncy5zZWFyY2hUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQubGlzdC5hcHBlbmRDaGlsZChub1Jlc3VsdHMpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFsbG93RGVzZWxlY3QgJiYgIXRoaXMuc2V0dGluZ3MuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyT3B0aW9uID0gdGhpcy5zdG9yZS5maWx0ZXIoKG8pID0+IG8ucGxhY2Vob2xkZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBsYWNlaG9sZGVyT3B0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLmFkZE9wdGlvbihuZXcgT3B0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSksIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiBPcHRncm91cCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRncm91cEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMub3B0Z3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRncm91cExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwTGFiZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMub3B0Z3JvdXBMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuYXBwZW5kQ2hpbGQob3B0Z3JvdXBMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGdyb3VwTGFiZWxUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwTGFiZWxUZXh0LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLm9wdGdyb3VwTGFiZWxUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXBMYWJlbFRleHQudGV4dENvbnRlbnQgPSBkLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICBvcHRncm91cExhYmVsLmFwcGVuZENoaWxkKG9wdGdyb3VwTGFiZWxUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0Z3JvdXBBY3Rpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwQWN0aW9ucy5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5vcHRncm91cEFjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBvcHRncm91cExhYmVsLmFwcGVuZENoaWxkKG9wdGdyb3VwQWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmlzTXVsdGlwbGUgJiYgZC5zZWxlY3RBbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdEFsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLm9wdGdyb3VwU2VsZWN0QWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbGxTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2YgZC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5zZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RBbGxUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsVGV4dC50ZXh0Q29udGVudCA9IGQuc2VsZWN0QWxsVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbC5hcHBlbmRDaGlsZChzZWxlY3RBbGxUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdEFsbFN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGxTdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAxMDAgMTAwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGwuYXBwZW5kQ2hpbGQoc2VsZWN0QWxsU3ZnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdEFsbEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsQm94LnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMuY2xhc3Nlcy5vcHRncm91cFNlbGVjdEFsbEJveCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGxTdmcuYXBwZW5kQ2hpbGQoc2VsZWN0QWxsQm94KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdEFsbENoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGxDaGVjay5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLmNsYXNzZXMub3B0Z3JvdXBTZWxlY3RBbGxDaGVjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGxTdmcuYXBwZW5kQ2hpbGQoc2VsZWN0QWxsQ2hlY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2VsZWN0ZWQgPSB0aGlzLnN0b3JlLmdldFNlbGVjdGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbFNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1NlbGVjdGVkID0gY3VycmVudFNlbGVjdGVkLmZpbHRlcigocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIGQub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSBvLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldFNlbGVjdGVkKG5ld1NlbGVjdGVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0ZWQgPSBjdXJyZW50U2VsZWN0ZWQuY29uY2F0KGQub3B0aW9ucy5tYXAoKG8pID0+IG8uaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIGQub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0b3JlLmdldE9wdGlvbkJ5SUQoby5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5hZGRPcHRpb24obyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3Muc2V0U2VsZWN0ZWQobmV3U2VsZWN0ZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cEFjdGlvbnMuYXBwZW5kQ2hpbGQoc2VsZWN0QWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5jbG9zYWJsZSAhPT0gJ29mZicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGdyb3VwQ2xvc2FibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwQ2xvc2FibGUuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMub3B0Z3JvdXBDbG9zYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRncm91cENsb3NhYmxlU3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwQ2xvc2FibGVTdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAxMDAgMTAwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cENsb3NhYmxlU3ZnLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmFycm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwQ2xvc2FibGUuYXBwZW5kQ2hpbGQob3B0Z3JvdXBDbG9zYWJsZVN2Zyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRncm91cENsb3NhYmxlQXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwQ2xvc2FibGVTdmcuYXBwZW5kQ2hpbGQob3B0Z3JvdXBDbG9zYWJsZUFycm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLm9wdGlvbnMuc29tZSgobykgPT4gby5zZWxlY3RlZCkgfHwgdGhpcy5jb250ZW50LnNlYXJjaC5pbnB1dC52YWx1ZS50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXBDbG9zYWJsZS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5vcGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cENsb3NhYmxlQXJyb3cuc2V0QXR0cmlidXRlKCdkJywgdGhpcy5jbGFzc2VzLmFycm93T3Blbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkLmNsb3NhYmxlID09PSAnb3BlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cEVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLm9wZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwQ2xvc2FibGVBcnJvdy5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLmNsYXNzZXMuYXJyb3dPcGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGQuY2xvc2FibGUgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cEVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmNsb3NlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cENsb3NhYmxlQXJyb3cuc2V0QXR0cmlidXRlKCdkJywgdGhpcy5jbGFzc2VzLmFycm93Q2xvc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXBMYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGdyb3VwRWwuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY2xhc3Nlcy5jbG9zZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXBFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5jbG9zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMub3Blbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwQ2xvc2FibGVBcnJvdy5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLmNsYXNzZXMuYXJyb3dPcGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMub3Blbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuY2xvc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cENsb3NhYmxlQXJyb3cuc2V0QXR0cmlidXRlKCdkJywgdGhpcy5jbGFzc2VzLmFycm93Q2xvc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXBBY3Rpb25zLmFwcGVuZENoaWxkKG9wdGdyb3VwQ2xvc2FibGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuYXBwZW5kQ2hpbGQob3B0Z3JvdXBMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBkLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuYXBwZW5kQ2hpbGQodGhpcy5vcHRpb24obykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5saXN0LmFwcGVuZENoaWxkKG9wdGdyb3VwRWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mIE9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQubGlzdC5hcHBlbmRDaGlsZCh0aGlzLm9wdGlvbihkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24ucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLm9wdGlvbik7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuaGlkZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG9wdGlvbkVsLmRhdGFzZXQuaWQgPSBvcHRpb24uaWQ7XG4gICAgICAgICAgICBvcHRpb25FbC5pZCA9IG9wdGlvbi5pZDtcbiAgICAgICAgICAgIG9wdGlvbkVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLm9wdGlvbik7XG4gICAgICAgICAgICBvcHRpb25FbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnb3B0aW9uJyk7XG4gICAgICAgICAgICBpZiAob3B0aW9uLmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLmNsYXNzLnNwbGl0KCcgJykuZm9yRWFjaCgoZGF0YUNsYXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsLmNsYXNzTGlzdC5hZGQoZGF0YUNsYXNzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb24uc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC5zdHlsZS5jc3NUZXh0ID0gb3B0aW9uLnN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2VhcmNoSGlnaGxpZ2h0ICYmIHRoaXMuY29udGVudC5zZWFyY2guaW5wdXQudmFsdWUudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbkVsLmlubmVySFRNTCA9IHRoaXMuaGlnaGxpZ2h0VGV4dChvcHRpb24uaHRtbCAhPT0gJycgPyBvcHRpb24uaHRtbCA6IG9wdGlvbi50ZXh0LCB0aGlzLmNvbnRlbnQuc2VhcmNoLmlucHV0LnZhbHVlLCB0aGlzLmNsYXNzZXMuc2VhcmNoSGlnaGxpZ2h0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9uLmh0bWwgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uRWwuaW5uZXJIVE1MID0gb3B0aW9uLmh0bWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC50ZXh0Q29udGVudCA9IG9wdGlvbi50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2hvd09wdGlvblRvb2x0aXBzICYmIG9wdGlvbkVsLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uRWwuc2V0QXR0cmlidXRlKCd0aXRsZScsIG9wdGlvbkVsLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghb3B0aW9uLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5oaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb24uZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5kaXNhYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICYmIHRoaXMuc2V0dGluZ3MuaGlkZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuaGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuc2VsZWN0ZWQpO1xuICAgICAgICAgICAgICAgIG9wdGlvbkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLm1haW4uc2V0QXR0cmlidXRlKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBvcHRpb25FbC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5zZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgb3B0aW9uRWwuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRPcHRpb25zID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudElEID0gU3RyaW5nKGVsZW1lbnQuZGF0YXNldC5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5kaXNhYmxlZCB8fCAob3B0aW9uLnNlbGVjdGVkICYmICF0aGlzLnNldHRpbmdzLmFsbG93RGVzZWxlY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLnNldHRpbmdzLmlzTXVsdGlwbGUgJiYgdGhpcy5zZXR0aW5ncy5tYXhTZWxlY3RlZCA8PSBzZWxlY3RlZE9wdGlvbnMubGVuZ3RoICYmICFvcHRpb24uc2VsZWN0ZWQpIHx8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnNldHRpbmdzLmlzTXVsdGlwbGUgJiYgdGhpcy5zZXR0aW5ncy5taW5TZWxlY3RlZCA+PSBzZWxlY3RlZE9wdGlvbnMubGVuZ3RoICYmIG9wdGlvbi5zZWxlY3RlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgc2hvdWxkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZE9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICBsZXQgYWZ0ZXIgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyID0gYmVmb3JlLmZpbHRlcigobykgPT4gby5pZCAhPT0gZWxlbWVudElEKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyID0gYmVmb3JlLmNvbmNhdChvcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlciA9IFtvcHRpb25dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYWxsYmFja3MuYmVmb3JlQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrcy5iZWZvcmVDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2tzLmJlZm9yZUNoYW5nZShhZnRlciwgYmVmb3JlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdG9yZS5nZXRPcHRpb25CeUlEKGVsZW1lbnRJRCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmFkZE9wdGlvbihvcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldFNlbGVjdGVkKGFmdGVyLm1hcCgobykgPT4gby5pZCksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY2xvc2VPblNlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3MuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFja3MuYWZ0ZXJDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmFmdGVyQ2hhbmdlKGFmdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbkVsO1xuICAgICAgICB9XG4gICAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGhpZ2hsaWdodFRleHQoc3RyLCBzZWFyY2gsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgbGV0IGNvbXBsZXRlZFN0cmluZyA9IHN0cjtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnKD8hW148XSo+KSgnICsgc2VhcmNoLnRyaW0oKSArICcpKD8hW148XSo+W148Pl0qPC8pJywgJ2knKTtcbiAgICAgICAgICAgIGlmICghc3RyLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtYXRjaFN0YXJ0UG9zaXRpb24gPSBzdHIubWF0Y2gocmVnZXgpLmluZGV4O1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hFbmRQb3NpdGlvbiA9IG1hdGNoU3RhcnRQb3NpdGlvbiArIHN0ci5tYXRjaChyZWdleClbMF0udG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFRleHRGb3VuZEJ5UmVnZXggPSBzdHIuc3Vic3RyaW5nKG1hdGNoU3RhcnRQb3NpdGlvbiwgbWF0Y2hFbmRQb3NpdGlvbik7XG4gICAgICAgICAgICBjb21wbGV0ZWRTdHJpbmcgPSBjb21wbGV0ZWRTdHJpbmcucmVwbGFjZShyZWdleCwgYDxtYXJrIGNsYXNzPVwiJHtjbGFzc05hbWV9XCI+JHtvcmlnaW5hbFRleHRGb3VuZEJ5UmVnZXh9PC9tYXJrPmApO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZFN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBtb3ZlQ29udGVudEFib3ZlKCkge1xuICAgICAgICAgICAgY29uc3QgbWFpbkhlaWdodCA9IHRoaXMubWFpbi5tYWluLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSB0aGlzLmNvbnRlbnQubWFpbi5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5vcGVuQmVsb3cpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1haW4uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMub3BlbkFib3ZlKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc2VzLm9wZW5CZWxvdyk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQubWFpbi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5vcGVuQWJvdmUpO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUmVjdCA9IHRoaXMubWFpbi5tYWluLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Lm1haW4uc3R5bGUubWFyZ2luID0gJy0nICsgKG1haW5IZWlnaHQgKyBjb250ZW50SGVpZ2h0IC0gMSkgKyAncHggMHB4IDBweCAwcHgnO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Lm1haW4uc3R5bGUudG9wID0gY29udGFpbmVyUmVjdC50b3AgKyBjb250YWluZXJSZWN0LmhlaWdodCArIHdpbmRvdy5zY3JvbGxZICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLnN0eWxlLmxlZnQgPSBjb250YWluZXJSZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCArICdweCc7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQubWFpbi5zdHlsZS53aWR0aCA9IGNvbnRhaW5lclJlY3Qud2lkdGggKyAncHgnO1xuICAgICAgICB9XG4gICAgICAgIG1vdmVDb250ZW50QmVsb3coKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWFpbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5vcGVuQWJvdmUpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1haW4uY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMub3BlbkJlbG93KTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc2VzLm9wZW5BYm92ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQubWFpbi5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5vcGVuQmVsb3cpO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUmVjdCA9IHRoaXMubWFpbi5tYWluLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Lm1haW4uc3R5bGUubWFyZ2luID0gJy0xcHggMHB4IDBweCAwcHgnO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY29udGVudFBvc2l0aW9uICE9PSAncmVsYXRpdmUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50Lm1haW4uc3R5bGUudG9wID0gY29udGFpbmVyUmVjdC50b3AgKyBjb250YWluZXJSZWN0LmhlaWdodCArIHdpbmRvdy5zY3JvbGxZICsgJ3B4JztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQubWFpbi5zdHlsZS5sZWZ0ID0gY29udGFpbmVyUmVjdC5sZWZ0ICsgd2luZG93LnNjcm9sbFggKyAncHgnO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5tYWluLnN0eWxlLndpZHRoID0gY29udGFpbmVyUmVjdC53aWR0aCArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZW5zdXJlRWxlbWVudEluVmlldyhjb250YWluZXIsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNUb3AgPSBjb250YWluZXIuc2Nyb2xsVG9wICsgY29udGFpbmVyLm9mZnNldFRvcDtcbiAgICAgICAgICAgIGNvbnN0IGNCb3R0b20gPSBjVG9wICsgY29udGFpbmVyLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGVUb3AgPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICAgIGNvbnN0IGVCb3R0b20gPSBlVG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICBpZiAoZVRvcCA8IGNUb3ApIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc2Nyb2xsVG9wIC09IGNUb3AgLSBlVG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZUJvdHRvbSA+IGNCb3R0b20pIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc2Nyb2xsVG9wICs9IGVCb3R0b20gLSBjQm90dG9tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1dENvbnRlbnQoKSB7XG4gICAgICAgICAgICBjb25zdCBtYWluSGVpZ2h0ID0gdGhpcy5tYWluLm1haW4ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgbWFpblJlY3QgPSB0aGlzLm1haW4ubWFpbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSB0aGlzLmNvbnRlbnQubWFpbi5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBzcGFjZUJlbG93ID0gd2luZG93LmlubmVySGVpZ2h0IC0gKG1haW5SZWN0LnRvcCArIG1haW5IZWlnaHQpO1xuICAgICAgICAgICAgaWYgKHNwYWNlQmVsb3cgPD0gY29udGVudEhlaWdodCkge1xuICAgICAgICAgICAgICAgIGlmIChtYWluUmVjdC50b3AgPiBjb250ZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZURlc2VsZWN0QWxsKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0b3JlIHx8ICF0aGlzLnNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnN0b3JlLmdldFNlbGVjdGVkT3B0aW9ucygpO1xuICAgICAgICAgICAgY29uc3QgaGFzU2VsZWN0ZWRJdGVtcyA9IHNlbGVjdGVkICYmIHNlbGVjdGVkLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBjb25zdCBpc011bHRpcGxlID0gdGhpcy5zZXR0aW5ncy5pc011bHRpcGxlO1xuICAgICAgICAgICAgY29uc3QgYWxsb3dEZXNlbGVjdCA9IHRoaXMuc2V0dGluZ3MuYWxsb3dEZXNlbGVjdDtcbiAgICAgICAgICAgIGNvbnN0IGRlc2VsZWN0QnV0dG9uID0gdGhpcy5tYWluLmRlc2VsZWN0Lm1haW47XG4gICAgICAgICAgICBjb25zdCBoaWRlQ2xhc3MgPSB0aGlzLmNsYXNzZXMuaGlkZTtcbiAgICAgICAgICAgIGlmIChhbGxvd0Rlc2VsZWN0ICYmICEoaXNNdWx0aXBsZSAmJiAhaGFzU2VsZWN0ZWRJdGVtcykpIHtcbiAgICAgICAgICAgICAgICBkZXNlbGVjdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKGhpZGVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXNlbGVjdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKGhpZGVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGFzcyBTZWxlY3Qge1xuICAgICAgICBjb25zdHJ1Y3RvcihzZWxlY3QpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ID0gc2VsZWN0O1xuICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZSA9IHRoaXMudmFsdWVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudmFsdWVDaGFuZ2UsIHtcbiAgICAgICAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLm9ic2VydmVDYWxsLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW4odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5hYmxlKCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBkaXNhYmxlKCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGhpZGVVSSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0LnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Quc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2hvd1VJKCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Quc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgICAgICB9XG4gICAgICAgIGNoYW5nZUxpc3RlbihsaXN0ZW4pIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuID0gbGlzdGVuO1xuICAgICAgICAgICAgaWYgKGxpc3Rlbikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnNlbGVjdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFsaXN0ZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVDaGFuZ2UoZXYpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbiAmJiB0aGlzLm9uVmFsdWVDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uVmFsdWVDaGFuZ2UodGhpcy5nZXRTZWxlY3RlZE9wdGlvbnMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYnNlcnZlQ2FsbChtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5saXN0ZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2xhc3NDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgZGlzYWJsZWRDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgb3B0Z3JvdXBPcHRpb25DaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG0gb2YgbXV0YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKG0udGFyZ2V0ID09PSB0aGlzLnNlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobS5hdHRyaWJ1dGVOYW1lID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZENoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtLmF0dHJpYnV0ZU5hbWUgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG0udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBtLmFkZGVkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5ub2RlTmFtZSA9PT0gJ09QVElPTicgJiYgbi52YWx1ZSA9PT0gdGhpcy5zZWxlY3QudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXBPcHRpb25DaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS50YXJnZXQubm9kZU5hbWUgPT09ICdPUFRHUk9VUCcgfHwgbS50YXJnZXQubm9kZU5hbWUgPT09ICdPUFRJT04nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwT3B0aW9uQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNsYXNzQ2hhbmdlZCAmJiB0aGlzLm9uQ2xhc3NDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xhc3NDaGFuZ2UodGhpcy5zZWxlY3QuY2xhc3NOYW1lLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpc2FibGVkQ2hhbmdlZCAmJiB0aGlzLm9uRGlzYWJsZWRDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2FibGVkQ2hhbmdlKHRoaXMuc2VsZWN0LmRpc2FibGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUxpc3Rlbih0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRncm91cE9wdGlvbkNoYW5nZWQgJiYgdGhpcy5vbk9wdGlvbnNDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk9wdGlvbnNDaGFuZ2UodGhpcy5nZXREYXRhKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldERhdGEoKSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IFtdO1xuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLnNlbGVjdC5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIG5vZGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4ubm9kZU5hbWUgPT09ICdPUFRHUk9VUCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKHRoaXMuZ2V0RGF0YUZyb21PcHRncm91cChuKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuLm5vZGVOYW1lID09PSAnT1BUSU9OJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2godGhpcy5nZXREYXRhRnJvbU9wdGlvbihuKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0RGF0YUZyb21PcHRncm91cChvcHRncm91cCkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG9wdGdyb3VwLmlkLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRncm91cC5sYWJlbCxcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IG9wdGdyb3VwLmRhdGFzZXQgPyBvcHRncm91cC5kYXRhc2V0LnNlbGVjdGFsbCA9PT0gJ3RydWUnIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsVGV4dDogb3B0Z3JvdXAuZGF0YXNldCA/IG9wdGdyb3VwLmRhdGFzZXQuc2VsZWN0YWxsdGV4dCA6ICdTZWxlY3QgYWxsJyxcbiAgICAgICAgICAgICAgICBjbG9zYWJsZTogb3B0Z3JvdXAuZGF0YXNldCA/IG9wdGdyb3VwLmRhdGFzZXQuY2xvc2FibGUgOiAnb2ZmJyxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRncm91cC5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoby5ub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5vcHRpb25zLnB1c2godGhpcy5nZXREYXRhRnJvbU9wdGlvbihvKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0RGF0YUZyb21PcHRpb24ob3B0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBvcHRpb24uaWQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG9wdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBvcHRpb24udGV4dCxcbiAgICAgICAgICAgICAgICBodG1sOiBvcHRpb24uZGF0YXNldCAmJiBvcHRpb24uZGF0YXNldC5odG1sID8gb3B0aW9uLmRhdGFzZXQuaHRtbCA6ICcnLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBvcHRpb24uc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogb3B0aW9uLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogb3B0aW9uLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgIG1hbmRhdG9yeTogb3B0aW9uLmRhdGFzZXQgPyBvcHRpb24uZGF0YXNldC5tYW5kYXRvcnkgPT09ICd0cnVlJyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRpb24uZGF0YXNldC5wbGFjZWhvbGRlciA9PT0gJ3RydWUnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBvcHRpb24uY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBvcHRpb24uc3R5bGUuY3NzVGV4dCxcbiAgICAgICAgICAgICAgICBkYXRhOiBvcHRpb24uZGF0YXNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBnZXRTZWxlY3RlZE9wdGlvbnMoKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMuc2VsZWN0LmNoaWxkTm9kZXM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb3B0cykge1xuICAgICAgICAgICAgICAgIGlmIChvLm5vZGVOYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGdyb3VwT3B0aW9ucyA9IG8uY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvbyBvZiBvcHRncm91cE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvby5ub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBvbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh0aGlzLmdldERhdGFGcm9tT3B0aW9uKG9wdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoby5ub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gbztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHRoaXMuZ2V0RGF0YUZyb21PcHRpb24ob3B0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBnZXRTZWxlY3RlZFZhbHVlcygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGVkT3B0aW9ucygpLm1hcCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHNldFNlbGVjdGVkKGlkcykge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW4oZmFsc2UpO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuc2VsZWN0LmNoaWxkTm9kZXM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChvLm5vZGVOYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGdyb3VwID0gbztcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0Z3JvdXBPcHRpb25zID0gb3B0Z3JvdXAuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvbyBvZiBvcHRncm91cE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvby5ub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBvbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpZHMuaW5jbHVkZXMob3B0aW9uLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoby5ub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gbztcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gaWRzLmluY2x1ZGVzKG9wdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW4odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0U2VsZWN0ZWRCeVZhbHVlKHZhbHVlcykge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW4oZmFsc2UpO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuc2VsZWN0LmNoaWxkTm9kZXM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChvLm5vZGVOYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGdyb3VwID0gbztcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0Z3JvdXBPcHRpb25zID0gb3B0Z3JvdXAuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvbyBvZiBvcHRncm91cE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvby5ub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBvbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZXMuaW5jbHVkZXMob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoby5ub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gbztcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdmFsdWVzLmluY2x1ZGVzKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW4odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlU2VsZWN0KGlkLCBzdHlsZSwgY2xhc3Nlcykge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW4oZmFsc2UpO1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QuZGF0YXNldC5pZCA9IGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Quc3R5bGUuY3NzVGV4dCA9IHN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdC5jbGFzc05hbWUgPSAnJztcbiAgICAgICAgICAgICAgICBjbGFzc2VzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QuY2xhc3NMaXN0LmFkZChjLnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZU9wdGlvbnMoZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW4oZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgT3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVPcHRncm91cChkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0LmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlT3B0aW9uKGQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZU9wdGdyb3VwKG9wdGdyb3VwKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRncm91cEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKTtcbiAgICAgICAgICAgIG9wdGdyb3VwRWwuaWQgPSBvcHRncm91cC5pZDtcbiAgICAgICAgICAgIG9wdGdyb3VwRWwubGFiZWwgPSBvcHRncm91cC5sYWJlbDtcbiAgICAgICAgICAgIGlmIChvcHRncm91cC5zZWxlY3RBbGwpIHtcbiAgICAgICAgICAgICAgICBvcHRncm91cEVsLmRhdGFzZXQuc2VsZWN0QWxsID0gJ3RydWUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGdyb3VwLmNsb3NhYmxlICE9PSAnb2ZmJykge1xuICAgICAgICAgICAgICAgIG9wdGdyb3VwRWwuZGF0YXNldC5jbG9zYWJsZSA9IG9wdGdyb3VwLmNsb3NhYmxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGdyb3VwLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb3B0Z3JvdXAub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBvcHRncm91cEVsLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlT3B0aW9uKG8pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3B0Z3JvdXBFbDtcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGVPcHRpb24oaW5mbykge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIG9wdGlvbkVsLmlkID0gaW5mby5pZDtcbiAgICAgICAgICAgIG9wdGlvbkVsLnZhbHVlID0gaW5mby52YWx1ZTtcbiAgICAgICAgICAgIG9wdGlvbkVsLnRleHRDb250ZW50ID0gaW5mby50ZXh0O1xuICAgICAgICAgICAgaWYgKGluZm8uaHRtbCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaHRtbCcsIGluZm8uaHRtbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5mby5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbkVsLnNlbGVjdGVkID0gaW5mby5zZWxlY3RlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmZvLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uRWwuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbmZvLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZm8ucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25FbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGxhY2Vob2xkZXInLCAndHJ1ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZm8ubWFuZGF0b3J5KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uRWwuc2V0QXR0cmlidXRlKCdkYXRhLW1hbmRhdG9yeScsICd0cnVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5mby5jbGFzcykge1xuICAgICAgICAgICAgICAgIGluZm8uY2xhc3Muc3BsaXQoJyAnKS5mb3JFYWNoKChvcHRpb25DbGFzcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25FbC5jbGFzc0xpc3QuYWRkKG9wdGlvbkNsYXNzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmZvLmRhdGEgJiYgdHlwZW9mIGluZm8uZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhpbmZvLmRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25FbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGtlYmFiQ2FzZShrZXkpLCBpbmZvLmRhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uRWw7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudmFsdWVDaGFuZ2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNlbGVjdC5kYXRhc2V0LmlkO1xuICAgICAgICAgICAgdGhpcy5zaG93VUkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsYXNzIFNldHRpbmdzIHtcbiAgICAgICAgY29uc3RydWN0b3Ioc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSAnJztcbiAgICAgICAgICAgIHRoaXMuc3R5bGUgPSAnJztcbiAgICAgICAgICAgIHRoaXMuY2xhc3MgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuaXNNdWx0aXBsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNGdWxsT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbE1vdmUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlkID0gJ3NzLScgKyBnZW5lcmF0ZUlEKCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlID0gc2V0dGluZ3Muc3R5bGUgfHwgJyc7XG4gICAgICAgICAgICB0aGlzLmNsYXNzID0gc2V0dGluZ3MuY2xhc3MgfHwgW107XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gc2V0dGluZ3MuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCA/IHNldHRpbmdzLmRpc2FibGVkIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmFsd2F5c09wZW4gPSBzZXR0aW5ncy5hbHdheXNPcGVuICE9PSB1bmRlZmluZWQgPyBzZXR0aW5ncy5hbHdheXNPcGVuIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnNob3dTZWFyY2ggPSBzZXR0aW5ncy5zaG93U2VhcmNoICE9PSB1bmRlZmluZWQgPyBzZXR0aW5ncy5zaG93U2VhcmNoIDogdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNTZWFyY2ggPSBzZXR0aW5ncy5mb2N1c1NlYXJjaCAhPT0gdW5kZWZpbmVkID8gc2V0dGluZ3MuZm9jdXNTZWFyY2ggOiB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hcmlhTGFiZWwgPSBzZXR0aW5ncy5hcmlhTGFiZWwgfHwgJ0NvbWJvYm94JztcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoUGxhY2Vob2xkZXIgPSBzZXR0aW5ncy5zZWFyY2hQbGFjZWhvbGRlciB8fCAnU2VhcmNoJztcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoVGV4dCA9IHNldHRpbmdzLnNlYXJjaFRleHQgfHwgJ05vIFJlc3VsdHMnO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hpbmdUZXh0ID0gc2V0dGluZ3Muc2VhcmNoaW5nVGV4dCB8fCAnU2VhcmNoaW5nLi4uJztcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoSGlnaGxpZ2h0ID0gc2V0dGluZ3Muc2VhcmNoSGlnaGxpZ2h0ICE9PSB1bmRlZmluZWQgPyBzZXR0aW5ncy5zZWFyY2hIaWdobGlnaHQgOiBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VPblNlbGVjdCA9IHNldHRpbmdzLmNsb3NlT25TZWxlY3QgIT09IHVuZGVmaW5lZCA/IHNldHRpbmdzLmNsb3NlT25TZWxlY3QgOiB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50TG9jYXRpb24gPSBzZXR0aW5ncy5jb250ZW50TG9jYXRpb24gfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudFBvc2l0aW9uID0gc2V0dGluZ3MuY29udGVudFBvc2l0aW9uIHx8ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICB0aGlzLm9wZW5Qb3NpdGlvbiA9IHNldHRpbmdzLm9wZW5Qb3NpdGlvbiB8fCAnYXV0byc7XG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyVGV4dCA9IHNldHRpbmdzLnBsYWNlaG9sZGVyVGV4dCAhPT0gdW5kZWZpbmVkID8gc2V0dGluZ3MucGxhY2Vob2xkZXJUZXh0IDogJ1NlbGVjdCBWYWx1ZSc7XG4gICAgICAgICAgICB0aGlzLmFsbG93RGVzZWxlY3QgPSBzZXR0aW5ncy5hbGxvd0Rlc2VsZWN0ICE9PSB1bmRlZmluZWQgPyBzZXR0aW5ncy5hbGxvd0Rlc2VsZWN0IDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmhpZGVTZWxlY3RlZCA9IHNldHRpbmdzLmhpZGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkID8gc2V0dGluZ3MuaGlkZVNlbGVjdGVkIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmtlZXBPcmRlciA9IHNldHRpbmdzLmtlZXBPcmRlciAhPT0gdW5kZWZpbmVkID8gc2V0dGluZ3Mua2VlcE9yZGVyIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnNob3dPcHRpb25Ub29sdGlwcyA9IHNldHRpbmdzLnNob3dPcHRpb25Ub29sdGlwcyAhPT0gdW5kZWZpbmVkID8gc2V0dGluZ3Muc2hvd09wdGlvblRvb2x0aXBzIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm1pblNlbGVjdGVkID0gc2V0dGluZ3MubWluU2VsZWN0ZWQgfHwgMDtcbiAgICAgICAgICAgIHRoaXMubWF4U2VsZWN0ZWQgPSBzZXR0aW5ncy5tYXhTZWxlY3RlZCB8fCAxMDAwO1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0RGVsYXkgPSBzZXR0aW5ncy50aW1lb3V0RGVsYXkgfHwgMjAwO1xuICAgICAgICAgICAgdGhpcy5tYXhWYWx1ZXNTaG93biA9IHNldHRpbmdzLm1heFZhbHVlc1Nob3duIHx8IDIwO1xuICAgICAgICAgICAgdGhpcy5tYXhWYWx1ZXNNZXNzYWdlID0gc2V0dGluZ3MubWF4VmFsdWVzTWVzc2FnZSB8fCAne251bWJlcn0gc2VsZWN0ZWQnO1xuICAgICAgICAgICAgdGhpcy5hZGRhYmxlVGV4dCA9IHNldHRpbmdzLmFkZGFibGVUZXh0IHx8ICdQcmVzcyBcIkVudGVyXCIgdG8gYWRkIHt2YWx1ZX0nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xhc3MgU2xpbVNlbGVjdCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdGhpcy5ldmVudHMgPSB7XG4gICAgICAgICAgICAgICAgc2VhcmNoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc2VhcmNoRmlsdGVyOiAob3B0LCBzZWFyY2gpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdC50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2gudG9Mb3dlckNhc2UoKSkgIT09IC0xO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWRkYWJsZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGJlZm9yZUNoYW5nZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGFmdGVyQ2hhbmdlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYmVmb3JlT3BlbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGFmdGVyT3BlbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGJlZm9yZUNsb3NlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWZ0ZXJDbG9zZTogdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy53aW5kb3dSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmlzT3BlbiAmJiAhdGhpcy5zZXR0aW5ncy5pc0Z1bGxPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIubW92ZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dTY3JvbGwgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmlzT3BlbiAmJiAhdGhpcy5zZXR0aW5ncy5pc0Z1bGxPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIubW92ZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICYmICFoYXNDbGFzc0luVHJlZShlLnRhcmdldCwgdGhpcy5zZXR0aW5ncy5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZShlLnR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLndpbmRvd1Zpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RWwgPSAodHlwZW9mIGNvbmZpZy5zZWxlY3QgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuc2VsZWN0KSA6IGNvbmZpZy5zZWxlY3QpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdEVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5ldmVudHMgJiYgY29uZmlnLmV2ZW50cy5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuZXZlbnRzLmVycm9yKG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgc2VsZWN0IGVsZW1lbnQnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdEVsLnRhZ05hbWUgIT09ICdTRUxFQ1QnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5ldmVudHMgJiYgY29uZmlnLmV2ZW50cy5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuZXZlbnRzLmVycm9yKG5ldyBFcnJvcignRWxlbWVudCBpc250IG9mIHR5cGUgc2VsZWN0JykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RFbC5kYXRhc2V0LnNzaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoY29uZmlnLnNldHRpbmdzKTtcbiAgICAgICAgICAgIHRoaXMuY3NzQ2xhc3NlcyA9IG5ldyBDc3NDbGFzc2VzKGNvbmZpZy5jc3NDbGFzc2VzKTtcbiAgICAgICAgICAgIGNvbnN0IGRlYm91bmNlRXZlbnRzID0gWydhZnRlckNoYW5nZScsICdiZWZvcmVPcGVuJywgJ2FmdGVyT3BlbicsICdiZWZvcmVDbG9zZScsICdhZnRlckNsb3NlJ107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb25maWcuZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb25maWcuZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkZWJvdW5jZUV2ZW50cy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzW2tleV0gPSBkZWJvdW5jZShjb25maWcuZXZlbnRzW2tleV0sIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c1trZXldID0gY29uZmlnLmV2ZW50c1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZGlzYWJsZWQgPSAoKF9hID0gY29uZmlnLnNldHRpbmdzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzYWJsZWQpID8gY29uZmlnLnNldHRpbmdzLmRpc2FibGVkIDogdGhpcy5zZWxlY3RFbC5kaXNhYmxlZDtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuaXNNdWx0aXBsZSA9IHRoaXMuc2VsZWN0RWwubXVsdGlwbGU7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnN0eWxlID0gdGhpcy5zZWxlY3RFbC5zdHlsZS5jc3NUZXh0O1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5jbGFzcyA9IHRoaXMuc2VsZWN0RWwuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdCA9IG5ldyBTZWxlY3QodGhpcy5zZWxlY3RFbCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC51cGRhdGVTZWxlY3QodGhpcy5zZXR0aW5ncy5pZCwgdGhpcy5zZXR0aW5ncy5zdHlsZSwgdGhpcy5zZXR0aW5ncy5jbGFzcyk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC5oaWRlVUkoKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Lm9uVmFsdWVDaGFuZ2UgPSAob3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWQob3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLmlkKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Qub25DbGFzc0NoYW5nZSA9IChjbGFzc2VzKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5jbGFzcyA9IGNsYXNzZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIudXBkYXRlQ2xhc3NTdHlsZXMoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC5vbkRpc2FibGVkQ2hhbmdlID0gKGRpc2FibGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Qub25PcHRpb25zQ2hhbmdlID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldERhdGEoZGF0YSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zdG9yZSA9IG5ldyBTdG9yZSh0aGlzLnNldHRpbmdzLmlzTXVsdGlwbGUgPyAnbXVsdGlwbGUnIDogJ3NpbmdsZScsIGNvbmZpZy5kYXRhID8gY29uZmlnLmRhdGEgOiB0aGlzLnNlbGVjdC5nZXREYXRhKCkpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QudXBkYXRlT3B0aW9ucyh0aGlzLnN0b3JlLmdldERhdGEoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZW5kZXJDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICAgICAgb3BlbjogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgY2xvc2U6IHRoaXMuY2xvc2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBhZGRhYmxlOiB0aGlzLmV2ZW50cy5hZGRhYmxlID8gdGhpcy5ldmVudHMuYWRkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZDogdGhpcy5zZXRTZWxlY3RlZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIGFkZE9wdGlvbjogdGhpcy5hZGRPcHRpb24uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBzZWFyY2g6IHRoaXMuc2VhcmNoLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgYmVmb3JlQ2hhbmdlOiB0aGlzLmV2ZW50cy5iZWZvcmVDaGFuZ2UsXG4gICAgICAgICAgICAgICAgYWZ0ZXJDaGFuZ2U6IHRoaXMuZXZlbnRzLmFmdGVyQ2hhbmdlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIgPSBuZXcgUmVuZGVyKHRoaXMuc2V0dGluZ3MsIHRoaXMuY3NzQ2xhc3NlcywgdGhpcy5zdG9yZSwgcmVuZGVyQ2FsbGJhY2tzKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbmRlclZhbHVlcygpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVuZGVyT3B0aW9ucyh0aGlzLnN0b3JlLmdldERhdGEoKSk7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RBcmlhTGFiZWwgPSB0aGlzLnNlbGVjdEVsLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0QXJpYUxhYmVsbGVkQnkgPSB0aGlzLnNlbGVjdEVsLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5Jyk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0QXJpYUxhYmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIubWFpbi5tYWluLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHNlbGVjdEFyaWFMYWJlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RBcmlhTGFiZWxsZWRCeSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLm1haW4ubWFpbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIHNlbGVjdEFyaWFMYWJlbGxlZEJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdEVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucmVuZGVyLm1haW4ubWFpbiwgdGhpcy5zZWxlY3RFbC5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy53aW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm9wZW5Qb3NpdGlvbiA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMud2luZG93U2Nyb2xsLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy53aW5kb3dWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbHdheXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEVsLnNsaW0gPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVuYWJsZSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0LmVuYWJsZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIuZW5hYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGlzYWJsZSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QuZGlzYWJsZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIuZGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGdldERhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXREYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0RGF0YShkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWQoKTtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IHRoaXMuc3RvcmUudmFsaWRhdGVEYXRhQXJyYXkoZGF0YSk7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RvcmUuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFDbGVhbiA9IHRoaXMuc3RvcmUuZ2V0RGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QudXBkYXRlT3B0aW9ucyhkYXRhQ2xlYW4pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVuZGVyVmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlci5yZW5kZXJPcHRpb25zKGRhdGFDbGVhbik7XG4gICAgICAgICAgICBpZiAodGhpcy5ldmVudHMuYWZ0ZXJDaGFuZ2UgJiYgIWlzRXF1YWwoc2VsZWN0ZWQsIHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWQoKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5hZnRlckNoYW5nZSh0aGlzLnN0b3JlLmdldFNlbGVjdGVkT3B0aW9ucygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnZXRTZWxlY3RlZCgpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZE9wdGlvbnMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmtlZXBPcmRlcikge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLnN0b3JlLnNlbGVjdGVkT3JkZXJPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0U2VsZWN0ZWQodmFsdWVzLCBydW5BZnRlckNoYW5nZSA9IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZCgpO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuc3RvcmUuZ2V0RGF0YU9wdGlvbnMoKTtcbiAgICAgICAgICAgIHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodmFsdWVzKSA/IHZhbHVlcyA6IFt2YWx1ZXNdO1xuICAgICAgICAgICAgY29uc3QgaWRzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLmlkID09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZHMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKG9wdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXRTZWxlY3RlZEJ5KCdpZCcsIGlkcyk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5zdG9yZS5nZXREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC51cGRhdGVPcHRpb25zKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVuZGVyVmFsdWVzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZW5kZXIuY29udGVudC5zZWFyY2guaW5wdXQudmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2godGhpcy5yZW5kZXIuY29udGVudC5zZWFyY2guaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVuZGVyT3B0aW9ucyhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydW5BZnRlckNoYW5nZSAmJiB0aGlzLmV2ZW50cy5hZnRlckNoYW5nZSAmJiAhaXNFcXVhbChzZWxlY3RlZCwgdGhpcy5zdG9yZS5nZXRTZWxlY3RlZCgpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmFmdGVyQ2hhbmdlKHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWRPcHRpb25zKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZE9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0b3JlLmdldERhdGFPcHRpb25zKCkuc29tZSgobykgPT4geyB2YXIgX2E7IHJldHVybiBvLnZhbHVlID09PSAoKF9hID0gb3B0aW9uLnZhbHVlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvcHRpb24udGV4dCk7IH0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yZS5hZGRPcHRpb24ob3B0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnN0b3JlLmdldERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0LnVwZGF0ZU9wdGlvbnMoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlci5yZW5kZXJWYWx1ZXMoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbmRlck9wdGlvbnMoZGF0YSk7XG4gICAgICAgICAgICBpZiAodGhpcy5ldmVudHMuYWZ0ZXJDaGFuZ2UgJiYgIWlzRXF1YWwoc2VsZWN0ZWQsIHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWQoKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5hZnRlckNoYW5nZSh0aGlzLnN0b3JlLmdldFNlbGVjdGVkT3B0aW9ucygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvcGVuKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGlzYWJsZWQgfHwgdGhpcy5zZXR0aW5ncy5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5ldmVudHMuYmVmb3JlT3Blbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmJlZm9yZU9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVuZGVyLm9wZW4oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dTZWFyY2ggJiYgdGhpcy5zZXR0aW5ncy5mb2N1c1NlYXJjaCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNlYXJjaEZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ldmVudHMuYWZ0ZXJPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmFmdGVyT3BlbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5pc0Z1bGxPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRvY3VtZW50Q2xpY2spO1xuICAgICAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy50aW1lb3V0RGVsYXkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY29udGVudFBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaW50ZXJ2YWxNb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zZXR0aW5ncy5pbnRlcnZhbE1vdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmludGVydmFsTW92ZSA9IHNldEludGVydmFsKHRoaXMucmVuZGVyLm1vdmVDb250ZW50LmJpbmQodGhpcy5yZW5kZXIpLCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNsb3NlKGV2ZW50VHlwZSA9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5pc09wZW4gfHwgdGhpcy5zZXR0aW5ncy5hbHdheXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmJlZm9yZUNsb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMuYmVmb3JlQ2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVuZGVyLmNsb3NlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZW5kZXIuY29udGVudC5zZWFyY2guaW5wdXQudmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW5kZXIubWFpbkZvY3VzKGV2ZW50VHlwZSk7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5pc0Z1bGxPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ldmVudHMuYWZ0ZXJDbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5hZnRlckNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5kb2N1bWVudENsaWNrKTtcbiAgICAgICAgICAgIH0sIHRoaXMuc2V0dGluZ3MudGltZW91dERlbGF5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmludGVydmFsTW92ZSkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zZXR0aW5ncy5pbnRlcnZhbE1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNlYXJjaCh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyLmNvbnRlbnQuc2VhcmNoLmlucHV0LnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmNvbnRlbnQuc2VhcmNoLmlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRzLnNlYXJjaCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbmRlck9wdGlvbnModmFsdWUgPT09ICcnID8gdGhpcy5zdG9yZS5nZXREYXRhKCkgOiB0aGlzLnN0b3JlLnNlYXJjaCh2YWx1ZSwgdGhpcy5ldmVudHMuc2VhcmNoRmlsdGVyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVuZGVyU2VhcmNoaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBzZWFyY2hSZXNwID0gdGhpcy5ldmVudHMuc2VhcmNoKHZhbHVlLCB0aGlzLnN0b3JlLmdldFNlbGVjdGVkT3B0aW9ucygpKTtcbiAgICAgICAgICAgIGlmIChzZWFyY2hSZXNwIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHNlYXJjaFJlc3BcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVuZGVyT3B0aW9ucyh0aGlzLnN0b3JlLnBhcnRpYWxUb0Z1bGxEYXRhKGRhdGEpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW5kZXJFcnJvcih0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlYXJjaFJlc3ApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVuZGVyT3B0aW9ucyh0aGlzLnN0b3JlLnBhcnRpYWxUb0Z1bGxEYXRhKHNlYXJjaFJlc3ApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbmRlckVycm9yKCdTZWFyY2ggZXZlbnQgbXVzdCByZXR1cm4gYSBwcm9taXNlIG9yIGFuIGFycmF5IG9mIGRhdGEnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRvY3VtZW50Q2xpY2spO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMud2luZG93UmVzaXplLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5vcGVuUG9zaXRpb24gPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLndpbmRvd1Njcm9sbCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMud2luZG93VmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLnNldERhdGEoW10pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFNsaW1TZWxlY3Q7XG5cbn0pKTtcbiIsImltcG9ydCB7IHJlYWR5IH0gZnJvbSBcIi4uLy4uL2pzL3V0aWxzL2RvY3VtZW50UmVhZHkuanNcIjtcbmltcG9ydCBTbGltU2VsZWN0IGZyb20gXCJzbGltLXNlbGVjdFwiO1xuaW1wb3J0IEp1c3RWYWxpZGF0ZSBmcm9tIFwianVzdC12YWxpZGF0ZVwiO1xuaW1wb3J0IHtcbiAgZW1haWxGaWVsZFZhbGlkYXRpb25SdWxlcyxcbiAgaXNTZWxlY3RIYXNWYWx1ZSxcbiAgb25WYWxpZGF0aW9uU3VjY2VzcyxcbiAgcGhvbmVGaWVsZFZhbGlkYXRpb25SdWxlcyxcbiAgcmVxdWlyZWRGaWVsZFZhbGlkYXRpb25SdWxlcyxcbiAgc2VsZWN0RmllbGRWYWxpZGF0aW9uQ29uZmlnLFxuICB0ZXh0RmllbGRWYWxpZGF0aW9uUnVsZXMsXG4gIHZhbGlkYXRpb25Gb3JtQ29uZmlnLFxufSBmcm9tIFwiLi4vLi4vanMvY29tbW9uL2Zvcm1WYXJpYWJsZXMuanNcIjtcblxuY29uc3QgY291bnRyaWVzID0gW1xuICB7XG4gICAgdGV4dDogXCLQktGL0LHQtdGA0LjRgtC1INGB0YLRgNCw0L3Rg1wiLFxuICAgIHZhbHVlOiBcIlwiLFxuICAgIGh0bWw6IFwi0JLRi9Cx0LXRgNC40YLQtSDRgdGC0YDQsNC90YNcIixcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JDQstGB0YLRgNCw0LvQuNGPXCIsXG4gICAgdmFsdWU6IFwi0JDQstGB0YLRgNCw0LvQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBhdXN0cmFsaWFcIj7QkNCy0YHRgtGA0LDQu9C40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JDQstGB0YLRgNC40Y9cIixcbiAgICB2YWx1ZTogXCLQkNCy0YHRgtGA0LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgYXVzdHJpYVwiPtCQ0LLRgdGC0YDQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCR0LXQu9GM0LPQuNGPXCIsXG4gICAgdmFsdWU6IFwi0JHQtdC70YzQs9C40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIGJlbGdpdW1cIj7QkdC10LvRjNCz0LjRjzwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQkdC+0LvQs9Cw0YDQuNGPXCIsXG4gICAgdmFsdWU6IFwi0JHQvtC70LPQsNGA0LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgYnVsZ2FyaWFcIj7QkdC+0LvQs9Cw0YDQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCS0LXQu9C40LrQvtCx0YDQuNGC0LDQvdC40Y9cIixcbiAgICB2YWx1ZTogXCLQktC10LvQuNC60L7QsdGA0LjRgtCw0L3QuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyB1bml0ZWQta2luZ2RvbVwiPtCS0LXQu9C40LrQvtCx0YDQuNGC0LDQvdC40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JLQtdC90LPRgNC40Y9cIixcbiAgICB2YWx1ZTogXCLQktC10L3Qs9GA0LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgaHVuZ2FyeVwiPtCS0LXQvdCz0YDQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCS0YzQtdGC0L3QsNC8XCIsXG4gICAgdmFsdWU6IFwi0JLRjNC10YLQvdCw0LxcIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIHZpZXRuYW1cIj7QktGM0LXRgtC90LDQvDwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQk9C10YDQvNCw0L3QuNGPXCIsXG4gICAgdmFsdWU6IFwi0JPQtdGA0LzQsNC90LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgZ2VybWFueVwiPtCT0LXRgNC80LDQvdC40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JPRgNC10YbQuNGPXCIsXG4gICAgdmFsdWU6IFwi0JPRgNC10YbQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBncmVlY2VcIj7Qk9GA0LXRhtC40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JTQsNC90LjRj1wiLFxuICAgIHZhbHVlOiBcItCU0LDQvdC40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIGRlbm1hcmtcIj7QlNCw0L3QuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCY0L3QtNC40Y9cIixcbiAgICB2YWx1ZTogXCLQmNC90LTQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBpbmRpYVwiPtCY0L3QtNC40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JjQvdC00L7QvdC10LfQuNGPXCIsXG4gICAgdmFsdWU6IFwi0JjQvdC00L7QvdC10LfQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBpbmRvbmVzaWFcIj7QmNC90LTQvtC90LXQt9C40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JjRgNC70LDQvdC00LjRj1wiLFxuICAgIHZhbHVlOiBcItCY0YDQu9Cw0L3QtNC40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIGlyZWxhbmRcIj7QmNGA0LvQsNC90LTQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCY0YHQu9Cw0L3QtNC40Y9cIixcbiAgICB2YWx1ZTogXCLQmNGB0LvQsNC90LTQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBpY2VsYW5kXCI+0JjRgdC70LDQvdC00LjRjzwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQmNGB0L/QsNC90LjRj1wiLFxuICAgIHZhbHVlOiBcItCY0YHQv9Cw0L3QuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBzcGFpblwiPtCY0YHQv9Cw0L3QuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCY0YLQsNC70LjRj1wiLFxuICAgIHZhbHVlOiBcItCY0YLQsNC70LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgaXRhbHlcIj7QmNGC0LDQu9C40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JrQsNC90LDQtNCwXCIsXG4gICAgdmFsdWU6IFwi0JrQsNC90LDQtNCwXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBjYW5hZGFcIj7QmtCw0L3QsNC00LA8L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JrQuNC/0YBcIixcbiAgICB2YWx1ZTogXCLQmtC40L/RgFwiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgY3lwcnVzXCI+0JrQuNC/0YA8L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0JrQuNGC0LDQuVwiLFxuICAgIHZhbHVlOiBcItCa0LjRgtCw0LlcIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIGNoaW5hXCI+0JrQuNGC0LDQuTwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQm9Cw0YLQstC40Y9cIixcbiAgICB2YWx1ZTogXCLQm9Cw0YLQstC40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIGxhdHZpYVwiPtCb0LDRgtCy0LjRjzwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQm9C40YLQstCwXCIsXG4gICAgdmFsdWU6IFwi0JvQuNGC0LLQsFwiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgbGl0aHVhbmlhXCI+0JvQuNGC0LLQsDwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQnNCw0LvRjNGC0LBcIixcbiAgICB2YWx1ZTogXCLQnNCw0LvRjNGC0LBcIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIG1hbHRhXCI+0JzQsNC70YzRgtCwPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCc0LXQutGB0LjQutCwXCIsXG4gICAgdmFsdWU6IFwi0JzQtdC60YHQuNC60LBcIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIG1leGljb1wiPtCc0LXQutGB0LjQutCwPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCd0LjQtNC10YDQu9Cw0L3QtNGLXCIsXG4gICAgdmFsdWU6IFwi0J3QuNC00LXRgNC70LDQvdC00YtcIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIG5ldGhlcmxhbmRzXCI+0J3QuNC00LXRgNC70LDQvdC00Ys8L3NwYW4+YCxcbiAgfSxcblxuICB7XG4gICAgdGV4dDogXCLQndC+0LLQsNGPINCX0LXQu9Cw0L3QtNC40Y9cIixcbiAgICB2YWx1ZTogXCLQndC+0LLQsNGPINCX0LXQu9Cw0L3QtNC40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIG5ldy16ZWFsYW5kXCI+0J3QvtCy0LDRjyDQl9C10LvQsNC90LTQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCd0L7RgNCy0LXQs9C40Y9cIixcbiAgICB2YWx1ZTogXCLQndC+0YDQstC10LPQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBub3J3YXlcIj7QndC+0YDQstC10LPQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCe0JDQrVwiLFxuICAgIHZhbHVlOiBcItCe0JDQrVwiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgdWFlXCI+0J7QkNCtPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCf0L7Qu9GM0YjQsFwiLFxuICAgIHZhbHVlOiBcItCf0L7Qu9GM0YjQsFwiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgcG9sYW5kXCI+0J/QvtC70YzRiNCwPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCf0L7RgNGC0YPQs9Cw0LvQuNGPXCIsXG4gICAgdmFsdWU6IFwi0J/QvtGA0YLRg9Cz0LDQu9C40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIHBvcnR1Z2FsXCI+0J/QvtGA0YLRg9Cz0LDQu9C40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0KDRg9C80YvQvdC40Y9cIixcbiAgICB2YWx1ZTogXCLQoNGD0LzRi9C90LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgcm9tYW5pYVwiPtCg0YPQvNGL0L3QuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCh0LjQvdCz0LDQv9GD0YBcIixcbiAgICB2YWx1ZTogXCLQodC40L3Qs9Cw0L/Rg9GAXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBzaW5nYXBvcmVcIj7QodC40L3Qs9Cw0L/Rg9GAPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCh0LvQvtCy0LDQutC40Y9cIixcbiAgICB2YWx1ZTogXCLQodC70L7QstCw0LrQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBzbG92YWtpYVwiPtCh0LvQvtCy0LDQutC40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0KHQu9C+0LLQtdC90LjRj1wiLFxuICAgIHZhbHVlOiBcItCh0LvQvtCy0LXQvdC40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIHNsb3ZlbmlhXCI+0KHQu9C+0LLQtdC90LjRjzwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQodCo0JBcIixcbiAgICB2YWx1ZTogXCLQodCo0JBcIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIHVzYVwiPtCh0KjQkDwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQotCw0LnQu9Cw0L3QtFwiLFxuICAgIHZhbHVlOiBcItCi0LDQudC70LDQvdC0XCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyB0aGFpbGFuZFwiPtCi0LDQudC70LDQvdC0PC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCk0YDQsNC90YbQuNGPXCIsXG4gICAgdmFsdWU6IFwi0KTRgNCw0L3RhtC40Y9cIixcbiAgICBodG1sOiBgPHNwYW4gY2xhc3M9XCJzcy1mbGFnIGZyYW5jZVwiPtCk0YDQsNC90YbQuNGPPC9zcGFuPmAsXG4gIH0sXG5cbiAge1xuICAgIHRleHQ6IFwi0KTQuNC90LvRj9C90LTQuNGPXCIsXG4gICAgdmFsdWU6IFwi0KTQuNC90LvRj9C90LTQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBmaW5sYW5kXCI+0KTQuNC90LvRj9C90LTQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCl0L7RgNCy0LDRgtC40Y9cIixcbiAgICB2YWx1ZTogXCLQpdC+0YDQstCw0YLQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBjcm9hdGlhXCI+0KXQvtGA0LLQsNGC0LjRjzwvc3Bhbj5gLFxuICB9LFxuICB7XG4gICAgdGV4dDogXCLQp9C10YXQuNGPXCIsXG4gICAgdmFsdWU6IFwi0KfQtdGF0LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgY3plY2hcIj7Qp9C10YXQuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCo0LLQtdC50YbQsNGA0LjRj1wiLFxuICAgIHZhbHVlOiBcItCo0LLQtdC50YbQsNGA0LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgc3dpdHplcmxhbmRcIj7QqNCy0LXQudGG0LDRgNC40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0KjQstC10YbQuNGPXCIsXG4gICAgdmFsdWU6IFwi0KjQstC10YbQuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBzd2VkZW5cIj7QqNCy0LXRhtC40Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0KjRgNC4LdCb0LDQvdC60LBcIixcbiAgICB2YWx1ZTogXCLQqNGA0Lgt0JvQsNC90LrQsFwiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgc3JpLWxhbmthXCI+0KjRgNC4LdCb0LDQvdC60LA8L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0K3RgdGC0L7QvdC40Y9cIixcbiAgICB2YWx1ZTogXCLQrdGB0YLQvtC90LjRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgZXN0b25pYVwiPtCt0YHRgtC+0L3QuNGPPC9zcGFuPmAsXG4gIH0sXG4gIHtcbiAgICB0ZXh0OiBcItCu0LbQvdCw0Y8g0JrQvtGA0LXRj1wiLFxuICAgIHZhbHVlOiBcItCu0LbQvdCw0Y8g0JrQvtGA0LXRj1wiLFxuICAgIGh0bWw6IGA8c3BhbiBjbGFzcz1cInNzLWZsYWcgc291dGgta29yZWFcIj7QrtC20L3QsNGPINCa0L7RgNC10Y88L3NwYW4+YCxcbiAgfSxcbiAge1xuICAgIHRleHQ6IFwi0K/Qv9C+0L3QuNGPXCIsXG4gICAgdmFsdWU6IFwi0K/Qv9C+0L3QuNGPXCIsXG4gICAgaHRtbDogYDxzcGFuIGNsYXNzPVwic3MtZmxhZyBqYXBhblwiPtCv0L/QvtC90LjRjzwvc3Bhbj5gLFxuICB9LFxuXTtcbmNvbnN0IGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuXG5mdW5jdGlvbiBnZXREYXlzSW5Nb250aChtb250aCkge1xuICByZXR1cm4gbmV3IERhdGUoY3VycmVudFllYXIsIG1vbnRoLCAwKS5nZXREYXRlKCk7XG59XG5cbnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgcmVxdWVzdEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3JlcXVlc3RGb3JtXCIpO1xuXG4gIGlmIChyZXF1ZXN0Rm9ybSkge1xuICAgIGNvbnN0IGFjdGlvblVybCA9IHJlcXVlc3RGb3JtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBjb25zdCBzZWxlY3RlZENvdW50cnkgPSByZXF1ZXN0Rm9ybS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlbGVjdGVkLWNvdW50cnlcIik7XG4gICAgY29uc3QgZm9ybVZhbGlkYXRlID0gbmV3IEp1c3RWYWxpZGF0ZShyZXF1ZXN0Rm9ybSwgdmFsaWRhdGlvbkZvcm1Db25maWcpO1xuICAgIGNvbnN0IGNvdW50cnlTZWxlY3QgPSByZXF1ZXN0Rm9ybS5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtY291bnRyeS1zZWxlY3RdXCIpO1xuICAgIGNvbnN0IHZpc2FUeXBlU2VsZWN0ID0gcmVxdWVzdEZvcm0ucXVlcnlTZWxlY3RvcihcInNlbGVjdFtuYW1lPSd2aXNhVHlwZSddXCIpO1xuICAgIGNvbnN0IG1vbnRoU2VsZWN0ID0gcmVxdWVzdEZvcm0ucXVlcnlTZWxlY3RvcihcIiNtb250aFwiKTtcbiAgICBjb25zdCBkYXlzU2VsZWN0RWxlbSA9IHJlcXVlc3RGb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjZGF5c1wiKTtcbiAgICBjb25zdCBmb3JtQnV0dG9uRm9yd2FyZCA9IHJlcXVlc3RGb3JtLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1hY3Rpb249J2ZvcndhcmQnXVwiKTtcbiAgICBsZXQgY3VycmVudFN0ZXAgPSAxO1xuICAgIGxldCBpc0RheVNlbGVjdEluaXQgPSBmYWxzZTtcbiAgICBsZXQgZGF5c1NlbGVjdDtcblxuICAgIGZvcm1WYWxpZGF0ZVxuICAgICAgLmFkZEZpZWxkKFwic2VsZWN0W25hbWU9J2NvdW50cnknXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzLCBzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWcpXG4gICAgICAuYWRkRmllbGQoXCJzZWxlY3RbbmFtZT0ndmlzYVR5cGUnXVwiLCByZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGVzLCBzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWcpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSdwaG9uZSddXCIsIHBob25lRmllbGRWYWxpZGF0aW9uUnVsZXMpXG4gICAgICAuYWRkRmllbGQoXCJpbnB1dFtuYW1lPSduYW1lJ11cIiwgdGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLmFkZEZpZWxkKFwiaW5wdXRbbmFtZT0nZW1haWwnXVwiLCBlbWFpbEZpZWxkVmFsaWRhdGlvblJ1bGVzKVxuICAgICAgLm9uU3VjY2VzcygoKSA9PiB7XG4gICAgICAgIG9uVmFsaWRhdGlvblN1Y2Nlc3MoXG4gICAgICAgICAgcmVxdWVzdEZvcm0sXG4gICAgICAgICAgYWN0aW9uVXJsLFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3RGb3JtLmRhdGFzZXQuc3RlcHMgPSAoKytjdXJyZW50U3RlcCkudG9TdHJpbmcoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGFsZXJ0KFwi0J7RiNC40LHQutCwISDQn9C+0L/RgNC+0LHRg9C50YLQtSDQv9C+0LLRgtC+0YDQuNGC0Ywg0L7RgtC/0YDQsNCy0LrRgyDRhNC+0YDQvNGLINC/0L7Qt9C20LUuXCIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURheXNTZWxlY3QobW9udGgpIHtcbiAgICAgIGlmIChpc0RheVNlbGVjdEluaXQpIHtcbiAgICAgICAgZGF5c1NlbGVjdC5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBkYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoKG1vbnRoKTtcbiAgICAgIGxldCBkYXlzQXJyYXkgPSBbXTtcblxuICAgICAgaWYgKG1vbnRoID09PSBcIjJcIiAmJiAoY3VycmVudFllYXIgJSA0ID09PSAwIHx8IChjdXJyZW50WWVhciArIDEpICUgNCA9PT0gMCkpIHtcbiAgICAgICAgZGF5c0luTW9udGggPSAyOTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gZGF5c0luTW9udGg7IGkrKykge1xuICAgICAgICBkYXlzQXJyYXkucHVzaCh7XG4gICAgICAgICAgdGV4dDogaSxcbiAgICAgICAgICB2YWx1ZTogaSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGRheXNTZWxlY3QgPSBuZXcgU2xpbVNlbGVjdCh7XG4gICAgICAgIHNlbGVjdDogZGF5c1NlbGVjdEVsZW0sXG4gICAgICAgIGRhdGE6IGRheXNBcnJheSxcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICBzaG93U2VhcmNoOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBpc0RheVNlbGVjdEluaXQgPSB0cnVlO1xuICAgIH1cblxuICAgIGNyZWF0ZURheXNTZWxlY3QobW9udGhTZWxlY3QudmFsdWUpO1xuXG4gICAgbW9udGhTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBjcmVhdGVEYXlzU2VsZWN0KG1vbnRoU2VsZWN0LnZhbHVlKTtcbiAgICB9KTtcblxuICAgIHZpc2FUeXBlU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgZm9ybVZhbGlkYXRlLnJldmFsaWRhdGVGaWVsZChcInNlbGVjdFtuYW1lPSd2aXNhVHlwZSddXCIpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY291bnRyeVNsaW1TZWxlY3QgPSBuZXcgU2xpbVNlbGVjdCh7XG4gICAgICBzZWxlY3Q6IGNvdW50cnlTZWxlY3QsXG4gICAgICBkYXRhOiBjb3VudHJpZXMsXG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICBzaG93U2VhcmNoOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgYWZ0ZXJDaGFuZ2U6ICgpID0+IHtcbiAgICAgICAgICBmb3JtVmFsaWRhdGUucmV2YWxpZGF0ZUZpZWxkKFwic2VsZWN0W25hbWU9J2NvdW50cnknXVwiKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoc2VsZWN0ZWRDb3VudHJ5KSBjb3VudHJ5U2xpbVNlbGVjdC5zZXRTZWxlY3RlZChzZWxlY3RlZENvdW50cnkpO1xuXG4gICAgaXNTZWxlY3RIYXNWYWx1ZShjb3VudHJ5U2VsZWN0KTtcbiAgICBpc1NlbGVjdEhhc1ZhbHVlKGRheXNTZWxlY3RFbGVtKTtcblxuICAgIGlmIChmb3JtQnV0dG9uRm9yd2FyZCkge1xuICAgICAgZm9ybUJ1dHRvbkZvcndhcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxldCBpc0NvdW50cnlGaWVsZFZhbGlkO1xuICAgICAgICBsZXQgaXNWaXNhVHlwZUZpZWxkVmFsaWQ7XG4gICAgICAgIGZvcm1WYWxpZGF0ZS5yZXZhbGlkYXRlRmllbGQoXCJzZWxlY3RbbmFtZT0nY291bnRyeSddXCIpLnRoZW4oKGlzVmFsaWQpID0+IHtcbiAgICAgICAgICBpc0NvdW50cnlGaWVsZFZhbGlkID0gaXNWYWxpZDtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvcm1WYWxpZGF0ZS5yZXZhbGlkYXRlRmllbGQoXCJzZWxlY3RbbmFtZT0ndmlzYVR5cGUnXVwiKS50aGVuKChpc1ZhbGlkKSA9PiB7XG4gICAgICAgICAgaXNWaXNhVHlwZUZpZWxkVmFsaWQgPSBpc1ZhbGlkO1xuXG4gICAgICAgICAgaWYgKGlzQ291bnRyeUZpZWxkVmFsaWQgJiYgaXNWaXNhVHlwZUZpZWxkVmFsaWQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJlcXVlc3RGb3JtLmRhdGFzZXQuc3RlcHMgPSAoKytjdXJyZW50U3RlcCkudG9TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcbiIsImltcG9ydCB7IHJlYWR5IH0gZnJvbSBcIi4uLy4uL2pzL3V0aWxzL2RvY3VtZW50UmVhZHkuanNcIjtcbmltcG9ydCBTbGltU2VsZWN0IGZyb20gXCJzbGltLXNlbGVjdFwiO1xuaW1wb3J0IHsgaXNTZWxlY3RIYXNWYWx1ZSB9IGZyb20gXCIuLi8uLi9qcy9jb21tb24vZm9ybVZhcmlhYmxlcy5qc1wiO1xuXG5yZWFkeShmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNlbGVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtc2xpbS1zZWxlY3RdXCIpO1xuICBpZiAoc2VsZWN0cy5sZW5ndGggIT09IDApIHtcbiAgICBmb3IgKGxldCBzZWxlY3Qgb2Ygc2VsZWN0cykge1xuICAgICAgbmV3IFNsaW1TZWxlY3Qoe1xuICAgICAgICBzZWxlY3Q6IHNlbGVjdCxcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICBzaG93U2VhcmNoOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBpc1NlbGVjdEhhc1ZhbHVlKHNlbGVjdCk7XG5cbiAgICAgIC8vIGlmIChzZWxlY3QudmFsdWUubGVuZ3RoICE9PSAwKSBzZWxlY3QuY2xhc3NMaXN0LmFkZChcInNlbGVjdC0taGFzLXZhbHVlXCIpO1xuICAgICAgLy8gc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gICB0aGlzLnZhbHVlLmxlbmd0aCAhPT0gMCA/IHRoaXMuY2xhc3NMaXN0LmFkZChcInNlbGVjdC0taGFzLXZhbHVlXCIpIDogdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0LS1oYXMtdmFsdWVcIik7XG4gICAgICAvLyB9KTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyIGU9bmV3IE1hcDtmdW5jdGlvbiB0KHQpe3ZhciBvPWUuZ2V0KHQpO28mJm8uZGVzdHJveSgpfWZ1bmN0aW9uIG8odCl7dmFyIG89ZS5nZXQodCk7byYmby51cGRhdGUoKX12YXIgcj1udWxsO1widW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3c/KChyPWZ1bmN0aW9uKGUpe3JldHVybiBlfSkuZGVzdHJveT1mdW5jdGlvbihlKXtyZXR1cm4gZX0sci51cGRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9KTooKHI9ZnVuY3Rpb24odCxvKXtyZXR1cm4gdCYmQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0Lmxlbmd0aD90Olt0XSxmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCl7aWYodCYmdC5ub2RlTmFtZSYmXCJURVhUQVJFQVwiPT09dC5ub2RlTmFtZSYmIWUuaGFzKHQpKXt2YXIgbyxyPW51bGwsbj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KSxpPShvPXQudmFsdWUsZnVuY3Rpb24oKXthKHt0ZXN0Rm9ySGVpZ2h0UmVkdWN0aW9uOlwiXCI9PT1vfHwhdC52YWx1ZS5zdGFydHNXaXRoKG8pLHJlc3RvcmVUZXh0QWxpZ246bnVsbH0pLG89dC52YWx1ZX0pLGw9ZnVuY3Rpb24obyl7dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYXV0b3NpemU6ZGVzdHJveVwiLGwpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImF1dG9zaXplOnVwZGF0ZVwiLHMpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsaSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixzKSxPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LnN0eWxlW2VdPW9bZV19KSxlLmRlbGV0ZSh0KX0uYmluZCh0LHtoZWlnaHQ6dC5zdHlsZS5oZWlnaHQscmVzaXplOnQuc3R5bGUucmVzaXplLHRleHRBbGlnbjp0LnN0eWxlLnRleHRBbGlnbixvdmVyZmxvd1k6dC5zdHlsZS5vdmVyZmxvd1ksb3ZlcmZsb3dYOnQuc3R5bGUub3ZlcmZsb3dYLHdvcmRXcmFwOnQuc3R5bGUud29yZFdyYXB9KTt0LmFkZEV2ZW50TGlzdGVuZXIoXCJhdXRvc2l6ZTpkZXN0cm95XCIsbCksdC5hZGRFdmVudExpc3RlbmVyKFwiYXV0b3NpemU6dXBkYXRlXCIscyksdC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIixpKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHMpLHQuc3R5bGUub3ZlcmZsb3dYPVwiaGlkZGVuXCIsdC5zdHlsZS53b3JkV3JhcD1cImJyZWFrLXdvcmRcIixlLnNldCh0LHtkZXN0cm95OmwsdXBkYXRlOnN9KSxzKCl9ZnVuY3Rpb24gYShlKXt2YXIgbyxpLGw9ZS5yZXN0b3JlVGV4dEFsaWduLHM9dm9pZCAwPT09bD9udWxsOmwsZD1lLnRlc3RGb3JIZWlnaHRSZWR1Y3Rpb24sdT12b2lkIDA9PT1kfHxkLGM9bi5vdmVyZmxvd1k7aWYoMCE9PXQuc2Nyb2xsSGVpZ2h0JiYoXCJ2ZXJ0aWNhbFwiPT09bi5yZXNpemU/dC5zdHlsZS5yZXNpemU9XCJub25lXCI6XCJib3RoXCI9PT1uLnJlc2l6ZSYmKHQuc3R5bGUucmVzaXplPVwiaG9yaXpvbnRhbFwiKSx1JiYobz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W107ZSYmZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUgaW5zdGFuY2VvZiBFbGVtZW50OyllLnBhcmVudE5vZGUuc2Nyb2xsVG9wJiZ0LnB1c2goW2UucGFyZW50Tm9kZSxlLnBhcmVudE5vZGUuc2Nyb2xsVG9wXSksZT1lLnBhcmVudE5vZGU7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lWzBdLG89ZVsxXTt0LnN0eWxlLnNjcm9sbEJlaGF2aW9yPVwiYXV0b1wiLHQuc2Nyb2xsVG9wPW8sdC5zdHlsZS5zY3JvbGxCZWhhdmlvcj1udWxsfSl9fSh0KSx0LnN0eWxlLmhlaWdodD1cIlwiKSxpPVwiY29udGVudC1ib3hcIj09PW4uYm94U2l6aW5nP3Quc2Nyb2xsSGVpZ2h0LShwYXJzZUZsb2F0KG4ucGFkZGluZ1RvcCkrcGFyc2VGbG9hdChuLnBhZGRpbmdCb3R0b20pKTp0LnNjcm9sbEhlaWdodCtwYXJzZUZsb2F0KG4uYm9yZGVyVG9wV2lkdGgpK3BhcnNlRmxvYXQobi5ib3JkZXJCb3R0b21XaWR0aCksXCJub25lXCIhPT1uLm1heEhlaWdodCYmaT5wYXJzZUZsb2F0KG4ubWF4SGVpZ2h0KT8oXCJoaWRkZW5cIj09PW4ub3ZlcmZsb3dZJiYodC5zdHlsZS5vdmVyZmxvdz1cInNjcm9sbFwiKSxpPXBhcnNlRmxvYXQobi5tYXhIZWlnaHQpKTpcImhpZGRlblwiIT09bi5vdmVyZmxvd1kmJih0LnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIpLHQuc3R5bGUuaGVpZ2h0PWkrXCJweFwiLHMmJih0LnN0eWxlLnRleHRBbGlnbj1zKSxvJiZvKCksciE9PWkmJih0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiYXV0b3NpemU6cmVzaXplZFwiLHtidWJibGVzOiEwfSkpLHI9aSksYyE9PW4ub3ZlcmZsb3cmJiFzKSl7dmFyIHY9bi50ZXh0QWxpZ247XCJoaWRkZW5cIj09PW4ub3ZlcmZsb3cmJih0LnN0eWxlLnRleHRBbGlnbj1cInN0YXJ0XCI9PT12P1wiZW5kXCI6XCJzdGFydFwiKSxhKHtyZXN0b3JlVGV4dEFsaWduOnYsdGVzdEZvckhlaWdodFJlZHVjdGlvbjohMH0pfX1mdW5jdGlvbiBzKCl7YSh7dGVzdEZvckhlaWdodFJlZHVjdGlvbjohMCxyZXN0b3JlVGV4dEFsaWduOm51bGx9KX19KHQpfSksdH0pLmRlc3Ryb3k9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJkFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZS5sZW5ndGg/ZTpbZV0sdCksZX0sci51cGRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJkFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZS5sZW5ndGg/ZTpbZV0sbyksZX0pO3ZhciBuPXI7ZXhwb3J0IGRlZmF1bHQgbjtcbiIsImltcG9ydCB7IHJlYWR5IH0gZnJvbSBcIi4uLy4uL2pzL3V0aWxzL2RvY3VtZW50UmVhZHlcIjtcbmltcG9ydCBhdXRvc2l6ZSBmcm9tIFwiYXV0b3NpemVcIjtcblxucmVhZHkoZnVuY3Rpb24gKCkge1xuICAvLyB0ZXh0YXJlYVxuICBjb25zdCB0ZXh0YXJlYXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRleHRhcmVhXCIpO1xuXG4gIGlmICh0ZXh0YXJlYXMubGVuZ3RoICE9PSAwKSB7XG4gICAgZm9yIChsZXQgdGV4dGFyZWEgb2YgdGV4dGFyZWFzKSB7XG4gICAgICBpZiAodGV4dGFyZWEudmFsdWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGF1dG9zaXplKHRleHRhcmVhKTtcbiAgICAgICAgdGV4dGFyZWEuY2xhc3NMaXN0LmFkZChcInRleHRhcmVhLS1oYXMtdmFsdWVcIik7XG4gICAgICB9XG5cbiAgICAgIHRleHRhcmVhLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudmFsdWUubGVuZ3RoICE9PSAwXG4gICAgICAgICAgPyB0aGlzLmNsYXNzTGlzdC5hZGQoXCJ0ZXh0YXJlYS0taGFzLXZhbHVlXCIpXG4gICAgICAgICAgOiB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZXh0YXJlYS0taGFzLXZhbHVlXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXV0b3NpemUodGV4dGFyZWFzKTtcbn0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBjb25zdCBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSBcInNjcm9sbFwiO1xuICBvdXRlci5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsYmFyXCIpO1xuICBvdXRlci5hcHBlbmRDaGlsZChpbm5lcik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuICBjb25zdCBzY3JvbGxiYXJTaXplID0gb3V0ZXIub2Zmc2V0V2lkdGggLSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdXRlcik7XG4gIHJldHVybiBzY3JvbGxiYXJTaXplO1xufVxuIl0sIm5hbWVzIjpbInJlYWR5IiwiZm4iLCJkb2N1bWVudCIsImF0dGFjaEV2ZW50IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGVuIiwiZGVmYXVsdCIsImdldFNjcm9sbFNpemUiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsInNldFByb3BlcnR5IiwidmFsaWRhdGlvbkZvcm1Db25maWciLCJlcnJvckZpZWxkQ3NzQ2xhc3MiLCJlcnJvckxhYmVsU3R5bGUiLCJlcnJvckxhYmVsQ3NzQ2xhc3MiLCJyZXF1aXJlZEZpZWxkVmFsaWRhdGlvblJ1bGUiLCJydWxlIiwiZXJyb3JNZXNzYWdlIiwicGhvbmVGaWVsZFZhbGlkYXRpb25SdWxlcyIsInZhbHVlIiwidGV4dEZpZWxkVmFsaWRhdGlvblJ1bGVzIiwiZW1haWxGaWVsZFZhbGlkYXRpb25SdWxlcyIsInJlcXVpcmVkRmllbGRWYWxpZGF0aW9uUnVsZXMiLCJpbnRlZ2VyRmllbGRWYWxpZGF0aW9uUnVsZXMiLCJzZWxlY3RGaWVsZFZhbGlkYXRpb25Db25maWciLCJmb3JtU2VuZENvbmZpZyIsInBsYWluRm9ybURhdGEiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJvblZhbGlkYXRpb25TdWNjZXNzIiwiZm9ybSIsImFjdGlvblVybCIsInN1Y2Nlc3MiLCJlcnJvciIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJpc1NlbGVjdEhhc1ZhbHVlIiwic2VsZWN0IiwibGVuZ3RoIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic3VjY2Vzc0ZuIiwiYWxlcnQiLCJlcnJvckZuIiwiZm9ybU15RGF0YSIsInF1ZXJ5U2VsZWN0b3IiLCJmb3JtUGF5bWVudCIsImZvcm1GZWVkQmFjayIsImZvcm1BZGRGaWxlIiwiZm9ybVZpc2EiLCJmb3JtQXRlcyIsImZvcm1Xb3JrIiwiZm9ybUNpdGl6ZW5zaGlwIiwiZm9ybUludFBhc3Nwb3J0IiwiZm9ybUludml0ZSIsImZvcm1BdmlhIiwiZm9ybUJ1c2luZXNzIiwiZm9ybU1lZGljYWwiLCJmb3JtT3RoZXJzIiwiZm9ybUNhbGxiYWNrIiwiZ2V0QXR0cmlidXRlIiwiZm9ybVZpc2FWYWxpZGF0ZSIsIkp1c3RWYWxpZGF0ZSIsImFkZEZpZWxkIiwib25TdWNjZXNzIiwiZm9ybUF0ZXNWYWxpZGF0ZSIsImZvcm1Xb3JrVmFsaWRhdGUiLCJmb3JtQ2l0aXplbnNoaXBWYWxpZGF0ZSIsImZvcm1JbnRQYXNzcG9ydFZhbGlkYXRlIiwiZm9ybUludml0ZVZhbGlkYXRlIiwiZm9ybUF2aWFWYWxpZGF0ZSIsImZvcm1CdXNpbmVzc1ZhbGlkYXRlIiwiZm9ybU1lZGljYWxWYWxpZGF0ZSIsImZvcm1PdGhlcnNWYWxpZGF0ZSIsImZvcm1NeURhdGFWYWxpZGF0ZSIsImZvcm1QYXltZW50VmFsaWRhdGUiLCJmb3JtRmVlZEJhY2tWYWxpZGF0ZSIsImZvcm1BZGRGaWxlVmFsaWRhdGUiLCJmaWxlcyIsImV4dGVuc2lvbnMiLCJtYXhTaXplIiwibWluU2l6ZSIsInR5cGVzIiwiZm9ybUNhbGxiYWNrVmFsaWRhdGUiLCJsb2NhdGlvbiIsInJlcGxhY2UiLCJmb3JtU2V0Iiwic2VydmljZVR5cGVTZWxlY3QiLCJmb3JtU2V0UGFuZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0QWN0aXZlUGFuZSIsImUiLCJ0YXJnZXQiLCJwYW5lcyIsImlkIiwicGFuZSIsImRhdGFzZXQiLCJpbnB1dHMiLCJpbnB1dCIsInBob25lRmllbGRzIiwiZm9yRWFjaCIsImZpZWxkIiwiSU1hc2siLCJsYXp5IiwibWFzayIsInByZXBhcmUiLCJhcHBlbmRlZCIsIm1hc2tlZCIsIm51bWJlckZpZWxkcyIsIk51bWJlciIsIm1pbiIsInBhc3Nwb3J0UnVzc2lhIiwicGFzc3BvcnRJbnQiLCJ0aGlzIiwiY291bnRyaWVzIiwidGV4dCIsImh0bWwiLCJjdXJyZW50WWVhciIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImdldERheXNJbk1vbnRoIiwibW9udGgiLCJnZXREYXRlIiwicmVxdWVzdEZvcm0iLCJzZWxlY3RlZENvdW50cnkiLCJmb3JtVmFsaWRhdGUiLCJjb3VudHJ5U2VsZWN0IiwidmlzYVR5cGVTZWxlY3QiLCJtb250aFNlbGVjdCIsImRheXNTZWxlY3RFbGVtIiwiZm9ybUJ1dHRvbkZvcndhcmQiLCJjdXJyZW50U3RlcCIsImlzRGF5U2VsZWN0SW5pdCIsImRheXNTZWxlY3QiLCJzdGVwcyIsInRvU3RyaW5nIiwiY3JlYXRlRGF5c1NlbGVjdCIsImRlc3Ryb3kiLCJkYXlzSW5Nb250aCIsImRheXNBcnJheSIsImkiLCJwdXNoIiwiU2xpbVNlbGVjdCIsImRhdGEiLCJzZXR0aW5ncyIsInNob3dTZWFyY2giLCJyZXZhbGlkYXRlRmllbGQiLCJjb3VudHJ5U2xpbVNlbGVjdCIsImV2ZW50cyIsImFmdGVyQ2hhbmdlIiwic2V0U2VsZWN0ZWQiLCJpc0NvdW50cnlGaWVsZFZhbGlkIiwiaXNWaXNhVHlwZUZpZWxkVmFsaWQiLCJpc1ZhbGlkIiwicHJldmVudERlZmF1bHQiLCJzZWxlY3RzIiwidGV4dGFyZWFzIiwidGV4dGFyZWEiLCJhdXRvc2l6ZSIsIm91dGVyIiwiY3JlYXRlRWxlbWVudCIsImlubmVyIiwib3ZlcmZsb3ciLCJhcHBlbmRDaGlsZCIsInNjcm9sbGJhclNpemUiLCJvZmZzZXRXaWR0aCIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFTyxTQUFTQSxLQUFLQSxDQUFDQyxFQUFFLEVBQUU7QUFDeEIsRUFBQSxJQUFJQyxRQUFRLENBQUNDLFdBQVcsR0FBR0QsUUFBUSxDQUFDRSxVQUFVLEtBQUssVUFBVSxHQUFHRixRQUFRLENBQUNFLFVBQVUsS0FBSyxTQUFTLEVBQUU7QUFDakdILElBQUFBLEVBQUUsRUFBRSxDQUFBO0FBQ04sR0FBQyxNQUFNO0FBQ0xDLElBQUFBLFFBQVEsQ0FBQ0csZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUVKLEVBQUUsQ0FBQyxDQUFBO0FBQ25ELEdBQUE7QUFDRjs7QUNMQUQsS0FBSyxDQUFDLFlBQVk7RUFDVTtBQUN4QjtBQUNBLElBQUEsK0RBQWtDLENBQUNNLElBQUksQ0FBQyxDQUFDO0FBQUVDLE1BQUFBLE9BQU8sRUFBRUMsYUFBQUE7QUFBYyxLQUFDLEtBQUs7QUFDdEVOLE1BQUFBLFFBQVEsQ0FBQ08sZUFBZSxDQUFDQyxLQUFLLENBQUNDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFHSCxFQUFBQSxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDekYsS0FBQyxDQUFDLENBQUE7QUFDSixHQUFBO0FBQ0YsQ0FBQyxDQUFDOztBQ1ZGLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7QUFDdEMsSUFBSSxlQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssS0FBSyxHQUFHLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ2hLLElBQUksYUFBYSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEtBQUs7QUFDekMsRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFLE9BQU8sR0FBRyxLQUFLLFFBQVEsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN4RSxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQUcsc0pBQXNKLENBQUM7QUFDNUssTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBQ3RDLE1BQU0sZUFBZSxHQUFHLCtCQUErQixDQUFDO0FBQ3hELE1BQU0sc0JBQXNCLEdBQUcsc0VBQXNFLENBQUM7QUFDdEcsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFLLEtBQUs7QUFDM0IsRUFBRSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDckIsRUFBRSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUNqQyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUIsR0FBRztBQUNILEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNqQixDQUFDLENBQUM7QUFDRixNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQUssS0FBSztBQUMzQixFQUFFLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFDRixNQUFNLG1CQUFtQixHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsS0FBSztBQUM1QyxFQUFFLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUs7QUFDNUMsRUFBRSxPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQzVCLENBQUMsQ0FBQztBQUNGLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBSyxLQUFLO0FBQzVCLEVBQUUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7QUFDakMsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixHQUFHO0FBQ0gsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFLLEtBQUs7QUFDN0IsRUFBRSxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFLLEtBQUs7QUFDOUIsRUFBRSxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQUssS0FBSztBQUNwQyxFQUFFLE9BQU8sc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLENBQUMsQ0FBQztBQUNGLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxLQUFLO0FBQzVDLEVBQUUsT0FBTyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQUNGLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxLQUFLO0FBQzVDLEVBQUUsT0FBTyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQUNGLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxLQUFLLEtBQUs7QUFDMUMsRUFBRSxPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDO0FBQ25ELENBQUMsQ0FBQztBQUNGLElBQUksS0FBSyxtQkFBbUIsQ0FBQyxDQUFDLE1BQU0sS0FBSztBQUN6QyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUM7QUFDbEMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQzVCLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUNwQyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDcEMsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDO0FBQ2xDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUM5QixFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDaEMsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3BDLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUNwQyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO0FBQzlDLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLGNBQWMsQ0FBQztBQUMxQyxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxlQUFlLENBQUM7QUFDNUMsRUFBRSxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsZUFBZSxDQUFDO0FBQzVDLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUM1QixFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDaEIsSUFBSSxVQUFVLG1CQUFtQixDQUFDLENBQUMsV0FBVyxLQUFLO0FBQ25ELEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUN2QyxFQUFFLE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUMsRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7QUFDckIsSUFBSSxpQkFBaUIsbUJBQW1CLENBQUMsQ0FBQyxrQkFBa0IsS0FBSztBQUNqRSxFQUFFLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUN4QyxFQUFFLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxHQUFHLFlBQVksQ0FBQztBQUNsRCxFQUFFLE9BQU8sa0JBQWtCLENBQUM7QUFDNUIsQ0FBQyxFQUFFLGlCQUFpQixJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzVCLE1BQU0saUJBQWlCLEdBQUc7QUFDMUIsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRO0FBQ3ZCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsdUJBQXVCO0FBQ2pDLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxLQUFLO0FBQ3BCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsMEJBQTBCO0FBQ3BDLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTO0FBQ3hCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsdURBQXVEO0FBQ2pFLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTO0FBQ3hCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsdURBQXVEO0FBQ2pFLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRO0FBQ3ZCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsb0ZBQW9GO0FBQzlGLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxjQUFjO0FBQzdCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsNklBQTZJO0FBQ3ZKLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3JCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsMEJBQTBCO0FBQ3BDLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTO0FBQ3hCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsNENBQTRDO0FBQ3RELEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTO0FBQ3hCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsNENBQTRDO0FBQ3RELEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxhQUFhO0FBQzVCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsaURBQWlEO0FBQzNELEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxhQUFhO0FBQzVCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsaURBQWlEO0FBQzNELEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRTtBQUNGLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxLQUFLO0FBQ3BCLElBQUksSUFBSSxFQUFFO0FBQ1YsTUFBTSxFQUFFLEVBQUUsa0ZBQWtGO0FBQzVGLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQyxDQUFDO0FBQ0YsTUFBTSwyQkFBMkIsR0FBRyxvQkFBb0IsQ0FBQztBQUN6RCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsS0FBSyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxNQUFNLElBQUksR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7QUFDdEgsTUFBTSxjQUFjLEdBQUcsQ0FBQyxFQUFFLEtBQUs7QUFDL0IsRUFBRSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFDaEIsRUFBRSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDakIsRUFBRSxPQUFPLElBQUksRUFBRTtBQUNmLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzNCLEdBQUc7QUFDSCxFQUFFLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEtBQUs7QUFDOUMsRUFBRSxNQUFNLGVBQWUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDakQsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQzlELElBQUksTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLElBQUksS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7QUFDOUIsTUFBTSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssTUFBTSxFQUFFO0FBQ3RDLFFBQVEsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1QixPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQUcsQ0FBQyxTQUFTLEtBQUs7QUFDcEMsRUFBRSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDaEMsSUFBSSxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNyRCxHQUFHO0FBQ0gsRUFBRSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUU7QUFDekQsSUFBSSxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckUsR0FBRztBQUNILEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7QUFDRixNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQU8sS0FBSztBQUMvQixFQUFFLE9BQU8sT0FBTyxZQUFZLE9BQU8sSUFBSSxPQUFPLFlBQVksWUFBWSxDQUFDO0FBQ3ZFLENBQUMsQ0FBQztBQUNGLE1BQU0sYUFBYSxHQUFHLENBQUMsZ3JDQUFnckMsQ0FBQyxDQUFDO0FBQ3pzQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQztBQUMvQixNQUFNLG1CQUFtQixHQUFHO0FBQzVCLEVBQUUsZUFBZSxFQUFFO0FBQ25CLElBQUksS0FBSyxFQUFFLFNBQVM7QUFDcEIsSUFBSSxNQUFNLEVBQUUsbUJBQW1CO0FBQy9CLEdBQUc7QUFDSCxFQUFFLGtCQUFrQixFQUFFLDJCQUEyQjtBQUNqRCxFQUFFLG9CQUFvQixFQUFFLDZCQUE2QjtBQUNyRCxFQUFFLGVBQWUsRUFBRTtBQUNuQixJQUFJLEtBQUssRUFBRSxTQUFTO0FBQ3BCLEdBQUc7QUFDSCxFQUFFLGtCQUFrQixFQUFFLDJCQUEyQjtBQUNqRCxFQUFFLG9CQUFvQixFQUFFLDZCQUE2QjtBQUNyRCxFQUFFLGlCQUFpQixFQUFFLElBQUk7QUFDekIsRUFBRSxRQUFRLEVBQUUsSUFBSTtBQUNoQixFQUFFLFdBQVcsRUFBRSxLQUFLO0FBQ3BCLEVBQUUsd0JBQXdCLEVBQUUsS0FBSztBQUNqQyxFQUFFLHVCQUF1QixFQUFFLEtBQUs7QUFDaEMsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxZQUFZLENBQUM7QUFDbkIsRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUU7QUFDOUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0QyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDM0MsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN0QyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzdELElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDM0MsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3QyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDOUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3pELElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDL0MsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzdDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzFDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDeEMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDOUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3hDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxVQUFVLGtCQUFrQixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDL0QsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFLENBQUMsS0FBSyxLQUFLO0FBQzVELE1BQU0sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QyxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSx1QkFBdUIsRUFBRSxDQUFDLEdBQUcsS0FBSztBQUMxRCxNQUFNLEtBQUssTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3RELFFBQVEsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO0FBQ3ZCLFVBQVUsT0FBTyxhQUFhLENBQUM7QUFDL0IsU0FBUztBQUNULE9BQU87QUFDUCxNQUFNLE9BQU8sS0FBSyxDQUFDLENBQUM7QUFDcEIsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUUsTUFBTTtBQUNyRCxNQUFNLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUN4QixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsS0FBSztBQUNoRCxRQUFRLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUN6QixRQUFRLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5RCxRQUFRLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO0FBQy9DLFVBQVUsTUFBTSxHQUFHLGFBQWEsQ0FBQztBQUNqQyxTQUFTO0FBQ1QsUUFBUSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztBQUNqRCxPQUFPLENBQUMsQ0FBQztBQUNULE1BQU0sT0FBTyxNQUFNLENBQUM7QUFDcEIsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxLQUFLLEtBQUs7QUFDNUQsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3BDLFFBQVEsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxPQUFPO0FBQ1AsTUFBTSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDakQsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEMsTUFBTSxPQUFPLEdBQUcsQ0FBQztBQUNqQixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxNQUFNO0FBQ3BELE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUs7QUFDdEMsUUFBUSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkIsT0FBTyxDQUFDLENBQUM7QUFDVCxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxzQkFBc0IsRUFBRSxNQUFNO0FBQ3RELE1BQU0sSUFBSSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDL0MsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtBQUM5QixRQUFRLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNO0FBQzNDLFVBQVUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDcEMsVUFBVSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztBQUNwQyxTQUFTLENBQUMsQ0FBQztBQUNYLFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7QUFDakMsT0FBTztBQUNQLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxLQUFLO0FBQ3JELE1BQU0sRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzFCLE1BQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDOUIsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsTUFBTSxLQUFLO0FBQ3pELE1BQU0sSUFBSSxRQUFRLENBQUM7QUFDbkIsTUFBTSxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDckMsUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLFFBQVEsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtBQUNuQyxVQUFVLFFBQVEsR0FBRyxHQUFHLENBQUM7QUFDekIsVUFBVSxNQUFNO0FBQ2hCLFNBQVM7QUFDVCxPQUFPO0FBQ1AsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3JCLFFBQVEsT0FBTztBQUNmLE9BQU87QUFDUCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUMzQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pDLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsTUFBTSxLQUFLO0FBQ3pELE1BQU0sSUFBSSxRQUFRLENBQUM7QUFDbkIsTUFBTSxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDMUMsUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLFFBQVEsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEtBQUssTUFBTSxDQUFDLEVBQUU7QUFDekQsVUFBVSxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsT0FBTztBQUNQLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNyQixRQUFRLE9BQU87QUFDZixPQUFPO0FBQ1AsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDaEQsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6QyxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLEtBQUs7QUFDakQsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRTtBQUN0QixRQUFRLE9BQU87QUFDZixPQUFPO0FBQ1AsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QyxNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMxQixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3BELEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRTtBQUM3QyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN6QixJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzdCLElBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQztBQUM1QyxJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQzFCLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7QUFDNUIsSUFBSSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixJQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0FBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDdkIsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztBQUM5QixJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQ2xDLE1BQU0sTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoRCxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDakIsUUFBUSxNQUFNLEtBQUs7QUFDbkIsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsbURBQW1ELENBQUM7QUFDaEYsU0FBUyxDQUFDO0FBQ1YsT0FBTztBQUNQLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixLQUFLLE1BQU0sSUFBSSxJQUFJLFlBQVksZUFBZSxFQUFFO0FBQ2hELE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixLQUFLLE1BQU07QUFDWCxNQUFNLE1BQU0sS0FBSztBQUNqQixRQUFRLENBQUMsOEVBQThFLENBQUM7QUFDeEYsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUcsbUJBQW1CLEVBQUUsR0FBRyxZQUFZLEVBQUUsQ0FBQztBQUNwRSxJQUFJLElBQUksVUFBVSxFQUFFO0FBQ3BCLE1BQU0sSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsVUFBVSxFQUFFLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztBQUM5RCxLQUFLO0FBQ0wsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUMxQixNQUFNLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkQsTUFBTSxRQUFRLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztBQUMzQyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUYsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDdEUsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLGtCQUFrQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFO0FBQ2pELElBQUksSUFBSSxFQUFFLENBQUM7QUFDWCxJQUFJLE1BQU0sTUFBTSxHQUFHLFNBQVMsSUFBSSxJQUFJLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztBQUN4RCxJQUFJLElBQUksWUFBWSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssTUFBTSxDQUFDLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2pJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtBQUN2QixNQUFNLElBQUksU0FBUyxFQUFFO0FBQ3JCLFFBQVEsWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUNqQyxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksSUFBSSxZQUFZLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzlDLE1BQU0sUUFBUSxJQUFJO0FBQ2xCLFFBQVEsS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQzdCLFFBQVEsS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQzdCLFFBQVEsS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQzdCLFFBQVEsS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQzdCLFFBQVEsS0FBSyxLQUFLLENBQUMsYUFBYSxDQUFDO0FBQ2pDLFFBQVEsS0FBSyxLQUFLLENBQUMsYUFBYTtBQUNoQyxVQUFVLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUMzRSxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksT0FBTyxZQUFZLElBQUksU0FBUyxJQUFJLDJCQUEyQixDQUFDO0FBQ3BFLEdBQUc7QUFDSCxFQUFFLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUU7QUFDeEMsSUFBSSxNQUFNLEdBQUcsR0FBRyxPQUFPLFNBQVMsQ0FBQyxZQUFZLEtBQUssVUFBVSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQztBQUNySixJQUFJLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6RSxHQUFHO0FBQ0gsRUFBRSxzQkFBc0IsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFO0FBQy9DLElBQUksTUFBTSxHQUFHLEdBQUcsT0FBTyxjQUFjLEtBQUssVUFBVSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLENBQUM7QUFDN0gsSUFBSSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN4RCxHQUFHO0FBQ0gsRUFBRSxvQkFBb0IsQ0FBQyxTQUFTLEVBQUU7QUFDbEMsSUFBSSxPQUFPLElBQUksQ0FBQyxrQkFBa0I7QUFDbEMsTUFBTSxTQUFTLENBQUMsSUFBSTtBQUNwQixNQUFNLEtBQUssQ0FBQztBQUNaLE1BQU0sU0FBUyxDQUFDLFlBQVk7QUFDNUIsS0FBSyxDQUFDO0FBQ04sR0FBRztBQUNILEVBQUUsc0JBQXNCLENBQUMsU0FBUyxFQUFFO0FBQ3BDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUU7QUFDbkMsTUFBTSxPQUFPLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLGtCQUFrQjtBQUNsQyxNQUFNLEtBQUssQ0FBQztBQUNaLE1BQU0sS0FBSyxDQUFDO0FBQ1osTUFBTSxTQUFTLENBQUMsY0FBYztBQUM5QixLQUFLLENBQUM7QUFDTixHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtBQUNsQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNyQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0I7QUFDN0QsTUFBTSxTQUFTO0FBQ2YsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUk7QUFDM0IsS0FBSyxDQUFDO0FBQ04sR0FBRztBQUNILEVBQUUsYUFBYSxDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUU7QUFDckMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDcEMsSUFBSSxJQUFJLGNBQWMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUNuQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxzQkFBc0I7QUFDbkUsUUFBUSxjQUFjO0FBQ3RCLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJO0FBQzdCLE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtBQUNsQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUMxQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM5RSxHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtBQUNoQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUN6QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNsRixHQUFHO0FBQ0gsRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFO0FBQ3JCLElBQUksUUFBUSxJQUFJLENBQUMsSUFBSTtBQUNyQixNQUFNLEtBQUssVUFBVTtBQUNyQixRQUFRLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM1QixNQUFNLEtBQUssTUFBTTtBQUNqQixRQUFRLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztBQUMxQixNQUFNO0FBQ04sUUFBUSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDMUIsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQzNDLElBQUksUUFBUSxTQUFTLENBQUMsSUFBSTtBQUMxQixNQUFNLEtBQUssVUFBVSxDQUFDLFFBQVEsRUFBRTtBQUNoQyxRQUFRLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNsRCxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFNBQVMsTUFBTTtBQUNmLFVBQVUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDN0MsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEdBQUcsS0FBSyxFQUFFO0FBQ3JFLElBQUksTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztBQUN0QyxJQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBTSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTTtBQUNyQyxRQUFRLFNBQVM7QUFDakIsUUFBUSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7QUFDbEMsT0FBTyxDQUFDO0FBQ1IsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ25CLFFBQVEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDN0MsT0FBTztBQUNQLE1BQU0sT0FBTztBQUNiLEtBQUs7QUFDTCxJQUFJLFFBQVEsU0FBUyxDQUFDLElBQUk7QUFDMUIsTUFBTSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDM0IsUUFBUSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUNoQyxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFNBQVM7QUFDVCxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsTUFBTSxLQUFLLEtBQUssQ0FBQyxLQUFLLEVBQUU7QUFDeEIsUUFBUSxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ2pDLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsU0FBUztBQUNULFFBQVEsTUFBTTtBQUNkLE9BQU87QUFDUCxNQUFNLEtBQUssS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUM1QixRQUFRLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ2xDLFVBQVUsT0FBTyxDQUFDLEtBQUs7QUFDdkIsWUFBWSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMseURBQXlELENBQUM7QUFDbkgsV0FBVyxDQUFDO0FBQ1osVUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxVQUFVLE1BQU07QUFDaEIsU0FBUztBQUNULFFBQVEsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7QUFDM0MsVUFBVSxPQUFPLENBQUMsS0FBSztBQUN2QixZQUFZLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyx1REFBdUQsQ0FBQztBQUNqSCxXQUFXLENBQUM7QUFDWixVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsRUFBRTtBQUN2RCxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFNBQVM7QUFDVCxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsTUFBTSxLQUFLLEtBQUssQ0FBQyxTQUFTLEVBQUU7QUFDNUIsUUFBUSxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUNsQyxVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLHlEQUF5RCxDQUFDO0FBQ25ILFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxNQUFNO0FBQ2hCLFNBQVM7QUFDVCxRQUFRLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO0FBQzNDLFVBQVUsT0FBTyxDQUFDLEtBQUs7QUFDdkIsWUFBWSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsdURBQXVELENBQUM7QUFDakgsV0FBVyxDQUFDO0FBQ1osVUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxVQUFVLE1BQU07QUFDaEIsU0FBUztBQUNULFFBQVEsSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUMvQyxVQUFVLE1BQU07QUFDaEIsU0FBUztBQUNULFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQUU7QUFDdkQsVUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQzNCLFFBQVEsSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUMvQyxVQUFVLE1BQU07QUFDaEIsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUNwQyxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFNBQVM7QUFDVCxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsTUFBTSxLQUFLLEtBQUssQ0FBQyxjQUFjLEVBQUU7QUFDakMsUUFBUSxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDMUMsVUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ3pCLFFBQVEsSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUMvQyxVQUFVLE1BQU07QUFDaEIsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUNsQyxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFNBQVM7QUFDVCxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsTUFBTSxLQUFLLEtBQUssQ0FBQyxPQUFPLEVBQUU7QUFDMUIsUUFBUSxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ25DLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsU0FBUztBQUNULFFBQVEsTUFBTTtBQUNkLE9BQU87QUFDUCxNQUFNLEtBQUssS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUM1QixRQUFRLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ2xDLFVBQVUsT0FBTyxDQUFDLEtBQUs7QUFDdkIsWUFBWSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMseURBQXlELENBQUM7QUFDbkgsV0FBVyxDQUFDO0FBQ1osVUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxVQUFVLE1BQU07QUFDaEIsU0FBUztBQUNULFFBQVEsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7QUFDM0MsVUFBVSxPQUFPLENBQUMsS0FBSztBQUN2QixZQUFZLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyw2REFBNkQsQ0FBQztBQUN2SCxXQUFXLENBQUM7QUFDWixVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxNQUFNLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztBQUMvQixRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUU7QUFDdEUsVUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxLQUFLLENBQUMsU0FBUyxFQUFFO0FBQzVCLFFBQVEsSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDbEMsVUFBVSxPQUFPLENBQUMsS0FBSztBQUN2QixZQUFZLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyx5REFBeUQsQ0FBQztBQUNuSCxXQUFXLENBQUM7QUFDWixVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtBQUMzQyxVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLDZEQUE2RCxDQUFDO0FBQ3ZILFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxNQUFNO0FBQ2hCLFNBQVM7QUFDVCxRQUFRLElBQUksc0JBQXNCLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDL0MsVUFBVSxNQUFNO0FBQ2hCLFNBQVM7QUFDVCxRQUFRLE1BQU0sR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO0FBQy9CLFFBQVEsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRTtBQUN0RSxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFNBQVM7QUFDVCxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsTUFBTSxLQUFLLEtBQUssQ0FBQyxZQUFZLEVBQUU7QUFDL0IsUUFBUSxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUNsQyxVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLDBEQUEwRCxDQUFDO0FBQ3BILFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxPQUFPO0FBQ2pCLFNBQVM7QUFDVCxRQUFRLElBQUksTUFBTSxDQUFDO0FBQ25CLFFBQVEsSUFBSTtBQUNaLFVBQVUsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3pDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNwQixVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLDhEQUE4RCxDQUFDO0FBQ3hILFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxNQUFNO0FBQ2hCLFNBQVM7QUFDVCxRQUFRLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0QyxRQUFRLElBQUksR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDN0MsVUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxLQUFLLENBQUMsYUFBYSxFQUFFO0FBQ2hDLFFBQVEsSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDbEMsVUFBVSxPQUFPLENBQUMsS0FBSztBQUN2QixZQUFZLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQywwREFBMEQsQ0FBQztBQUNwSCxXQUFXLENBQUM7QUFDWixVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtBQUMzQyxVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLDZEQUE2RCxDQUFDO0FBQ3ZILFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxNQUFNO0FBQ2hCLFNBQVM7QUFDVCxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRTtBQUM1RyxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxLQUFLLENBQUMsYUFBYSxFQUFFO0FBQ2hDLFFBQVEsSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDbEMsVUFBVSxPQUFPLENBQUMsS0FBSztBQUN2QixZQUFZLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQywwREFBMEQsQ0FBQztBQUNwSCxXQUFXLENBQUM7QUFDWixVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtBQUMzQyxVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLDZEQUE2RCxDQUFDO0FBQ3ZILFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxNQUFNO0FBQ2hCLFNBQVM7QUFDVCxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRTtBQUM1RyxVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ3hCLFFBQVEsSUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDbEMsVUFBVSxPQUFPLENBQUMsS0FBSztBQUN2QixZQUFZLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQywwREFBMEQsQ0FBQztBQUNwSCxXQUFXLENBQUM7QUFDWixVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsT0FBTztBQUNqQixTQUFTO0FBQ1QsUUFBUSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtBQUMzQyxVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLCtEQUErRCxDQUFDO0FBQ3pILFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxPQUFPO0FBQ2pCLFNBQVM7QUFDVCxRQUFRLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDNUMsUUFBUSxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRTtBQUM3QyxVQUFVLE9BQU8sQ0FBQyxLQUFLO0FBQ3ZCLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLGdGQUFnRixDQUFDO0FBQzFJLFdBQVcsQ0FBQztBQUNaLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsVUFBVSxPQUFPO0FBQ2pCLFNBQVM7QUFDVCxRQUFRLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxLQUFLO0FBQ3pELFVBQVUsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO0FBQ3ZHLFVBQVUsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO0FBQ3ZHLFVBQVUsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkcsVUFBVSxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsUUFBUTtBQUNwRyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDakUsV0FBVyxDQUFDO0FBQ1osVUFBVSxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2RyxVQUFVLE9BQU8sY0FBYyxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsQ0FBQztBQUM5RixTQUFTLENBQUM7QUFDVixRQUFRLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7QUFDakUsVUFBVSxLQUFLLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFO0FBQ2xGLFlBQVksTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqRCxZQUFZLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDdkIsY0FBYyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxjQUFjLE1BQU07QUFDcEIsYUFBYTtBQUNiLFlBQVksTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZFLFlBQVksSUFBSSxZQUFZLEVBQUU7QUFDOUIsY0FBYyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxjQUFjLE1BQU07QUFDcEIsYUFBYTtBQUNiLFdBQVc7QUFDWCxTQUFTO0FBQ1QsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sU0FBUztBQUNmLFFBQVEsSUFBSSxPQUFPLFNBQVMsQ0FBQyxTQUFTLEtBQUssVUFBVSxFQUFFO0FBQ3ZELFVBQVUsT0FBTyxDQUFDLEtBQUs7QUFDdkIsWUFBWSxDQUFDLCtCQUErQixFQUFFLEdBQUcsQ0FBQyxnRUFBZ0UsQ0FBQztBQUNuSCxXQUFXLENBQUM7QUFDWixVQUFVLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFVBQVUsT0FBTztBQUNqQixTQUFTO0FBQ1QsUUFBUSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUztBQUMxQyxVQUFVLFNBQVM7QUFDbkIsVUFBVSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7QUFDcEMsU0FBUyxDQUFDO0FBQ1YsUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLFNBQVMsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7QUFDekUsVUFBVSxPQUFPLENBQUMsS0FBSztBQUN2QixZQUFZLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxDQUFDLGtFQUFrRSxDQUFDO0FBQ2xILFdBQVcsQ0FBQztBQUNaLFNBQVM7QUFDVCxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO0FBQzFDLFVBQVUsSUFBSSxpQkFBaUIsRUFBRTtBQUNqQyxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQ3RELFdBQVcsTUFBTTtBQUNqQixZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQ3ZELFlBQVksTUFBTSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDckMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3JDLGNBQWMsT0FBTyxDQUFDLEtBQUs7QUFDM0IsZ0JBQWdCLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxDQUFDLG1FQUFtRSxDQUFDO0FBQ25JLGVBQWUsQ0FBQztBQUNoQixjQUFjLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ25ELGNBQWMsT0FBTztBQUNyQixhQUFhO0FBQ2IsWUFBWSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUs7QUFDMUMsY0FBYyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3pCLGdCQUFnQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNyRCxlQUFlO0FBQ2YsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU07QUFDM0IsY0FBYyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxhQUFhLENBQUMsQ0FBQztBQUNmLFdBQVc7QUFDWCxTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JCLFVBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsV0FBVyxHQUFHO0FBQ2hCLElBQUksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQzNFLE1BQU0sTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakQsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDbkMsUUFBUSxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDekIsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtBQUNsQyxRQUFRLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUNoRixNQUFNLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ25DLFFBQVEsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFFBQVEsTUFBTTtBQUNkLE9BQU87QUFDUCxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7QUFDbEMsUUFBUSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLFFBQVEsTUFBTTtBQUNkLE9BQU87QUFDUCxLQUFLO0FBQ0wsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLGlCQUFpQixHQUFHLEtBQUssRUFBRTtBQUNoRCxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLElBQUksS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDekIsSUFBSSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDeEIsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSztBQUNqRCxNQUFNLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxpQkFBaUI7QUFDeEMsUUFBUSxHQUFHO0FBQ1gsUUFBUSxLQUFLLENBQUMsSUFBSTtBQUNsQixRQUFRLElBQUk7QUFDWixRQUFRLGlCQUFpQjtBQUN6QixPQUFPLENBQUM7QUFDUixNQUFNLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzFCLFFBQVEsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQixPQUFPO0FBQ1AsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtBQUN2QixNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4RixLQUFLO0FBQ0wsSUFBSSxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU07QUFDdEQsTUFBTSxJQUFJLEdBQUcsQ0FBQztBQUNkLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtBQUM3QixRQUFRLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDMUUsVUFBVSxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUNyQyxVQUFVLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztBQUN2QyxVQUFVLE1BQU0sRUFBRSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7QUFDNUMsVUFBVSxNQUFNLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDekMsU0FBUyxDQUFDLENBQUM7QUFDWCxPQUFPO0FBQ1AsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsYUFBYSxFQUFFO0FBQ2pDLElBQUksSUFBSSxPQUFPLGFBQWEsS0FBSyxRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUU7QUFDeEUsTUFBTSxNQUFNLEtBQUs7QUFDakIsUUFBUSxDQUFDLHFGQUFxRixDQUFDO0FBQy9GLE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxJQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMxRCxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ25DLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQztBQUNsRSxNQUFNLE9BQU8sT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzlCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUs7QUFDcEMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTTtBQUNsRCxRQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsUUFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6QyxRQUFRLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxPQUFPLENBQUMsQ0FBQztBQUNULEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsZUFBZSxDQUFDLGFBQWEsRUFBRTtBQUNqQyxJQUFJLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFO0FBQ3hFLE1BQU0sTUFBTSxLQUFLO0FBQ2pCLFFBQVEsQ0FBQyxxRkFBcUYsQ0FBQztBQUMvRixPQUFPLENBQUM7QUFDUixLQUFLO0FBQ0wsSUFBSSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDMUQsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN4QyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUM7QUFDbEUsTUFBTSxPQUFPLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUM5QixLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLO0FBQ3BDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTTtBQUM1QyxRQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pDLFFBQVEsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pELE9BQU8sQ0FBQyxDQUFDO0FBQ1QsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLGlCQUFpQixHQUFHLEtBQUssRUFBRTtBQUNoRCxJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEMsSUFBSSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDeEIsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSztBQUNqRCxNQUFNLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqRSxNQUFNLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzFCLFFBQVEsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQixPQUFPO0FBQ1AsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTTtBQUN0RCxNQUFNLElBQUksRUFBRSxDQUFDO0FBQ2IsTUFBTSxJQUFJLGlCQUFpQixFQUFFO0FBQzdCLFFBQVEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtBQUN4RSxVQUFVLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ3JDLFVBQVUsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO0FBQ3ZDLFVBQVUsTUFBTSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtBQUM1QyxVQUFVLE1BQU0sRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUN6QyxTQUFTLENBQUMsQ0FBQztBQUNYLE9BQU87QUFDUCxLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLGlCQUFpQixHQUFHO0FBQ3RCLElBQUksS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ25DLE1BQU0sTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQzFCLFFBQVEsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoRCxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLHFCQUFxQixDQUFDLGlCQUFpQixHQUFHLEtBQUssRUFBRTtBQUNuRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN6QyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRTtBQUM3QyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQy9CLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxRQUFRLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxFQUFFO0FBQ3RDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSztBQUNwQyxNQUFNLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsS0FBSztBQUNoRCxRQUFRLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEQsUUFBUSxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNoQyxVQUFVLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsU0FBUztBQUNULE9BQU8sQ0FBQyxDQUFDO0FBQ1QsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEtBQUs7QUFDckQsUUFBUSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELFFBQVEsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDaEMsVUFBVSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLFNBQVM7QUFDVCxPQUFPLENBQUMsQ0FBQztBQUNULE1BQU0sT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUM5QyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQ2YsUUFBUSxJQUFJLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN0RCxRQUFRLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDeEUsVUFBVSxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUNyQyxVQUFVLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztBQUN2QyxVQUFVLE1BQU0sRUFBRSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7QUFDNUMsVUFBVSxNQUFNLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDekMsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLE9BQU8sQ0FBQyxDQUFDO0FBQ1QsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxVQUFVLEdBQUc7QUFDZixJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUs7QUFDcEMsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNO0FBQ3ZELFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFO0FBQ2pELFVBQVUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDbkMsU0FBUztBQUNULFFBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QixPQUFPLENBQUMsQ0FBQztBQUNULEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsZUFBZSxDQUFDLEVBQUUsRUFBRSxpQkFBaUIsR0FBRyxLQUFLLEVBQUU7QUFDakQsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO0FBQ3BDLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3RCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNO0FBQzFELE1BQU0sSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUNyQixNQUFNLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7QUFDdEMsUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDMUIsT0FBTztBQUNQLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3hCLFFBQVEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMzRSxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRTtBQUN2RCxVQUFVLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3ZGLFNBQVM7QUFDVCxPQUFPLE1BQU07QUFDYixRQUFRLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsSCxPQUFPO0FBQ1AsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2hCLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDckIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDdkQsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3JFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNsRSxHQUFHO0FBQ0gsRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDbkMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzVELEdBQUc7QUFDSCxFQUFFLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtBQUN0QyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUMsSUFBSSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTTtBQUNwRCxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSTtBQUN4RCxLQUFLLENBQUM7QUFDTixHQUFHO0FBQ0gsRUFBRSxRQUFRLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDekMsSUFBSSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUN4RSxNQUFNLE1BQU0sS0FBSztBQUNqQixRQUFRLENBQUMscUZBQXFGLENBQUM7QUFDL0YsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksSUFBSSxJQUFJLENBQUM7QUFDYixJQUFJLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO0FBQzNDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3BELEtBQUssTUFBTTtBQUNYLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQztBQUMzQixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2YsTUFBTSxNQUFNLEtBQUs7QUFDakIsUUFBUSxDQUFDLGdFQUFnRSxDQUFDO0FBQzFFLE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUNoRCxNQUFNLE1BQU0sS0FBSztBQUNqQixRQUFRLENBQUMsd0VBQXdFLENBQUM7QUFDbEYsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSztBQUM1QixNQUFNLElBQUksRUFBRSxNQUFNLElBQUksSUFBSSxJQUFJLFdBQVcsSUFBSSxJQUFJLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFO0FBQ3hFLFFBQVEsTUFBTSxLQUFLO0FBQ25CLFVBQVUsQ0FBQyxvRUFBb0UsQ0FBQztBQUNoRixTQUFTLENBQUM7QUFDVixPQUFPO0FBQ1AsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDeEcsUUFBUSxNQUFNLEtBQUs7QUFDbkIsVUFBVSxDQUFDLG1DQUFtQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSTtBQUN6RSxZQUFZLElBQUk7QUFDaEIsV0FBVyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQyxTQUFTLENBQUM7QUFDVixPQUFPO0FBQ1AsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMxRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUc7QUFDdkIsTUFBTSxJQUFJO0FBQ1YsTUFBTSxLQUFLO0FBQ1gsTUFBTSxPQUFPLEVBQUUsS0FBSyxDQUFDO0FBQ3JCLE1BQU0sT0FBTyxFQUFFLEtBQUs7QUFDcEIsTUFBTSxNQUFNO0FBQ1osS0FBSyxDQUFDO0FBQ04sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUU7QUFDeEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLEdBQUc7QUFDSCxFQUFFLFdBQVcsQ0FBQyxhQUFhLEVBQUU7QUFDN0IsSUFBSSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUN4RSxNQUFNLE1BQU0sS0FBSztBQUNqQixRQUFRLENBQUMscUZBQXFGLENBQUM7QUFDL0YsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFELElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDbkMsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6RSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN2QixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLEdBQUc7QUFDSCxFQUFFLFdBQVcsQ0FBQyxLQUFLLEVBQUU7QUFDckIsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUNuQyxNQUFNLE1BQU0sS0FBSztBQUNqQixRQUFRLENBQUMsOERBQThELENBQUM7QUFDeEUsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xELElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDeEMsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLO0FBQ2xELE1BQU0sTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkQsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFELEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdkIsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakMsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixHQUFHO0FBQ0gsRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUU7QUFDckUsSUFBSSxJQUFJLE9BQU8sVUFBVSxLQUFLLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUNsRSxNQUFNLE1BQU0sS0FBSztBQUNqQixRQUFRLENBQUMscUZBQXFGLENBQUM7QUFDL0YsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksSUFBSSxJQUFJLENBQUM7QUFDYixJQUFJLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO0FBQ3hDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pELEtBQUssTUFBTTtBQUNYLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQztBQUN4QixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2YsTUFBTSxNQUFNLEtBQUssQ0FBQyxDQUFDLDBEQUEwRCxDQUFDLENBQUMsQ0FBQztBQUNoRixLQUFLO0FBQ0wsSUFBSSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEQsSUFBSSxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssS0FBSztBQUNoRSxNQUFNLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDL0UsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ25CLFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsT0FBTztBQUNQLE1BQU0sT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUM7QUFDOUQsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN2RCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUc7QUFDNUIsTUFBTSxLQUFLLEVBQUU7QUFDYixRQUFRO0FBQ1IsVUFBVSxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVE7QUFDbkMsVUFBVSxZQUFZO0FBQ3RCLFVBQVUsY0FBYztBQUN4QixTQUFTO0FBQ1QsT0FBTztBQUNQLE1BQU0sU0FBUyxFQUFFLElBQUk7QUFDckIsTUFBTSxLQUFLLEVBQUUsY0FBYztBQUMzQixNQUFNLE9BQU8sRUFBRSxLQUFLO0FBQ3BCLE1BQU0sT0FBTyxFQUFFLEtBQUssQ0FBQztBQUNyQixNQUFNLE1BQU07QUFDWixLQUFLLENBQUM7QUFDTixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUs7QUFDOUIsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9CLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsSUFBSSxFQUFFO0FBQ3hCLElBQUksUUFBUSxJQUFJO0FBQ2hCLE1BQU0sS0FBSyxVQUFVLENBQUM7QUFDdEIsTUFBTSxLQUFLLFlBQVksQ0FBQztBQUN4QixNQUFNLEtBQUssTUFBTSxDQUFDO0FBQ2xCLE1BQU0sS0FBSyxPQUFPLEVBQUU7QUFDcEIsUUFBUSxPQUFPLFFBQVEsQ0FBQztBQUN4QixPQUFPO0FBQ1AsTUFBTSxTQUFTO0FBQ2YsUUFBUSxPQUFPLE9BQU8sQ0FBQztBQUN2QixPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLFlBQVksQ0FBQyxJQUFJLEVBQUU7QUFDckIsSUFBSSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDeEQsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3JELEdBQUc7QUFDSCxFQUFFLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFDdkIsSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDZixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNoRSxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNsRSxHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLElBQUksSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDdkIsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLElBQUksTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDO0FBQ3hILElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUs7QUFDOUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEMsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDO0FBQ3BJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUs7QUFDaEQsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbEMsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDL0IsTUFBTSxHQUFHLFlBQVk7QUFDckIsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQjtBQUM5RyxPQUFPO0FBQ1AsTUFBTSxHQUFHLFlBQVk7QUFDckIsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQjtBQUNsSCxPQUFPO0FBQ1AsS0FBSyxDQUFDO0FBQ04sR0FBRztBQUNILEVBQUUsV0FBVyxHQUFHO0FBQ2hCLElBQUksSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQ2YsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPO0FBQ3pDLE1BQU0sQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUU7QUFDN0MsS0FBSyxDQUFDO0FBQ04sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPO0FBQzNDLE1BQU0sQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUU7QUFDL0MsS0FBSyxDQUFDO0FBQ04sSUFBSSxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDbkMsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLEtBQUs7QUFDTCxJQUFJLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUN4QyxNQUFNLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsTUFBTSxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7QUFDMUgsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSztBQUNoRCxRQUFRLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLO0FBQ3RDLFVBQVUsSUFBSSxHQUFHLENBQUM7QUFDbEIsVUFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQyxVQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTTtBQUMvQixZQUFZLEdBQUcsWUFBWTtBQUMzQixjQUFjLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLGtCQUFrQixLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCO0FBQ3RILGFBQWE7QUFDYixXQUFXLENBQUM7QUFDWixTQUFTLENBQUMsQ0FBQztBQUNYLE9BQU8sQ0FBQyxDQUFDO0FBQ1QsTUFBTSxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztBQUN0SSxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLO0FBQ2xELFFBQVEsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUs7QUFDdEMsVUFBVSxJQUFJLEdBQUcsQ0FBQztBQUNsQixVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hDLFVBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNO0FBQy9CLFlBQVksR0FBRyxZQUFZO0FBQzNCLGNBQWMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsb0JBQW9CLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0I7QUFDMUgsYUFBYTtBQUNiLFdBQVcsQ0FBQztBQUNaLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsT0FBTyxDQUFDLENBQUM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUN2QixHQUFHO0FBQ0gsRUFBRSxTQUFTLEdBQUc7QUFDZCxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3ZDLEdBQUc7QUFDSCxFQUFFLFFBQVEsR0FBRztBQUNiLElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0I7QUFDNUMsTUFBTSxpQ0FBaUM7QUFDdkMsS0FBSyxDQUFDO0FBQ04sSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQ3RELE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVk7QUFDM0IsUUFBUSxzQ0FBc0M7QUFDOUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLE1BQU0sR0FBRyxPQUFPO0FBQzVDLE9BQU8sQ0FBQztBQUNSLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDcEQsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFDNUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxpQkFBaUIsQ0FBQztBQUN0RCxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ2hELEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxVQUFVLEdBQUc7QUFDZixJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQzVDLE1BQU0saUNBQWlDO0FBQ3ZDLEtBQUssQ0FBQztBQUNOLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxzQ0FBc0MsQ0FBQyxLQUFLLE1BQU0sRUFBRTtBQUNwRixRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0MsT0FBTztBQUNQLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7QUFDNUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNYLElBQUksTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3RFLElBQUksTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDOUQsSUFBSSxNQUFNLEdBQUcsR0FBRyxRQUFRLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5RixJQUFJLFFBQVEsR0FBRztBQUNmLE1BQU0sS0FBSyxNQUFNLEVBQUU7QUFDbkIsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkYsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLGNBQWMsQ0FBQyxLQUFLLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUYsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxLQUFLLEVBQUU7QUFDbEIsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekYsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkYsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sS0FBSyxPQUFPLEVBQUU7QUFDcEIsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkYsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzRSxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsTUFBTSxLQUFLLFFBQVEsRUFBRTtBQUNyQixRQUFRLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxHQUFHLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLFFBQVEsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25GLFFBQVEsTUFBTTtBQUNkLE9BQU87QUFDUCxLQUFLO0FBQ0wsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7QUFDdkMsSUFBSSxNQUFNLE9BQU8sR0FBRyxNQUFNO0FBQzFCLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELEtBQUssQ0FBQztBQUNOLElBQUksT0FBTztBQUNYLE1BQU0sT0FBTztBQUNiLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSCxFQUFFLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFO0FBQ2xELElBQUksTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyRCxJQUFJLFVBQVUsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO0FBQ3hDLElBQUksTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsTUFBTSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsZUFBZSxHQUFHLENBQUMsTUFBTSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsZUFBZSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDO0FBQ2hNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDM0QsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUc7QUFDNUIsTUFBTSxHQUFHLFlBQVk7QUFDckIsUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCO0FBQ3JHLE9BQU87QUFDUCxNQUFNLDJCQUEyQjtBQUNqQyxLQUFLLENBQUM7QUFDTixJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzFCLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQzFDLEtBQUs7QUFDTCxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7QUFDdkMsTUFBTSxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDO0FBQ3ZDLElBQUksT0FBTyxVQUFVLENBQUM7QUFDdEIsR0FBRztBQUNILEVBQUUsc0JBQXNCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUU7QUFDdEQsSUFBSSxJQUFJLGNBQWMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUNuQyxNQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkQsSUFBSSxZQUFZLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQztBQUM1QyxJQUFJLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDO0FBQ2hJLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFDL0QsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUc7QUFDOUIsTUFBTSxHQUFHLFlBQVk7QUFDckIsUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CO0FBQ3pHLE9BQU87QUFDUCxNQUFNLDZCQUE2QjtBQUNuQyxLQUFLLENBQUM7QUFDTixJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7QUFDdkMsTUFBTSxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzNELEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDO0FBQzNDLElBQUksT0FBTyxZQUFZLENBQUM7QUFDeEIsR0FBRztBQUNILEVBQUUscUJBQXFCLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRTtBQUNoRCxJQUFJLE1BQU0sU0FBUyxHQUFHLGVBQWUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQztBQUMzRSxJQUFJLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO0FBQ3ZDLE1BQU0sTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEQsTUFBTSxJQUFJLElBQUksRUFBRTtBQUNoQixRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsUUFBUSxPQUFPLElBQUksQ0FBQztBQUNwQixPQUFPLE1BQU07QUFDYixRQUFRLE9BQU8sQ0FBQyxLQUFLO0FBQ3JCLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxTQUFTLENBQUMscURBQXFELENBQUM7QUFDbEcsU0FBUyxDQUFDO0FBQ1YsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJLElBQUksU0FBUyxZQUFZLE9BQU8sRUFBRTtBQUN0QyxNQUFNLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsTUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM5QixNQUFNLE9BQU8sQ0FBQyxLQUFLO0FBQ25CLFFBQVEsQ0FBQyxzR0FBc0csQ0FBQztBQUNoSCxPQUFPLENBQUM7QUFDUixLQUFLO0FBQ0wsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixHQUFHO0FBQ0gsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUU7QUFDNUQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3BCLE1BQU0sTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMscUJBQXFCO0FBQ2xFLFFBQVEsS0FBSztBQUNiLFFBQVEsZUFBZTtBQUN2QixPQUFPLENBQUM7QUFDUixNQUFNLElBQUkseUJBQXlCLEVBQUU7QUFDckMsUUFBUSxPQUFPO0FBQ2YsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsR0FBRztBQUNILEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFO0FBQzVELElBQUksSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDbkMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3BCLE1BQU0sTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMscUJBQXFCO0FBQ2xFLFFBQVEsS0FBSztBQUNiLFFBQVEsZUFBZTtBQUN2QixPQUFPLENBQUM7QUFDUixNQUFNLElBQUkseUJBQXlCLEVBQUU7QUFDckMsUUFBUSxPQUFPO0FBQ2YsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7QUFDM0QsTUFBTSxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYTtBQUM5QyxRQUFRLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2pELE9BQU8sQ0FBQztBQUNSLE1BQU0sSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxPQUFPLEVBQUU7QUFDNUgsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RILE9BQU8sTUFBTSxJQUFJLFNBQVMsRUFBRTtBQUM1QixRQUFRLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxhQUFhLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEYsT0FBTyxNQUFNO0FBQ2IsUUFBUSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNFLE9BQU87QUFDUCxLQUFLLE1BQU07QUFDWCxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekUsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO0FBQzlCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLO0FBQ2xELE1BQU0sTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLE1BQU0sTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3hELE1BQU0sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDckMsUUFBUSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLFFBQVEsT0FBTztBQUNmLE9BQU87QUFDUCxNQUFNLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckMsTUFBTSxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDO0FBQy9CLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMvQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFO0FBQzFELFFBQVEsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoRCxPQUFPO0FBQ1AsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO0FBQ3JCLElBQUksSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDcEMsTUFBTSxNQUFNLEtBQUs7QUFDakIsUUFBUSxpRUFBaUU7QUFDekUsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEMsR0FBRztBQUNILEVBQUUsaUJBQWlCLENBQUMsTUFBTSxFQUFFO0FBQzVCLElBQUksSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDcEMsTUFBTSxNQUFNLEtBQUs7QUFDakIsUUFBUSx3RUFBd0U7QUFDaEYsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbkMsR0FBRztBQUNILEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLE1BQU0sR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ2pELElBQUksSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUMvQixJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO0FBQ2pDLE1BQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDM0IsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFHLE1BQU0sT0FBTztBQUNiLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtBQUN2QixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUU7QUFDcEMsUUFBUSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsc0JBQXNCO0FBQ3hELFVBQVUsR0FBRztBQUNiLFVBQVUsT0FBTyxLQUFLLEtBQUssQ0FBQyxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsY0FBYztBQUM3RCxVQUFVLEtBQUssQ0FBQyxNQUFNO0FBQ3RCLFNBQVMsQ0FBQztBQUNWLFFBQVEsSUFBSSxZQUFZLEVBQUU7QUFDMUIsVUFBVSxJQUFJLENBQUMsZ0JBQWdCO0FBQy9CLFlBQVksS0FBSyxDQUFDLElBQUk7QUFDdEIsWUFBWSxZQUFZO0FBQ3hCLFlBQVksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWU7QUFDckUsWUFBWSxJQUFJO0FBQ2hCLFdBQVcsQ0FBQztBQUNaLFNBQVM7QUFDVCxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUc7QUFDaEMsVUFBVSxHQUFHLFlBQVk7QUFDekIsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQjtBQUN0SCxXQUFXO0FBQ1gsU0FBUyxDQUFDO0FBQ1YsT0FBTztBQUNQLE1BQU0sT0FBTztBQUNiLEtBQUs7QUFDTCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUc7QUFDNUIsTUFBTSxHQUFHLFlBQVk7QUFDckIsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQjtBQUM5RyxPQUFPO0FBQ1AsS0FBSyxDQUFDO0FBQ04sSUFBSSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CO0FBQ2hELE1BQU0sR0FBRztBQUNULE1BQU0sT0FBTyxLQUFLLEtBQUssQ0FBQyxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsWUFBWTtBQUN2RCxNQUFNLEtBQUssQ0FBQyxNQUFNO0FBQ2xCLEtBQUssQ0FBQztBQUNOLElBQUksSUFBSSxDQUFDLGdCQUFnQjtBQUN6QixNQUFNLEtBQUssQ0FBQyxJQUFJO0FBQ2hCLE1BQU0sVUFBVTtBQUNoQixNQUFNLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlO0FBQy9ELEtBQUssQ0FBQztBQUNOLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDMUIsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUk7QUFDeEIsUUFBUSxJQUFJLENBQUMsYUFBYTtBQUMxQixVQUFVLEtBQUssQ0FBQyxJQUFJO0FBQ3BCLFVBQVUsVUFBVTtBQUNwQixVQUFVLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRO0FBQ2pHLFNBQVM7QUFDVCxPQUFPLENBQUM7QUFDUixLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEtBQUssR0FBRyxJQUFJLEVBQUU7QUFDdEMsSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUN2QixJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEMsSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO0FBQ2pDLE1BQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDM0IsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7QUFDbkYsTUFBTSxPQUFPO0FBQ2IsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUs7QUFDcEMsUUFBUSxJQUFJLEdBQUcsRUFBRSxHQUFHLENBQUM7QUFDckIsUUFBUSxNQUFNLENBQUMsTUFBTTtBQUNyQixVQUFVLElBQUksQ0FBQyxLQUFLO0FBQ3BCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsaUJBQWlCLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUI7QUFDaEgsU0FBUyxDQUFDO0FBQ1YsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUc7QUFDMUIsVUFBVSxHQUFHLFlBQVk7QUFDekIsWUFBWSxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQjtBQUN4SCxXQUFXO0FBQ1gsU0FBUyxDQUFDO0FBQ1YsT0FBTyxDQUFDLENBQUM7QUFDVCxNQUFNLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxzQkFBc0I7QUFDdEQsUUFBUSxHQUFHO0FBQ1gsUUFBUSxLQUFLLENBQUMsY0FBYztBQUM1QixRQUFRLEtBQUssQ0FBQyxNQUFNO0FBQ3BCLE9BQU8sQ0FBQztBQUNSLE1BQU0sSUFBSSxZQUFZLEVBQUU7QUFDeEIsUUFBUSxJQUFJLENBQUMsZ0JBQWdCO0FBQzdCLFVBQVUsS0FBSyxDQUFDLFNBQVM7QUFDekIsVUFBVSxZQUFZO0FBQ3RCLFVBQVUsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWU7QUFDbkUsVUFBVSxJQUFJO0FBQ2QsU0FBUyxDQUFDO0FBQ1YsT0FBTztBQUNQLE1BQU0sT0FBTztBQUNiLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUs7QUFDbEMsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLENBQUM7QUFDbkIsTUFBTSxNQUFNLENBQUMsTUFBTTtBQUNuQixRQUFRLElBQUksQ0FBQyxLQUFLO0FBQ2xCLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsZUFBZSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZTtBQUMxRyxPQUFPLENBQUM7QUFDUixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRztBQUN4QixRQUFRLEdBQUcsWUFBWTtBQUN2QixVQUFVLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLGtCQUFrQixLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCO0FBQ2xILFNBQVM7QUFDVCxPQUFPLENBQUM7QUFDUixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLG9CQUFvQjtBQUNoRCxNQUFNLEdBQUc7QUFDVCxNQUFNLEtBQUssQ0FBQyxZQUFZO0FBQ3hCLE1BQU0sS0FBSyxDQUFDLE1BQU07QUFDbEIsS0FBSyxDQUFDO0FBQ04sSUFBSSxJQUFJLENBQUMsZ0JBQWdCO0FBQ3pCLE1BQU0sS0FBSyxDQUFDLFNBQVM7QUFDckIsTUFBTSxVQUFVO0FBQ2hCLE1BQU0sQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWU7QUFDL0QsS0FBSyxDQUFDO0FBQ04sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUMxQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTtBQUN4QixRQUFRLElBQUksQ0FBQyxhQUFhO0FBQzFCLFVBQVUsS0FBSyxDQUFDLFNBQVM7QUFDekIsVUFBVSxVQUFVO0FBQ3BCLFVBQVUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVE7QUFDakcsU0FBUztBQUNULE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxZQUFZLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxFQUFFO0FBQzFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUU7QUFDaEcsTUFBTSxPQUFPO0FBQ2IsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDeEIsSUFBSSxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDeEMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakMsS0FBSztBQUNMLElBQUksS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ25DLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxPQUFPLEdBQUc7QUFDWixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxLQUFLO0FBQzNDLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlELEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEtBQUs7QUFDdkQsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3pDLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdkIsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO0FBQ3BDLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3hCLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxPQUFPLEdBQUc7QUFDWixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNuQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3BCLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0FBQzFFLEtBQUssTUFBTTtBQUNYLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwRCxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsS0FBSztBQUNoRCxRQUFRLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5RCxRQUFRLElBQUksYUFBYSxFQUFFO0FBQzNCLFVBQVUsSUFBSSxDQUFDLFFBQVE7QUFDdkIsWUFBWSxhQUFhO0FBQ3pCLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3ZDLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNO0FBQ25DLFdBQVcsQ0FBQztBQUNaLFNBQVM7QUFDVCxPQUFPLENBQUMsQ0FBQztBQUNULEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7QUFDM0IsSUFBSSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDekQsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDekQsTUFBTSxPQUFPO0FBQ2IsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFDaEMsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDMUIsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDdEIsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUU7QUFDdEIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO0FBQ3RDLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRTtBQUNuQixJQUFJLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBQ25DLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRTtBQUN2QixJQUFJLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLENBQUM7QUFDdkMsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixHQUFHO0FBQ0g7O0FDM2lETyxNQUFNSSxvQkFBb0IsR0FBRztBQUNsQ0MsRUFBQUEsa0JBQWtCLEVBQUUsZ0JBQWdCO0VBQ3BDQyxlQUFlLEVBQUUsRUFBRTtFQUNuQkMsa0JBQWtCLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQTtBQUMxQyxDQUFDLENBQUE7QUFFRCxNQUFNQywyQkFBMkIsR0FBRztBQUNsQ0MsRUFBQUEsSUFBSSxFQUFFLFVBQVU7QUFDaEJDLEVBQUFBLFlBQVksRUFBRSxtQkFBQTtBQUNoQixDQUFDLENBQUE7QUFFTSxNQUFNQyx5QkFBeUIsR0FBRyxDQUN2Q0gsMkJBQTJCLEVBQzNCO0FBQ0VDLEVBQUFBLElBQUksRUFBRSxjQUFjO0FBQ3BCRyxFQUFBQSxLQUFLLEVBQUUsMEVBQTBFO0FBQ2pGRixFQUFBQSxZQUFZLEVBQUUsbUJBQUE7QUFDaEIsQ0FBQyxDQUNGLENBQUE7QUFFTSxNQUFNRyx3QkFBd0IsR0FBRyxDQUN0Q0wsMkJBQTJCLEVBQzNCO0FBQ0VDLEVBQUFBLElBQUksRUFBRSxXQUFXO0FBQ2pCRyxFQUFBQSxLQUFLLEVBQUUsQ0FBQztBQUNSRixFQUFBQSxZQUFZLEVBQUUsMkJBQUE7QUFDaEIsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxXQUFXO0FBQ2pCRyxFQUFBQSxLQUFLLEVBQUUsRUFBRTtBQUNURixFQUFBQSxZQUFZLEVBQUUsMEJBQUE7QUFDaEIsQ0FBQyxDQUNGLENBQUE7QUFFTSxNQUFNSSx5QkFBeUIsR0FBRyxDQUN2Q04sMkJBQTJCLEVBQzNCO0FBQ0VDLEVBQUFBLElBQUksRUFBRSxPQUFPO0FBQ2JDLEVBQUFBLFlBQVksRUFBRSxtQkFBQTtBQUNoQixDQUFDLENBQ0YsQ0FBQTtBQUVNLE1BQU1LLDRCQUE0QixHQUFHLENBQUNQLDJCQUEyQixDQUFDLENBQUE7QUFFbEUsTUFBTVEsMkJBQTJCLEdBQUcsQ0FDekNSLDJCQUEyQixFQUMzQjtBQUNFQyxFQUFBQSxJQUFJLEVBQUUsU0FBUztBQUNmQyxFQUFBQSxZQUFZLEVBQUUsZUFBQTtBQUNoQixDQUFDLENBQ0YsQ0FBQTtBQUVNLE1BQU1PLDJCQUEyQixHQUFHO0FBQ3pDWixFQUFBQSxrQkFBa0IsRUFBRSxpQkFBQTtBQUN0QixDQUFDLENBQUE7QUFFTSxTQUFTYSxjQUFjQSxDQUFDQyxhQUFhLEVBQUU7RUFDNUMsT0FBTztBQUNMQyxJQUFBQSxNQUFNLEVBQUUsTUFBTTtBQUNkQyxJQUFBQSxPQUFPLEVBQUU7QUFDUCxNQUFBLGNBQWMsRUFBRSxnQ0FBQTtLQUNqQjtBQUNEQyxJQUFBQSxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTCxhQUFhLENBQUE7R0FDbkMsQ0FBQTtBQUNILENBQUE7QUFFTyxNQUFNTSxtQkFBbUIsR0FBR0EsQ0FBQ0MsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxLQUFLO0FBQ3RFLEVBQUEsTUFBTUMsUUFBUSxHQUFHLElBQUlDLFFBQVEsQ0FBQ0wsSUFBSSxDQUFDLENBQUE7RUFDbkMsTUFBTVAsYUFBYSxHQUFHYSxNQUFNLENBQUNDLFdBQVcsQ0FBQ0gsUUFBUSxDQUFDSSxPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBQzVEQyxFQUFBQSxLQUFLLENBQUNSLFNBQVMsRUFBRVQsY0FBYyxDQUFDQyxhQUFhLENBQUMsQ0FBQyxDQUFDckIsSUFBSSxDQUFFc0MsUUFBUSxJQUFLO0lBQ2pFLElBQUlBLFFBQVEsQ0FBQ0MsRUFBRSxFQUFFO0FBQ2ZULE1BQUFBLE9BQU8sRUFBRSxDQUFBO0FBQ1gsS0FBQyxNQUFNO0FBQ0xDLE1BQUFBLEtBQUssRUFBRSxDQUFBO0FBQ1QsS0FBQTtBQUNGLEdBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRU0sTUFBTVMsZ0JBQWdCLEdBQUlDLE1BQU0sSUFBSztBQUMxQyxFQUFBLElBQUlBLE1BQU0sQ0FBQzNCLEtBQUssQ0FBQzRCLE1BQU0sS0FBSyxDQUFDLEVBQUVELE1BQU0sQ0FBQ0UsU0FBUyxDQUFDQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtBQUN4RUgsRUFBQUEsTUFBTSxDQUFDMUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFlBQVk7SUFDNUMsSUFBSSxDQUFDZSxLQUFLLENBQUM0QixNQUFNLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxJQUFJLENBQUNELFNBQVMsQ0FBQ0UsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7QUFDaEgsR0FBQyxDQUFDLENBQUE7QUFDSixDQUFDOztBQ3RFRCxNQUFNQyxTQUFTLEdBQUdBLE1BQU07RUFDdEJDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUNsQixDQUFDLENBQUE7QUFDRCxNQUFNQyxPQUFPLEdBQUdBLE1BQU07RUFDcEJELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNoQixDQUFDLENBQUE7QUFFRHJELEtBQUssQ0FBQyxZQUFZO0FBQ2hCLEVBQUEsTUFBTXVELFVBQVUsR0FBR3JELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUN4RCxFQUFBLE1BQU1DLFdBQVcsR0FBR3ZELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUMxRCxFQUFBLE1BQU1FLFlBQVksR0FBR3hELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUM1RCxFQUFBLE1BQU1HLFdBQVcsR0FBR3pELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUUxRCxFQUFBLE1BQU1JLFFBQVEsR0FBRzFELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUNwRCxFQUFBLE1BQU1LLFFBQVEsR0FBRzNELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUNwRCxFQUFBLE1BQU1NLFFBQVEsR0FBRzVELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUNwRCxFQUFBLE1BQU1PLGVBQWUsR0FBRzdELFFBQVEsQ0FBQ3NELGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0FBQ2xFLEVBQUEsTUFBTVEsZUFBZSxHQUFHOUQsUUFBUSxDQUFDc0QsYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFDbEUsRUFBQSxNQUFNUyxVQUFVLEdBQUcvRCxRQUFRLENBQUNzRCxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDeEQsRUFBQSxNQUFNVSxRQUFRLEdBQUdoRSxRQUFRLENBQUNzRCxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDcEQsRUFBQSxNQUFNVyxZQUFZLEdBQUdqRSxRQUFRLENBQUNzRCxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUE7QUFDNUQsRUFBQSxNQUFNWSxXQUFXLEdBQUdsRSxRQUFRLENBQUNzRCxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDMUQsRUFBQSxNQUFNYSxVQUFVLEdBQUduRSxRQUFRLENBQUNzRCxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDeEQsRUFBQSxNQUFNYyxZQUFZLEdBQUdwRSxRQUFRLENBQUNzRCxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFNUQsRUFBQSxJQUFJSSxRQUFRLEVBQUU7QUFDWixJQUFBLE1BQU16QixTQUFTLEdBQUd5QixRQUFRLENBQUNXLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNqRCxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJQyxZQUFZLENBQUNiLFFBQVEsRUFBRWhELG9CQUFvQixDQUFDLENBQUE7QUFFekU0RCxJQUFBQSxnQkFBZ0IsQ0FDYkUsUUFBUSxDQUFDLHFCQUFxQixFQUFFdkQseUJBQXlCLENBQUMsQ0FDMUR1RCxRQUFRLENBQUMsb0JBQW9CLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUN4RHFELFFBQVEsQ0FBQyx3QkFBd0IsRUFBRXJELHdCQUF3QixDQUFDLENBQzVEcUQsUUFBUSxDQUFDLHFCQUFxQixFQUFFcEQseUJBQXlCLENBQUMsQ0FDMURvRCxRQUFRLENBQUMsb0JBQW9CLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUM1RG1ELFFBQVEsQ0FBQywyQkFBMkIsRUFBRW5ELDRCQUE0QixDQUFDLENBQ25FbUQsUUFBUSxDQUFDLHlCQUF5QixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQzlGaUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQzdGaUQsUUFBUSxDQUFDLHNCQUFzQixFQUFFbEQsMkJBQTJCLENBQUMsQ0FDN0RrRCxRQUFRLENBQUMseUJBQXlCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUNqRW1ELFFBQVEsQ0FBQyx1QkFBdUIsRUFBRW5ELDRCQUE0QixDQUFDLENBQy9Eb0QsU0FBUyxDQUFDLE1BQU07TUFDZjFDLG1CQUFtQixDQUFDMkIsUUFBUSxFQUFFekIsU0FBUyxFQUFFaUIsU0FBUyxFQUFFRSxPQUFPLENBQUMsQ0FBQTtBQUM5RCxLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFFQSxFQUFBLElBQUlPLFFBQVEsRUFBRTtBQUNaLElBQUEsTUFBTTFCLFNBQVMsR0FBRzBCLFFBQVEsQ0FBQ1UsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2pELE1BQU1LLGdCQUFnQixHQUFHLElBQUlILFlBQVksQ0FBQ1osUUFBUSxFQUFFakQsb0JBQW9CLENBQUMsQ0FBQTtBQUV6RWdFLElBQUFBLGdCQUFnQixDQUNiRixRQUFRLENBQUMscUJBQXFCLEVBQUV2RCx5QkFBeUIsQ0FBQyxDQUMxRHVELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRXJELHdCQUF3QixDQUFDLENBQ3hEcUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFckQsd0JBQXdCLENBQUMsQ0FDNURxRCxRQUFRLENBQUMscUJBQXFCLEVBQUVwRCx5QkFBeUIsQ0FBQyxDQUMxRG9ELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRW5ELDRCQUE0QixDQUFDLENBQzVEbUQsUUFBUSxDQUFDLDJCQUEyQixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDbkVtRCxRQUFRLENBQUMsc0JBQXNCLEVBQUVsRCwyQkFBMkIsQ0FBQyxDQUM3RGtELFFBQVEsQ0FBQyx5QkFBeUIsRUFBRW5ELDRCQUE0QixDQUFDLENBQ2pFbUQsUUFBUSxDQUFDLHVCQUF1QixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDL0RvRCxTQUFTLENBQUMsTUFBTTtNQUNmMUMsbUJBQW1CLENBQUM0QixRQUFRLEVBQUUxQixTQUFTLEVBQUVpQixTQUFTLEVBQUVFLE9BQU8sQ0FBQyxDQUFBO0FBQzlELEtBQUMsQ0FBQyxDQUFBO0FBQ04sR0FBQTtBQUVBLEVBQUEsSUFBSVEsUUFBUSxFQUFFO0FBQ1osSUFBQSxNQUFNM0IsU0FBUyxHQUFHMkIsUUFBUSxDQUFDUyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakQsTUFBTU0sZ0JBQWdCLEdBQUcsSUFBSUosWUFBWSxDQUFDWCxRQUFRLEVBQUVsRCxvQkFBb0IsQ0FBQyxDQUFBO0FBRXpFaUUsSUFBQUEsZ0JBQWdCLENBQ2JILFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXZELHlCQUF5QixDQUFDLENBQzFEdUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFckQsd0JBQXdCLENBQUMsQ0FDeERxRCxRQUFRLENBQUMsd0JBQXdCLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUM1RHFELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXBELHlCQUF5QixDQUFDLENBQzFEb0QsUUFBUSxDQUFDLG9CQUFvQixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDNURtRCxRQUFRLENBQUMsMkJBQTJCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUNuRW1ELFFBQVEsQ0FBQyx3QkFBd0IsRUFBRW5ELDRCQUE0QixFQUFFRSwyQkFBMkIsQ0FBQyxDQUM3RmlELFFBQVEsQ0FBQyxzQkFBc0IsRUFBRWxELDJCQUEyQixDQUFDLENBQzdEa0QsUUFBUSxDQUFDLHlCQUF5QixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDakVtRCxRQUFRLENBQUMsdUJBQXVCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUMvRG9ELFNBQVMsQ0FBQyxNQUFNO01BQ2YxQyxtQkFBbUIsQ0FBQzZCLFFBQVEsRUFBRTNCLFNBQVMsRUFBRWlCLFNBQVMsRUFBRUUsT0FBTyxDQUFDLENBQUE7QUFDOUQsS0FBQyxDQUFDLENBQUE7QUFDTixHQUFBO0FBRUEsRUFBQSxJQUFJUyxlQUFlLEVBQUU7QUFDbkIsSUFBQSxNQUFNNUIsU0FBUyxHQUFHNEIsZUFBZSxDQUFDUSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDeEQsTUFBTU8sdUJBQXVCLEdBQUcsSUFBSUwsWUFBWSxDQUFDVixlQUFlLEVBQUVuRCxvQkFBb0IsQ0FBQyxDQUFBO0FBRXZGa0UsSUFBQUEsdUJBQXVCLENBQ3BCSixRQUFRLENBQUMscUJBQXFCLEVBQUV2RCx5QkFBeUIsQ0FBQyxDQUMxRHVELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRXJELHdCQUF3QixDQUFDLENBQ3hEcUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFckQsd0JBQXdCLENBQUMsQ0FDNURxRCxRQUFRLENBQUMscUJBQXFCLEVBQUVwRCx5QkFBeUIsQ0FBQyxDQUMxRG9ELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRW5ELDRCQUE0QixDQUFDLENBQzVEbUQsUUFBUSxDQUFDLG1DQUFtQyxFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQ3hHaUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQzdGaUQsUUFBUSxDQUFDLCtCQUErQixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQ3BHa0QsU0FBUyxDQUFDLE1BQU07TUFDZjFDLG1CQUFtQixDQUFDOEIsZUFBZSxFQUFFNUIsU0FBUyxFQUFFaUIsU0FBUyxFQUFFRSxPQUFPLENBQUMsQ0FBQTtBQUNyRSxLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFFQSxFQUFBLElBQUlVLGVBQWUsRUFBRTtBQUNuQixJQUFBLE1BQU03QixTQUFTLEdBQUc2QixlQUFlLENBQUNPLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN4RCxNQUFNUSx1QkFBdUIsR0FBRyxJQUFJTixZQUFZLENBQUNULGVBQWUsRUFBRXBELG9CQUFvQixDQUFDLENBQUE7QUFFdkZtRSxJQUFBQSx1QkFBdUIsQ0FDcEJMLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXZELHlCQUF5QixDQUFDLENBQzFEdUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFckQsd0JBQXdCLENBQUMsQ0FDeERxRCxRQUFRLENBQUMsd0JBQXdCLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUM1RHFELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXBELHlCQUF5QixDQUFDLENBQzFEb0QsUUFBUSxDQUFDLG9CQUFvQixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDNURtRCxRQUFRLENBQUMsb0JBQW9CLEVBQUVuRCw0QkFBNEIsRUFBRUUsMkJBQTJCLENBQUMsQ0FDekZpRCxRQUFRLENBQUMsMkJBQTJCLEVBQUVuRCw0QkFBNEIsRUFBRUUsMkJBQTJCLENBQUMsQ0FDaEdpRCxRQUFRLENBQUMscUJBQXFCLEVBQUVuRCw0QkFBNEIsRUFBRUUsMkJBQTJCLENBQUMsQ0FDMUZrRCxTQUFTLENBQUMsTUFBTTtNQUNmMUMsbUJBQW1CLENBQUMrQixlQUFlLEVBQUU3QixTQUFTLEVBQUVpQixTQUFTLEVBQUVFLE9BQU8sQ0FBQyxDQUFBO0FBQ3JFLEtBQUMsQ0FBQyxDQUFBO0FBQ04sR0FBQTtBQUVBLEVBQUEsSUFBSVcsVUFBVSxFQUFFO0FBQ2QsSUFBQSxNQUFNOUIsU0FBUyxHQUFHOEIsVUFBVSxDQUFDTSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDbkQsTUFBTVMsa0JBQWtCLEdBQUcsSUFBSVAsWUFBWSxDQUFDUixVQUFVLEVBQUVyRCxvQkFBb0IsQ0FBQyxDQUFBO0FBRTdFb0UsSUFBQUEsa0JBQWtCLENBQ2ZOLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXZELHlCQUF5QixDQUFDLENBQzFEdUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFckQsd0JBQXdCLENBQUMsQ0FDeERxRCxRQUFRLENBQUMsd0JBQXdCLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUM1RHFELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXBELHlCQUF5QixDQUFDLENBQzFEb0QsUUFBUSxDQUFDLG9CQUFvQixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDNURtRCxRQUFRLENBQUMsMkJBQTJCLEVBQUVuRCw0QkFBNEIsRUFBRUUsMkJBQTJCLENBQUMsQ0FDaEdpRCxRQUFRLENBQUMsNkJBQTZCLEVBQUVuRCw0QkFBNEIsRUFBRUUsMkJBQTJCLENBQUMsQ0FDbEdpRCxRQUFRLENBQUMsOEJBQThCLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUNsRXNELFNBQVMsQ0FBQyxNQUFNO01BQ2YxQyxtQkFBbUIsQ0FBQ2dDLFVBQVUsRUFBRTlCLFNBQVMsRUFBRWlCLFNBQVMsRUFBRUUsT0FBTyxDQUFDLENBQUE7QUFDaEUsS0FBQyxDQUFDLENBQUE7QUFDTixHQUFBO0FBRUEsRUFBQSxJQUFJWSxRQUFRLEVBQUU7QUFDWixJQUFBLE1BQU0vQixTQUFTLEdBQUcrQixRQUFRLENBQUNLLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNqRCxNQUFNVSxnQkFBZ0IsR0FBRyxJQUFJUixZQUFZLENBQUNQLFFBQVEsRUFBRXRELG9CQUFvQixDQUFDLENBQUE7QUFFekVxRSxJQUFBQSxnQkFBZ0IsQ0FDYlAsUUFBUSxDQUFDLHFCQUFxQixFQUFFdkQseUJBQXlCLENBQUMsQ0FDMUR1RCxRQUFRLENBQUMsb0JBQW9CLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUN4RHFELFFBQVEsQ0FBQyx3QkFBd0IsRUFBRXJELHdCQUF3QixDQUFDLENBQzVEcUQsUUFBUSxDQUFDLHFCQUFxQixFQUFFcEQseUJBQXlCLENBQUMsQ0FDMURvRCxRQUFRLENBQUMsb0JBQW9CLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUM1RG1ELFFBQVEsQ0FBQyw0QkFBNEIsRUFBRW5ELDRCQUE0QixFQUFFRSwyQkFBMkIsQ0FBQyxDQUNqR2lELFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRWxELDJCQUEyQixDQUFDLENBQ3ZFa0QsUUFBUSxDQUFDLHdCQUF3QixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDaEVvRCxTQUFTLENBQUMsTUFBTTtNQUNmMUMsbUJBQW1CLENBQUNpQyxRQUFRLEVBQUUvQixTQUFTLEVBQUVpQixTQUFTLEVBQUVFLE9BQU8sQ0FBQyxDQUFBO0FBQzlELEtBQUMsQ0FBQyxDQUFBO0FBQ04sR0FBQTtBQUVBLEVBQUEsSUFBSWEsWUFBWSxFQUFFO0FBQ2hCLElBQUEsTUFBTWhDLFNBQVMsR0FBR2dDLFlBQVksQ0FBQ0ksWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3JELE1BQU1XLG9CQUFvQixHQUFHLElBQUlULFlBQVksQ0FBQ04sWUFBWSxFQUFFdkQsb0JBQW9CLENBQUMsQ0FBQTtBQUVqRnNFLElBQUFBLG9CQUFvQixDQUNqQlIsUUFBUSxDQUFDLHFCQUFxQixFQUFFdkQseUJBQXlCLENBQUMsQ0FDMUR1RCxRQUFRLENBQUMsb0JBQW9CLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUN4RHFELFFBQVEsQ0FBQyx3QkFBd0IsRUFBRXJELHdCQUF3QixDQUFDLENBQzVEcUQsUUFBUSxDQUFDLHFCQUFxQixFQUFFcEQseUJBQXlCLENBQUMsQ0FDMURvRCxRQUFRLENBQUMsb0JBQW9CLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUM1RG1ELFFBQVEsQ0FBQywyQkFBMkIsRUFBRW5ELDRCQUE0QixDQUFDLENBQ25FbUQsUUFBUSxDQUFDLDJCQUEyQixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQ2hHaUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQzdGaUQsUUFBUSxDQUFDLHNCQUFzQixFQUFFbEQsMkJBQTJCLENBQUMsQ0FDN0RrRCxRQUFRLENBQUMseUJBQXlCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUNqRW1ELFFBQVEsQ0FBQyx1QkFBdUIsRUFBRW5ELDRCQUE0QixDQUFDLENBQy9Eb0QsU0FBUyxDQUFDLE1BQU07TUFDZjFDLG1CQUFtQixDQUFDa0MsWUFBWSxFQUFFaEMsU0FBUyxFQUFFaUIsU0FBUyxFQUFFRSxPQUFPLENBQUMsQ0FBQTtBQUNsRSxLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFFQSxFQUFBLElBQUljLFdBQVcsRUFBRTtBQUNmLElBQUEsTUFBTWpDLFNBQVMsR0FBR2lDLFdBQVcsQ0FBQ0csWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3BELE1BQU1ZLG1CQUFtQixHQUFHLElBQUlWLFlBQVksQ0FBQ0wsV0FBVyxFQUFFeEQsb0JBQW9CLENBQUMsQ0FBQTtBQUUvRXVFLElBQUFBLG1CQUFtQixDQUNoQlQsUUFBUSxDQUFDLHFCQUFxQixFQUFFdkQseUJBQXlCLENBQUMsQ0FDMUR1RCxRQUFRLENBQUMsb0JBQW9CLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUN4RHFELFFBQVEsQ0FBQyx3QkFBd0IsRUFBRXJELHdCQUF3QixDQUFDLENBQzVEcUQsUUFBUSxDQUFDLHFCQUFxQixFQUFFcEQseUJBQXlCLENBQUMsQ0FDMURvRCxRQUFRLENBQUMsb0JBQW9CLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUM1RG1ELFFBQVEsQ0FBQywyQkFBMkIsRUFBRW5ELDRCQUE0QixDQUFDLENBQ25FbUQsUUFBUSxDQUFDLDJCQUEyQixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQ2hHaUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFbkQsNEJBQTRCLEVBQUVFLDJCQUEyQixDQUFDLENBQzdGaUQsUUFBUSxDQUFDLHNCQUFzQixFQUFFbEQsMkJBQTJCLENBQUMsQ0FDN0RrRCxRQUFRLENBQUMseUJBQXlCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUNqRW1ELFFBQVEsQ0FBQyx1QkFBdUIsRUFBRW5ELDRCQUE0QixDQUFDLENBQy9Eb0QsU0FBUyxDQUFDLE1BQU07TUFDZjFDLG1CQUFtQixDQUFDbUMsV0FBVyxFQUFFakMsU0FBUyxFQUFFaUIsU0FBUyxFQUFFRSxPQUFPLENBQUMsQ0FBQTtBQUNqRSxLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFFQSxFQUFBLElBQUllLFVBQVUsRUFBRTtBQUNkLElBQUEsTUFBTWxDLFNBQVMsR0FBR2tDLFVBQVUsQ0FBQ0UsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ25ELE1BQU1hLGtCQUFrQixHQUFHLElBQUlYLFlBQVksQ0FBQ0osVUFBVSxFQUFFekQsb0JBQW9CLENBQUMsQ0FBQTtBQUU3RXdFLElBQUFBLGtCQUFrQixDQUNmVixRQUFRLENBQUMscUJBQXFCLEVBQUV2RCx5QkFBeUIsQ0FBQyxDQUMxRHVELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRXJELHdCQUF3QixDQUFDLENBQ3hEcUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFckQsd0JBQXdCLENBQUMsQ0FDNURxRCxRQUFRLENBQUMscUJBQXFCLEVBQUVwRCx5QkFBeUIsQ0FBQyxDQUMxRG9ELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRW5ELDRCQUE0QixDQUFDLENBQzVEb0QsU0FBUyxDQUFDLE1BQU07TUFDZjFDLG1CQUFtQixDQUFDb0MsVUFBVSxFQUFFbEMsU0FBUyxFQUFFaUIsU0FBUyxFQUFFRSxPQUFPLENBQUMsQ0FBQTtBQUNoRSxLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFFQSxFQUFBLElBQUlDLFVBQVUsRUFBRTtBQUNkLElBQUEsTUFBTXBCLFNBQVMsR0FBR29CLFVBQVUsQ0FBQ2dCLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNuRCxNQUFNYyxrQkFBa0IsR0FBRyxJQUFJWixZQUFZLENBQUNsQixVQUFVLEVBQUUzQyxvQkFBb0IsQ0FBQyxDQUFBO0lBRTdFeUUsa0JBQWtCLENBQ2ZYLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXZELHlCQUF5QixDQUFDLENBQzFEdUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFckQsd0JBQXdCLENBQUMsQ0FDeERxRCxRQUFRLENBQUMsd0JBQXdCLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUM1RHFELFFBQVEsQ0FBQywwQkFBMEIsRUFBRXJELHdCQUF3QixDQUFDLENBQzlEcUQsUUFBUSxDQUFDLHFCQUFxQixFQUFFcEQseUJBQXlCLENBQUMsQ0FDMURvRCxRQUFRLENBQUMsd0JBQXdCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUNoRW1ELFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRW5ELDRCQUE0QixDQUFDLENBQzFFbUQsUUFBUSxDQUFDLDZCQUE2QixFQUFFLENBQ3ZDO0FBQ0V6RCxNQUFBQSxJQUFJLEVBQUUsVUFBVTtBQUNoQkMsTUFBQUEsWUFBWSxFQUFFLG1CQUFBO0FBQ2hCLEtBQUMsRUFDRDtBQUNFRCxNQUFBQSxJQUFJLEVBQUUsY0FBYztBQUNwQkcsTUFBQUEsS0FBSyxFQUFFLGdCQUFnQjtBQUN2QkYsTUFBQUEsWUFBWSxFQUFFLG1CQUFBO0FBQ2hCLEtBQUMsQ0FDRixDQUFDLENBQ0R3RCxRQUFRLENBQUMsMkJBQTJCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUNuRW1ELFFBQVEsQ0FBQyw0QkFBNEIsRUFBRW5ELDRCQUE0QixDQUFDLENBQ3BFbUQsUUFBUSxDQUFDLDZCQUE2QixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDckVtRCxRQUFRLENBQUMsMEJBQTBCLEVBQUUsQ0FDcEM7QUFDRXpELE1BQUFBLElBQUksRUFBRSxVQUFVO0FBQ2hCQyxNQUFBQSxZQUFZLEVBQUUsbUJBQUE7QUFDaEIsS0FBQyxFQUNEO0FBQ0VELE1BQUFBLElBQUksRUFBRSxjQUFjO0FBQ3BCRyxNQUFBQSxLQUFLLEVBQUUsZ0JBQWdCO0FBQ3ZCRixNQUFBQSxZQUFZLEVBQUUsbUJBQUE7S0FDZixDQUNGLENBQUMsQ0FDRHdELFFBQVEsQ0FBQyw0QkFBNEIsRUFBRW5ELDRCQUE0QixDQUFDLENBQ3BFbUQsUUFBUSxDQUFDLDZCQUE2QixFQUFFbkQsNEJBQTRCLENBQUMsQ0FDckVtRCxRQUFRLENBQUMsOEJBQThCLEVBQUVuRCw0QkFBNEIsQ0FBQyxDQUN0RW9ELFNBQVMsQ0FBQyxNQUFNO01BQ2YxQyxtQkFBbUIsQ0FBQ3NCLFVBQVUsRUFBRXBCLFNBQVMsRUFBRWlCLFNBQVMsRUFBRUUsT0FBTyxDQUFDLENBQUE7QUFDaEUsS0FBQyxDQUFDLENBQUE7QUFDTixHQUFBO0FBRUEsRUFBQSxJQUFJRyxXQUFXLEVBQUU7QUFDZixJQUFBLE1BQU10QixTQUFTLEdBQUdzQixXQUFXLENBQUNjLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNwRCxNQUFNZSxtQkFBbUIsR0FBRyxJQUFJYixZQUFZLENBQUNoQixXQUFXLEVBQUU3QyxvQkFBb0IsQ0FBQyxDQUFBO0FBRS9FMEUsSUFBQUEsbUJBQW1CLENBQ2hCWixRQUFRLENBQUMscUJBQXFCLEVBQUV2RCx5QkFBeUIsQ0FBQyxDQUMxRHVELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRXJELHdCQUF3QixDQUFDLENBQ3hEcUQsUUFBUSxDQUFDLHFCQUFxQixFQUFFcEQseUJBQXlCLENBQUMsQ0FDMURvRCxRQUFRLENBQUMsbUJBQW1CLEVBQUVsRCwyQkFBMkIsQ0FBQyxDQUMxRG1ELFNBQVMsQ0FBQyxNQUFNO01BQ2YxQyxtQkFBbUIsQ0FBQ3dCLFdBQVcsRUFBRXRCLFNBQVMsRUFBRWlCLFNBQVMsRUFBRUUsT0FBTyxDQUFDLENBQUE7QUFDakUsS0FBQyxDQUFDLENBQUE7QUFDTixHQUFBO0FBRUEsRUFBQSxJQUFJSSxZQUFZLEVBQUU7QUFDaEIsSUFBQSxNQUFNdkIsU0FBUyxHQUFHdUIsWUFBWSxDQUFDYSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDckQsTUFBTWdCLG9CQUFvQixHQUFHLElBQUlkLFlBQVksQ0FBQ2YsWUFBWSxFQUFFOUMsb0JBQW9CLENBQUMsQ0FBQTtJQUVqRjJFLG9CQUFvQixDQUNqQmIsUUFBUSxDQUFDLHFCQUFxQixFQUFFdkQseUJBQXlCLENBQUMsQ0FDMUR1RCxRQUFRLENBQUMsb0JBQW9CLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUN4RHFELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXBELHlCQUF5QixDQUFDLENBQzFEcUQsU0FBUyxDQUFDLE1BQU07TUFDZjFDLG1CQUFtQixDQUFDeUIsWUFBWSxFQUFFdkIsU0FBUyxFQUFFaUIsU0FBUyxFQUFFRSxPQUFPLENBQUMsQ0FBQTtBQUNsRSxLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFFQSxFQUFBLElBQUlLLFdBQVcsRUFBRTtBQUNmLElBQUEsTUFBTXhCLFNBQVMsR0FBR3dCLFdBQVcsQ0FBQ1ksWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3BELE1BQU1pQixtQkFBbUIsR0FBRyxJQUFJZixZQUFZLENBQUNkLFdBQVcsRUFBRS9DLG9CQUFvQixDQUFDLENBQUE7QUFFL0U0RSxJQUFBQSxtQkFBbUIsQ0FDaEJkLFFBQVEsQ0FDUCxjQUFjLEVBQ2QsQ0FDRTtBQUNFekQsTUFBQUEsSUFBSSxFQUFFLGVBQWU7QUFDckJHLE1BQUFBLEtBQUssRUFBRSxDQUFDO0FBQ1JGLE1BQUFBLFlBQVksRUFBRSxvQkFBQTtBQUNoQixLQUFDLEVBQ0Q7QUFDRUQsTUFBQUEsSUFBSSxFQUFFLGVBQWU7QUFDckJHLE1BQUFBLEtBQUssRUFBRSxDQUFDO0FBQ1JGLE1BQUFBLFlBQVksRUFBRSxtQkFBQTtBQUNoQixLQUFDLEVBQ0Q7QUFDRUQsTUFBQUEsSUFBSSxFQUFFLE9BQU87QUFDYkcsTUFBQUEsS0FBSyxFQUFFO0FBQ0xxRSxRQUFBQSxLQUFLLEVBQUU7QUFDTEMsVUFBQUEsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQztBQUN2RUMsVUFBQUEsT0FBTyxFQUFFLFNBQVM7QUFDbEJDLFVBQUFBLE9BQU8sRUFBRSxLQUFLO0FBQ2RDLFVBQUFBLEtBQUssRUFBRSxDQUNMLDBCQUEwQixFQUMxQixvQkFBb0IsRUFDcEIsaUJBQWlCLEVBQ2pCLFlBQVksRUFDWixXQUFXLEVBQ1gsV0FBVyxDQUFBO0FBRWYsU0FBQTtPQUNEO0FBQ0QzRSxNQUFBQSxZQUFZLEVBQUUsQ0FBQTtBQUMxQiwyQ0FBQSxDQUFBO0FBQ1UsS0FBQyxDQUNGLEVBQ0Q7QUFDRUwsTUFBQUEsa0JBQWtCLEVBQUUsNEJBQTRCO0FBQ2hERSxNQUFBQSxrQkFBa0IsRUFBRSxtQkFBQTtBQUN0QixLQUNGLENBQUMsQ0FDQTRELFNBQVMsQ0FBQyxNQUFNO01BQ2YxQyxtQkFBbUIsQ0FBQzBCLFdBQVcsRUFBRXhCLFNBQVMsRUFBRWlCLFNBQVMsRUFBRUUsT0FBTyxDQUFDLENBQUE7QUFDakUsS0FBQyxDQUFDLENBQUE7QUFDTixHQUFBO0FBRUEsRUFBQSxJQUFJZ0IsWUFBWSxFQUFFO0FBQ2hCLElBQUEsTUFBTW5DLFNBQVMsR0FBR21DLFlBQVksQ0FBQ0MsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3JELE1BQU11QixvQkFBb0IsR0FBRyxJQUFJckIsWUFBWSxDQUFDSCxZQUFZLEVBQUUxRCxvQkFBb0IsQ0FBQyxDQUFBO0FBRWpGa0YsSUFBQUEsb0JBQW9CLENBQ2pCcEIsUUFBUSxDQUFDLHFCQUFxQixFQUFFdkQseUJBQXlCLENBQUMsQ0FDMUR1RCxRQUFRLENBQUMsb0JBQW9CLEVBQUVyRCx3QkFBd0IsQ0FBQyxDQUN4RHFELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXBELHlCQUF5QixDQUFDLENBQzFEb0QsUUFBUSxDQUFDLG9CQUFvQixFQUFFckQsd0JBQXdCLENBQUMsQ0FDeERzRCxTQUFTLENBQUMsTUFBTTtBQUNmMUMsTUFBQUEsbUJBQW1CLENBQ2pCcUMsWUFBWSxFQUNabkMsU0FBUyxFQUNULE1BQU07QUFDSjRELFFBQUFBLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO09BQzdCLEVBQ0QxQyxPQUNGLENBQUMsQ0FBQTtBQUNILEtBQUMsQ0FBQyxDQUFBO0FBQ04sR0FBQTtBQUNGLENBQUMsQ0FBQzs7QUM5V0Z0RCxLQUFLLENBQUMsWUFBWTtBQUNoQixFQUFBLE1BQU1pRyxPQUFPLEdBQUcvRixRQUFRLENBQUNzRCxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUE7QUFFbEQsRUFBQSxJQUFJeUMsT0FBTyxFQUFFO0FBQ1gsSUFBQSxNQUFNQyxpQkFBaUIsR0FBR0QsT0FBTyxDQUFDekMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQzNELElBQUEsTUFBTTJDLFlBQVksR0FBR0YsT0FBTyxDQUFDRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBRWhFQyxJQUFBQSxhQUFhLENBQUNGLFlBQVksRUFBRUQsaUJBQWlCLENBQUM5RSxLQUFLLENBQUMsQ0FBQTtBQUVwRDhFLElBQUFBLGlCQUFpQixDQUFDN0YsZ0JBQWdCLENBQUMsUUFBUSxFQUFHaUcsQ0FBQyxJQUFLO01BQ2xERCxhQUFhLENBQUNGLFlBQVksRUFBRUcsQ0FBQyxDQUFDQyxNQUFNLENBQUNuRixLQUFLLENBQUMsQ0FBQTtBQUM3QyxLQUFDLENBQUMsQ0FBQTtBQUNKLEdBQUE7QUFDRixDQUFDLENBQUMsQ0FBQTtBQUVGLFNBQVNpRixhQUFhQSxDQUFDRyxLQUFLLEVBQUVDLEVBQUUsRUFBRTtBQUNoQyxFQUFBLEtBQUssSUFBSUMsSUFBSSxJQUFJRixLQUFLLEVBQUU7SUFDdEIsSUFBSUUsSUFBSSxDQUFDQyxPQUFPLENBQUN6RSxJQUFJLEtBQUt1RSxFQUFFLEVBQUVDLElBQUksQ0FBQ3pELFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUMsS0FDdEV3RCxJQUFJLENBQUN6RCxTQUFTLENBQUNFLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0FBQ3RELEdBQUE7QUFDRjs7QUN0QkE7QUFDQSxTQUFTLFFBQVEsQ0FBQyxHQUFHLEVBQUU7QUFDdkIsRUFBRSxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLFlBQVksTUFBTSxDQUFDO0FBQzFELENBQUM7QUFDRDtBQUNBO0FBQ0EsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQztBQUN2QixFQUFFLE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLFdBQVcsS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMvSixDQUFDO0FBQ0QsU0FBUyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtBQUN6QixFQUFFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RSxFQUFFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxLQUFLO0FBQ25ELElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDdEIsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixJQUFJLE9BQU8sR0FBRyxDQUFDO0FBQ2YsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQztBQUNEO0FBQ0E7QUFDQSxNQUFNLFNBQVMsR0FBRztBQUNsQixFQUFFLElBQUksRUFBRSxNQUFNO0FBQ2QsRUFBRSxJQUFJLEVBQUUsTUFBTTtBQUNkLEVBQUUsVUFBVSxFQUFFLFlBQVk7QUFDMUIsRUFBRSxLQUFLLEVBQUUsT0FBTztBQUNoQixFQUFFLFdBQVcsRUFBRSxhQUFhO0FBQzVCLENBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBLFNBQVMsY0FBYyxDQUFDLFNBQVMsRUFBRTtBQUNuQyxFQUFFLFFBQVEsU0FBUztBQUNuQixJQUFJLEtBQUssU0FBUyxDQUFDLElBQUk7QUFDdkIsTUFBTSxPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDbEMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxLQUFLO0FBQ3hCLE1BQU0sT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDO0FBQ25DLElBQUk7QUFDSixNQUFNLE9BQU8sU0FBUyxDQUFDO0FBQ3ZCLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBLFNBQVMsWUFBWSxDQUFDLEdBQUcsRUFBRTtBQUMzQixFQUFFLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBQ0Q7QUFDQTtBQUNBLFNBQVMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDOUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDM0IsRUFBRSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUMvQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDUixFQUFFLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtBQUNwQixJQUFJLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQzNDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQ2pGLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQ2pDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7QUFDaEUsSUFBSSxNQUFNLEtBQUssR0FBRyxDQUFDLFlBQVksSUFBSTtBQUNuQyxNQUFNLEtBQUssR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDO0FBQ2hDLElBQUksSUFBSSxLQUFLLElBQUksS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMxRCxJQUFJLElBQUksS0FBSyxJQUFJLEtBQUssRUFBRSxPQUFPLEtBQUssQ0FBQztBQUNyQyxJQUFJLE1BQU0sT0FBTyxHQUFHLENBQUMsWUFBWSxNQUFNO0FBQ3ZDLE1BQU0sT0FBTyxHQUFHLENBQUMsWUFBWSxNQUFNLENBQUM7QUFDcEMsSUFBSSxJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hFLElBQUksSUFBSSxPQUFPLElBQUksT0FBTyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQ3pDLElBQUksTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQztBQUNBO0FBQ0EsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDMUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDaEcsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDM0UsSUFBSSxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDekMsR0FBRztBQUNILEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDZjs7QUMzRUE7QUFDQSxNQUFNLGFBQWEsQ0FBQztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQ3BCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUI7QUFDQTtBQUNBLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7QUFDckcsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0FBQ2hDLEtBQUs7QUFDTCxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUM1QjtBQUNBLE1BQU0sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUM5RixRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQzdJLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksY0FBYyxHQUFHO0FBQ3ZCLElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3RCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxhQUFhLEdBQUc7QUFDdEIsSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztBQUNoRCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxRQUFRLEdBQUc7QUFDakIsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RFLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLFlBQVksR0FBRztBQUNyQjtBQUNBLElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjO0FBQy9EO0FBQ0EsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNqRCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxPQUFPLEdBQUc7QUFDaEIsSUFBSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hFLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLElBQUksR0FBRztBQUNiLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3hELEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLElBQUksR0FBRztBQUNiLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMxRSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxlQUFlLEdBQUc7QUFDeEIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztBQUN4RTtBQUNBO0FBQ0EsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsU0FBUztBQUNsRztBQUNBLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ3pGLEdBQUc7QUFDSDs7QUMxRUE7QUFDQSxTQUFTLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO0FBQ3pCO0FBQ0EsRUFBRSxPQUFPLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkM7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxJQUFJLFlBQVk7QUFDckMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3ZFLEVBQUUsSUFBSSxJQUFJLFlBQVksTUFBTSxFQUFFLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4RCxFQUFFLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUNqRCxFQUFFLElBQUksSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDN0MsRUFBRSxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUUsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ2pELEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDO0FBQ3hFLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFlBQVksS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQztBQUMxRSxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLFlBQVksS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDNUUsRUFBRSxJQUFJLElBQUksWUFBWSxRQUFRLEVBQUUsT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQzVELEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoRCxFQUFFLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUN0QixDQUFDO0FBQ0QsU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQzdCLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkQsRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDcEIsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLFlBQVksS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPO0FBQ3ZELE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEIsS0FBSyxDQUFDO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxNQUFNO0FBQ1YsTUFBTSxJQUFJLEdBQUcsU0FBUztBQUN0QixNQUFNLEdBQUcsWUFBWTtBQUNyQixLQUFLLEdBQUcsSUFBSSxZQUFZLEtBQUssQ0FBQyxNQUFNLEdBQUc7QUFDdkMsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQixLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLFlBQVksS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3hFLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDZCxNQUFNLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDOUIsTUFBTSxPQUFPO0FBQ2IsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuRCxRQUFRLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVztBQUM5QixRQUFRLEtBQUs7QUFDYixRQUFRLEdBQUcsWUFBWTtBQUN2QixPQUFPLENBQUM7QUFDUixLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPO0FBQzlCLElBQUksSUFBSSxFQUFFLElBQUk7QUFDZCxHQUFHLENBQUM7QUFDSixFQUFFLE9BQU87QUFDVCxJQUFJLEdBQUcsSUFBSTtBQUNYLEdBQUcsQ0FBQztBQUNKLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDMUIsRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksSUFBSSxZQUFZLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDaEUsRUFBRSxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsRUFBRSxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDhDQUE4QyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsMEVBQTBFLENBQUMsQ0FBQztBQUM5SyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3BELEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ25CLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzdCLElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQ3ZCLEdBQUc7QUFDSCxFQUFFLE9BQU8sSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUNELEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVTs7QUNwSDdCO0FBQ0EsTUFBTSxXQUFXLENBQUM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLElBQUksY0FBYyxHQUFHO0FBQ3ZCLElBQUksSUFBSSxLQUFLLENBQUM7QUFDZCxJQUFJLElBQUk7QUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUM7QUFDekMsS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUNkLElBQUksT0FBTyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUNyRCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxZQUFZLEdBQUc7QUFDckIsSUFBSSxJQUFJLEdBQUcsQ0FBQztBQUNaLElBQUksSUFBSTtBQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztBQUNyQyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ2QsSUFBSSxPQUFPLEdBQUcsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ2pELEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUNyQixJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsY0FBYyxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU87QUFDM0csSUFBSSxJQUFJO0FBQ1IsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ2QsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksUUFBUSxHQUFHO0FBQ2pCLElBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsS0FBSyxDQUFDLFdBQVcsR0FBRyxXQUFXOztBQzNDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQjtBQUNBO0FBQ0EsTUFBTSxlQUFlLFNBQVMsV0FBVyxDQUFDO0FBQzFDO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxLQUFLLEVBQUU7QUFDckIsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUNaLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDdkIsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pELElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QyxJQUFJLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvRCxHQUFHO0FBQ0gsRUFBRSxJQUFJLFdBQVcsR0FBRztBQUNwQixJQUFJLElBQUkscUJBQXFCLEVBQUUsc0JBQXNCLEVBQUUsV0FBVyxDQUFDO0FBQ25FLElBQUksT0FBTyxDQUFDLHFCQUFxQixHQUFHLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxXQUFXLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLHNCQUFzQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLEdBQUcscUJBQXFCLEdBQUcsUUFBUSxDQUFDO0FBQzlNLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLFFBQVEsR0FBRztBQUNqQixJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztBQUN6RCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRTtBQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM1RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNwRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDMUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekQsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUM5QixHQUFHO0FBQ0gsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFO0FBQ2hCLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNwSSxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN6QixNQUFNLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsS0FBSztBQUNMLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNoRixNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN6QixNQUFNLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsR0FBRztBQUNILEVBQUUsY0FBYyxDQUFDLENBQUMsRUFBRTtBQUNwQixJQUFJLElBQUksQ0FBQyxDQUFDLFNBQVMsS0FBSyxhQUFhLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUU7QUFDOUQsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDekIsTUFBTSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxDQUFDLFNBQVMsS0FBSyxhQUFhLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUU7QUFDOUQsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDekIsTUFBTSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLEVBQUU7QUFDdkIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1QixHQUFHO0FBQ0gsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFO0FBQ2QsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsWUFBWSxHQUFHO0FBQ2pCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQy9ELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM3RSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEUsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUN4QixHQUFHO0FBQ0gsQ0FBQztBQUNELEtBQUssQ0FBQyxlQUFlLEdBQUcsZUFBZTs7QUM3RXZDO0FBQ0EsTUFBTSxvQkFBb0IsU0FBUyxlQUFlLENBQUM7QUFDbkQ7QUFDQTtBQUNBLEVBQUUsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUNyQixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQixJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLHFCQUFxQixHQUFHO0FBQzlCLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDN0YsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksbUJBQW1CLEdBQUc7QUFDNUIsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ25DLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUM1QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzVCLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNuQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUM3QixHQUFHO0FBQ0gsQ0FBQztBQUNELEtBQUssQ0FBQyxlQUFlLEdBQUcsZUFBZTs7QUM5QnZDLE1BQU0sOEJBQThCLFNBQVMsZUFBZSxDQUFDO0FBQzdEO0FBQ0EsRUFBRSxJQUFJLHFCQUFxQixHQUFHO0FBQzlCLElBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUNsQyxJQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQy9ELElBQUksTUFBTSxZQUFZLEdBQUcsU0FBUyxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUM7QUFDN0QsSUFBSSxNQUFNLFdBQVcsR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLFdBQVcsQ0FBQztBQUMzRCxJQUFJLElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLFlBQVksR0FBRyxXQUFXLEVBQUU7QUFDbkYsTUFBTSxPQUFPLFlBQVksQ0FBQztBQUMxQixLQUFLO0FBQ0wsSUFBSSxPQUFPLFdBQVcsQ0FBQztBQUN2QixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxtQkFBbUIsR0FBRztBQUM1QixJQUFJLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDbEMsSUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMvRCxJQUFJLE1BQU0sWUFBWSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsWUFBWSxDQUFDO0FBQzdELElBQUksTUFBTSxXQUFXLEdBQUcsU0FBUyxJQUFJLFNBQVMsQ0FBQyxXQUFXLENBQUM7QUFDM0QsSUFBSSxJQUFJLFdBQVcsSUFBSSxJQUFJLElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxZQUFZLEdBQUcsV0FBVyxFQUFFO0FBQ25GLE1BQU0sT0FBTyxZQUFZLENBQUM7QUFDMUIsS0FBSztBQUNMLElBQUksT0FBTyxXQUFXLENBQUM7QUFDdkIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLGFBQWEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO0FBQzVCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLE9BQU87QUFDOUMsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2pELElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9ELElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzFELElBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUNsQyxJQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQy9ELElBQUksSUFBSSxTQUFTLEVBQUU7QUFDbkIsTUFBTSxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbEMsTUFBTSxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxLQUFLLEdBQUc7QUFDZCxJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0FBQ3hDLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNuQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUNuQyxHQUFHO0FBQ0gsQ0FBQztBQUNELEtBQUssQ0FBQyw4QkFBOEIsR0FBRyw4QkFBOEI7O0FDbkRyRSxNQUFNLFlBQVksQ0FBQztBQUNuQixFQUFFLFdBQVcsR0FBRztBQUNoQixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLElBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDMUIsR0FBRztBQUNILEVBQUUsSUFBSSxZQUFZLEdBQUc7QUFDckIsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFDLEdBQUc7QUFDSCxFQUFFLElBQUksT0FBTyxHQUFHO0FBQ2hCLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDcEMsR0FBRztBQUNILEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNkO0FBQ0EsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQy9GLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxRSxJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQy9DLEdBQUc7QUFDSCxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUU7QUFDWixJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2pHLElBQUksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQzdCLEdBQUc7QUFDSCxFQUFFLElBQUksR0FBRztBQUNULElBQUksT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsR0FBRztBQUNILEVBQUUsSUFBSSxHQUFHO0FBQ1QsSUFBSSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixHQUFHO0FBQ0gsRUFBRSxLQUFLLEdBQUc7QUFDVixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUMzQixJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLEdBQUc7QUFDSCxDQUFDO0FBQ0QsWUFBWSxDQUFDLFVBQVUsR0FBRyxHQUFHOztBQ3ZCN0I7QUFDQSxNQUFNLFNBQVMsQ0FBQztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO0FBQ3hCLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLFlBQVksV0FBVyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxPQUFPLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxVQUFVLEdBQUcsSUFBSSw4QkFBOEIsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25NLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUN6QixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLElBQUksSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsSUFBSSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUN0QyxJQUFJLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekQsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdDLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQyxJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0MsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdDLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QyxJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0MsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25FLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCO0FBQ0E7QUFDQSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN2QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFO0FBQ25CLElBQUksSUFBSSxZQUFZLENBQUM7QUFDckIsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzNHLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLElBQUksR0FBRztBQUNiLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztBQUM1QixHQUFHO0FBQ0gsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDakIsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTztBQUN0QyxJQUFJLElBQUksRUFBRSxJQUFJLFlBQVksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMxRjtBQUNBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDaEMsUUFBUSxJQUFJO0FBQ1osT0FBTyxDQUFDLENBQUM7QUFDVCxNQUFNLE9BQU87QUFDYixLQUFLO0FBQ0wsSUFBSSxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsVUFBVSxDQUFDO0FBQ3BFLE1BQU0sSUFBSTtBQUNWLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxNQUFNLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBQ3JELElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFO0FBQ2pCLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEdBQUcsRUFBRSxPQUFPO0FBQ25DLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQzVCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxhQUFhLEdBQUc7QUFDdEIsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7QUFDL0IsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFO0FBQ3pCLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLEdBQUcsRUFBRSxPQUFPO0FBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxhQUFhLEdBQUc7QUFDdEIsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7QUFDL0IsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFO0FBQ3pCLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLEdBQUcsRUFBRSxPQUFPO0FBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLFVBQVUsR0FBRztBQUNuQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDbEMsR0FBRztBQUNILEVBQUUsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3RCLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU87QUFDbEQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFDakMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLFlBQVksR0FBRztBQUNyQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7QUFDcEMsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLFdBQVcsR0FBRztBQUNoQixJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDO0FBQ3ZCLE1BQU0sZUFBZSxFQUFFLElBQUksQ0FBQyxjQUFjO0FBQzFDLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRO0FBQzFCLE1BQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQ3hCLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRO0FBQzFCLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRO0FBQzFCLE1BQU0sTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQzVCLE1BQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQ3hCLE1BQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQ3hCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLGFBQWEsR0FBRztBQUNsQixJQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3hDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUNwQixJQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU87QUFDM0IsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxjQUFjLEdBQUc7QUFDdkIsSUFBSSxPQUFPLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDO0FBQ25GLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLFNBQVMsR0FBRztBQUNsQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDakYsR0FBRztBQUNILEVBQUUsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQ3JCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPO0FBQzlDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzFCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxjQUFjO0FBQ2hCLElBQUk7QUFDSixJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtBQUM3QyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMseUdBQXlHLENBQUMsQ0FBQztBQUM5SCxLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHO0FBQ3RCLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjO0FBQ2hDLE1BQU0sR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQ3pCLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxXQUFXLEdBQUc7QUFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztBQUN0QyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDcEMsSUFBSSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBQ3BELElBQUksSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUNwRCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsYUFBYSxDQUFDLFNBQVMsRUFBRTtBQUMzQixJQUFJLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDdkQsSUFBSSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUN2QyxJQUFJLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDdkQsSUFBSSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQzlDLElBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsS0FBSyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLGdCQUFnQixDQUFDO0FBQ3JJLElBQUksSUFBSSxDQUFDLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztBQUMzQyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQzNCLElBQUksSUFBSSxDQUFDLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztBQUMzQyxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEtBQUssZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQztBQUMzRSxJQUFJLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDeEcsSUFBSSxJQUFJLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUM1QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDekYsTUFBTSxhQUFhLEVBQUUsZ0JBQWdCO0FBQ3JDLE1BQU0sU0FBUyxFQUFFO0FBQ2pCLFFBQVEsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjO0FBQ2xDLFFBQVEsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQzNCLE9BQU87QUFDUCxLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3RCLElBQUksTUFBTTtBQUNWLE1BQU0sSUFBSTtBQUNWLE1BQU0sR0FBRyxRQUFRO0FBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDYjtBQUNBLElBQUksTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLElBQUksTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5RCxJQUFJLElBQUksVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3JDLElBQUksSUFBSSxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEQ7QUFDQSxJQUFJLElBQUksVUFBVSxJQUFJLFVBQVUsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkQsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLFlBQVksQ0FBQyxTQUFTLEVBQUU7QUFDMUIsSUFBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUUsT0FBTztBQUNsQyxJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQy9CO0FBQ0E7QUFDQSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2QyxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxFQUFFO0FBQ2hDLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDOUIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDO0FBQ3hDLElBQUksSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsTUFBTTtBQUM1QyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU87QUFDM0IsTUFBTSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztBQUMvQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQ2hDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNYLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxpQkFBaUIsR0FBRztBQUN0QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNoRCxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzlFLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxrQkFBa0IsR0FBRztBQUN2QixJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUM5QixNQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekMsTUFBTSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDbEMsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxXQUFXLEdBQUc7QUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDOUcsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLG1CQUFtQixHQUFHO0FBQ3hCLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTztBQUN2RCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN2QixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUU7QUFDbEIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN2RCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFO0FBQ25CLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDMUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2xCLE1BQU0sT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEQsSUFBSSxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNELElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUU7QUFDZCxJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDOUIsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBQztBQUN0QztBQUNBLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSztBQUMxQixNQUFNLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUMvQjtBQUNBLE1BQU0sUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZO0FBQ2pDLE1BQU0sWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25DLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUNsRCxJQUFJLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsZUFBZSxFQUFFO0FBQ2pJLE1BQU0sS0FBSyxFQUFFLElBQUk7QUFDakIsTUFBTSxHQUFHLEVBQUUsSUFBSTtBQUNmLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNkO0FBQ0E7QUFDQTtBQUNBLElBQUksTUFBTSxlQUFlLEdBQUcsV0FBVyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztBQUNqSCxJQUFJLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2xHLElBQUksSUFBSSxlQUFlLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvRyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEMsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLFNBQVMsR0FBRztBQUNkLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNoRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDM0IsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDMUIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUU7QUFDZCxJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN4QixJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUN6QixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRTtBQUNmLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDL0IsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUU7QUFDZixJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQy9CLEdBQUc7QUFDSCxFQUFFLE9BQU8sR0FBRztBQUNaLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNqRCxHQUFHO0FBQ0gsRUFBRSxPQUFPLEdBQUc7QUFDWixJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDakQsR0FBRztBQUNILEVBQUUsa0JBQWtCLENBQUMsS0FBSyxFQUFFO0FBQzVCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPO0FBQ3ZCLElBQUksSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUNqQyxJQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUM3QyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0QsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDMUIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQ2xDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxPQUFPLEdBQUc7QUFDWixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN6QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUMvQixJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNuQixHQUFHO0FBQ0gsQ0FBQztBQUNELEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUzs7QUN6VjNCO0FBQ0EsTUFBTSxhQUFhLENBQUM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFO0FBQ3pCLElBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDcEUsR0FBRztBQUNILEVBQUUsV0FBVyxDQUFDLE9BQU8sRUFBRTtBQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQ3hCLE1BQU0sUUFBUSxFQUFFLEVBQUU7QUFDbEIsTUFBTSxXQUFXLEVBQUUsRUFBRTtBQUNyQixNQUFNLFNBQVMsRUFBRSxDQUFDO0FBQ2xCLE1BQU0sSUFBSSxFQUFFLEtBQUs7QUFDakIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFO0FBQ3JCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ3RDLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQzVDLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ3hDLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDMUMsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxNQUFNLEdBQUc7QUFDZixJQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUNqRCxHQUFHO0FBQ0gsRUFBRSxJQUFJLFFBQVEsR0FBRztBQUNqQixJQUFJLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2xELEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUU7QUFDbEIsSUFBSSxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxPQUFPLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQztBQUNoSyxHQUFHO0FBQ0gsQ0FBQztBQUNELEtBQUssQ0FBQyxhQUFhLEdBQUcsYUFBYTs7QUM1Q25DO0FBQ0EsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNqQyxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixLQUFLO0FBQ0wsSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtBQUN6QixNQUFNLElBQUksR0FBRyxDQUFDLENBQUM7QUFDZixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN2QixJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDckIsR0FBRztBQUNILEVBQUUsUUFBUSxHQUFHO0FBQ2IsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDdEIsR0FBRztBQUNILEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRTtBQUNmLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsR0FBRztBQUNILEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUNuQixJQUFJLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDMUMsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQixLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztBQUM5QyxHQUFHO0FBQ0gsRUFBRSxJQUFJLEtBQUssR0FBRztBQUNkLElBQUksT0FBTztBQUNYLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO0FBQ3ZCLE1BQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO0FBQ3JCLE1BQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO0FBQ3JCLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNuQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9CLEdBQUc7QUFDSCxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDckIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUNyRixJQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLElBQUksT0FBTyxTQUFTLENBQUM7QUFDckIsR0FBRztBQUNILEVBQUUsS0FBSyxHQUFHO0FBQ1YsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDdEMsSUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3hELElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QyxJQUFJLE9BQU8sU0FBUyxDQUFDO0FBQ3JCLEdBQUc7QUFDSDs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLE1BQU0sQ0FBQztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDakIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRO0FBQ3hCLE1BQU0sR0FBRyxJQUFJO0FBQ2IsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQzdCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3RCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPO0FBQzdDLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pELEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2hCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPO0FBQ1gsTUFBTSxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDeEIsTUFBTSxjQUFjLEVBQUUsSUFBSSxDQUFDLGFBQWE7QUFDeEMsS0FBSyxDQUFDO0FBQ04sR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQy9CLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxLQUFLLEdBQUc7QUFDVixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDeEIsTUFBTSxLQUFLLEVBQUUsSUFBSTtBQUNqQixLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUN4QixJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHO0FBQ2QsUUFBUSxLQUFLLEVBQUUsSUFBSTtBQUNuQixPQUFPLENBQUM7QUFDUixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDakIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDcEIsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLEdBQUc7QUFDdEIsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDdEIsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFO0FBQzNCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDNUIsR0FBRztBQUNILEVBQUUsSUFBSSxVQUFVLEdBQUc7QUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7QUFDMUUsR0FBRztBQUNILEVBQUUsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFO0FBQ3hCLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JCLE1BQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1QyxLQUFLLE1BQU07QUFDWCxNQUFNLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxhQUFhLEdBQUc7QUFDdEIsSUFBSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO0FBQzFELE1BQU0sR0FBRyxFQUFFLElBQUk7QUFDZixLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRTtBQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO0FBQ3hCLE1BQU0sR0FBRyxFQUFFLElBQUk7QUFDZixLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLElBQUksWUFBWSxHQUFHO0FBQ3JCLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3RCLEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxHQUFHO0FBQ25CLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsSUFBSSxRQUFRLEdBQUc7QUFDakIsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDM0IsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFO0FBQ3hDLElBQUksT0FBTyxTQUFTLENBQUM7QUFDckIsR0FBRztBQUNILEVBQUUsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUN0QyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN2QyxLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0FBQy9ELEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDdEMsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM1QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDdkMsS0FBSztBQUNMLElBQUksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbkQsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQzlCLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRTtBQUNuQixJQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRTtBQUM1QixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDdEIsSUFBSSxPQUFPLElBQUksYUFBYSxDQUFDO0FBQzdCLE1BQU0sUUFBUSxFQUFFLEVBQUU7QUFDbEIsTUFBTSxXQUFXLEVBQUUsRUFBRTtBQUNyQixLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxXQUFXLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDcEMsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakIsS0FBSztBQUNMLElBQUksTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN2QyxJQUFJLElBQUksT0FBTyxDQUFDO0FBQ2hCLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbEQsSUFBSSxJQUFJLEVBQUUsRUFBRTtBQUNaLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7QUFDMUQsUUFBUSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3RDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUM7QUFDckMsUUFBUSxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLFFBQVEsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekQsUUFBUSxVQUFVLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLElBQUksU0FBUyxDQUFDLFdBQVcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ2pFLFVBQVUsT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUMvQixTQUFTLE1BQU07QUFDZixVQUFVLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO0FBQ2xDLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO0FBQzFCLE1BQU0sSUFBSSxjQUFjLENBQUM7QUFDekIsTUFBTSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQztBQUN0RCxNQUFNLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUU7QUFDekM7QUFDQSxRQUFRLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDM0MsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO0FBQ3JDLFVBQVUsY0FBYyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDM0MsVUFBVSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0QsWUFBWSxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM1RSxXQUFXO0FBQ1gsU0FBUztBQUNULFFBQVEsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyRCxRQUFRLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ2xGO0FBQ0E7QUFDQSxRQUFRLElBQUksRUFBRSxRQUFRLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxFQUFFO0FBQy9FLFVBQVUsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUM7QUFDdkMsVUFBVSxjQUFjLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztBQUMzQyxVQUFVLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtBQUMvRCxZQUFZLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUM5QixXQUFXO0FBQ1gsVUFBVSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuRCxVQUFVLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ3BGLFNBQVM7QUFDVDtBQUNBO0FBQ0EsUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO0FBQzNFLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3JCLFFBQVEsT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDdEMsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQztBQUNyQyxRQUFRLElBQUksU0FBUyxJQUFJLGNBQWMsRUFBRSxTQUFTLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQztBQUMxRSxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLGtCQUFrQixHQUFHO0FBQ3ZCLElBQUksT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQy9CLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxZQUFZLEdBQUc7QUFDakIsSUFBSSxPQUFPLElBQUksYUFBYSxFQUFFLENBQUM7QUFDL0IsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUMzQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ2xFLElBQUksTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUkscUJBQXFCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ3RGLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDekUsSUFBSSxJQUFJLE9BQU8sQ0FBQztBQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7QUFDNUMsTUFBTSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDNUQsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsRUFBRSxNQUFNO0FBQ2xGLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxRQUFRLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEdBQUcsRUFBRTtBQUNqRyxNQUFNLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFDN0MsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtBQUMzQixNQUFNLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsR0FBRztBQUNILEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7QUFDekIsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM1QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDdkMsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkYsSUFBSSxPQUFPLElBQUksYUFBYSxFQUFFLENBQUM7QUFDL0IsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtBQUN2QixJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQztBQUM1RCxJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQzVCLElBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUN4QyxJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDN0IsSUFBSSxNQUFNLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUNyQixJQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO0FBQ2xDO0FBQ0EsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQy9FLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3RCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUM1QixJQUFJLE9BQU8sR0FBRyxDQUFDO0FBQ2YsR0FBRztBQUNILEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRTtBQUNsQixJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUQsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUMxQixJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDN0IsSUFBSSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN2QixJQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUMxQixJQUFJLE9BQU8sR0FBRyxDQUFDO0FBQ2YsR0FBRztBQUNILEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3RDLElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3JDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUN4QixJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixLQUFLO0FBQ0wsSUFBSSxPQUFPLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDeEYsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQzVCLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLE9BQU8sYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNoRyxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRTtBQUNwQixJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6SCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsUUFBUSxHQUFHO0FBQ2IsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ25ELEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFO0FBQy9ELElBQUksSUFBSSxRQUFRLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLEtBQUs7QUFDTCxJQUFJLElBQUksZUFBZSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3BDLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDdkMsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUc7QUFDZCxRQUFRLEtBQUssRUFBRSxJQUFJO0FBQ25CLE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxJQUFJLE1BQU0sT0FBTyxHQUFHLEtBQUssR0FBRyxXQUFXLENBQUM7QUFDeEMsSUFBSSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLElBQUksTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxRQUFRLENBQUM7QUFDdkUsSUFBSSxJQUFJLFdBQVcsQ0FBQztBQUNwQixJQUFJLElBQUksV0FBVyxFQUFFO0FBQ3JCLE1BQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN4RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUU7QUFDbEQsUUFBUSxHQUFHLEVBQUUsSUFBSTtBQUNqQixPQUFPLENBQUMsQ0FBQztBQUNULEtBQUs7QUFDTCxJQUFJLElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztBQUMvQixJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDeEM7QUFDQTtBQUNBLElBQUksSUFBSSxlQUFlLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtBQUM1QyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxXQUFXLEdBQUcsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsQ0FBQztBQUN0STtBQUNBO0FBQ0EsTUFBTSxPQUFPLENBQUMsU0FBUyxHQUFHLGNBQWMsR0FBRyxLQUFLLENBQUM7QUFDakQsS0FBSztBQUNMLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDbkQsSUFBSSxJQUFJLFdBQVcsSUFBSSxlQUFlLEtBQUssU0FBUyxDQUFDLElBQUksSUFBSSxXQUFXLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUNqRyxNQUFNLElBQUksZUFBZSxLQUFLLFNBQVMsQ0FBQyxVQUFVLEVBQUU7QUFDcEQsUUFBUSxJQUFJLFNBQVMsQ0FBQztBQUN0QixRQUFRLE9BQU8sV0FBVyxLQUFLLElBQUksQ0FBQyxhQUFhLEtBQUssU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDN0YsVUFBVSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksYUFBYSxDQUFDO0FBQzlDLFlBQVksU0FBUyxFQUFFLENBQUMsQ0FBQztBQUN6QixXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELFNBQVM7QUFDVCxPQUFPLE1BQU0sSUFBSSxlQUFlLEtBQUssU0FBUyxDQUFDLFdBQVcsRUFBRTtBQUM1RCxRQUFRLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN2QixPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0FBQzlCLEdBQUc7QUFDSCxFQUFFLGdCQUFnQixDQUFDLElBQUksRUFBRTtBQUN6QixJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLEdBQUc7QUFDSCxFQUFFLGdCQUFnQixDQUFDLEtBQUssRUFBRTtBQUMxQixJQUFJLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDakMsSUFBSSxPQUFPLEtBQUssS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDbE0sR0FBRztBQUNILEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRTtBQUNiLElBQUksT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQy9CLEdBQUc7QUFDSCxDQUFDO0FBQ0QsTUFBTSxDQUFDLFFBQVEsR0FBRztBQUNsQixFQUFFLFdBQVcsRUFBRSxJQUFJO0FBQ25CLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTTs7QUM5WnJCLE1BQU0saUJBQWlCLENBQUM7QUFDeEI7QUFDQTtBQUNBLEVBQUUsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDNUIsSUFBSSxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMzQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDekIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxRQUFRLEdBQUc7QUFDYixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUU7QUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU87QUFDbkMsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUkscUJBQXFCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQy9GLElBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxRCxJQUFJLE1BQU0sVUFBVSxHQUFHLFNBQVM7QUFDaEM7QUFDQSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztBQUNoRTtBQUNBLElBQUksU0FBUyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDcEUsSUFBSSxJQUFJLFNBQVMsWUFBWSxxQkFBcUIsRUFBRTtBQUNwRDtBQUNBLE1BQU0sSUFBSSxVQUFVLEVBQUU7QUFDdEI7QUFDQSxRQUFRLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDL0MsT0FBTyxNQUFNO0FBQ2I7QUFDQSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLE9BQU87QUFDUCxLQUFLLE1BQU0sSUFBSSxTQUFTLFlBQVksaUJBQWlCLEVBQUU7QUFDdkQsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO0FBQ2xDO0FBQ0EsUUFBUSxJQUFJLGNBQWMsQ0FBQztBQUMzQixRQUFRLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO0FBQzVFLFVBQVUsY0FBYyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDcEQsVUFBVSxjQUFjLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDaEQsVUFBVSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RDLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLE1BQU0sSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDaEM7QUFDQSxRQUFRLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQztBQUM5QyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUNuQixJQUFJLElBQUksRUFBRSxNQUFNLFlBQVksS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFO0FBQ2xELE1BQU0sTUFBTSxJQUFJLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM5RCxNQUFNLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQyxLQUFLO0FBQ0wsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ3BELE1BQU0sTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwQyxNQUFNLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5RSxNQUFNLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDOUIsTUFBTSxJQUFJLFVBQVUsQ0FBQztBQUNyQixNQUFNLElBQUksSUFBSSxJQUFJLElBQUk7QUFDdEI7QUFDQSxNQUFNLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEVBQUU7QUFDdEQsUUFBUSxJQUFJLEtBQUssWUFBWSxpQkFBaUI7QUFDOUM7QUFDQSxRQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMxQyxVQUFVLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0QsU0FBUztBQUNULFFBQVEsVUFBVSxHQUFHLEtBQUssWUFBWSxpQkFBaUIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hGLE9BQU87QUFDUCxNQUFNLElBQUksVUFBVSxFQUFFO0FBQ3RCLFFBQVEsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6RCxRQUFRLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkM7QUFDQTtBQUNBLFFBQVEsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25GLFFBQVEsSUFBSSxXQUFXLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtBQUN0RSxVQUFVLElBQUksRUFBRSxJQUFJO0FBQ3BCLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDWixPQUFPLE1BQU07QUFDYixRQUFRLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDMUQsVUFBVSxJQUFJLEVBQUUsSUFBSTtBQUNwQixTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ1osT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPO0FBQ1gsTUFBTSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDM0MsTUFBTSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7QUFDckIsTUFBTSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7QUFDckIsTUFBTSxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDakMsS0FBSyxDQUFDO0FBQ04sR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ25CLElBQUksTUFBTTtBQUNWLE1BQU0sTUFBTTtBQUNaLE1BQU0sR0FBRyxLQUFLO0FBQ2QsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNkLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0IsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJO0FBQ3ZDLE1BQU0sTUFBTSxLQUFLLEdBQUcsUUFBUSxJQUFJLE1BQU0sR0FBRyxJQUFJLGlCQUFpQixFQUFFLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO0FBQy9GLE1BQU0sS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDM0IsTUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDckIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksU0FBUyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUN0RixJQUFJLE1BQU0sYUFBYSxHQUFHLFNBQVMsSUFBSSxJQUFJLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQ2hGLElBQUksSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsSUFBSSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUNwQyxNQUFNLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEMsTUFBTSxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3JELE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDNUI7QUFDQTtBQUNBLFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNO0FBQzlCLFFBQVEsRUFBRSxFQUFFLENBQUM7QUFDYixPQUFPLE1BQU07QUFDYjtBQUNBLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLE9BQU87QUFDUCxNQUFNLElBQUksU0FBUyxFQUFFLE9BQU8sU0FBUyxDQUFDO0FBQ3RDLEtBQUs7QUFDTCxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ2QsR0FBRztBQUNILEVBQUUsS0FBSyxHQUFHO0FBQ1YsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDdkMsSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDcEMsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUU7QUFDcEIsTUFBTSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDNUI7QUFDQTtBQUNBLFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNO0FBQzlCLFFBQVEsRUFBRSxFQUFFLENBQUM7QUFDYixPQUFPLE1BQU07QUFDYjtBQUNBLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLE9BQU87QUFDUCxNQUFNLElBQUksU0FBUyxFQUFFLE9BQU8sU0FBUyxDQUFDO0FBQ3RDLEtBQUs7QUFDTCxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ2QsR0FBRztBQUNIOztBQ3pKQSxNQUFNLGFBQWEsQ0FBQztBQUNwQixFQUFFLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQzNCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLE1BQU07QUFDVixNQUFNLE1BQU07QUFDWixNQUFNLEtBQUs7QUFDWCxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUM5QztBQUNBLElBQUk7QUFDSixNQUFNLEtBQUssRUFBRSxDQUFDO0FBQ2QsTUFBTSxNQUFNLEVBQUUsQ0FBQztBQUNmLEtBQUs7QUFDTDtBQUNBLElBQUk7QUFDSixNQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNO0FBQ3ZDLE1BQU0sTUFBTSxFQUFFLENBQUM7QUFDZixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN2QixJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO0FBQ3BCLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxHQUFHO0FBQ0gsRUFBRSxJQUFJLEdBQUcsR0FBRztBQUNaLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNoRSxHQUFHO0FBQ0gsRUFBRSxJQUFJLEtBQUssR0FBRztBQUNkLElBQUksT0FBTztBQUNYLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO0FBQ3ZCLE1BQU0sTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO0FBQ3pCLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ2pCLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRTtBQUNmLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0IsR0FBRztBQUNILEVBQUUsU0FBUyxHQUFHO0FBQ2QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsR0FBRztBQUNILEVBQUUsUUFBUSxHQUFHO0FBQ2IsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDMUIsSUFBSSxPQUFPLENBQUMsQ0FBQztBQUNiLEdBQUc7QUFDSCxFQUFFLFNBQVMsR0FBRztBQUNkLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU87QUFDM0IsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0FBQ3hCLE1BQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDckIsTUFBTSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUN0QixLQUFLO0FBQ0wsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO0FBQ2xELE1BQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDbkQsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUU7QUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDckIsSUFBSSxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUM5SixNQUFNLElBQUksV0FBVyxDQUFDO0FBQ3RCLE1BQU0sSUFBSSxFQUFFLEVBQUUsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3RDLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDM0IsR0FBRztBQUNILEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRTtBQUNqQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNyQixJQUFJLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNuRyxNQUFNLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztBQUN0QyxLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO0FBQzNCLEdBQUc7QUFDSCxFQUFFLG9CQUFvQixHQUFHO0FBQ3pCLElBQUksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDaEMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTztBQUMxRCxNQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEYsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ3pDLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsbUJBQW1CLEdBQUc7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNO0FBQ2hDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPO0FBQ3JDLE1BQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1RSxNQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsc0JBQXNCLEdBQUc7QUFDM0IsSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTTtBQUNoQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPO0FBQ25GLE1BQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1RSxNQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUscUJBQXFCLEdBQUc7QUFDMUIsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTTtBQUNqQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPO0FBQzFELE1BQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuRixNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDL0QsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxvQkFBb0IsR0FBRztBQUN6QixJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNO0FBQ2pDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPO0FBQ3JDO0FBQ0E7QUFDQSxNQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsdUJBQXVCLEdBQUc7QUFDNUIsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTTtBQUNqQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPO0FBQ25GO0FBQ0E7QUFDQSxNQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUUsTUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSDs7QUMzSEEsTUFBTSxzQkFBc0IsQ0FBQztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDcEIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDeEIsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLEdBQUc7QUFDZCxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QixHQUFHO0FBQ0gsRUFBRSxJQUFJLGFBQWEsR0FBRztBQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUM5QyxHQUFHO0FBQ0gsRUFBRSxJQUFJLGFBQWEsR0FBRztBQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUM5QyxHQUFHO0FBQ0gsRUFBRSxJQUFJLFlBQVksR0FBRztBQUNyQixJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN0QixHQUFHO0FBQ0gsRUFBRSxLQUFLLEdBQUc7QUFDVixJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzdCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDckIsR0FBRztBQUNILEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7QUFDekIsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM1QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDakMsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0UsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUMvQyxJQUFJLE9BQU8sSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUMvQixHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRTtBQUN4QyxJQUFJLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzlCLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDakMsS0FBSztBQUNMLElBQUksTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDdEMsSUFBSSxRQUFRLFNBQVM7QUFDckIsTUFBTSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDMUIsTUFBTSxLQUFLLFNBQVMsQ0FBQyxVQUFVO0FBQy9CLFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsTUFBTSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDMUIsTUFBTSxLQUFLLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDM0IsTUFBTSxLQUFLLFNBQVMsQ0FBQyxXQUFXLENBQUM7QUFDakMsTUFBTTtBQUNOLFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7QUFDdEMsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM1QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDakMsS0FBSztBQUNMLElBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELEdBQUc7QUFDSCxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUN0QyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNqQyxLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakIsS0FBSztBQUNMLElBQUksT0FBTyxLQUFLLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNwRixHQUFHO0FBQ0gsRUFBRSxJQUFJLFVBQVUsR0FBRztBQUNuQixJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLEdBQUc7QUFDSCxFQUFFLElBQUksUUFBUSxHQUFHO0FBQ2pCLElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLEdBQUc7QUFDSCxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFO0FBQ3pCLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLElBQUksYUFBYSxFQUFFLENBQUM7QUFDbEQsSUFBSSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUN2RSxJQUFJLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ3RDLElBQUksTUFBTSxVQUFVLEdBQUcsUUFBUSxLQUFLLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ2pJLElBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUM7QUFDdEMsTUFBTSxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7QUFDekIsTUFBTSxXQUFXLEVBQUUsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRTtBQUM5QyxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzVCLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLEtBQUssS0FBSyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEUsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxZQUFZLEdBQUc7QUFDakIsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtBQUN2QyxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsa0JBQWtCLEdBQUc7QUFDdkIsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sT0FBTyxDQUFDO0FBQ3RDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDL0MsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxXQUFXLEdBQUc7QUFDaEIsSUFBSSxPQUFPLElBQUkscUJBQXFCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekMsR0FBRztBQUNILEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRTtBQUNuQixJQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUMzQixJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BELElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO0FBQ3RCLE1BQU0sT0FBTyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUMzRCxLQUFLO0FBQ0wsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxRQUFRLEdBQUcsRUFBRTtBQUNmLEVBQUUsSUFBSSxLQUFLLEdBQUc7QUFDZCxJQUFJLE9BQU87QUFDWCxNQUFNLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtBQUN6QixNQUFNLGNBQWMsRUFBRSxJQUFJLENBQUMsYUFBYTtBQUN4QyxLQUFLLENBQUM7QUFDTixHQUFHO0FBQ0gsRUFBRSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7QUFDbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDL0IsSUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDckQsR0FBRztBQUNILEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRTtBQUNiLElBQUksT0FBTyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztBQUNyQyxHQUFHO0FBQ0g7O0FDaEpBLE1BQU0sc0JBQXNCLENBQUM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDcEIsSUFBSSxNQUFNO0FBQ1YsTUFBTSxNQUFNO0FBQ1osTUFBTSxVQUFVO0FBQ2hCLE1BQU0sZUFBZTtBQUNyQixNQUFNLFdBQVc7QUFDakIsTUFBTSxJQUFJO0FBQ1YsTUFBTSxLQUFLO0FBQ1gsTUFBTSxHQUFHLFFBQVE7QUFDakIsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtBQUN4QixNQUFNLE1BQU07QUFDWixNQUFNLFVBQVU7QUFDaEIsTUFBTSxlQUFlO0FBQ3JCLE1BQU0sV0FBVztBQUNqQixNQUFNLElBQUk7QUFDVixNQUFNLEtBQUs7QUFDWCxLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLEtBQUssR0FBRztBQUNWLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3hCLEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ3pCLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ2hDLEtBQUs7QUFDTCxJQUFJLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO0FBQ3JDLE1BQU0sSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDNUIsTUFBTSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoRCxLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksYUFBYSxFQUFFLENBQUM7QUFDL0IsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLEdBQUc7QUFDZCxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNoRyxHQUFHO0FBQ0gsRUFBRSxJQUFJLGFBQWEsR0FBRztBQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDckMsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLEdBQUc7QUFDdEIsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBQ3JDLEdBQUc7QUFDSCxFQUFFLElBQUksWUFBWSxHQUFHO0FBQ3JCLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDL0QsR0FBRztBQUNILEVBQUUsSUFBSSxVQUFVLEdBQUc7QUFDbkIsSUFBSSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDekQsR0FBRztBQUNILEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUU7QUFDekIsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakIsS0FBSztBQUNMLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUNsRCxJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3BDO0FBQ0EsSUFBSSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDNUUsSUFBSSxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDOUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUNwQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNoQyxLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtBQUM3RSxNQUFNLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUM5QyxLQUFLO0FBQ0wsSUFBSSxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDekQsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUMsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDM0I7QUFDQSxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RSxHQUFHO0FBQ0gsRUFBRSxrQkFBa0IsR0FBRztBQUN2QixJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUNyRSxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLElBQUksT0FBTyxJQUFJLGFBQWEsQ0FBQztBQUM3QixNQUFNLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZTtBQUNwQyxLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLFlBQVksR0FBRztBQUNqQixJQUFJLE9BQU8sSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUMvQixHQUFHO0FBQ0gsRUFBRSxXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUM5QixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25ELEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hDLEdBQUc7QUFDSCxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUN0QyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUNoQyxLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0QsR0FBRztBQUNILEVBQUUsZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUU7QUFDeEMsSUFBSSxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM5QixNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2pDLEtBQUs7QUFDTCxJQUFJLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNyQixJQUFJLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ3JDLElBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNuRSxJQUFJLFFBQVEsU0FBUztBQUNyQixNQUFNLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQztBQUMxQixNQUFNLEtBQUssU0FBUyxDQUFDLFVBQVU7QUFDL0IsUUFBUSxPQUFPLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUNuRCxNQUFNLEtBQUssU0FBUyxDQUFDLEtBQUssQ0FBQztBQUMzQixNQUFNLEtBQUssU0FBUyxDQUFDLFdBQVc7QUFDaEMsUUFBUSxPQUFPLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUNuRCxNQUFNLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQztBQUMxQixNQUFNO0FBQ04sUUFBUSxPQUFPLFFBQVEsQ0FBQztBQUN4QixLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUN0QyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUNoQyxLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDbkQsR0FBRztBQUNILEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRTtBQUNwQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUksR0FBRztBQUNILEVBQUUsUUFBUSxHQUFHO0FBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzNCLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPO0FBQ1gsTUFBTSxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDeEIsTUFBTSxjQUFjLEVBQUUsSUFBSSxDQUFDLGFBQWE7QUFDeEMsTUFBTSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO0FBQy9CLE1BQU0sUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO0FBQzdCLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNuQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDckMsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDbkMsR0FBRztBQUNILEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFFO0FBQzFCLElBQUksSUFBSSxxQkFBcUIsQ0FBQztBQUM5QixJQUFJLE9BQU87QUFDWCxNQUFNLEdBQUcsS0FBSztBQUNkLE1BQU0sZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLE1BQU0sS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaE0sS0FBSyxDQUFDO0FBQ04sR0FBRztBQUNILEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRTtBQUNiLElBQUksT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQy9CLEdBQUc7QUFDSCxDQUFDO0FBQ0Qsc0JBQXNCLENBQUMsbUJBQW1CLEdBQUc7QUFDN0MsRUFBRSxHQUFHLEVBQUUsSUFBSTtBQUNYLEVBQUUsR0FBRyxFQUFFLHFuSUFBcW5JO0FBQzVuSTtBQUNBLEVBQUUsR0FBRyxFQUFFLEdBQUc7QUFDVixDQUFDOztBQ2xMRDtBQUNBLE1BQU0sWUFBWSxTQUFTLE1BQU0sQ0FBQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsYUFBYSxDQUFDLElBQUksRUFBRTtBQUN0QixJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsR0FBRztBQUNILEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRTtBQUNoQixJQUFJLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDM0IsSUFBSSxJQUFJLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsR0FBRztBQUNILENBQUM7QUFDRCxLQUFLLENBQUMsWUFBWSxHQUFHLFlBQVk7O0FDZmpDO0FBQ0EsTUFBTSxhQUFhLFNBQVMsTUFBTSxDQUFDO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRTtBQUNwQixJQUFJLEtBQUssQ0FBQztBQUNWLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUTtBQUMvQixNQUFNLEdBQUcsSUFBSTtBQUNiLE1BQU0sV0FBVyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHNCQUFzQixDQUFDLG1CQUFtQixFQUFFLElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUMxSCxLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLGFBQWEsQ0FBQyxJQUFJLEVBQUU7QUFDdEIsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlCLEdBQUc7QUFDSCxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsSUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzdFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN4QixHQUFHO0FBQ0gsRUFBRSxZQUFZLEdBQUc7QUFDakIsSUFBSSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQ2xDLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDdEIsSUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztBQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7QUFDNUIsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzlCLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPO0FBQ2xDLElBQUksSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQy9CLElBQUksSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQzlCLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDN0MsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDdkIsUUFBUSxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hGO0FBQ0EsUUFBUSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuRDtBQUNBLFFBQVEsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQVEsSUFBSSxLQUFLLEVBQUU7QUFDbkIsVUFBVSxNQUFNO0FBQ2hCLFlBQVksTUFBTTtBQUNsQixZQUFZLE1BQU07QUFDbEIsWUFBWSxHQUFHLEtBQUs7QUFDcEIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEQsVUFBVSxNQUFNLFNBQVMsR0FBRztBQUM1QixZQUFZLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtBQUMzQixZQUFZLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztBQUM3QixZQUFZLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZTtBQUNqRCxZQUFZLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztBQUN6QyxZQUFZLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUNyQyxZQUFZLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztBQUNqQyxZQUFZLEdBQUcsS0FBSztBQUNwQixZQUFZLE1BQU07QUFDbEIsWUFBWSxNQUFNLEVBQUUsSUFBSTtBQUN4QixXQUFXLENBQUM7QUFDWixVQUFVLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuSCxVQUFVLElBQUksV0FBVyxFQUFFO0FBQzNCLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0MsWUFBWSxJQUFJLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUN2RDtBQUNBO0FBQ0EsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMzRSxZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLFdBQVc7QUFDWCxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNoQyxVQUFVLFNBQVM7QUFDbkIsU0FBUztBQUNULE9BQU87QUFDUCxNQUFNLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1QixNQUFNLElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNuQyxNQUFNLElBQUksSUFBSSxLQUFLLGFBQWEsQ0FBQyxTQUFTLEVBQUU7QUFDNUMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLFFBQVEsU0FBUztBQUNqQixPQUFPO0FBQ1AsTUFBTSxJQUFJLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRTtBQUN4QyxRQUFRLGNBQWMsR0FBRyxDQUFDLGNBQWMsQ0FBQztBQUN6QyxRQUFRLFNBQVM7QUFDakIsT0FBTztBQUNQLE1BQU0sSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7QUFDeEMsUUFBUSxhQUFhLEdBQUcsQ0FBQyxhQUFhLENBQUM7QUFDdkMsUUFBUSxTQUFTO0FBQ2pCLE9BQU87QUFDUCxNQUFNLElBQUksSUFBSSxLQUFLLGFBQWEsQ0FBQyxXQUFXLEVBQUU7QUFDOUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNaLFFBQVEsSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTTtBQUN6QixRQUFRLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsT0FBTztBQUNQLE1BQU0sTUFBTSxHQUFHLEdBQUcsT0FBTyxHQUFHLElBQUksc0JBQXNCLENBQUM7QUFDdkQsUUFBUSxVQUFVLEVBQUUsYUFBYTtBQUNqQyxRQUFRLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtBQUN2QixRQUFRLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztBQUN6QixRQUFRLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZTtBQUM3QyxRQUFRLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztBQUNyQyxRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxRQUFRLE1BQU0sRUFBRSxJQUFJO0FBQ3BCLE9BQU8sQ0FBQyxHQUFHLElBQUksc0JBQXNCLENBQUM7QUFDdEMsUUFBUSxJQUFJO0FBQ1osUUFBUSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDekIsUUFBUSxXQUFXLEVBQUUsY0FBYztBQUNuQyxPQUFPLENBQUMsQ0FBQztBQUNULE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPO0FBQ1gsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLO0FBQ3BCLE1BQU0sT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzdDLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNuQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDaEIsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbkIsTUFBTSxPQUFPO0FBQ2IsS0FBSztBQUNMLElBQUksTUFBTTtBQUNWLE1BQU0sT0FBTztBQUNiLE1BQU0sR0FBRyxXQUFXO0FBQ3BCLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDZCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNELElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7QUFDOUIsR0FBRztBQUNILEVBQUUsS0FBSyxHQUFHO0FBQ1YsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDekMsR0FBRztBQUNILEVBQUUsSUFBSSxVQUFVLEdBQUc7QUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsRyxHQUFHO0FBQ0gsRUFBRSxJQUFJLFFBQVEsR0FBRztBQUNqQixJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQyxHQUFHO0FBQ0gsRUFBRSxJQUFJLE9BQU8sR0FBRztBQUNoQixJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QyxHQUFHO0FBQ0gsRUFBRSxJQUFJLFVBQVUsR0FBRztBQUNuQixJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqRCxHQUFHO0FBQ0gsRUFBRSxRQUFRLEdBQUc7QUFDYixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM1QyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxJQUFJLGFBQWEsR0FBRztBQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDM0gsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLENBQUMsYUFBYSxFQUFFO0FBQ25DLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzFCLE1BQU0sTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hJLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3JELE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN0QixLQUFLLE1BQU0sS0FBSyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDL0MsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLEdBQUc7QUFDZCxJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUs7QUFDcEQ7QUFDQSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN4RCxHQUFHO0FBQ0gsRUFBRSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7QUFDbkIsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDMUIsTUFBTSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEksTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDckMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3RCLEtBQUssTUFBTSxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUMvQixHQUFHO0FBQ0gsRUFBRSxJQUFJLFVBQVUsR0FBRztBQUNuQixJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQzdFLEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRTtBQUN4QixJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUMxQixNQUFNLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4SSxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUMxQyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUIsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDdEIsS0FBSyxNQUFNLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ3BDLEdBQUc7QUFDSCxFQUFFLElBQUksWUFBWSxHQUFHO0FBQ3JCLElBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdEUsR0FBRztBQUNILEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRTtBQUNuQixJQUFJLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztBQUN2RSxHQUFHO0FBQ0gsRUFBRSxZQUFZLEdBQUc7QUFDakIsSUFBSSxJQUFJLG9CQUFvQixDQUFDO0FBQzdCLElBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUN4QyxJQUFJLElBQUksZUFBZSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUM7QUFDL0ksSUFBSSxJQUFJLGVBQWUsSUFBSSxJQUFJLEVBQUUsT0FBTyxPQUFPLENBQUM7QUFDaEQ7QUFDQTtBQUNBLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLGVBQWUsQ0FBQztBQUNsRSxJQUFJLEtBQUssSUFBSSxFQUFFLEdBQUcsZUFBZSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRTtBQUNuRSxNQUFNLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDaEQsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNO0FBQzdCLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixLQUFLO0FBQ0wsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRTtBQUM1QixJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixLQUFLO0FBQ0wsSUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEUsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLE9BQU8sQ0FBQztBQUNuQyxJQUFJLEtBQUssSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7QUFDMUUsTUFBTSxJQUFJLHFCQUFxQixDQUFDO0FBQ2hDLE1BQU0sTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUU7QUFDakQsUUFBUSxHQUFHLEtBQUs7QUFDaEIsUUFBUSxnQkFBZ0IsRUFBRSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLHFCQUFxQixDQUFDLEVBQUUsQ0FBQztBQUMxTCxPQUFPLENBQUMsQ0FBQztBQUNULE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN0QyxNQUFNLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLEdBQUc7QUFDSCxFQUFFLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQzlCLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztBQUM5QyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssRUFBRSxPQUFPLFNBQVMsQ0FBQztBQUM1QyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLO0FBQzVFLE1BQU0sTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekQsTUFBTSxVQUFVLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakQsTUFBTSxVQUFVLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEQsTUFBTSxJQUFJLFVBQVUsWUFBWSxpQkFBaUIsRUFBRSxVQUFVLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUM5RSxNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE9BQU8sU0FBUyxDQUFDO0FBQ3JCLEdBQUc7QUFDSCxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUN0QyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN2QyxLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakIsS0FBSztBQUNMLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3JDLElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEtBQUs7QUFDekUsTUFBTSxLQUFLLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3JELEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsVUFBVSxFQUFFO0FBQzlCLElBQUksSUFBSSxVQUFVLENBQUM7QUFDbkIsSUFBSSxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7QUFDcEQsTUFBTSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLE1BQU0sSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxNQUFNO0FBQzNELEtBQUs7QUFDTCxJQUFJLE9BQU8sVUFBVSxDQUFDO0FBQ3RCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLEVBQUU7QUFDbkMsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLFlBQVksSUFBSSxJQUFJLEVBQUUsT0FBTyxPQUFPLENBQUM7QUFDMUQsSUFBSSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekUsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLE9BQU8sT0FBTyxDQUFDO0FBQ3hDLElBQUksTUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztBQUNqRCxJQUFJLE1BQU0sYUFBYSxHQUFHLFlBQVksSUFBSSxJQUFJLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3BGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7QUFDcEUsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxZQUFZLElBQUksSUFBSSxFQUFFO0FBQzNDLFFBQVEsSUFBSSxRQUFRLENBQUM7QUFDckIsUUFBUSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMzRyxPQUFPO0FBQ1AsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxjQUFjLENBQUMsR0FBRyxFQUFFO0FBQ3RCLElBQUksSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ3JELE1BQU0sTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxNQUFNLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDMUMsTUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQztBQUNuQyxNQUFNLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDaEMsUUFBUSxPQUFPO0FBQ2YsVUFBVSxLQUFLLEVBQUUsRUFBRTtBQUNuQixVQUFVLE1BQU0sRUFBRSxHQUFHLEdBQUcsYUFBYTtBQUNyQyxTQUFTLENBQUM7QUFDVixPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLGNBQWMsQ0FBQyxVQUFVLEVBQUU7QUFDN0IsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNqRyxHQUFHO0FBQ0gsRUFBRSxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtBQUM1QyxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkQsSUFBSSxJQUFJLGFBQWEsRUFBRTtBQUN2QixNQUFNLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckQ7QUFDQSxNQUFNLE1BQU0sV0FBVyxHQUFHLFdBQVcsSUFBSSxhQUFhLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUM7QUFDbkYsTUFBTSxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7QUFDckQsTUFBTSxNQUFNLGVBQWUsR0FBRyxXQUFXLElBQUksV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN0SSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3JHLE1BQU0sSUFBSSxXQUFXLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDdkM7QUFDQSxRQUFRLEtBQUssSUFBSSxFQUFFLEdBQUcsYUFBYSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUU7QUFDN0UsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ0EsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RGLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7QUFDekIsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM1QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDdkMsS0FBSztBQUNMLElBQUksTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkQsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sS0FBSztBQUMzRSxNQUFNLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMxRCxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksT0FBTyxhQUFhLENBQUM7QUFDekIsR0FBRztBQUNILEVBQUUsZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUU7QUFDeEMsSUFBSSxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUM5QixNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2pDLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2QyxJQUFJLE1BQU0sTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN0RCxJQUFJLElBQUksU0FBUyxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUU7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsTUFBTSxJQUFJLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUMzRCxNQUFNLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN4QixNQUFNLElBQUksTUFBTSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQzFELE1BQU0sT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN0QyxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUksSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLFVBQVUsRUFBRTtBQUM1RTtBQUNBLE1BQU0sSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtBQUN4QyxRQUFRLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3ZDLFFBQVEsSUFBSSxNQUFNLENBQUMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssU0FBUyxFQUFFLE9BQU8sU0FBUyxDQUFDO0FBQ3BFLFFBQVEsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzFCLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTSxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNuQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBQ3RDLE1BQU0sTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUM7QUFDcEM7QUFDQTtBQUNBLE1BQU0sSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtBQUN4QyxRQUFRLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ3RDLFFBQVEsTUFBTSxDQUFDLHVCQUF1QixFQUFFLENBQUM7QUFDekMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLEdBQUcsSUFBSSxTQUFTLEVBQUUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ3BFLFFBQVEsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzFCLFFBQVEsSUFBSSxNQUFNLENBQUMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxHQUFHLElBQUksU0FBUyxFQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNwRSxRQUFRLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMxQixPQUFPO0FBQ1AsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ3ZDLE1BQU0sSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2RCxNQUFNLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN4QixNQUFNLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDdkMsTUFBTSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDeEIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ3ZDLE1BQU0sT0FBTyxDQUFDLENBQUM7QUFDZixLQUFLO0FBQ0wsSUFBSSxJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUMsS0FBSyxJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUMsV0FBVyxFQUFFO0FBQzlFO0FBQ0EsTUFBTSxNQUFNLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUNwQyxNQUFNLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDNUQsTUFBTSxJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUMsV0FBVyxFQUFFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDL0U7QUFDQTtBQUNBLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3hCLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUN2QyxNQUFNLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN4QixNQUFNLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDdkMsTUFBTSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3RCxLQUFLO0FBQ0wsSUFBSSxPQUFPLFNBQVMsQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ3RDLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNsQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLO0FBQzNFLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdkQsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQ3BCLElBQUksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFO0FBQ3JCLElBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDNUIsSUFBSSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvQyxHQUFHO0FBQ0gsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFO0FBQ2IsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRyxJQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLEdBQUc7QUFDSCxDQUFDO0FBQ0QsYUFBYSxDQUFDLFFBQVEsR0FBRztBQUN6QixFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVE7QUFDcEIsRUFBRSxJQUFJLEVBQUUsSUFBSTtBQUNaLEVBQUUsZUFBZSxFQUFFLEdBQUc7QUFDdEIsQ0FBQyxDQUFDO0FBQ0YsYUFBYSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7QUFDOUIsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDakMsYUFBYSxDQUFDLGVBQWUsR0FBRyxzQkFBc0IsQ0FBQztBQUN2RCxhQUFhLENBQUMsZUFBZSxHQUFHLHNCQUFzQixDQUFDO0FBQ3ZELEtBQUssQ0FBQyxhQUFhLEdBQUcsYUFBYTs7QUNoY25DO0FBQ0EsTUFBTSxXQUFXLFNBQVMsYUFBYSxDQUFDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSSxVQUFVLEdBQUc7QUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDckQsR0FBRztBQUNILEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRTtBQUNwQixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3RCLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixHQUFHO0FBQ0gsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2hCLElBQUksTUFBTTtBQUNWLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQztBQUN2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDO0FBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPO0FBQzVCLE1BQU0sR0FBRyxXQUFXO0FBQ3BCLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDYixJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDckIsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM1RCxJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzNCLElBQUksTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwRSxJQUFJLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEUsSUFBSSxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFDM0IsSUFBSSxPQUFPLGNBQWMsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxjQUFjLENBQUM7QUFDaEgsSUFBSSxXQUFXLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxDQUFDO0FBQ3pILElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvQixHQUFHO0FBQ0gsRUFBRSxJQUFJLFVBQVUsR0FBRztBQUNuQixJQUFJLE9BQU8sS0FBSyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25ELEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDbEIsSUFBSSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDcEIsSUFBSSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDcEIsSUFBSSxNQUFNLEdBQUcsV0FBVyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDckUsSUFBSSxJQUFJLEdBQUcsRUFBRTtBQUNiLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNwRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDcEQsS0FBSztBQUNMLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRCxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEQsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVCLEdBQUc7QUFDSCxFQUFFLGFBQWEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFO0FBQzNCLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLElBQUksT0FBTyxDQUFDO0FBQ2hCLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDN0MsSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pCLEdBQUc7QUFDSCxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFO0FBQzVCLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEcsSUFBSSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLElBQUksTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzlELElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbkcsSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFO0FBQ2xDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDM0YsUUFBUSxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakgsT0FBTztBQUNQLE1BQU0sT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25FLEtBQUs7QUFDTCxJQUFJLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0MsR0FBRztBQUNILEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRTtBQUNwQixJQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDM0IsSUFBSSxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLElBQUksSUFBSSxZQUFZLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQzFFLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9GLEdBQUc7QUFDSCxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUU7QUFDYixJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDeEMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxPQUFPLENBQUM7QUFDN0QsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQzdCLElBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUN6RCxJQUFJLElBQUksU0FBUyxFQUFFO0FBQ25CLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ25CLE1BQU0sS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUMxQyxRQUFRLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM1RCxPQUFPO0FBQ1A7QUFDQTtBQUNBLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM3RCxLQUFLO0FBQ0wsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsQ0FBQztBQUNELEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVzs7QUN2Ry9CLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sVUFBVSxTQUFTLGFBQWEsQ0FBQztBQUN2QyxFQUFFLE9BQU8scUJBQXFCLENBQUMsSUFBSSxFQUFFO0FBQ3JDLElBQUksTUFBTTtBQUNWLE1BQU0sSUFBSTtBQUNWLE1BQU0sT0FBTztBQUNiLE1BQU0sR0FBRyxXQUFXO0FBQ3BCLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDYixJQUFJLE9BQU87QUFDWCxNQUFNLEdBQUcsV0FBVztBQUNwQixNQUFNLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLE9BQU87QUFDM0MsS0FBSyxDQUFDO0FBQ04sR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDcEIsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDO0FBQzNDLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUTtBQUM1QixNQUFNLEdBQUcsSUFBSTtBQUNiLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDUixHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3RCLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixHQUFHO0FBQ0gsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2hCLElBQUksTUFBTTtBQUNWLE1BQU0sSUFBSTtBQUNWLE1BQU0sT0FBTztBQUNiLE1BQU0sTUFBTTtBQUNaLE1BQU0sR0FBRyxXQUFXO0FBQ3BCLEtBQUssR0FBRztBQUNSLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUTtBQUM1QixNQUFNLEdBQUcsSUFBSTtBQUNiLEtBQUssQ0FBQztBQUNOLElBQUksTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztBQUM3RTtBQUNBLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDaEUsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM5RCxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQzdFLE1BQU0sYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckQsTUFBTSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNuRCxNQUFNLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDdkQsUUFBUSxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2xELFFBQVEsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNoRCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDbEIsTUFBTSxHQUFHLFdBQVc7QUFDcEIsTUFBTSxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxPQUFPO0FBQzNDLE1BQU0sTUFBTSxFQUFFLGFBQWE7QUFDM0IsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFO0FBQ3BCLElBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUMzQixJQUFJLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM3TCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsV0FBVyxDQUFDLEdBQUcsRUFBRTtBQUNuQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RFLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSxJQUFJLElBQUksR0FBRztBQUNiLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzNCLEdBQUc7QUFDSCxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNqQixJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQzNCLEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxHQUFHO0FBQ25CLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3JELEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRTtBQUN4QixJQUFJLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzdCLEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDbkIsSUFBSSxPQUFPLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxHQUFHO0FBQ0gsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7QUFDekIsSUFBSSxPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMxRSxHQUFHO0FBQ0gsQ0FBQztBQUNELFVBQVUsQ0FBQyxrQkFBa0IsR0FBRyxPQUFPO0FBQ3ZDLEVBQUUsQ0FBQyxFQUFFO0FBQ0wsSUFBSSxJQUFJLEVBQUUsV0FBVztBQUNyQixJQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNWLElBQUksU0FBUyxFQUFFLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsQ0FBQyxFQUFFO0FBQ0wsSUFBSSxJQUFJLEVBQUUsV0FBVztBQUNyQixJQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNWLElBQUksU0FBUyxFQUFFLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsQ0FBQyxFQUFFO0FBQ0wsSUFBSSxJQUFJLEVBQUUsV0FBVztBQUNyQixJQUFJLElBQUksRUFBRSxJQUFJO0FBQ2QsSUFBSSxFQUFFLEVBQUUsSUFBSTtBQUNaLEdBQUc7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUNILFVBQVUsQ0FBQyxRQUFRLEdBQUc7QUFDdEIsRUFBRSxHQUFHLGFBQWEsQ0FBQyxRQUFRO0FBQzNCLEVBQUUsSUFBSSxFQUFFLElBQUk7QUFDWixFQUFFLE9BQU8sRUFBRSxjQUFjO0FBQ3pCLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sS0FBSztBQUM1QixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDekIsSUFBSSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN4RCxJQUFJLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUMvRCxJQUFJLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNwQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QyxHQUFHO0FBQ0gsRUFBRSxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxLQUFLO0FBQzFCLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLEdBQUc7QUFDSCxDQUFDLENBQUM7QUFDRixLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVU7O0FDMUk3QjtBQUNBLE1BQU0sYUFBYSxTQUFTLE1BQU0sQ0FBQztBQUNuQyxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDcEIsSUFBSSxLQUFLLENBQUM7QUFDVixNQUFNLEdBQUcsYUFBYSxDQUFDLFFBQVE7QUFDL0IsTUFBTSxHQUFHLElBQUk7QUFDYixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDakMsR0FBRztBQUNILEVBQUUsYUFBYSxDQUFDLElBQUksRUFBRTtBQUN0QixJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsR0FBRztBQUNILEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRTtBQUNoQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsSUFBSSxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7QUFDeEIsTUFBTSxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUNsQztBQUNBLE1BQU0sSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUk7QUFDekUsUUFBUSxNQUFNO0FBQ2QsVUFBVSxNQUFNO0FBQ2hCLFVBQVUsR0FBRyxRQUFRO0FBQ3JCLFNBQVMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsUUFBUSxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUM7QUFDbEMsVUFBVSxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDcEMsVUFBVSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07QUFDNUIsVUFBVSxXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVk7QUFDeEMsVUFBVSxHQUFHLFFBQVE7QUFDckIsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLElBQUksTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO0FBQzdDLFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2Q7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRTtBQUM1QixJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixLQUFLO0FBQ0wsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNuRCxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUMxQixNQUFNLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEYsS0FBSztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsR0FBRztBQUNILEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQ3hDLElBQUksSUFBSSxRQUFRLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDN0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixLQUFLO0FBQ0wsSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtBQUN6QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7QUFDaEIsS0FBSztBQUNMLElBQUksTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQzFILElBQUksTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUMxQyxJQUFJLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLGdCQUFnQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQztBQUMxSCxJQUFJLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNELElBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUN0QyxJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDeEMsSUFBSSxNQUFNLGFBQWEsR0FBRyxRQUFRLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDckU7QUFDQTtBQUNBLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRTtBQUNqRCxNQUFNLEdBQUcsS0FBSztBQUNkLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNiO0FBQ0E7QUFDQSxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUMxQixNQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7QUFDekM7QUFDQSxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDakMsUUFBUSxJQUFJLFdBQVcsRUFBRTtBQUN6QixVQUFVLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtBQUMvQyxZQUFZLEdBQUcsRUFBRSxJQUFJO0FBQ3JCLFdBQVcsQ0FBQyxDQUFDO0FBQ2IsVUFBVSxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUM7QUFDekYsU0FBUztBQUNULFFBQVEsSUFBSSxTQUFTLEVBQUU7QUFDdkIsVUFBVSxPQUFPLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtBQUNsRSxZQUFZLEdBQUcsRUFBRSxJQUFJO0FBQ3JCLFlBQVksSUFBSSxFQUFFLElBQUk7QUFDdEIsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3ZCLFNBQVM7QUFDVCxPQUFPLE1BQU0sSUFBSSxhQUFhLEVBQUU7QUFDaEM7QUFDQTtBQUNBLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO0FBQy9DLE9BQU87QUFDUCxLQUFLO0FBQ0wsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxrQkFBa0IsR0FBRztBQUN2QixJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUMxQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUMxQixNQUFNLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7QUFDL0QsS0FBSztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsR0FBRztBQUNILEVBQUUsWUFBWSxHQUFHO0FBQ2pCLElBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzFDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzFCLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFDekQsS0FBSztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsR0FBRztBQUNILEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRTtBQUNuQixJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDeEMsSUFBSSxJQUFJLElBQUksRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ25FLElBQUksT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzVHLEdBQUc7QUFDSCxFQUFFLGdCQUFnQixDQUFDLEtBQUssRUFBRTtBQUMxQixJQUFJLElBQUkscUJBQXFCLEVBQUUsc0JBQXNCLENBQUM7QUFDdEQsSUFBSSxPQUFPO0FBQ1gsTUFBTSxHQUFHLEtBQUs7QUFDZCxNQUFNLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsTUFBTSxJQUFJLENBQUMsV0FBVyxLQUFLLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsZ0JBQWdCO0FBQzlSLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUNwQyxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixLQUFLO0FBQ0wsSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtBQUN6QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7QUFDaEIsS0FBSztBQUNMLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RELEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUU7QUFDcEIsSUFBSSxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkgsR0FBRztBQUNILEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDeEIsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakIsS0FBSztBQUNMLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNuRCxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUMxQixNQUFNLElBQUksY0FBYyxDQUFDO0FBQ3pCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDN0UsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNsRCxLQUFLO0FBQ0wsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hCLEdBQUc7QUFDSCxFQUFFLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQzVCLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkQsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDMUIsTUFBTSxJQUFJLGNBQWMsQ0FBQztBQUN6QixNQUFNLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbEQsS0FBSztBQUNMLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN4QixHQUFHO0FBQ0gsRUFBRSxLQUFLLEdBQUc7QUFDVixJQUFJLElBQUksaUJBQWlCLENBQUM7QUFDMUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxJQUFJLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2hGLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHO0FBQ2QsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDcEcsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ25CLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ3pCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3BDLE1BQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ3pDLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzVCLEtBQUssTUFBTSxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUMvQixHQUFHO0FBQ0gsRUFBRSxJQUFJLGFBQWEsR0FBRztBQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztBQUNwSCxHQUFHO0FBQ0gsRUFBRSxJQUFJLGFBQWEsQ0FBQyxhQUFhLEVBQUU7QUFDbkMsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDekIsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDcEQsTUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDekMsTUFBTSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDNUIsS0FBSyxNQUFNLEtBQUssQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQy9DLEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxHQUFHO0FBQ25CLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQzlHLEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxDQUFDLFVBQVUsRUFBRTtBQUM3QixJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUN6QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM5QyxNQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUN6QyxNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM1QixNQUFNLE9BQU87QUFDYixLQUFLO0FBQ0wsSUFBSSxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDM0M7QUFDQTtBQUNBLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzFCLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQy9DLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0FBQ3JELEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3ZDLEdBQUc7QUFDSCxFQUFFLElBQUksWUFBWSxHQUFHO0FBQ3JCLElBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUNqRSxHQUFHO0FBQ0gsRUFBRSxJQUFJLFVBQVUsR0FBRztBQUNuQixJQUFJLElBQUksa0JBQWtCLENBQUM7QUFDM0IsSUFBSSxPQUFPLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdHLEdBQUc7QUFDSCxFQUFFLElBQUksUUFBUSxHQUFHO0FBQ2pCLElBQUksSUFBSSxrQkFBa0IsQ0FBQztBQUMzQixJQUFJLE9BQU8sT0FBTyxDQUFDLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0csR0FBRztBQUNILEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7QUFDekIsSUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzFCLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEU7QUFDQSxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztBQUN4QyxLQUFLO0FBQ0wsSUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxJQUFJLEtBQUssR0FBRztBQUNkLElBQUksSUFBSSxrQkFBa0IsQ0FBQztBQUMzQixJQUFJLE9BQU87QUFDWCxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUs7QUFDcEIsTUFBTSxjQUFjLEVBQUUsSUFBSSxDQUFDLGFBQWE7QUFDeEMsTUFBTSxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDekQsTUFBTSxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVc7QUFDdEMsTUFBTSxXQUFXLEVBQUUsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLO0FBQ3RHLEtBQUssQ0FBQztBQUNOLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNuQixJQUFJLE1BQU07QUFDVixNQUFNLGFBQWE7QUFDbkIsTUFBTSxjQUFjO0FBQ3BCLE1BQU0sV0FBVztBQUNqQixNQUFNLEdBQUcsV0FBVztBQUNwQixLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ2QsSUFBSSxJQUFJLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMxRixJQUFJLElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtBQUNoQyxNQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsY0FBYyxDQUFDO0FBQ3hDLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO0FBQzNDLEtBQUs7QUFDTCxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO0FBQzlCLEdBQUc7QUFDSCxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUN0QyxJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4RixHQUFHO0FBQ0gsRUFBRSxXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUM5QixJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0csR0FBRztBQUNILEVBQUUsUUFBUSxHQUFHO0FBQ2IsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN0RCxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRTtBQUN4QyxJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkksR0FBRztBQUNILEVBQUUsSUFBSSxTQUFTLEdBQUc7QUFDbEIsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzRSxHQUFHO0FBQ0gsRUFBRSxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUU7QUFDM0IsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUNoQyxHQUFHO0FBQ0gsRUFBRSxJQUFJLEtBQUssR0FBRztBQUNkLElBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDbkUsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDeEIsR0FBRztBQUNILEVBQUUsSUFBSSxXQUFXLEdBQUc7QUFDcEIsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUMvRSxHQUFHO0FBQ0gsRUFBRSxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUU7QUFDL0IsSUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztBQUNwQyxHQUFHO0FBQ0gsRUFBRSxJQUFJLE9BQU8sR0FBRztBQUNoQixJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3ZFLEdBQUc7QUFDSCxFQUFFLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0FBQzVCLEdBQUc7QUFDSCxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDbkIsSUFBSSxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLO0FBQ3JFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPO0FBQzVCLE1BQU0sTUFBTTtBQUNaLFFBQVEsSUFBSSxFQUFFLE9BQU87QUFDckIsUUFBUSxHQUFHLFFBQVE7QUFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuQixNQUFNLE9BQU8sY0FBYyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xFLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsR0FBRztBQUNILEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFFO0FBQzFCLElBQUksSUFBSSxrQkFBa0IsQ0FBQztBQUMzQixJQUFJLE9BQU8sT0FBTyxDQUFDLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMxSCxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxDQUFDLFFBQVEsR0FBRztBQUN6QixFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVE7QUFDcEIsRUFBRSxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEtBQUs7QUFDL0MsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTztBQUM3QyxJQUFJLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDNUM7QUFDQTtBQUNBLElBQUksTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxLQUFLO0FBQzFELE1BQU0sTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUM7QUFDakQsTUFBTSxNQUFNLGFBQWEsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDL0gsTUFBTSxJQUFJLENBQUMsQ0FBQyxhQUFhLEtBQUssVUFBVSxFQUFFO0FBQzFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xCLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7QUFDN0IsVUFBVSxHQUFHLEVBQUUsSUFBSTtBQUNuQixTQUFTLENBQUMsQ0FBQztBQUNYLE9BQU8sTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQzdCLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoQyxPQUFPO0FBQ1AsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6RCxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsTUFBTSxPQUFPO0FBQ2IsUUFBUSxLQUFLO0FBQ2IsUUFBUSxNQUFNLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNO0FBQ3RDLFFBQVEsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQzlJLE9BQU8sQ0FBQztBQUNSLEtBQUssQ0FBQyxDQUFDO0FBQ1A7QUFDQTtBQUNBLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN0RyxJQUFJLE9BQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsR0FBRztBQUNILENBQUMsQ0FBQztBQUNGLEtBQUssQ0FBQyxhQUFhLEdBQUcsYUFBYTs7QUNyVW5DO0FBQ0EsTUFBTSxVQUFVLFNBQVMsYUFBYSxDQUFDO0FBQ3ZDLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRTtBQUNwQixJQUFJLEtBQUssQ0FBQztBQUNWLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUTtBQUM1QixNQUFNLEdBQUcsSUFBSTtBQUNiLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsYUFBYSxDQUFDLElBQUksRUFBRTtBQUN0QixJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsR0FBRztBQUNILEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRTtBQUNoQixJQUFJLE1BQU07QUFDVixNQUFNLElBQUksRUFBRSxLQUFLO0FBQ2pCLE1BQU0sR0FBRyxLQUFLO0FBQ2QsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNiLElBQUksSUFBSSxLQUFLLEVBQUU7QUFDZixNQUFNLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQyxNQUFNLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUNsRCxNQUFNLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxjQUFjLENBQUM7QUFDbkUsTUFBTSxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDOUMsTUFBTSxJQUFJLGNBQWMsRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUMvRSxNQUFNLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLEtBQUs7QUFDTCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsR0FBRztBQUNILEVBQUUsY0FBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUU7QUFDNUIsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakIsS0FBSztBQUNMLElBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRyxJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ2xHLElBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO0FBQ3hCLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUNoQyxRQUFRLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLO0FBQ3BFLFVBQVUsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLFVBQVUsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTztBQUNqRSxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQixVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsT0FBTztBQUNQLE1BQU0sTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzRSxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDaEMsUUFBUSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNySCxPQUFPO0FBQ1AsTUFBTSxPQUFPLENBQUMsQ0FBQztBQUNmLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxhQUFhLENBQUM7QUFDN0IsTUFBTSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUM1QixLQUFLLENBQUMsQ0FBQztBQUNQLEdBQUc7QUFDSCxFQUFFLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQzlCLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLEtBQUs7QUFDTDtBQUNBLElBQUksT0FBTyxJQUFJLHFCQUFxQixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNsRCxHQUFHO0FBQ0gsRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUN6QixJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN2QyxLQUFLO0FBQ0wsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3RELElBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuRyxJQUFJLElBQUksR0FBRyxDQUFDO0FBQ1osSUFBSSxLQUFLLEdBQUcsR0FBRyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtBQUN6QyxNQUFNLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM3RyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTTtBQUNwQyxLQUFLO0FBQ0wsSUFBSSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM3QyxJQUFJLE9BQU8sQ0FBQyxTQUFTLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQztBQUN2QyxJQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxHQUFHO0FBQ25CLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQSxVQUFVLENBQUMsUUFBUSxHQUFHO0FBQ3RCLEVBQUUsR0FBRyxhQUFhLENBQUMsUUFBUTtBQUMzQixFQUFFLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLFNBQVM7QUFDcEYsQ0FBQyxDQUFDO0FBQ0YsS0FBSyxDQUFDLFVBQVUsR0FBRyxVQUFVOztBQy9GN0I7QUFDQSxNQUFNLGNBQWMsU0FBUyxNQUFNLENBQUM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGFBQWEsQ0FBQyxJQUFJLEVBQUU7QUFDdEIsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlCLEdBQUc7QUFDSCxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQ2xCLE1BQU0sR0FBRyxJQUFJO0FBQ2IsTUFBTSxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7QUFDekIsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsQ0FBQztBQUNELEtBQUssQ0FBQyxjQUFjLEdBQUcsY0FBYzs7QUN0QnJDLElBQUksYUFBYSxDQUFDO0FBQ2xCO0FBQ0EsTUFBTSxZQUFZLFNBQVMsTUFBTSxDQUFDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQ3BCLElBQUksS0FBSyxDQUFDO0FBQ1YsTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRO0FBQzlCLE1BQU0sR0FBRyxJQUFJO0FBQ2IsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3RCLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixHQUFHO0FBQ0gsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2hCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUMxQixHQUFHO0FBQ0gsRUFBRSxjQUFjLEdBQUc7QUFDbkIsSUFBSSxNQUFNLEtBQUssR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDL0QsSUFBSSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxHQUFHLEVBQUUsSUFBSSxHQUFHLENBQUM7QUFDekcsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDdkQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckcsSUFBSSxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzVGLEdBQUc7QUFDSCxFQUFFLDBCQUEwQixDQUFDLEtBQUssRUFBRTtBQUNwQyxJQUFJLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0QsR0FBRztBQUNILEVBQUUsMEJBQTBCLENBQUMsS0FBSyxFQUFFO0FBQ3BDO0FBQ0EsSUFBSSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2xGLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRTtBQUMzQixJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNqQixLQUFLO0FBQ0wsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNILElBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDM0MsSUFBSSxJQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDakgsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLEdBQUc7QUFDSCxFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxrQkFBa0IsRUFBRTtBQUMzQyxJQUFJLElBQUksa0JBQWtCLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDdkMsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUM7QUFDakMsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLElBQUksS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRTtBQUN2QyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRTtBQUNyRSxRQUFRLEVBQUUsS0FBSyxDQUFDO0FBQ2hCLFFBQVEsSUFBSSxrQkFBa0IsRUFBRSxFQUFFLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztBQUNyRSxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsR0FBRztBQUNILEVBQUUseUJBQXlCLENBQUMsS0FBSyxFQUFFO0FBQ25DLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMxQixLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RGLEdBQUc7QUFDSCxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUN0QyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN2QyxLQUFLO0FBQ0wsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZFLElBQUksT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdEYsR0FBRztBQUNILEVBQUUsY0FBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUU7QUFDNUIsSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakIsS0FBSztBQUNMLElBQUksTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDbkgsSUFBSSxNQUFNLDZCQUE2QixHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzlGLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlELElBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO0FBQ3RCLElBQUksTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUM1QixJQUFJLElBQUksUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9CLElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLElBQUksSUFBSSxRQUFRLEVBQUU7QUFDbEIsTUFBTSxJQUFJLFFBQVEsQ0FBQztBQUNuQixNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQzFGLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDMUYsTUFBTSxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7QUFDNUIsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDMUIsVUFBVSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyRyxVQUFVLElBQUksS0FBSyxJQUFJLEdBQUcsUUFBUSxLQUFLLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkUsU0FBUyxNQUFNO0FBQ2YsVUFBVSxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFNBQVM7QUFDVCxPQUFPO0FBQ1AsTUFBTSxRQUFRLEtBQUssUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlFLEtBQUs7QUFDTCxJQUFJLElBQUksYUFBYSxDQUFDO0FBQ3RCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNuQixNQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQzdCLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDMUMsS0FBSyxNQUFNO0FBQ1gsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUM7QUFDeEMsUUFBUSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUNwRCxRQUFRLFdBQVcsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDbkMsUUFBUSxJQUFJO0FBQ1osT0FBTyxDQUFDLENBQUM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0QsSUFBSSxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDL0csSUFBSSxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN0RixJQUFJLGFBQWEsQ0FBQyxTQUFTLElBQUksQ0FBQyx5QkFBeUIsR0FBRyw2QkFBNkIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDO0FBQzVILElBQUksT0FBTyxhQUFhLENBQUM7QUFDekIsR0FBRztBQUNILEVBQUUsb0JBQW9CLENBQUMsR0FBRyxFQUFFO0FBQzVCLElBQUksSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDakMsTUFBTSxNQUFNLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDbEUsTUFBTSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbkYsTUFBTSxJQUFJLFlBQVksSUFBSSxHQUFHLEVBQUUsT0FBTyxZQUFZLENBQUM7QUFDbkQsS0FBSztBQUNMLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNkLEdBQUc7QUFDSCxFQUFFLDBCQUEwQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDdkMsSUFBSSxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRSxJQUFJLElBQUksc0JBQXNCLElBQUksQ0FBQyxFQUFFLElBQUksR0FBRyxzQkFBc0IsQ0FBQztBQUNuRSxJQUFJLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELElBQUksSUFBSSxvQkFBb0IsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLG9CQUFvQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7QUFDOUYsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3RCLEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ3pCLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkUsSUFBSSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEQsSUFBSSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRCxJQUFJLE1BQU0sNkJBQTZCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2RixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUNuSCxJQUFJLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3JGLElBQUksT0FBTyxJQUFJLGFBQWEsQ0FBQztBQUM3QixNQUFNLFNBQVMsRUFBRSxDQUFDLHlCQUF5QixHQUFHLDZCQUE2QixJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNO0FBQzdHLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRztBQUNILEVBQUUsZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUU7QUFDeEMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLE9BQU8sU0FBUyxDQUFDO0FBQ25ELElBQUksUUFBUSxTQUFTO0FBQ3JCLE1BQU0sS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxTQUFTLENBQUMsVUFBVTtBQUMvQixRQUFRO0FBQ1IsVUFBVSxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUUsVUFBVSxJQUFJLGtCQUFrQixJQUFJLENBQUMsRUFBRTtBQUN2QyxZQUFZLE1BQU0scUJBQXFCLEdBQUcsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztBQUM5RixZQUFZLElBQUksU0FBUyxHQUFHLHFCQUFxQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLHFCQUFxQixJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUMsVUFBVSxFQUFFO0FBQ3ZJLGNBQWMsT0FBTyxrQkFBa0IsQ0FBQztBQUN4QyxhQUFhO0FBQ2IsV0FBVztBQUNYLFVBQVUsTUFBTTtBQUNoQixTQUFTO0FBQ1QsTUFBTSxLQUFLLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDM0IsTUFBTSxLQUFLLFNBQVMsQ0FBQyxXQUFXO0FBQ2hDLFFBQVE7QUFDUixVQUFVLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzNFLFVBQVUsSUFBSSxtQkFBbUIsSUFBSSxDQUFDLEVBQUU7QUFDeEMsWUFBWSxPQUFPLG1CQUFtQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7QUFDeEUsV0FBVztBQUNYLFNBQVM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxPQUFPLFNBQVMsQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxRQUFRLEdBQUc7QUFDYixJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNwQixNQUFNLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDakMsTUFBTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDNUI7QUFDQTtBQUNBLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEYsTUFBTSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ2pDLE1BQU0sSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzNFLE1BQU0sSUFBSSxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyRyxNQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQzlCLEtBQUs7QUFDTCxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxlQUFlLENBQUMsS0FBSyxFQUFFO0FBQ3pCLElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0U7QUFDQTtBQUNBLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzVGO0FBQ0EsSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ3pFLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUMxQixNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3QyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbkUsR0FBRztBQUNILEVBQUUsbUJBQW1CLENBQUMsS0FBSyxFQUFFO0FBQzdCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEtBQUssQ0FBQztBQUM3QixJQUFJLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRCxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEMsR0FBRztBQUNILEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3RDLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsa0JBQWtCLEtBQUssRUFBRSxLQUFLLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxLQUFLLFlBQVksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzSyxJQUFJLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBQ3hFLEdBQUc7QUFDSCxFQUFFLElBQUksYUFBYSxHQUFHO0FBQ3RCLElBQUksT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDOUgsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLENBQUMsYUFBYSxFQUFFO0FBQ25DLElBQUksS0FBSyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDeEMsR0FBRztBQUNILEVBQUUsSUFBSSxVQUFVLEdBQUc7QUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoRCxHQUFHO0FBQ0gsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUU7QUFDcEIsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvRixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxNQUFNLEdBQUc7QUFDZixJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzQixHQUFHO0FBQ0gsRUFBRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDckIsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUM3QixHQUFHO0FBQ0gsRUFBRSxJQUFJLGFBQWEsR0FBRztBQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDaEYsR0FBRztBQUNILEVBQUUsSUFBSSxhQUFhLEdBQUc7QUFDdEIsSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2hGLEdBQUc7QUFDSCxFQUFFLGdCQUFnQixDQUFDLEtBQUssRUFBRTtBQUMxQjtBQUNBO0FBQ0EsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEtBQUssS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQztBQUN0TCxHQUFHO0FBQ0gsQ0FBQztBQUNELGFBQWEsR0FBRyxZQUFZLENBQUM7QUFDN0IsWUFBWSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUM7QUFDbEMsWUFBWSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4RCxZQUFZLENBQUMsUUFBUSxHQUFHO0FBQ3hCLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUTtBQUNwQixFQUFFLElBQUksRUFBRSxNQUFNO0FBQ2QsRUFBRSxLQUFLLEVBQUUsR0FBRztBQUNaLEVBQUUsa0JBQWtCLEVBQUUsRUFBRTtBQUN4QixFQUFFLFVBQVUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUM7QUFDNUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLGdCQUFnQjtBQUM5QixFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsZ0JBQWdCO0FBQzlCLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDVixFQUFFLGNBQWMsRUFBRSxJQUFJO0FBQ3RCLEVBQUUsa0JBQWtCLEVBQUUsS0FBSztBQUMzQixFQUFFLEtBQUssRUFBRSxNQUFNO0FBQ2YsRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFO0FBQ3pDLElBQUksV0FBVyxFQUFFLEtBQUs7QUFDdEIsSUFBSSxxQkFBcUIsRUFBRSxFQUFFO0FBQzdCLEdBQUcsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLEtBQUssQ0FBQyxZQUFZLEdBQUcsWUFBWTs7QUNuVGpDO0FBQ0EsTUFBTSxTQUFTLEdBQUc7QUFDbEIsRUFBRSxNQUFNLEVBQUUsT0FBTztBQUNqQixFQUFFLFFBQVEsRUFBRSxlQUFlO0FBQzNCLEVBQUUsS0FBSyxFQUFFLFlBQVk7QUFDckIsQ0FBQyxDQUFDO0FBQ0Y7QUFDQSxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNuQyxFQUFFLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3ZCLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDNUIsR0FBRztBQUNILEVBQUUsSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDckIsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUMxQixHQUFHO0FBQ0gsRUFBRSxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakMsRUFBRSxPQUFPLEtBQUssSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSTtBQUMxQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDcEIsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqQixHQUFHLENBQUMsQ0FBQztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0EsU0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQ3JDLEVBQUUsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBQ0QsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDNUIsS0FBSyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDOUIsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJOztBQ2xCakI7QUFDQSxNQUFNLFdBQVcsU0FBUyxhQUFhLENBQUM7QUFDeEMsRUFBRSxJQUFJLFVBQVUsR0FBRztBQUNuQixJQUFJLElBQUksSUFBSSxDQUFDO0FBQ2IsSUFBSSxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sS0FBSyxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7QUFDaEksR0FBRztBQUNILEVBQUUsSUFBSSxRQUFRLEdBQUc7QUFDakIsSUFBSSxJQUFJLEtBQUssQ0FBQztBQUNkLElBQUksT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUM7QUFDMUcsR0FBRztBQUNILEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRTtBQUNwQixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixHQUFHO0FBQ0gsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3RCLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixHQUFHO0FBQ0gsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2hCLElBQUksSUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQztBQUNwQyxJQUFJLE1BQU07QUFDVixNQUFNLE1BQU07QUFDWixNQUFNLEdBQUcsU0FBUztBQUNsQixLQUFLLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLElBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLElBQUksTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM5QyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxJQUFJLElBQUksR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUM7QUFDdEk7QUFDQSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDbEIsTUFBTSxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxLQUFLLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzlKLE1BQU0sTUFBTSxFQUFFO0FBQ2QsUUFBUSxDQUFDLEVBQUUsS0FBSztBQUNoQixPQUFPO0FBQ1AsTUFBTSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7QUFDeEIsTUFBTSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7QUFDaEMsTUFBTSxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7QUFDcEMsTUFBTSxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7QUFDdEIsTUFBTSxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7QUFDNUMsTUFBTSxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7QUFDcEMsS0FBSyxDQUFDLENBQUM7QUFDUCxHQUFHO0FBQ0gsRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFO0FBQ3JCLElBQUksSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFELElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzNFLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3JELE1BQU0sSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUM7QUFDdkIsTUFBTSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkQsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFO0FBQzVCLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDMUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDeEMsSUFBSSxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLG9CQUFvQixDQUFDLEtBQUssS0FBSyxJQUFJLEdBQUcscUJBQXFCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVM7QUFDelA7QUFDQTtBQUNBLElBQUksS0FBSyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEdBQUcsZ0JBQWdCLEdBQUcsU0FBUyxHQUFHLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7QUFDeEksTUFBTSxJQUFJLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixDQUFDO0FBQy9GLE1BQU0sTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUU7QUFDakQsUUFBUSxHQUFHLEtBQUs7QUFDaEIsUUFBUSxnQkFBZ0IsRUFBRSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLHFCQUFxQixDQUFDLEVBQUUsQ0FBQztBQUMxTCxPQUFPLENBQUMsQ0FBQztBQUNULE1BQU0sSUFBSSxZQUFZLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRTtBQUMxQztBQUNBLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMzQixRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkMsUUFBUSxNQUFNO0FBQ2QsT0FBTztBQUNQLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN0QyxNQUFNLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLEdBQUc7QUFDSCxFQUFFLGNBQWMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ2pDLElBQUksSUFBSSxxQkFBcUIsRUFBRSxxQkFBcUIsQ0FBQztBQUNyRCxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLO0FBQ0wsSUFBSSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkssSUFBSSxJQUFJLGNBQWMsQ0FBQztBQUN2QixJQUFJLElBQUksS0FBSyxJQUFJLElBQUksRUFBRSxjQUFjLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7QUFDNUksSUFBSSxJQUFJLGNBQWMsSUFBSSxJQUFJLEVBQUUsY0FBYyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUN6RSxJQUFJLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztBQUN4QixJQUFJLEtBQUssSUFBSSxVQUFVLEdBQUcsY0FBYyxFQUFFLGVBQWUsSUFBSSxVQUFVLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxXQUFXLEVBQUU7QUFDdEcsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsYUFBYSxFQUFFLE1BQU07QUFDeEQsS0FBSztBQUNMLElBQUksSUFBSSxXQUFXLEVBQUU7QUFDckIsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsV0FBVyxHQUFHLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUN6RSxNQUFNLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDL0MsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLEtBQUssR0FBRztBQUNWLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xCLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzFCLEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ3pCLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEMsSUFBSSxPQUFPLGFBQWEsQ0FBQztBQUN6QixHQUFHO0FBQ0gsRUFBRSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ3RDLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRSxPQUFPLFFBQVEsQ0FBQztBQUNyRSxJQUFJLE9BQU8sS0FBSyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNyRCxHQUFHO0FBQ0gsRUFBRSxJQUFJLEtBQUssR0FBRztBQUNkLElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQ3ZCLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQy9DLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RCxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLEdBQUc7QUFDSCxDQUFDO0FBQ0QsS0FBSyxDQUFDLFdBQVcsR0FBRyxXQUFXOztBQzFHL0IsSUFBSTtBQUNKLEVBQUUsVUFBVSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDM0IsQ0FBQyxDQUFDLE1BQU07O0FDM0JSbkQsS0FBSyxDQUFDLFlBQVk7QUFDaEIsRUFBQSxNQUFNNEcsTUFBTSxHQUFHMUcsUUFBUSxDQUFDa0csZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDbEQsRUFBQSxJQUFJUSxNQUFNLENBQUM1RCxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQ3ZCLElBQUEsS0FBSyxJQUFJNkQsS0FBSyxJQUFJRCxNQUFNLEVBQUU7QUFDeEIsTUFBQSxJQUFJQyxLQUFLLENBQUN6RixLQUFLLENBQUM0QixNQUFNLEtBQUssQ0FBQyxFQUFFNkQsS0FBSyxDQUFDNUQsU0FBUyxDQUFDQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUNyRTJELE1BQUFBLEtBQUssQ0FBQ3hHLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZO1FBQzFDLElBQUksQ0FBQ2UsS0FBSyxDQUFDNEIsTUFBTSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFDRCxTQUFTLENBQUNFLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0FBQzlHLE9BQUMsQ0FBQyxDQUFBO0FBQ0osS0FBQTtBQUNGLEdBQUE7QUFFQSxFQUFBLE1BQU0yRCxXQUFXLEdBQUc1RyxRQUFRLENBQUNrRyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0FBQ25FLEVBQUEsSUFBSVUsV0FBVyxFQUFFO0FBQ2ZBLElBQUFBLFdBQVcsQ0FBQ0MsT0FBTyxDQUFFQyxLQUFLLElBQUs7TUFDN0JDLEtBQUssQ0FBQ0QsS0FBSyxFQUFFO0FBQ1hFLFFBQUFBLElBQUksRUFBRSxJQUFJO0FBQ1ZDLFFBQUFBLElBQUksRUFBRSxzQkFBc0I7QUFDNUJDLFFBQUFBLE9BQU8sRUFBRSxVQUFVQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTtVQUNuQyxJQUFJRCxRQUFRLEtBQUssR0FBRyxJQUFJQyxNQUFNLENBQUNsRyxLQUFLLEtBQUssRUFBRSxFQUFFO0FBQzNDLFlBQUEsT0FBTyxJQUFJLENBQUE7QUFDYixXQUFBO0FBQ0EsVUFBQSxPQUFPaUcsUUFBUSxDQUFBO0FBQ2pCLFNBQUE7QUFDRixPQUFDLENBQUMsQ0FBQTtBQUNKLEtBQUMsQ0FBQyxDQUFBO0FBQ0osR0FBQTtBQUVBLEVBQUEsTUFBTUUsWUFBWSxHQUFHckgsUUFBUSxDQUFDa0csZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtBQUNwRSxFQUFBLElBQUltQixZQUFZLEVBQUU7QUFDaEJBLElBQUFBLFlBQVksQ0FBQ1IsT0FBTyxDQUFFQyxLQUFLLElBQUs7TUFDOUJDLEtBQUssQ0FBQ0QsS0FBSyxFQUFFO0FBQ1hHLFFBQUFBLElBQUksRUFBRUssTUFBTTtBQUNaQyxRQUFBQSxHQUFHLEVBQUUsQ0FBQTtBQUNQLE9BQUMsQ0FBQyxDQUFBO0FBQ0osS0FBQyxDQUFDLENBQUE7QUFDSixHQUFBO0FBRUEsRUFBQSxNQUFNQyxjQUFjLEdBQUd4SCxRQUFRLENBQUNrRyxnQkFBZ0IsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0FBQy9FLEVBQUEsSUFBSXNCLGNBQWMsRUFBRTtBQUNsQkEsSUFBQUEsY0FBYyxDQUFDWCxPQUFPLENBQUVDLEtBQUssSUFBSztNQUNoQ0MsS0FBSyxDQUFDRCxLQUFLLEVBQUU7QUFDWEUsUUFBQUEsSUFBSSxFQUFFLElBQUk7QUFDVkMsUUFBQUEsSUFBSSxFQUFFLGFBQUE7QUFDUixPQUFDLENBQUMsQ0FBQTtBQUNKLEtBQUMsQ0FBQyxDQUFBO0FBQ0osR0FBQTtBQUVBLEVBQUEsTUFBTVEsV0FBVyxHQUFHekgsUUFBUSxDQUFDa0csZ0JBQWdCLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtBQUN6RSxFQUFBLElBQUl1QixXQUFXLEVBQUU7QUFDZkEsSUFBQUEsV0FBVyxDQUFDWixPQUFPLENBQUVDLEtBQUssSUFBSztNQUM3QkMsS0FBSyxDQUFDRCxLQUFLLEVBQUU7QUFDWEUsUUFBQUEsSUFBSSxFQUFFLElBQUk7QUFDVkMsUUFBQUEsSUFBSSxFQUFFLFlBQUE7QUFDUixPQUFDLENBQUMsQ0FBQTtBQUNKLEtBQUMsQ0FBQyxDQUFBO0FBQ0osR0FBQTtBQUNGLENBQUMsQ0FBQzs7Ozs7QUMzREYsQ0FBQSxDQUFDLFVBQVUsTUFBTSxFQUFFLE9BQU8sRUFBRTtLQUN1QyxNQUFpQixDQUFBLE9BQUEsR0FBQSxPQUFPLEVBQUUsQ0FFZ0IsQ0FBQztBQUM5RyxFQUFDLEVBQUVTLGNBQUksR0FBRyxZQUFZLENBQ3RCO0tBQ0ksTUFBTSxVQUFVLENBQUM7U0FDYixXQUFXLENBQUMsT0FBTyxFQUFFO2FBQ2pCLElBQUksQ0FBQyxPQUFPLEVBQUU7aUJBQ1YsT0FBTyxHQUFHLEVBQUUsQ0FBQztjQUNoQjthQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUM7YUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxJQUFJLGdCQUFnQixDQUFDO2FBQzNELElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUM7YUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQzthQUM1QyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDO2FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxVQUFVLENBQUM7YUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLGVBQWUsQ0FBQzthQUN0RCxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLElBQUksaUJBQWlCLENBQUM7YUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQzthQUNuRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksYUFBYSxDQUFDO2FBQ2xELElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksSUFBSSw2QkFBNkIsQ0FBQzthQUMxRSxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDO2FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsSUFBSSxzQkFBc0IsQ0FBQzthQUMvRCxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksc0JBQXNCLENBQUM7YUFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLFlBQVksQ0FBQzthQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksZUFBZSxDQUFDO2FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsSUFBSSxlQUFlLENBQUM7YUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQzthQUM1QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixJQUFJLHFCQUFxQixDQUFDO2FBQzVFLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsSUFBSSxjQUFjLENBQUM7YUFDckQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLFlBQVksQ0FBQzthQUMvQyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLElBQUksNkJBQTZCLENBQUM7YUFDeEUsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQzthQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksYUFBYSxDQUFDO2FBQ2xELElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsSUFBSSxtQkFBbUIsQ0FBQzthQUNsRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixJQUFJLHdCQUF3QixDQUFDO2FBQy9FLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsSUFBSSxxQkFBcUIsQ0FBQzthQUN4RSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixJQUFJLGNBQWMsQ0FBQzthQUNyRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixJQUFJLG9DQUFvQyxDQUFDO2FBQ2pHLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxPQUFPLENBQUMsc0JBQXNCLElBQUksc0JBQXNCLENBQUM7YUFDdkYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxhQUFhLENBQUM7YUFDbEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQzthQUM1QyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLElBQUksNkJBQTZCLENBQUM7YUFDMUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxJQUFJLGdCQUFnQixDQUFDO2FBQzNELElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUM7YUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQzthQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksYUFBYSxDQUFDO2FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxVQUFVLENBQUM7YUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLGFBQWEsQ0FBQzthQUNsRCxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDO1VBQ3pDO01BQ0o7QUFDTDtLQUNJLFNBQVMsVUFBVSxHQUFHO0FBQzFCLFNBQVEsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7TUFDdEQ7QUFDTCxLQUFJLFNBQVMsY0FBYyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDaEQsU0FBUSxTQUFTLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ2hDLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7aUJBQ2xELE9BQU8sQ0FBQyxDQUFDO2NBQ1o7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxTQUFTLEVBQUU7aUJBQ25FLE9BQU8sQ0FBQyxDQUFDO2NBQ1o7YUFDRCxPQUFPLElBQUksQ0FBQztVQUNmO0FBQ1QsU0FBUSxTQUFTLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3JDLGFBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssUUFBUSxFQUFFO2lCQUN0QixPQUFPLElBQUksQ0FBQztjQUNmO0FBQ2Isa0JBQWlCLElBQUksUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtpQkFDckIsT0FBTyxDQUFDLENBQUM7Y0FDWjtrQkFDSTtpQkFDRCxPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO2NBQ3pDO1VBQ0o7QUFDVCxTQUFRLE9BQU8sUUFBUSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO01BQzVFO0FBQ0wsS0FBSSxTQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxTQUFTLEdBQUcsS0FBSyxFQUFFO1NBQ2xELElBQUksT0FBTyxDQUFDO0FBQ3BCLFNBQVEsT0FBTyxVQUFVLEdBQUcsSUFBSSxFQUFFO0FBQ2xDLGFBQVksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ3JCLE1BQU0sS0FBSyxHQUFHLE1BQU07aUJBQ2hCLE9BQU8sR0FBRyxJQUFJLENBQUM7aUJBQ2YsSUFBSSxDQUFDLFNBQVMsRUFBRTtxQkFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztrQkFDN0I7QUFDakIsY0FBYSxDQUFDO0FBQ2QsYUFBWSxNQUFNLE9BQU8sR0FBRyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDbEQsYUFBWSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDdEIsT0FBTyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDbEMsSUFBSSxPQUFPLEVBQUU7aUJBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7Y0FDN0I7QUFDYixVQUFTLENBQUM7TUFDTDtBQUNMLEtBQUksU0FBUyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUMzQixTQUFRLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ2xEO0FBQ0wsS0FBSSxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDNUIsU0FBUSxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGtDQUFrQyxFQUFFLENBQUMsS0FBSyxLQUFLLEdBQUcsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUNyRyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7TUFDekU7QUFDTDtLQUNJLE1BQU0sUUFBUSxDQUFDO1NBQ1gsV0FBVyxDQUFDLFFBQVEsRUFBRTthQUNsQixJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxVQUFVLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO2FBQzFFLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDOUMsYUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEtBQUssU0FBUyxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO2FBQy9FLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsSUFBSSxZQUFZLENBQUM7YUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQztBQUN2RCxhQUFZLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQzlCLGFBQVksSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO0FBQ2xDLGlCQUFnQixLQUFLLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7QUFDbEQscUJBQW9CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7a0JBQ3BDO2NBQ0o7VUFDSjtNQUNKO0tBQ0QsTUFBTSxNQUFNLENBQUM7U0FDVCxXQUFXLENBQUMsTUFBTSxFQUFFO2FBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDaEYsYUFBWSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNyRSxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO2FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7QUFDMUMsYUFBWSxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ3BGLGFBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUNoRixhQUFZLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDcEYsYUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3ZGLGFBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQzthQUNqRixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO2FBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7YUFDaEMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztVQUNqQztNQUNKO0tBQ0QsTUFBTSxLQUFLLENBQUM7QUFDaEIsU0FBUSxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNoQyxhQUFZLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO0FBQ3ZDLGFBQVksSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7QUFDM0IsYUFBWSxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztBQUNwQyxhQUFZLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ25DLGFBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztVQUN0QjtTQUNELGlCQUFpQixDQUFDLElBQUksRUFBRTthQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN0QyxpQkFBZ0IsT0FBTyxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2NBQzdDO0FBQ2IsYUFBWSxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtpQkFDdEIsSUFBSSxPQUFPLFlBQVksUUFBUSxJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUU7QUFDdkUscUJBQW9CLElBQUksRUFBRSxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUU7QUFDL0MseUJBQXdCLE9BQU8sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztzQkFDbEQ7cUJBQ0QsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7QUFDakUseUJBQXdCLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTs2QkFDaEMsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQzs2QkFDcEQsSUFBSSxlQUFlLEVBQUU7aUNBQ2pCLE9BQU8sZUFBZSxDQUFDOzhCQUMxQjswQkFDSjtzQkFDSjtrQkFDSjtzQkFDSSxJQUFJLE9BQU8sWUFBWSxNQUFNLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtxQkFDckQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDckQsSUFBSSxlQUFlLEVBQUU7eUJBQ2pCLE9BQU8sZUFBZSxDQUFDO3NCQUMxQjtrQkFDSjtzQkFDSTtBQUNyQixxQkFBb0IsT0FBTyxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO2tCQUN0RTtjQUNKO2FBQ0QsT0FBTyxJQUFJLENBQUM7VUFDZjtTQUNELGNBQWMsQ0FBQyxNQUFNLEVBQUU7QUFDL0IsYUFBWSxJQUFJLEVBQUUsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFFO0FBQ3JDLGlCQUFnQixPQUFPLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7Y0FDL0M7YUFDRCxPQUFPLElBQUksQ0FBQztVQUNmO1NBQ0QsaUJBQWlCLENBQUMsSUFBSSxFQUFFO0FBQ2hDLGFBQVksSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQy9CLGFBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSztpQkFDdEIsSUFBSSxPQUFPLFlBQVksUUFBUSxJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUU7QUFDdkUscUJBQW9CLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztxQkFDcEIsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7eUJBQ3pDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLOzZCQUNoQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaEUsMEJBQXlCLENBQUMsQ0FBQztzQkFDTjtBQUNyQixxQkFBb0IsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTt5QkFDdkIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO3NCQUN6QztrQkFDSjtpQkFDRCxJQUFJLE9BQU8sWUFBWSxNQUFNLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtxQkFDaEQsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2tCQUN2QztBQUNqQixjQUFhLENBQUMsQ0FBQzthQUNILE9BQU8sU0FBUyxDQUFDO1VBQ3BCO1NBQ0QsT0FBTyxDQUFDLElBQUksRUFBRTthQUNWLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3JELGFBQVksSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRTtpQkFDOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7Y0FDaEQ7VUFDSjtBQUNULFNBQVEsT0FBTyxHQUFHO2FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztVQUNsQztBQUNULFNBQVEsY0FBYyxHQUFHO2FBQ2IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztVQUNuQztBQUNULFNBQVEsU0FBUyxDQUFDLE1BQU0sRUFBRSxVQUFVLEdBQUcsS0FBSyxFQUFFO2FBQ2xDLElBQUksVUFBVSxFQUFFO2lCQUNaLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNoRCxpQkFBZ0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7Y0FDN0M7a0JBQ0k7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Y0FDM0Q7VUFDSjtBQUNULFNBQVEsYUFBYSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUU7QUFDcEQsYUFBWSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDbkMsYUFBWSxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDcEMsYUFBWSxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFDdkMsYUFBWSxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDM0MsaUJBQWdCLElBQUksT0FBTyxZQUFZLFFBQVEsRUFBRTtBQUNqRCxxQkFBb0IsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO3lCQUNoQyxJQUFJLENBQUMsV0FBVyxFQUFFOzZCQUNkLFdBQVcsR0FBRyxNQUFNLENBQUM7MEJBQ3hCO0FBQ3pCLHlCQUF3QixNQUFNLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxLQUFLLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUM5Ryx5QkFBd0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO0FBQzdDLDZCQUE0QixlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELDZCQUE0QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUSxFQUFFO2lDQUM5QixXQUFXLEdBQUcsSUFBSSxDQUFDOzhCQUN0QjswQkFDSjtzQkFDSjtrQkFDSjtBQUNqQixpQkFBZ0IsSUFBSSxPQUFPLFlBQVksTUFBTSxFQUFFO3FCQUMzQixJQUFJLENBQUMsV0FBVyxFQUFFO3lCQUNkLFdBQVcsR0FBRyxPQUFPLENBQUM7c0JBQ3pCO0FBQ3JCLHFCQUFvQixPQUFPLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxLQUFLLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUM1RyxxQkFBb0IsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO0FBQzFDLHlCQUF3QixlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RELHlCQUF3QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUSxFQUFFOzZCQUM5QixXQUFXLEdBQUcsSUFBSSxDQUFDOzBCQUN0QjtzQkFDSjtrQkFDSjtjQUNKO2FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDN0UsaUJBQWdCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQzVDLGlCQUFnQixlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2NBQ3JDO2FBQ0QsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssS0FBSztpQkFDOUMsSUFBSSxFQUFFLENBQUM7QUFDdkIsaUJBQWdCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ2xKLGNBQWEsQ0FBQyxDQUFDO0FBQ2YsYUFBWSxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQztVQUNwQztBQUNULFNBQVEsV0FBVyxHQUFHO0FBQ3RCLGFBQVksT0FBTyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1VBQy9EO0FBQ1QsU0FBUSxpQkFBaUIsR0FBRztBQUM1QixhQUFZLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztVQUNsRTtBQUNULFNBQVEsa0JBQWtCLEdBQUc7QUFDN0IsYUFBWSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUs7QUFDeEMsaUJBQWdCLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQztjQUN2QixFQUFFLEtBQUssQ0FBQyxDQUFDO1VBQ2I7U0FDRCxlQUFlLENBQUMsRUFBRSxFQUFFO0FBQzVCLGFBQVksS0FBSyxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2lCQUMzQixJQUFJLE9BQU8sWUFBWSxRQUFRLElBQUksT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7cUJBQ2xELE9BQU8sT0FBTyxDQUFDO2tCQUNsQjtjQUNKO2FBQ0QsT0FBTyxJQUFJLENBQUM7VUFDZjtTQUNELGFBQWEsQ0FBQyxFQUFFLEVBQUU7YUFDZCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLO0FBQy9DLGlCQUFnQixPQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO2NBQ3hCLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDVixPQUFPLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztVQUM3QztBQUNULFNBQVEsYUFBYSxHQUFHO0FBQ3hCLGFBQVksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1VBQzFCO0FBQ1QsU0FBUSxjQUFjLEdBQUc7QUFDekIsYUFBWSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDOUIsYUFBWSxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDM0MsaUJBQWdCLElBQUksT0FBTyxZQUFZLFFBQVEsRUFBRTtxQkFDN0IsTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7a0JBQy9CO0FBQ2pCLHNCQUFxQixJQUFJLE9BQU8sWUFBWSxNQUFNLEVBQUU7cUJBQ2hDLE1BQU0sR0FBRyxPQUFPLENBQUM7a0JBQ3BCO2lCQUNELElBQUksTUFBTSxFQUFFO0FBQzVCLHFCQUFvQixNQUFNO2tCQUNUO2NBQ0o7YUFDRCxPQUFPLE1BQU0sQ0FBQztVQUNqQjtBQUNULFNBQVEsTUFBTSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUU7QUFDckMsYUFBWSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25DLGFBQVksSUFBSSxNQUFNLEtBQUssRUFBRSxFQUFFO0FBQy9CLGlCQUFnQixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztjQUN6QjtBQUNiLGFBQVksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLO0FBQ3hDLGlCQUFnQixPQUFPLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7Y0FDcEMsRUFBRSxJQUFJLENBQUMsQ0FBQztVQUNaO0FBQ1QsU0FBUSxNQUFNLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRTtBQUN4QyxhQUFZLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQzthQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSztBQUMzQyxpQkFBZ0IsSUFBSSxPQUFPLFlBQVksUUFBUSxFQUFFO0FBQ2pELHFCQUFvQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7cUJBQ3BCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLO3lCQUNoQyxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTs2QkFDM0IsSUFBSSxDQUFDLGVBQWUsRUFBRTtpQ0FDbEIsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzhCQUN2QztrQ0FDSTtpQ0FDRCxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7OEJBQ3ZDOzBCQUNKO0FBQ3pCLHNCQUFxQixDQUFDLENBQUM7QUFDdkIscUJBQW9CLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7eUJBQ3ZCLElBQUksUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdELHlCQUF3QixRQUFRLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUN0RCx5QkFBd0IsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztzQkFDN0I7a0JBQ0o7QUFDakIsaUJBQWdCLElBQUksT0FBTyxZQUFZLE1BQU0sRUFBRTtxQkFDM0IsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7eUJBQzVCLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztzQkFDeEM7a0JBQ0o7QUFDakIsY0FBYSxDQUFDLENBQUM7YUFDSCxPQUFPLFVBQVUsQ0FBQztVQUNyQjtTQUNELG9CQUFvQixDQUFDLE9BQU8sRUFBRTtBQUN0QyxhQUFZLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQzthQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSztBQUMvQyxpQkFBZ0IsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2lCQUNwRCxJQUFJLE1BQU0sRUFBRTtBQUM1QixxQkFBb0IsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztrQkFDekI7QUFDakIsY0FBYSxDQUFDLENBQUM7QUFDZixhQUFZLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUs7QUFDeEMsaUJBQWdCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQztBQUNqQyxpQkFBZ0IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsS0FBSztxQkFDakMsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLGNBQWMsQ0FBQyxFQUFFLEVBQUU7eUJBQ2pDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDcEMseUJBQXdCLE9BQU87c0JBQ1Y7QUFDckIsa0JBQWlCLENBQUMsQ0FBQztpQkFDSCxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQzNCLHFCQUFvQixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2tCQUN6QjtBQUNqQixjQUFhLENBQUMsQ0FBQzthQUNILE9BQU8sUUFBUSxDQUFDO1VBQ25CO01BQ0o7QUFDTDtLQUNJLE1BQU0sTUFBTSxDQUFDO1NBQ1QsV0FBVyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtBQUN6RCxhQUFZLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQy9CLGFBQVksSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDckMsYUFBWSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUNuQyxhQUFZLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO2FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzdDLGFBQVksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDckMsYUFBWSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUN4QyxhQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUU7QUFDL0MsaUJBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2NBQ2hFO1VBQ0o7QUFDVCxTQUFRLE1BQU0sR0FBRztBQUNqQixhQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztVQUM5QztBQUNULFNBQVEsT0FBTyxHQUFHO0FBQ2xCLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3BELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1VBQzdDO0FBQ1QsU0FBUSxJQUFJLEdBQUc7QUFDZixhQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0UsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxLQUFLLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2hJLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNqRSxhQUFZLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNuQixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDcEUsYUFBWSxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7QUFDeEMsaUJBQWdCLE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNsRixpQkFBZ0IsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUM7aUJBQ3pGLElBQUksY0FBYyxFQUFFO0FBQ3BDLHFCQUFvQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7a0JBQy9EO2NBQ0o7VUFDSjtBQUNULFNBQVEsS0FBSyxHQUFHO0FBQ2hCLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNsRSxhQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2RSxhQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2RSxhQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7VUFDbkU7QUFDVCxTQUFRLGlCQUFpQixHQUFHO2FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7YUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7YUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZELGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVELGFBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3RELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssRUFBRSxFQUFFO0FBQzVDLGlCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQ25FLGlCQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO2NBQ3pEO2FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7aUJBQzVCLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7QUFDckQscUJBQW9CLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtBQUN6Qyx5QkFBd0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMvRCx5QkFBd0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztzQkFDN0M7a0JBQ0o7Y0FDSjthQUNELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEtBQUssVUFBVSxFQUFFO0FBQzlELGlCQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2NBQzFFO1VBQ0o7QUFDVCxTQUFRLG9CQUFvQixHQUFHO2FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7QUFDN0MsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvRSxhQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbEUsYUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1VBQ3JEO0FBQ1QsU0FBUSxPQUFPLEdBQUc7YUFDTixJQUFJLEVBQUUsQ0FBQzthQUNQLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDL0MsYUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JFLGFBQVksSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDOUIsYUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLO2lCQUNwQixRQUFRLENBQUMsQ0FBQyxHQUFHO3FCQUNULEtBQUssU0FBUyxDQUFDO0FBQ25DLHFCQUFvQixLQUFLLFdBQVc7QUFDcEMseUJBQXdCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUMseUJBQXdCLENBQUMsQ0FBQyxHQUFHLEtBQUssV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDdEUsT0FBTyxLQUFLLENBQUM7QUFDckMscUJBQW9CLEtBQUssS0FBSztBQUM5Qix5QkFBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt5QkFDdkIsT0FBTyxJQUFJLENBQUM7cUJBQ2hCLEtBQUssT0FBTyxDQUFDO0FBQ2pDLHFCQUFvQixLQUFLLEdBQUc7QUFDNUIseUJBQXdCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUMseUJBQXdCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzt5QkFDcEYsSUFBSSxXQUFXLEVBQUU7QUFDekMsNkJBQTRCLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQzswQkFDdkI7eUJBQ0QsT0FBTyxLQUFLLENBQUM7QUFDckMscUJBQW9CLEtBQUssUUFBUTtBQUNqQyx5QkFBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt5QkFDdkIsT0FBTyxLQUFLLENBQUM7a0JBQ3BCO2lCQUNELE9BQU8sSUFBSSxDQUFDO0FBQzVCLGNBQWEsQ0FBQztBQUNkLGFBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztBQUNsQyxpQkFBZ0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtBQUM1QyxxQkFBb0IsT0FBTztrQkFDVjtBQUNqQixpQkFBZ0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3RGLGNBQWEsQ0FBQzthQUNGLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekQsYUFBWSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELGFBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN6QixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNELGFBQVksUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM5QyxNQUFNLGVBQWUsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxNQUFNLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDdkcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLGVBQWUsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxFQUFFO0FBQzlILGlCQUFnQixRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2NBQzdDO2tCQUNJO0FBQ2pCLGlCQUFnQixRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2NBQ2hEO0FBQ2IsYUFBWSxRQUFRLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLO0FBQ3RDLGlCQUFnQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDcEMsaUJBQWdCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7QUFDNUMscUJBQW9CLE9BQU87a0JBQ1Y7QUFDakIsaUJBQWdCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztpQkFDeEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQy9ELGlCQUFnQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDakMsaUJBQWdCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUU7QUFDakQscUJBQW9CLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDO2tCQUN0RTtpQkFDRCxJQUFJLFlBQVksRUFBRTtBQUNsQyxxQkFBb0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTt5QkFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzlELHlCQUF3QixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztzQkFDNUI7MEJBQ0k7eUJBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQzt5QkFDaEQsTUFBTSxFQUFFLEdBQUcsV0FBVyxHQUFHLFdBQVcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO3lCQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7c0JBQ3pDO0FBQ3JCLHFCQUFvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFO0FBQ3JELHlCQUF3QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO3NCQUMxQjtBQUNyQixxQkFBb0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRTtBQUNwRCx5QkFBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7c0JBQy9EO2tCQUNKO0FBQ2pCLGNBQWEsQ0FBQzthQUNGLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDbEYsV0FBVyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDbkQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRyxhQUFZLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdEUsYUFBWSxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xELGFBQVksUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUM5QyxhQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDM0IsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN4RixhQUFZLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDeEMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDN0MsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3RixhQUFZLFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakUsYUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO0FBQzFDLGlCQUFnQixLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2NBQzFDO0FBQ2IsYUFBWSxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3pDLGFBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxhQUFZLE9BQU87aUJBQ0gsSUFBSSxFQUFFLElBQUk7aUJBQ1YsTUFBTSxFQUFFLE1BQU07QUFDOUIsaUJBQWdCLFFBQVEsRUFBRTtxQkFDTixJQUFJLEVBQUUsUUFBUTtxQkFDZCxHQUFHLEVBQUUsV0FBVztxQkFDaEIsSUFBSSxFQUFFLFlBQVk7a0JBQ3JCO0FBQ2pCLGlCQUFnQixLQUFLLEVBQUU7cUJBQ0gsSUFBSSxFQUFFLEtBQUs7cUJBQ1gsSUFBSSxFQUFFLFNBQVM7a0JBQ2xCO0FBQ2pCLGNBQWEsQ0FBQztVQUNMO1NBQ0QsU0FBUyxDQUFDLFNBQVMsRUFBRTtBQUM3QixhQUFZLElBQUksU0FBUyxLQUFLLE9BQU8sRUFBRTtBQUN2QyxpQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Y0FDakQ7VUFDSjtBQUNULFNBQVEsV0FBVyxHQUFHO0FBQ3RCLGFBQVksTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3pFLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO0FBQ2hFLGFBQVksSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7aUJBQzFCLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRTtxQkFDbEMsZUFBZSxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztrQkFDL0M7c0JBQ0ksSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO3FCQUN2QyxlQUFlLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2tCQUMvQztjQUNKO2FBQ0QsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5RCxhQUFZLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDaEUsYUFBWSxXQUFXLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQzthQUN4QyxPQUFPLFdBQVcsQ0FBQztVQUN0QjtBQUNULFNBQVEsWUFBWSxHQUFHO0FBQ3ZCLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO0FBQzNDLGlCQUFnQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUN6QyxpQkFBZ0IsT0FBTztjQUNWO0FBQ2IsYUFBWSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUN4QyxhQUFZLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1VBQzVCO0FBQ1QsU0FBUSxpQkFBaUIsR0FBRzthQUNoQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSztpQkFDdEMsT0FBTyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztjQUN2QyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3RCLGFBQVksTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUNoRSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ2pDLGlCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQztjQUM3RDtrQkFDSTtpQkFDRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xFLGlCQUFnQixXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9ELGlCQUFnQixJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUU7QUFDekMscUJBQW9CLFdBQVcsQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQztrQkFDL0M7c0JBQ0k7QUFDckIscUJBQW9CLFdBQVcsQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQztrQkFDL0M7aUJBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUM7Y0FDdEQ7QUFDYixhQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDbEUsaUJBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Y0FDNUQ7a0JBQ0k7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Y0FDL0Q7VUFDSjtBQUNULFNBQVEsb0JBQW9CLEdBQUc7YUFDbkIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO2FBQy9DLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLO2lCQUM3QyxPQUFPLEdBQUcsQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQztjQUN0QyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3RCLGFBQVksSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUM5QyxpQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUM7QUFDMUUsaUJBQWdCLE9BQU87Y0FDVjtrQkFDSTtBQUNqQixpQkFBZ0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUNuRixJQUFJLFdBQVcsRUFBRTtBQUNqQyxxQkFBb0IsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO2tCQUN4QjtjQUNKO2FBQ0QsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFO2lCQUN2RCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xFLGlCQUFnQixXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUM1QyxXQUFXLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7aUJBQ2hILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDO0FBQ25FLGlCQUFnQixPQUFPO2NBQ1Y7a0JBQ0k7QUFDakIsaUJBQWdCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNoRixJQUFJLGdCQUFnQixFQUFFO0FBQ3RDLHFCQUFvQixnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztrQkFDN0I7Y0FDSjtBQUNiLGFBQVksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtpQkFDekIsZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUM7Y0FDdEU7QUFDYixhQUFZLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUNqQyxhQUFZLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFELGlCQUFnQixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzdCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ3hDLElBQUksRUFBRSxFQUFFO3FCQUNKLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUs7QUFDbEUseUJBQXdCLE9BQU8sR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7c0JBQ3hCLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUIscUJBQW9CLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLHlCQUF3QixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3NCQUMxQjtrQkFDSjtjQUNKO0FBQ2IsYUFBWSxLQUFLLE1BQU0sQ0FBQyxJQUFJLFdBQVcsRUFBRTtBQUN6QyxpQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDdkMsVUFBVSxDQUFDLE1BQU07cUJBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7eUJBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztzQkFDbkM7a0JBQ0osRUFBRSxHQUFHLENBQUMsQ0FBQztjQUNYO2FBQ0QsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUN2RCxhQUFZLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzdELGlCQUFnQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDckMsaUJBQWdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzlELHFCQUFvQixJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7eUJBQzlELFNBQVMsR0FBRyxLQUFLLENBQUM7c0JBQ3JCO2tCQUNKO2lCQUNELElBQUksU0FBUyxFQUFFO0FBQy9CLHFCQUFvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO0FBQ2pELHlCQUF3QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3NCQUN4RTswQkFDSTtBQUN6Qix5QkFBd0IsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUN2RCw2QkFBNEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzswQkFDeEU7QUFDekIsOEJBQTZCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTs2QkFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzswQkFDMUY7OEJBQ0k7NkJBQ0QsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzBCQUNqRztzQkFDSjtrQkFDSjtjQUNKO1VBQ0o7U0FDRCxhQUFhLENBQUMsTUFBTSxFQUFFO2FBQ2xCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEQsYUFBWSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7YUFDN0IsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2RCxhQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkQsYUFBWSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDM0MsYUFBWSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BDLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7aUJBQ25CLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEUsaUJBQWdCLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbEUsaUJBQWdCLFNBQVMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUs7QUFDM0MscUJBQW9CLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN2QyxxQkFBb0IsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3hDLHFCQUFvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO0FBQ2hELHlCQUF3QixPQUFPO3NCQUNWO0FBQ3JCLHFCQUFvQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUM7cUJBQ3hCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztxQkFDL0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSztBQUN2RCx5QkFBd0IsT0FBTyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLEVBQUUsQ0FBQztzQkFDM0MsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM3QixxQkFBb0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO0FBQy9GLHlCQUF3QixPQUFPO3NCQUNWO0FBQ3JCLHFCQUFvQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO0FBQ3JELHlCQUF3QixZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQztzQkFDdEU7cUJBQ0QsSUFBSSxZQUFZLEVBQUU7QUFDdEMseUJBQXdCLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM3Qyx5QkFBd0IsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7QUFDL0MsNkJBQTRCLElBQUksQ0FBQyxZQUFZLFFBQVEsRUFBRTtBQUN2RCxpQ0FBZ0MsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO3FDQUN2QixXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztrQ0FDMUI7OEJBQ0o7QUFDN0IsNkJBQTRCLElBQUksQ0FBQyxZQUFZLE1BQU0sRUFBRTtpQ0FDckIsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7OEJBQzFCOzBCQUNKO3lCQUNELElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN2RSx5QkFBd0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRTtBQUN6RCw2QkFBNEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzswQkFDMUI7QUFDekIseUJBQXdCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7NkJBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOzBCQUNyQztBQUN6Qix5QkFBd0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7c0JBQzVCO0FBQ3JCLGtCQUFpQixDQUFDO2lCQUNGLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ2hGLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2lCQUNqRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2xHLGlCQUFnQixVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hFLGlCQUFnQixTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELGlCQUFnQixTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pELGlCQUFnQixLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2NBQ2hDO2FBQ0QsT0FBTyxLQUFLLENBQUM7VUFDaEI7QUFDVCxTQUFRLFVBQVUsR0FBRzthQUNULE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDL0MsYUFBWSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUMsYUFBWSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDeEMsYUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLGFBQVksT0FBTztpQkFDSCxJQUFJLEVBQUUsSUFBSTtpQkFDVixNQUFNLEVBQUUsTUFBTTtpQkFDZCxJQUFJLEVBQUUsSUFBSTtBQUMxQixjQUFhLENBQUM7VUFDTDtBQUNULFNBQVEsV0FBVyxHQUFHO2FBQ1YsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7QUFDOUQsaUJBQWdCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3hDLGlCQUFnQixPQUFPO2NBQ1Y7YUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxLQUFLLE1BQU0sRUFBRTtBQUN2RCxpQkFBZ0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDeEMsaUJBQWdCLE9BQU87Y0FDVjtrQkFDSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxLQUFLLElBQUksRUFBRTtBQUMxRCxpQkFBZ0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDeEMsaUJBQWdCLE9BQU87Y0FDVjtBQUNiLGFBQVksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssSUFBSSxFQUFFO0FBQzVDLGlCQUFnQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztjQUMzQjtrQkFDSTtBQUNqQixpQkFBZ0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Y0FDM0I7VUFDSjtBQUNULFNBQVEsU0FBUyxHQUFHO2FBQ1IsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMzQyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzlDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsYUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hDLE1BQU0sWUFBWSxHQUFHO0FBQ2pDLGlCQUFnQixJQUFJO0FBQ3BCLGlCQUFnQixLQUFLO0FBQ3JCLGNBQWEsQ0FBQztBQUNkLGFBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO0FBQzNDLGlCQUFnQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RELGlCQUFnQixLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztjQUN6QjtBQUNiLGFBQVksS0FBSyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7YUFDdEIsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDO0FBQ2hFLGFBQVksS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoQyxhQUFZLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUNsRSxLQUFLLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzVDLEtBQUssQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzFDLEtBQUssQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3pDLEtBQUssQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLO0FBQzVDLGlCQUFnQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2NBQ3pDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEIsYUFBWSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLO2lCQUNyQixRQUFRLENBQUMsQ0FBQyxHQUFHO3FCQUNULEtBQUssU0FBUyxDQUFDO0FBQ25DLHFCQUFvQixLQUFLLFdBQVc7QUFDcEMseUJBQXdCLENBQUMsQ0FBQyxHQUFHLEtBQUssV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDdEUsT0FBTyxLQUFLLENBQUM7QUFDckMscUJBQW9CLEtBQUssS0FBSztBQUM5Qix5QkFBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt5QkFDdkIsT0FBTyxJQUFJLENBQUM7QUFDcEMscUJBQW9CLEtBQUssUUFBUTtBQUNqQyx5QkFBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt5QkFDdkIsT0FBTyxLQUFLLENBQUM7QUFDckMscUJBQW9CLEtBQUssR0FBRztBQUM1Qix5QkFBd0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO3lCQUNwRixJQUFJLFdBQVcsRUFBRTtBQUN6Qyw2QkFBNEIsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDOzZCQUNwQixPQUFPLEtBQUssQ0FBQzswQkFDaEI7eUJBQ0QsT0FBTyxJQUFJLENBQUM7QUFDcEMscUJBQW9CLEtBQUssT0FBTztBQUNoQyx5QkFBd0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtBQUNwRCw2QkFBNEIsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDOzZCQUNoQixPQUFPLEtBQUssQ0FBQzswQkFDaEI7OEJBQ0k7QUFDN0IsNkJBQTRCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzs2QkFDcEYsSUFBSSxXQUFXLEVBQUU7QUFDN0MsaUNBQWdDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQ0FDcEIsT0FBTyxLQUFLLENBQUM7OEJBQ2hCOzBCQUNKO3lCQUNELE9BQU8sSUFBSSxDQUFDO2tCQUNuQjtpQkFDRCxPQUFPLElBQUksQ0FBQztBQUM1QixjQUFhLENBQUM7QUFDZCxhQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsYUFBWSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO0FBQ3hDLGlCQUFnQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM1QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUMzRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztpQkFDNUMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRyxpQkFBZ0IsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNyRSxpQkFBZ0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzQyxpQkFBZ0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQyxpQkFBZ0IsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztBQUN6QyxxQkFBb0IsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3ZDLHFCQUFvQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDeEMscUJBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtBQUNqRCx5QkFBd0IsT0FBTztzQkFDVjtBQUNyQixxQkFBb0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5RSxxQkFBb0IsSUFBSSxVQUFVLEtBQUssRUFBRSxFQUFFO3lCQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDMUQseUJBQXdCLE9BQU87c0JBQ1Y7QUFDckIscUJBQW9CLE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBRSxLQUFLO3lCQUN0QixJQUFJLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQzt5QkFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUQseUJBQXdCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7NkJBQzFCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7NkJBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzZCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7MEJBQ3pDOzhCQUNJO0FBQzdCLDZCQUE0QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzswQkFDcEQ7eUJBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEQseUJBQXdCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7NkJBQzdCLFVBQVUsQ0FBQyxNQUFNO0FBQzdDLGlDQUFnQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDOzhCQUMxQixFQUFFLEdBQUcsQ0FBQyxDQUFDOzBCQUNYO0FBQ3pCLHNCQUFxQixDQUFDO3FCQUNGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzVFLHFCQUFvQixJQUFJLFlBQVksS0FBSyxLQUFLLElBQUksWUFBWSxLQUFLLFNBQVMsSUFBSSxZQUFZLEtBQUssSUFBSSxFQUFFO0FBQ3ZHLHlCQUF3QixPQUFPO3NCQUNWO0FBQ3JCLHFCQUFvQixJQUFJLFlBQVksWUFBWSxPQUFPLEVBQUU7QUFDekQseUJBQXdCLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUs7QUFDckQsNkJBQTRCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO0FBQzNELGlDQUFnQyxTQUFTLENBQUM7cUNBQ04sSUFBSSxFQUFFLEtBQUs7cUNBQ1gsS0FBSyxFQUFFLEtBQUs7QUFDaEQsa0NBQWlDLENBQUMsQ0FBQzs4QkFDTjtBQUM3QixrQ0FBaUMsSUFBSSxZQUFZLFlBQVksS0FBSyxFQUFFO2lDQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQzs4QkFDMUM7a0NBQ0k7QUFDakMsaUNBQWdDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzs4QkFDcEI7QUFDN0IsMEJBQXlCLENBQUMsQ0FBQztzQkFDTjtBQUNyQiwwQkFBeUIsSUFBSSxPQUFPLFlBQVksS0FBSyxRQUFRLEVBQUU7QUFDL0QseUJBQXdCLFNBQVMsQ0FBQzs2QkFDTixJQUFJLEVBQUUsWUFBWTs2QkFDbEIsS0FBSyxFQUFFLFlBQVk7QUFDL0MsMEJBQXlCLENBQUMsQ0FBQztzQkFDTjtBQUNyQiwwQkFBeUIsSUFBSSxZQUFZLFlBQVksS0FBSyxFQUFFO3lCQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztzQkFDMUM7MEJBQ0k7QUFDekIseUJBQXdCLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztzQkFDM0I7QUFDckIscUJBQW9CLE9BQU87QUFDM0Isa0JBQWlCLENBQUM7QUFDbEIsaUJBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzFCLFlBQVksQ0FBQyxPQUFPLEdBQUc7cUJBQ25CLElBQUksRUFBRSxPQUFPO3FCQUNiLEdBQUcsRUFBRSxJQUFJO3FCQUNULElBQUksRUFBRSxRQUFRO0FBQ2xDLGtCQUFpQixDQUFDO2NBQ0w7YUFDRCxPQUFPLFlBQVksQ0FBQztVQUN2QjtBQUNULFNBQVEsV0FBVyxHQUFHO2FBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1VBQ3JDO0FBQ1QsU0FBUSxVQUFVLENBQUMsY0FBYyxHQUFHLEtBQUssRUFBRSxXQUFXLEdBQUcsS0FBSyxFQUFFLFNBQVMsR0FBRyxLQUFLLEVBQUU7YUFDdkUsSUFBSSxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2FBQ3RDLElBQUksY0FBYyxFQUFFO2lCQUNoQixLQUFLLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztjQUN0RDthQUNELElBQUksV0FBVyxFQUFFO2lCQUNiLEtBQUssSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO2NBQ25EO2FBQ0QsSUFBSSxTQUFTLEVBQUU7aUJBQ1gsS0FBSyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7Y0FDL0M7QUFDYixhQUFZLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1VBQ2hFO1NBQ0QsU0FBUyxDQUFDLEdBQUcsRUFBRTtBQUN2QixhQUFZLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5RCxhQUFZLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDdEMsaUJBQWdCLE9BQU87Y0FDVjtBQUNiLGFBQVksSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUN0QyxpQkFBZ0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7QUFDOUUscUJBQW9CLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkUscUJBQW9CLE9BQU87a0JBQ1Y7Y0FDSjtBQUNiLGFBQVksSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ3BDLGFBQVksS0FBSyxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDckMsaUJBQWdCLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRTtxQkFDaEQsV0FBVyxHQUFHLElBQUksQ0FBQztrQkFDdEI7Y0FDSjthQUNELElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDOUIsaUJBQWdCLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO0FBQ3pDLHFCQUFvQixJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDckUseUJBQXdCLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbEUseUJBQXdCLE1BQU07c0JBQ1Q7a0JBQ0o7Y0FDSjtBQUNiLGFBQVksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDckQsaUJBQWdCLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRTtBQUM3RSxxQkFBb0IsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELHFCQUFvQixVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzFFLHFCQUFvQixNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO0FBQ2hFLHFCQUFvQixJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3hGLHlCQUF3QixNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO3lCQUNqRixJQUFJLGFBQWEsRUFBRTtBQUMzQyw2QkFBNEIsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDOzBCQUN6QjtzQkFDSjtBQUNyQixxQkFBb0IsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsS0FBSyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoSixxQkFBb0IsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN6RSxxQkFBb0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzlFLHFCQUFvQixNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDO0FBQ3BFLHFCQUFvQixJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzdGLHlCQUF3QixNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO3lCQUNuRixJQUFJLGFBQWEsRUFBRTtBQUMzQyw2QkFBNEIsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDOzBCQUN6QjtzQkFDSjtBQUNyQixxQkFBb0IsT0FBTztrQkFDVjtjQUNKO2FBQ0QsT0FBTyxDQUFDLEdBQUcsS0FBSyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3pGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxLQUFLLE1BQU0sR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQ2pHO0FBQ1QsU0FBUSxPQUFPLEdBQUc7YUFDTixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFELGFBQVksT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QyxPQUFPLE9BQU8sQ0FBQztVQUNsQjtTQUNELFdBQVcsQ0FBQyxLQUFLLEVBQUU7YUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2FBQ2pDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0QsYUFBWSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELGFBQVksUUFBUSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1VBQzNDO0FBQ1QsU0FBUSxlQUFlLEdBQUc7YUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2FBQ2pDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0QsYUFBWSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ25ELFlBQVksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7YUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1VBQy9DO1NBQ0QsYUFBYSxDQUFDLElBQUksRUFBRTthQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQzdDLGFBQVksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtpQkFDbkIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoRSxpQkFBZ0IsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3RCxpQkFBZ0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtxQkFDeEIsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztrQkFDdkc7c0JBQ0k7cUJBQ0QsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztrQkFDbEQ7aUJBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3pELGlCQUFnQixPQUFPO2NBQ1Y7QUFDYixhQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtBQUMxRSxpQkFBZ0IsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3pGLGlCQUFnQixJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFO3FCQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQzt5QkFDNUIsSUFBSSxFQUFFLEVBQUU7eUJBQ1IsS0FBSyxFQUFFLEVBQUU7eUJBQ1QsUUFBUSxFQUFFLEtBQUs7eUJBQ2YsV0FBVyxFQUFFLElBQUk7QUFDekMsc0JBQXFCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztrQkFDYjtjQUNKO0FBQ2IsYUFBWSxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRTtBQUNsQyxpQkFBZ0IsSUFBSSxDQUFDLFlBQVksUUFBUSxFQUFFO3FCQUN2QixNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JFLHFCQUFvQixVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FCQUNoRCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hFLHFCQUFvQixhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzVFLHFCQUFvQixVQUFVLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO3FCQUN0QyxNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUUscUJBQW9CLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3BGLHFCQUFvQixpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1RCxxQkFBb0IsYUFBYSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO3FCQUM3QyxNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFFLHFCQUFvQixlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2hGLHFCQUFvQixhQUFhLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO3FCQUMzQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUU7eUJBQ3pDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEUseUJBQXdCLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNoRix5QkFBd0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQy9DLHlCQUF3QixLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7QUFDbkQsNkJBQTRCLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFO2lDQUNiLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDcEQsaUNBQWdDLE1BQU07OEJBQ1Q7MEJBQ0o7eUJBQ0QsSUFBSSxXQUFXLEVBQUU7QUFDekMsNkJBQTRCLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7MEJBQ2xEO3lCQUNELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0UseUJBQXdCLGFBQWEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztBQUNwRSx5QkFBd0IsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQzt5QkFDckMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLENBQUMsQ0FBQzt5QkFDbkYsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDNUUseUJBQXdCLFNBQVMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7eUJBQ3BDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUcseUJBQXdCLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUMxRix5QkFBd0IsWUFBWSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQzt5QkFDdkMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5Ryx5QkFBd0IsY0FBYyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQzlGLHlCQUF3QixZQUFZLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO3lCQUN6QyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLO0FBQ25FLDZCQUE0QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDL0MsNkJBQTRCLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQzs2QkFDcEIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQzs2QkFDakQsSUFBSSxXQUFXLEVBQUU7aUNBQ2IsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSztBQUNsRixxQ0FBb0MsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO0FBQy9ELHlDQUF3QyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFOzZDQUNaLE9BQU8sS0FBSyxDQUFDOzBDQUNoQjtzQ0FDSjtxQ0FDRCxPQUFPLElBQUksQ0FBQztBQUNoRCxrQ0FBaUMsQ0FBQyxDQUFDO2lDQUNILElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5RSxpQ0FBZ0MsT0FBTzs4QkFDVjtrQ0FDSTtpQ0FDRCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZHLGlDQUFnQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7QUFDM0QscUNBQW9DLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7eUNBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO3NDQUMvQjtrQ0FDSjtpQ0FDRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUUsaUNBQWdDLE9BQU87OEJBQ1Y7QUFDN0IsMEJBQXlCLENBQUMsQ0FBQztBQUMzQix5QkFBd0IsZUFBZSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztzQkFDMUM7QUFDckIscUJBQW9CLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxLQUFLLEVBQUU7eUJBQ3RCLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvRSx5QkFBd0IsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7eUJBQzlELE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLENBQUMsQ0FBQzt5QkFDMUYsbUJBQW1CLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNuRix5QkFBd0IsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlFLHlCQUF3QixnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQzt5QkFDbEQsTUFBTSxxQkFBcUIsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3JILHlCQUF3QixtQkFBbUIsQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUMvRSx5QkFBd0IsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7QUFDaEgsNkJBQTRCLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5RSw2QkFBNEIscUJBQXFCLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDOzBCQUNuRTtBQUN6Qiw4QkFBNkIsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtBQUN4RCw2QkFBNEIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4RSw2QkFBNEIscUJBQXFCLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDOzBCQUNuRTtBQUN6Qiw4QkFBNkIsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtBQUN6RCw2QkFBNEIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6RSw2QkFBNEIscUJBQXFCLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzBCQUNwRTt5QkFDRCxhQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLO0FBQ3ZFLDZCQUE0QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDL0MsNkJBQTRCLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNoRCw2QkFBNEIsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ25GLGlDQUFnQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hGLGlDQUFnQyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVFLGlDQUFnQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7OEJBQ25FO2tDQUNJO0FBQ2pDLGlDQUFnQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9FLGlDQUFnQyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdFLGlDQUFnQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7OEJBQ3BFO0FBQzdCLDBCQUF5QixDQUFDLENBQUM7QUFDM0IseUJBQXdCLGVBQWUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztzQkFDakQ7QUFDckIscUJBQW9CLFVBQVUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDMUQscUJBQW9CLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRTt5QkFDdkIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7c0JBQzFDO3FCQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztrQkFDN0M7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxZQUFZLE1BQU0sRUFBRTtBQUN6QyxxQkFBb0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztrQkFDakQ7Y0FDSjtVQUNKO1NBQ0QsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUN2QixhQUFZLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtpQkFDcEIsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRSxpQkFBZ0IsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvRCxpQkFBZ0IsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDN0MsT0FBTyxXQUFXLENBQUM7Y0FDdEI7YUFDRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9DLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDNUMsYUFBWSxRQUFRLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDcEMsYUFBWSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzVDLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3BELGFBQVksSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQzlCLGlCQUFnQixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEtBQUs7cUJBQzNDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3RELGtCQUFpQixDQUFDLENBQUM7Y0FDTjtBQUNiLGFBQVksSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO2lCQUNkLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7Y0FDekM7YUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO0FBQ2hHLGlCQUFnQixRQUFRLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2NBQzVKO0FBQ2Isa0JBQWlCLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUU7QUFDekMsaUJBQWdCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztjQUNwQztrQkFDSTtBQUNqQixpQkFBZ0IsUUFBUSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO2NBQ3RDO2FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUU7aUJBQzFELFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztjQUN4RDtBQUNiLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7QUFDakMsaUJBQWdCLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Y0FDN0M7QUFDYixhQUFZLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtBQUNqQyxpQkFBZ0IsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztjQUNqRDthQUNELElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRTtBQUMvRCxpQkFBZ0IsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztjQUM3QztBQUNiLGFBQVksSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO0FBQ2pDLGlCQUFnQixRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUM5QyxRQUFRLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvRCxpQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztjQUNyRTtrQkFDSTtBQUNqQixpQkFBZ0IsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDakQsUUFBUSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7Y0FDbkQ7YUFDRCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLO0FBQ3RELGlCQUFnQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDbkMsaUJBQWdCLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztpQkFDcEIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqRSxpQkFBZ0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztpQkFDaEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0QsaUJBQWdCLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUMxRixxQkFBb0IsT0FBTztrQkFDVjtpQkFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLElBQUksZUFBZSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO3NCQUNuRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMxSCxxQkFBb0IsT0FBTztrQkFDVjtBQUNqQixpQkFBZ0IsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDO2lCQUN6QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDL0QsaUJBQWdCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUMvQixpQkFBZ0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtBQUM5QyxxQkFBb0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO0FBQ3pDLHlCQUF3QixLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDO3NCQUNwRDswQkFDSTt5QkFDRCxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztzQkFDakM7a0JBQ0o7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtBQUMvQyxxQkFBb0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO3lCQUNqQixLQUFLLEdBQUcsRUFBRSxDQUFDO3NCQUNkOzBCQUNJO0FBQ3pCLHlCQUF3QixLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztzQkFDcEI7a0JBQ0o7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRTtxQkFDOUIsWUFBWSxHQUFHLElBQUksQ0FBQztrQkFDdkI7QUFDakIsaUJBQWdCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUU7QUFDakQscUJBQW9CLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEtBQUssRUFBRTt5QkFDdEQsWUFBWSxHQUFHLEtBQUssQ0FBQztzQkFDeEI7MEJBQ0k7eUJBQ0QsWUFBWSxHQUFHLElBQUksQ0FBQztzQkFDdkI7a0JBQ0o7aUJBQ0QsSUFBSSxZQUFZLEVBQUU7cUJBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFO3lCQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztzQkFDcEM7cUJBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUUscUJBQW9CLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7QUFDckQseUJBQXdCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7c0JBQzFCO0FBQ3JCLHFCQUFvQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFO3lCQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztzQkFDckM7a0JBQ0o7QUFDakIsY0FBYSxDQUFDLENBQUM7YUFDSCxPQUFPLFFBQVEsQ0FBQztVQUNuQjtBQUNULFNBQVEsT0FBTyxHQUFHO2FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7VUFDOUI7QUFDVCxTQUFRLGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRTtBQUM5QyxhQUFZLElBQUksZUFBZSxHQUFHLEdBQUcsQ0FBQztBQUN0QyxhQUFZLE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDckYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7aUJBQ25CLE9BQU8sR0FBRyxDQUFDO2NBQ2Q7YUFDRCxNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzlELGFBQVksTUFBTSxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQzthQUNwRixNQUFNLHdCQUF3QixHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzthQUNyRixlQUFlLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2xILE9BQU8sZUFBZSxDQUFDO1VBQzFCO0FBQ1QsU0FBUSxnQkFBZ0IsR0FBRzthQUNmLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQzthQUMvQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDakUsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEUsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakUsYUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkUsYUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDeEQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQzthQUM3RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO2FBQzNGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQzNHLGFBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3RGLGFBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztVQUM5RDtBQUNULFNBQVEsZ0JBQWdCLEdBQUc7QUFDM0IsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEUsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakUsYUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkUsYUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDeEQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQzthQUM3RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLGtCQUFrQixDQUFDO2FBQ3BELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEtBQUssVUFBVSxFQUFFO2lCQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUMvRyxpQkFBZ0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQzFGLGlCQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2NBQzlEO1VBQ0o7QUFDVCxTQUFRLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7YUFDcEMsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO2FBQ3ZELE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDO0FBQzFELGFBQVksTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQzthQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUN4RCxhQUFZLElBQUksSUFBSSxHQUFHLElBQUksRUFBRTtBQUM3QixpQkFBZ0IsU0FBUyxDQUFDLFNBQVMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO2NBQ3RDO0FBQ2Isa0JBQWlCLElBQUksT0FBTyxHQUFHLE9BQU8sRUFBRTtBQUN4QyxpQkFBZ0IsU0FBUyxDQUFDLFNBQVMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDO2NBQzVDO1VBQ0o7QUFDVCxTQUFRLFVBQVUsR0FBRzthQUNULE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQzthQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2FBQ3hELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUNqRSxhQUFZLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsQ0FBQztBQUNoRixhQUFZLElBQUksVUFBVSxJQUFJLGFBQWEsRUFBRTtBQUM3QyxpQkFBZ0IsSUFBSSxRQUFRLENBQUMsR0FBRyxHQUFHLGFBQWEsRUFBRTtxQkFDOUIsT0FBTyxJQUFJLENBQUM7a0JBQ2Y7c0JBQ0k7cUJBQ0QsT0FBTyxNQUFNLENBQUM7a0JBQ2pCO2NBQ0o7YUFDRCxPQUFPLE1BQU0sQ0FBQztVQUNqQjtBQUNULFNBQVEsaUJBQWlCLEdBQUc7YUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQy9DLGlCQUFnQixPQUFPO2NBQ1Y7YUFDRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDekQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7YUFDNUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7YUFDbEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2FBQy9DLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2FBQ3BDLElBQUksYUFBYSxJQUFJLEVBQUUsVUFBVSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtpQkFDckQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Y0FDOUM7a0JBQ0k7aUJBQ0QsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Y0FDM0M7VUFDSjtNQUNKO0FBQ0w7S0FDSSxNQUFNLE1BQU0sQ0FBQztTQUNULFdBQVcsQ0FBQyxNQUFNLEVBQUU7QUFDNUIsYUFBWSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNoQyxhQUFZLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ2pDLGFBQVksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDakMsYUFBWSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUU7aUJBQ3JELE9BQU8sRUFBRSxJQUFJO0FBQzdCLGNBQWEsQ0FBQyxDQUFDO0FBQ2YsYUFBWSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM5RSxhQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7VUFDM0I7QUFDVCxTQUFRLE1BQU0sR0FBRztBQUNqQixhQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztVQUNoQztBQUNULFNBQVEsT0FBTyxHQUFHO0FBQ2xCLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1VBQy9CO0FBQ1QsU0FBUSxNQUFNLEdBQUc7YUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO2FBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztVQUNuRDtBQUNULFNBQVEsTUFBTSxHQUFHO2FBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzthQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztVQUM5QztTQUNELFlBQVksQ0FBQyxNQUFNLEVBQUU7QUFDN0IsYUFBWSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzthQUNyQixJQUFJLE1BQU0sRUFBRTtBQUN4QixpQkFBZ0IsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO3FCQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7eUJBQy9CLE9BQU8sRUFBRSxJQUFJO3lCQUNiLFNBQVMsRUFBRSxJQUFJO3lCQUNmLFVBQVUsRUFBRSxJQUFJO0FBQ3hDLHNCQUFxQixDQUFDLENBQUM7a0JBQ047Y0FDSjthQUNELElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDekIsaUJBQWdCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNuQyxxQkFBb0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztrQkFDOUI7Y0FDSjtVQUNKO1NBQ0QsV0FBVyxDQUFDLEVBQUUsRUFBRTthQUNaLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2lCQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7Y0FDakQ7YUFDRCxPQUFPLElBQUksQ0FBQztVQUNmO1NBQ0QsV0FBVyxDQUFDLFNBQVMsRUFBRTtBQUMvQixhQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQzlCLGlCQUFnQixPQUFPO2NBQ1Y7QUFDYixhQUFZLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQztBQUNyQyxhQUFZLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQztBQUN4QyxhQUFZLElBQUkscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0FBQzlDLGFBQVksS0FBSyxNQUFNLENBQUMsSUFBSSxTQUFTLEVBQUU7aUJBQ3ZCLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQzlDLHFCQUFvQixJQUFJLENBQUMsQ0FBQyxhQUFhLEtBQUssVUFBVSxFQUFFO3lCQUNoQyxlQUFlLEdBQUcsSUFBSSxDQUFDO3NCQUMxQjtBQUNyQixxQkFBb0IsSUFBSSxDQUFDLENBQUMsYUFBYSxLQUFLLE9BQU8sRUFBRTt5QkFDN0IsWUFBWSxHQUFHLElBQUksQ0FBQztzQkFDdkI7QUFDckIscUJBQW9CLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7QUFDaEQseUJBQXdCLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRTtBQUN0RCw2QkFBNEIsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQzFGLGlDQUFnQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQy9FLGlDQUFnQyxNQUFNOzhCQUNUOzBCQUNKO3lCQUNELHFCQUFxQixHQUFHLElBQUksQ0FBQztzQkFDaEM7a0JBQ0o7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEtBQUssVUFBVSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtxQkFDcEUscUJBQXFCLEdBQUcsSUFBSSxDQUFDO2tCQUNoQztjQUNKO0FBQ2IsYUFBWSxJQUFJLFlBQVksSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO0FBQ3BELGlCQUFnQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQ3hEO0FBQ2IsYUFBWSxJQUFJLGVBQWUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDMUQsaUJBQWdCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVELGlCQUFnQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2NBQzNCO0FBQ2IsYUFBWSxJQUFJLHFCQUFxQixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDL0QsaUJBQWdCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3pCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDckQsaUJBQWdCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7Y0FDM0I7VUFDSjtBQUNULFNBQVEsT0FBTyxHQUFHO0FBQ2xCLGFBQVksSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO2FBQ2QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDakQsYUFBWSxLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRTtBQUNuQyxpQkFBZ0IsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRTtxQkFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztrQkFDMUM7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7cUJBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7a0JBQ3hDO2NBQ0o7YUFDRCxPQUFPLElBQUksQ0FBQztVQUNmO1NBQ0QsbUJBQW1CLENBQUMsUUFBUSxFQUFFO2FBQzFCLElBQUksSUFBSSxHQUFHO0FBQ3ZCLGlCQUFnQixFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUU7QUFDL0IsaUJBQWdCLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSztBQUNyQyxpQkFBZ0IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEtBQUssTUFBTSxHQUFHLEtBQUs7QUFDM0YsaUJBQWdCLGFBQWEsRUFBRSxRQUFRLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLFlBQVk7QUFDL0YsaUJBQWdCLFFBQVEsRUFBRSxRQUFRLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLEtBQUs7aUJBQzlELE9BQU8sRUFBRSxFQUFFO0FBQzNCLGNBQWEsQ0FBQztBQUNkLGFBQVksTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztBQUNoRCxhQUFZLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO0FBQ3JDLGlCQUFnQixJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO0FBQzdDLHFCQUFvQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztrQkFDaEQ7Y0FDSjthQUNELE9BQU8sSUFBSSxDQUFDO1VBQ2Y7U0FDRCxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7QUFDbEMsYUFBWSxPQUFPO0FBQ25CLGlCQUFnQixFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUU7QUFDN0IsaUJBQWdCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztBQUNuQyxpQkFBZ0IsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ2pDLGlCQUFnQixJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFO0FBQ3RGLGlCQUFnQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7aUJBQ3pCLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxNQUFNO0FBQ3hELGlCQUFnQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7QUFDekMsaUJBQWdCLFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLE1BQU0sR0FBRyxLQUFLO2lCQUN2RSxXQUFXLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEtBQUssTUFBTTtBQUNsRSxpQkFBZ0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxTQUFTO0FBQ3ZDLGlCQUFnQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPO0FBQzNDLGlCQUFnQixJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU87QUFDcEMsY0FBYSxDQUFDO1VBQ0w7QUFDVCxTQUFRLGtCQUFrQixHQUFHO0FBQzdCLGFBQVksSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO2FBQ2pCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0FBQ2hELGFBQVksS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUU7QUFDbEMsaUJBQWdCLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUU7QUFDL0MscUJBQW9CLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDekQscUJBQW9CLEtBQUssTUFBTSxFQUFFLElBQUksZUFBZSxFQUFFO0FBQ3RELHlCQUF3QixJQUFJLEVBQUUsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO0FBQ3RELDZCQUE0QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDOUMsNkJBQTRCLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtpQ0FDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs4QkFDaEQ7MEJBQ0o7c0JBQ0o7a0JBQ0o7QUFDakIsaUJBQWdCLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7QUFDN0MscUJBQW9CLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNyQyxxQkFBb0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO3lCQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3NCQUNoRDtrQkFDSjtjQUNKO2FBQ0QsT0FBTyxPQUFPLENBQUM7VUFDbEI7QUFDVCxTQUFRLGlCQUFpQixHQUFHO0FBQzVCLGFBQVksT0FBTyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1VBQ2xFO1NBQ0QsV0FBVyxDQUFDLEdBQUcsRUFBRTtBQUN6QixhQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDbkQsYUFBWSxLQUFLLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtBQUNyQyxpQkFBZ0IsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRTtBQUMvQyxxQkFBb0IsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLHFCQUFvQixNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO0FBQ2hFLHFCQUFvQixLQUFLLE1BQU0sRUFBRSxJQUFJLGVBQWUsRUFBRTtBQUN0RCx5QkFBd0IsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtBQUN0RCw2QkFBNEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQzlDLDZCQUE0QixNQUFNLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzBCQUM3QztzQkFDSjtrQkFDSjtBQUNqQixpQkFBZ0IsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtBQUM3QyxxQkFBb0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLHFCQUFvQixNQUFNLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2tCQUM3QztjQUNKO0FBQ2IsYUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1VBQzNCO1NBQ0Qsa0JBQWtCLENBQUMsTUFBTSxFQUFFO0FBQ25DLGFBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUNuRCxhQUFZLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO0FBQ3JDLGlCQUFnQixJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUFFO0FBQy9DLHFCQUFvQixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDdkMscUJBQW9CLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7QUFDaEUscUJBQW9CLEtBQUssTUFBTSxFQUFFLElBQUksZUFBZSxFQUFFO0FBQ3RELHlCQUF3QixJQUFJLEVBQUUsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO0FBQ3RELDZCQUE0QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDOUMsNkJBQTRCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7MEJBQ25EO3NCQUNKO2tCQUNKO0FBQ2pCLGlCQUFnQixJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO0FBQzdDLHFCQUFvQixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDckMscUJBQW9CLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7a0JBQ25EO2NBQ0o7QUFDYixhQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7VUFDM0I7QUFDVCxTQUFRLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtBQUN6QyxhQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekIsSUFBSSxFQUFFLEVBQUU7aUJBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztjQUMvQjthQUNELElBQUksS0FBSyxFQUFFO2lCQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Y0FDckM7YUFDRCxJQUFJLE9BQU8sRUFBRTtBQUN6QixpQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQzNDLGlCQUFnQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLO0FBQ3ZDLHFCQUFvQixJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7QUFDekMseUJBQXdCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztzQkFDdkM7QUFDckIsa0JBQWlCLENBQUMsQ0FBQztjQUNOO0FBQ2IsYUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1VBQzNCO1NBQ0QsYUFBYSxDQUFDLElBQUksRUFBRTtBQUM1QixhQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckMsYUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDdkMsYUFBWSxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRTtBQUNsQyxpQkFBZ0IsSUFBSSxDQUFDLFlBQVksUUFBUSxFQUFFO0FBQzNDLHFCQUFvQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7a0JBQ25EO0FBQ2pCLGlCQUFnQixJQUFJLENBQUMsWUFBWSxNQUFNLEVBQUU7QUFDekMscUJBQW9CLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztrQkFDakQ7Y0FDSjtBQUNiLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5RSxhQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7VUFDM0I7U0FDRCxjQUFjLENBQUMsUUFBUSxFQUFFO2FBQ3JCLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEUsYUFBWSxVQUFVLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDeEMsYUFBWSxVQUFVLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDOUMsYUFBWSxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUU7QUFDcEMsaUJBQWdCLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztjQUN6QztBQUNiLGFBQVksSUFBSSxRQUFRLENBQUMsUUFBUSxLQUFLLEtBQUssRUFBRTtpQkFDN0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztjQUNuRDtBQUNiLGFBQVksSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO0FBQ2xDLGlCQUFnQixLQUFLLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7cUJBQzlCLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2tCQUNoRDtjQUNKO2FBQ0QsT0FBTyxVQUFVLENBQUM7VUFDckI7U0FDRCxZQUFZLENBQUMsSUFBSSxFQUFFO2FBQ2YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5RCxhQUFZLFFBQVEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNsQyxhQUFZLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN4QyxhQUFZLFFBQVEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM3QyxhQUFZLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUU7aUJBQ2xCLFFBQVEsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztjQUNqRDtBQUNiLGFBQVksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQy9CLGlCQUFnQixRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7Y0FDckM7QUFDYixhQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUMvQixpQkFBZ0IsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Y0FDNUI7QUFDYixhQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQy9CLGlCQUFnQixRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Y0FDbkM7QUFDYixhQUFZLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtpQkFDbEIsUUFBUSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQztjQUNyRDtBQUNiLGFBQVksSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2lCQUNoQixRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO2NBQ25EO0FBQ2IsYUFBWSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDNUIsaUJBQWdCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsS0FBSztxQkFDM0MsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDeEQsa0JBQWlCLENBQUMsQ0FBQztjQUNOO2FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7QUFDNUQsaUJBQWdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsS0FBSztBQUN4RCxxQkFBb0IsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNwRixrQkFBaUIsQ0FBQyxDQUFDO2NBQ047YUFDRCxPQUFPLFFBQVEsQ0FBQztVQUNuQjtBQUNULFNBQVEsT0FBTyxHQUFHO0FBQ2xCLGFBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxhQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4RSxhQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUMvQixpQkFBZ0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUMzQyxpQkFBZ0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Y0FDeEI7YUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUMxQyxhQUFZLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztVQUNqQjtNQUNKO0FBQ0w7S0FDSSxNQUFNLFFBQVEsQ0FBQztTQUNYLFdBQVcsQ0FBQyxRQUFRLEVBQUU7QUFDOUIsYUFBWSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixhQUFZLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCLGFBQVksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDNUIsYUFBWSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUNwQyxhQUFZLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLGFBQVksSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFDcEMsYUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzthQUN6QixJQUFJLENBQUMsUUFBUSxFQUFFO2lCQUNYLFFBQVEsR0FBRyxFQUFFLENBQUM7Y0FDakI7YUFDRCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQzthQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO2FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDOUMsYUFBWSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEtBQUssU0FBUyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ3hGLGFBQVksSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxLQUFLLFNBQVMsR0FBRyxRQUFRLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUM5RixhQUFZLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsS0FBSyxTQUFTLEdBQUcsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDN0YsYUFBWSxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEtBQUssU0FBUyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2FBQ3BGLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsSUFBSSxVQUFVLENBQUM7YUFDbEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsSUFBSSxRQUFRLENBQUM7YUFDaEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxJQUFJLFlBQVksQ0FBQzthQUN0RCxJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLElBQUksY0FBYyxDQUFDO0FBQzFFLGFBQVksSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxLQUFLLFNBQVMsR0FBRyxRQUFRLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUM3RyxhQUFZLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsS0FBSyxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDMUYsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUM7YUFDakUsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxJQUFJLFVBQVUsQ0FBQzthQUM5RCxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDO0FBQ2hFLGFBQVksSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxLQUFLLFNBQVMsR0FBRyxRQUFRLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztBQUN0SCxhQUFZLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsS0FBSyxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDdkcsYUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLEtBQUssU0FBUyxHQUFHLFFBQVEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0FBQ3BHLGFBQVksSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxLQUFLLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztBQUMzRixhQUFZLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLENBQUMsa0JBQWtCLEtBQUssU0FBUyxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7YUFDMUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQzthQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDO2FBQ2hELElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUM7YUFDakQsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQzthQUNwRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixJQUFJLG1CQUFtQixDQUFDO2FBQ3pFLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsSUFBSSw4QkFBOEIsQ0FBQztVQUM3RTtNQUNKO0FBQ0w7S0FDSSxNQUFNLFVBQVUsQ0FBQztTQUNiLFdBQVcsQ0FBQyxNQUFNLEVBQUU7YUFDaEIsSUFBSSxFQUFFLENBQUM7YUFDUCxJQUFJLENBQUMsTUFBTSxHQUFHO2lCQUNWLE1BQU0sRUFBRSxTQUFTO0FBQ2pDLGlCQUFnQixZQUFZLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxLQUFLO0FBQy9DLHFCQUFvQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2tCQUN0RTtpQkFDRCxPQUFPLEVBQUUsU0FBUztpQkFDbEIsWUFBWSxFQUFFLFNBQVM7aUJBQ3ZCLFdBQVcsRUFBRSxTQUFTO2lCQUN0QixVQUFVLEVBQUUsU0FBUztpQkFDckIsU0FBUyxFQUFFLFNBQVM7aUJBQ3BCLFdBQVcsRUFBRSxTQUFTO2lCQUN0QixVQUFVLEVBQUUsU0FBUztBQUNyQyxjQUFhLENBQUM7QUFDZCxhQUFZLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLE1BQU07QUFDL0MsaUJBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO0FBQ3hFLHFCQUFvQixPQUFPO2tCQUNWO0FBQ2pCLGlCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzFDLGNBQWEsQ0FBQyxDQUFDO0FBQ2YsYUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxNQUFNO0FBQy9DLGlCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtBQUN4RSxxQkFBb0IsT0FBTztrQkFDVjtBQUNqQixpQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMxQyxjQUFhLENBQUMsQ0FBQztBQUNmLGFBQVksSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsS0FBSztBQUN4QyxpQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQzNDLHFCQUFvQixPQUFPO2tCQUNWO0FBQ2pCLGlCQUFnQixJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO3FCQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztrQkFDdEI7QUFDakIsY0FBYSxDQUFDO0FBQ2QsYUFBWSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsTUFBTTtBQUNoRCxpQkFBZ0IsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQ3JDLHFCQUFvQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7a0JBQ2hCO0FBQ2pCLGNBQWEsQ0FBQzthQUNGLElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxNQUFNLENBQUMsTUFBTSxLQUFLLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEgsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtpQkFDaEIsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQzFELHFCQUFvQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7a0JBQ25FO0FBQ2pCLGlCQUFnQixPQUFPO2NBQ1Y7YUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRTtpQkFDcEMsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQzFELHFCQUFvQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUM7a0JBQ2pFO0FBQ2pCLGlCQUFnQixPQUFPO2NBQ1Y7YUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtBQUM1QyxpQkFBZ0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2NBQ2xCO2FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDaEUsYUFBWSxNQUFNLGNBQWMsR0FBRyxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMzRyxhQUFZLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtpQkFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3hELHFCQUFvQixTQUFTO2tCQUNaO2lCQUNELElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUN4RCxxQkFBb0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztrQkFDeEQ7c0JBQ0k7QUFDckIscUJBQW9CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztrQkFDekM7Y0FDSjtBQUNiLGFBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxNQUFNLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQzthQUN2SixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUM5RCxhQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztBQUM5RCxhQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN6RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pHLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxDQUFDLE9BQU8sS0FBSztBQUNyRCxpQkFBZ0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLGNBQWEsQ0FBQzthQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLENBQUMsT0FBTyxLQUFLO0FBQ3JELGlCQUFnQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDOUMsaUJBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUNoRCxjQUFhLENBQUM7YUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixHQUFHLENBQUMsUUFBUSxLQUFLO2lCQUN6QyxJQUFJLFFBQVEsRUFBRTtBQUM5QixxQkFBb0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2tCQUNsQjtzQkFDSTtBQUNyQixxQkFBb0IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2tCQUNqQjtBQUNqQixjQUFhLENBQUM7YUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsR0FBRyxDQUFDLElBQUksS0FBSztBQUNwRCxpQkFBZ0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxjQUFhLENBQUM7QUFDZCxhQUFZLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsVUFBVSxHQUFHLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ3hJLGFBQVksSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQzdCLGlCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Y0FDbkQ7YUFDRCxNQUFNLGVBQWUsR0FBRztpQkFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztpQkFDMUIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM1QyxpQkFBZ0IsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVM7aUJBQzlELFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQ3hDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQ3BDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDOUMsaUJBQWdCLFlBQVksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVk7QUFDdEQsaUJBQWdCLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7QUFDcEQsY0FBYSxDQUFDO2FBQ0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNsRyxhQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsYUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDaEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDakUsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQzNFLElBQUksZUFBZSxFQUFFO0FBQ2pDLGlCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsQ0FBQztjQUNyRTtrQkFDSSxJQUFJLG9CQUFvQixFQUFFO0FBQzNDLGlCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLG9CQUFvQixDQUFDLENBQUM7Y0FDL0U7QUFDYixhQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7aUJBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztjQUMzRjtBQUNiLGFBQVksTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzVELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEtBQUssTUFBTSxFQUFFO0FBQ3ZELGlCQUFnQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7Y0FDL0Q7YUFDRCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDdkYsYUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO0FBQ3hDLGlCQUFnQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Y0FDbEI7QUFDYixhQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7QUFDMUMsaUJBQWdCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztjQUNmO0FBQ2IsYUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7VUFDN0I7QUFDVCxTQUFRLE1BQU0sR0FBRztBQUNqQixhQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUMzQyxhQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDakMsYUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1VBQ3hCO0FBQ1QsU0FBUSxPQUFPLEdBQUc7QUFDbEIsYUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDMUMsYUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2xDLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztVQUN6QjtBQUNULFNBQVEsT0FBTyxHQUFHO0FBQ2xCLGFBQVksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1VBQy9CO1NBQ0QsT0FBTyxDQUFDLElBQUksRUFBRTthQUNWLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDMUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQyxJQUFJLEdBQUcsRUFBRTtBQUNyQixpQkFBZ0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtxQkFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7a0JBQzFCO0FBQ2pCLGlCQUFnQixPQUFPO2NBQ1Y7YUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pELGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqRCxhQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRTtBQUN6RixpQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7Y0FDNUQ7VUFDSjtBQUNULFNBQVEsV0FBVyxHQUFHO2FBQ1YsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQzFELGFBQVksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtpQkFDekIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7Y0FDdEQ7QUFDYixhQUFZLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7VUFDaEQ7QUFDVCxTQUFRLFdBQVcsQ0FBQyxNQUFNLEVBQUUsY0FBYyxHQUFHLElBQUksRUFBRTthQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQzFDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEQsYUFBWSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvRCxhQUFZLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUMzQixhQUFZLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO0FBQ3hDLGlCQUFnQixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRTtBQUNsRSxxQkFBb0IsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxxQkFBb0IsU0FBUztrQkFDWjtBQUNqQixpQkFBZ0IsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEVBQUU7cUJBQ3BFLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2tCQUN2QjtjQUNKO2FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ3BDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUMsYUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3ZDLGFBQVksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFLEVBQUU7QUFDL0QsaUJBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztjQUN2RDtrQkFDSTtpQkFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztjQUNuQzthQUNELElBQUksY0FBYyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUU7QUFDM0csaUJBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO2NBQzVEO1VBQ0o7U0FDRCxTQUFTLENBQUMsTUFBTSxFQUFFO2FBQ2QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxNQUFNLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtpQkFDOUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7Y0FDaEM7YUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxhQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRTtBQUN6RixpQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7Y0FDNUQ7VUFDSjtBQUNULFNBQVEsSUFBSSxHQUFHO0FBQ2YsYUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQ2hFLGlCQUFnQixPQUFPO2NBQ1Y7QUFDYixhQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7QUFDeEMsaUJBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7Y0FDNUI7QUFDYixhQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDL0IsYUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO0FBQ3ZFLGlCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO2NBQzdCO0FBQ2IsYUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7YUFDNUIsVUFBVSxDQUFDLE1BQU07QUFDN0IsaUJBQWdCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7QUFDM0MscUJBQW9CLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7a0JBQzNCO0FBQ2pCLGlCQUFnQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQzFDLHFCQUFvQixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7a0JBQ25DO2lCQUNELFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZFLGNBQWEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQy9CLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEtBQUssVUFBVSxFQUFFO0FBQzlELGlCQUFnQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO3FCQUM1QixhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztrQkFDN0M7aUJBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7Y0FDNUY7VUFDSjtBQUNULFNBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLEVBQUU7QUFDaEMsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7QUFDbkUsaUJBQWdCLE9BQU87Y0FDVjtBQUNiLGFBQVksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtBQUN6QyxpQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztjQUM3QjtBQUNiLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNoQyxhQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBRSxFQUFFO0FBQy9ELGlCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2NBQ25CO2FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0MsYUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDekMsYUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7YUFDakMsVUFBVSxDQUFDLE1BQU07QUFDN0IsaUJBQWdCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7QUFDNUMscUJBQW9CLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7a0JBQzVCO2lCQUNELFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFFLGNBQWEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNDLGFBQVksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRTtpQkFDNUIsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7Y0FDN0M7VUFDSjtTQUNELE1BQU0sQ0FBQyxLQUFLLEVBQUU7QUFDdEIsYUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtBQUNsRSxpQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2NBQ2xEO0FBQ2IsYUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDckMsaUJBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3BJLGlCQUFnQixPQUFPO2NBQ1Y7QUFDYixhQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDMUMsYUFBWSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7QUFDMUYsYUFBWSxJQUFJLFVBQVUsWUFBWSxPQUFPLEVBQUU7QUFDL0MsaUJBQWdCLFVBQVU7QUFDMUIsc0JBQXFCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSztBQUNwQyxxQkFBb0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xGLGtCQUFpQixDQUFDO0FBQ2xCLHNCQUFxQixLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUs7QUFDcEMscUJBQW9CLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pGLGtCQUFpQixDQUFDLENBQUM7QUFDbkIsaUJBQWdCLE9BQU87Y0FDVjtBQUNiLGtCQUFpQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDaEQsaUJBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztjQUN2RTtrQkFDSTtpQkFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO2NBQ3JGO1VBQ0o7QUFDVCxTQUFRLE9BQU8sR0FBRzthQUNOLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RFLGFBQVksTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQy9ELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEtBQUssTUFBTSxFQUFFO0FBQ3ZELGlCQUFnQixNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7Y0FDbEU7YUFDRCxRQUFRLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDOUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkMsYUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2xDLGFBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztVQUN6QjtNQUNKO0FBQ0w7S0FDSSxPQUFPLFVBQVUsQ0FBQztBQUN0QjtBQUNBLEVBQUMsRUFBRSxDQUFBOzs7Ozs7QUMvN0RILE1BQU1DLFNBQVMsR0FBRyxDQUNoQjtBQUNFQyxFQUFBQSxJQUFJLEVBQUUsaUJBQWlCO0FBQ3ZCMUcsRUFBQUEsS0FBSyxFQUFFLEVBQUU7QUFDVDJHLEVBQUFBLElBQUksRUFBRSxpQkFBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsV0FBVztBQUNqQjFHLEVBQUFBLEtBQUssRUFBRSxXQUFXO0FBQ2xCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsZ0RBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsU0FBUztBQUNmMUcsRUFBQUEsS0FBSyxFQUFFLFNBQVM7QUFDaEIyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSw0Q0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxTQUFTO0FBQ2YxRyxFQUFBQSxLQUFLLEVBQUUsU0FBUztBQUNoQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDRDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFVBQVU7QUFDaEIxRyxFQUFBQSxLQUFLLEVBQUUsVUFBVTtBQUNqQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDhDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLGdCQUFnQjtBQUN0QjFHLEVBQUFBLEtBQUssRUFBRSxnQkFBZ0I7QUFDdkIyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSwwREFBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxTQUFTO0FBQ2YxRyxFQUFBQSxLQUFLLEVBQUUsU0FBUztBQUNoQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDRDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFNBQVM7QUFDZjFHLEVBQUFBLEtBQUssRUFBRSxTQUFTO0FBQ2hCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsNENBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsVUFBVTtBQUNoQjFHLEVBQUFBLEtBQUssRUFBRSxVQUFVO0FBQ2pCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsNkNBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsUUFBUTtBQUNkMUcsRUFBQUEsS0FBSyxFQUFFLFFBQVE7QUFDZjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDBDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLE9BQU87QUFDYjFHLEVBQUFBLEtBQUssRUFBRSxPQUFPO0FBQ2QyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSwwQ0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxPQUFPO0FBQ2IxRyxFQUFBQSxLQUFLLEVBQUUsT0FBTztBQUNkMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsd0NBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsV0FBVztBQUNqQjFHLEVBQUFBLEtBQUssRUFBRSxXQUFXO0FBQ2xCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsZ0RBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsVUFBVTtBQUNoQjFHLEVBQUFBLEtBQUssRUFBRSxVQUFVO0FBQ2pCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsNkNBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsVUFBVTtBQUNoQjFHLEVBQUFBLEtBQUssRUFBRSxVQUFVO0FBQ2pCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsNkNBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsU0FBUztBQUNmMUcsRUFBQUEsS0FBSyxFQUFFLFNBQVM7QUFDaEIyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSwwQ0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxRQUFRO0FBQ2QxRyxFQUFBQSxLQUFLLEVBQUUsUUFBUTtBQUNmMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEseUNBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsUUFBUTtBQUNkMUcsRUFBQUEsS0FBSyxFQUFFLFFBQVE7QUFDZjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDBDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLE1BQU07QUFDWjFHLEVBQUFBLEtBQUssRUFBRSxNQUFNO0FBQ2IyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSx3Q0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxPQUFPO0FBQ2IxRyxFQUFBQSxLQUFLLEVBQUUsT0FBTztBQUNkMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsd0NBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsUUFBUTtBQUNkMUcsRUFBQUEsS0FBSyxFQUFFLFFBQVE7QUFDZjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDBDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLE9BQU87QUFDYjFHLEVBQUFBLEtBQUssRUFBRSxPQUFPO0FBQ2QyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSw0Q0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxRQUFRO0FBQ2QxRyxFQUFBQSxLQUFLLEVBQUUsUUFBUTtBQUNmMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEseUNBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsU0FBUztBQUNmMUcsRUFBQUEsS0FBSyxFQUFFLFNBQVM7QUFDaEIyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSwyQ0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxZQUFZO0FBQ2xCMUcsRUFBQUEsS0FBSyxFQUFFLFlBQVk7QUFDbkIyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSxtREFBQSxDQUFBO0FBQ1IsQ0FBQyxFQUVEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxnQkFBZ0I7QUFDdEIxRyxFQUFBQSxLQUFLLEVBQUUsZ0JBQWdCO0FBQ3ZCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsdURBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsVUFBVTtBQUNoQjFHLEVBQUFBLEtBQUssRUFBRSxVQUFVO0FBQ2pCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsNENBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsS0FBSztBQUNYMUcsRUFBQUEsS0FBSyxFQUFFLEtBQUs7QUFDWjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLG9DQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFFBQVE7QUFDZDFHLEVBQUFBLEtBQUssRUFBRSxRQUFRO0FBQ2YyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSwwQ0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxZQUFZO0FBQ2xCMUcsRUFBQUEsS0FBSyxFQUFFLFlBQVk7QUFDbkIyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSxnREFBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxTQUFTO0FBQ2YxRyxFQUFBQSxLQUFLLEVBQUUsU0FBUztBQUNoQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDRDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFVBQVU7QUFDaEIxRyxFQUFBQSxLQUFLLEVBQUUsVUFBVTtBQUNqQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLCtDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFVBQVU7QUFDaEIxRyxFQUFBQSxLQUFLLEVBQUUsVUFBVTtBQUNqQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDhDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFVBQVU7QUFDaEIxRyxFQUFBQSxLQUFLLEVBQUUsVUFBVTtBQUNqQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDhDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLEtBQUs7QUFDWDFHLEVBQUFBLEtBQUssRUFBRSxLQUFLO0FBQ1oyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSxvQ0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxTQUFTO0FBQ2YxRyxFQUFBQSxLQUFLLEVBQUUsU0FBUztBQUNoQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDZDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFNBQVM7QUFDZjFHLEVBQUFBLEtBQUssRUFBRSxTQUFTO0FBQ2hCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsMkNBQUEsQ0FBQTtBQUNSLENBQUMsRUFFRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsV0FBVztBQUNqQjFHLEVBQUFBLEtBQUssRUFBRSxXQUFXO0FBQ2xCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsOENBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsVUFBVTtBQUNoQjFHLEVBQUFBLEtBQUssRUFBRSxVQUFVO0FBQ2pCMkcsRUFBQUEsSUFBSSxFQUFFLENBQUEsNkNBQUEsQ0FBQTtBQUNSLENBQUMsRUFDRDtBQUNFRCxFQUFBQSxJQUFJLEVBQUUsT0FBTztBQUNiMUcsRUFBQUEsS0FBSyxFQUFFLE9BQU87QUFDZDJHLEVBQUFBLElBQUksRUFBRSxDQUFBLHdDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFdBQVc7QUFDakIxRyxFQUFBQSxLQUFLLEVBQUUsV0FBVztBQUNsQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLGtEQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFFBQVE7QUFDZDFHLEVBQUFBLEtBQUssRUFBRSxRQUFRO0FBQ2YyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSwwQ0FBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxXQUFXO0FBQ2pCMUcsRUFBQUEsS0FBSyxFQUFFLFdBQVc7QUFDbEIyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSxnREFBQSxDQUFBO0FBQ1IsQ0FBQyxFQUNEO0FBQ0VELEVBQUFBLElBQUksRUFBRSxTQUFTO0FBQ2YxRyxFQUFBQSxLQUFLLEVBQUUsU0FBUztBQUNoQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLDRDQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLGFBQWE7QUFDbkIxRyxFQUFBQSxLQUFLLEVBQUUsYUFBYTtBQUNwQjJHLEVBQUFBLElBQUksRUFBRSxDQUFBLG9EQUFBLENBQUE7QUFDUixDQUFDLEVBQ0Q7QUFDRUQsRUFBQUEsSUFBSSxFQUFFLFFBQVE7QUFDZDFHLEVBQUFBLEtBQUssRUFBRSxRQUFRO0FBQ2YyRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQSx5Q0FBQSxDQUFBO0FBQ1IsQ0FBQyxDQUNGLENBQUE7QUFDRCxNQUFNQyxXQUFXLEdBQUcsSUFBSUMsSUFBSSxFQUFFLENBQUNDLFdBQVcsRUFBRSxDQUFBO0FBRTVDLFNBQVNDLGNBQWNBLENBQUNDLEtBQUssRUFBRTtBQUM3QixFQUFBLE9BQU8sSUFBSUgsSUFBSSxDQUFDRCxXQUFXLEVBQUVJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxFQUFFLENBQUE7QUFDbEQsQ0FBQTtBQUVBckksS0FBSyxDQUFDLFlBQVk7QUFDaEIsRUFBQSxNQUFNc0ksV0FBVyxHQUFHcEksUUFBUSxDQUFDc0QsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBRTFELEVBQUEsSUFBSThFLFdBQVcsRUFBRTtBQUNmLElBQUEsTUFBTW5HLFNBQVMsR0FBR21HLFdBQVcsQ0FBQy9ELFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNwRCxJQUFBLE1BQU1nRSxlQUFlLEdBQUdELFdBQVcsQ0FBQy9ELFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBQ3pFLE1BQU1pRSxZQUFZLEdBQUcsSUFBSS9ELFlBQVksQ0FBQzZELFdBQVcsRUFBRTFILG9CQUFvQixDQUFDLENBQUE7QUFDeEUsSUFBQSxNQUFNNkgsYUFBYSxHQUFHSCxXQUFXLENBQUM5RSxhQUFhLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtBQUN4RSxJQUFBLE1BQU1rRixjQUFjLEdBQUdKLFdBQVcsQ0FBQzlFLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0FBQzNFLElBQUEsTUFBTW1GLFdBQVcsR0FBR0wsV0FBVyxDQUFDOUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3ZELElBQUEsTUFBTW9GLGNBQWMsR0FBR04sV0FBVyxDQUFDOUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3pELElBQUEsTUFBTXFGLGlCQUFpQixHQUFHUCxXQUFXLENBQUM5RSxhQUFhLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUM5RSxJQUFJc0YsV0FBVyxHQUFHLENBQUMsQ0FBQTtJQUNuQixJQUFJQyxlQUFlLEdBQUcsS0FBSyxDQUFBO0FBQzNCLElBQUEsSUFBSUMsVUFBVSxDQUFBO0FBRWRSLElBQUFBLFlBQVksQ0FDVDlELFFBQVEsQ0FBQyx3QkFBd0IsRUFBRW5ELDRCQUE0QixFQUFFRSwyQkFBMkIsQ0FBQyxDQUM3RmlELFFBQVEsQ0FBQyx5QkFBeUIsRUFBRW5ELDRCQUE0QixFQUFFRSwyQkFBMkIsQ0FBQyxDQUM5RmlELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRXZELHlCQUF5QixDQUFDLENBQzFEdUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFckQsd0JBQXdCLENBQUMsQ0FDeERxRCxRQUFRLENBQUMscUJBQXFCLEVBQUVwRCx5QkFBeUIsQ0FBQyxDQUMxRHFELFNBQVMsQ0FBQyxNQUFNO0FBQ2YxQyxNQUFBQSxtQkFBbUIsQ0FDakJxRyxXQUFXLEVBQ1huRyxTQUFTLEVBQ1QsTUFBTTtRQUNKbUcsV0FBVyxDQUFDM0IsT0FBTyxDQUFDc0MsS0FBSyxHQUFHLENBQUMsRUFBRUgsV0FBVyxFQUFFSSxRQUFRLEVBQUUsQ0FBQTtBQUN4RCxPQUFDLEVBQ0QsTUFBTTtRQUNKN0YsS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUE7QUFDN0QsT0FDRixDQUFDLENBQUE7QUFDSCxLQUFDLENBQUMsQ0FBQTtJQUVKLFNBQVM4RixnQkFBZ0JBLENBQUNmLEtBQUssRUFBRTtBQUMvQixNQUFBLElBQUlXLGVBQWUsRUFBRTtRQUNuQkMsVUFBVSxDQUFDSSxPQUFPLEVBQUUsQ0FBQTtBQUN0QixPQUFBO0FBRUEsTUFBQSxJQUFJQyxXQUFXLEdBQUdsQixjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFBO01BQ3ZDLElBQUlrQixTQUFTLEdBQUcsRUFBRSxDQUFBO0FBRWxCLE1BQUEsSUFBSWxCLEtBQUssS0FBSyxHQUFHLEtBQUtKLFdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUNBLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQzNFcUIsUUFBQUEsV0FBVyxHQUFHLEVBQUUsQ0FBQTtBQUNsQixPQUFBO01BRUEsS0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLElBQUlGLFdBQVcsRUFBRUUsQ0FBQyxFQUFFLEVBQUU7UUFDckNELFNBQVMsQ0FBQ0UsSUFBSSxDQUFDO0FBQ2IxQixVQUFBQSxJQUFJLEVBQUV5QixDQUFDO0FBQ1BuSSxVQUFBQSxLQUFLLEVBQUVtSSxDQUFBQTtBQUNULFNBQUMsQ0FBQyxDQUFBO0FBQ0osT0FBQTtNQUVBUCxVQUFVLEdBQUcsSUFBSVMsVUFBVSxDQUFDO0FBQzFCMUcsUUFBQUEsTUFBTSxFQUFFNkYsY0FBYztBQUN0QmMsUUFBQUEsSUFBSSxFQUFFSixTQUFTO0FBQ2ZLLFFBQUFBLFFBQVEsRUFBRTtBQUNSQyxVQUFBQSxVQUFVLEVBQUUsS0FBQTtBQUNkLFNBQUE7QUFDRixPQUFDLENBQUMsQ0FBQTtBQUVGYixNQUFBQSxlQUFlLEdBQUcsSUFBSSxDQUFBO0FBQ3hCLEtBQUE7QUFFQUksSUFBQUEsZ0JBQWdCLENBQUNSLFdBQVcsQ0FBQ3ZILEtBQUssQ0FBQyxDQUFBO0FBRW5DdUgsSUFBQUEsV0FBVyxDQUFDdEksZ0JBQWdCLENBQUMsUUFBUSxFQUFFLE1BQU07QUFDM0M4SSxNQUFBQSxnQkFBZ0IsQ0FBQ1IsV0FBVyxDQUFDdkgsS0FBSyxDQUFDLENBQUE7QUFDckMsS0FBQyxDQUFDLENBQUE7QUFFRnNILElBQUFBLGNBQWMsQ0FBQ3JJLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxNQUFNO0FBQzlDbUksTUFBQUEsWUFBWSxDQUFDcUIsZUFBZSxDQUFDLHlCQUF5QixDQUFDLENBQUE7QUFDekQsS0FBQyxDQUFDLENBQUE7QUFFRixJQUFBLE1BQU1DLGlCQUFpQixHQUFHLElBQUlMLFVBQVUsQ0FBQztBQUN2QzFHLE1BQUFBLE1BQU0sRUFBRTBGLGFBQWE7QUFDckJpQixNQUFBQSxJQUFJLEVBQUU3QixTQUFTO0FBQ2Y4QixNQUFBQSxRQUFRLEVBQUU7QUFDUkMsUUFBQUEsVUFBVSxFQUFFLEtBQUE7T0FDYjtBQUNERyxNQUFBQSxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFQSxNQUFNO0FBQ2pCeEIsVUFBQUEsWUFBWSxDQUFDcUIsZUFBZSxDQUFDLHdCQUF3QixDQUFDLENBQUE7QUFDeEQsU0FBQTtBQUNGLE9BQUE7QUFDRixLQUFDLENBQUMsQ0FBQTtBQUVGLElBQUEsSUFBSXRCLGVBQWUsRUFBRXVCLGlCQUFpQixDQUFDRyxXQUFXLENBQUMxQixlQUFlLENBQUMsQ0FBQTtJQUVuRXpGLGdCQUFnQixDQUFDMkYsYUFBYSxDQUFDLENBQUE7SUFDL0IzRixnQkFBZ0IsQ0FBQzhGLGNBQWMsQ0FBQyxDQUFBO0FBRWhDLElBQUEsSUFBSUMsaUJBQWlCLEVBQUU7QUFDckJBLE1BQUFBLGlCQUFpQixDQUFDeEksZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQVVpRyxDQUFDLEVBQUU7QUFDdkQsUUFBQSxJQUFJNEQsbUJBQW1CLENBQUE7QUFDdkIsUUFBQSxJQUFJQyxvQkFBb0IsQ0FBQTtRQUN4QjNCLFlBQVksQ0FBQ3FCLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDdkosSUFBSSxDQUFFOEosT0FBTyxJQUFLO0FBQ3ZFRixVQUFBQSxtQkFBbUIsR0FBR0UsT0FBTyxDQUFBO0FBQy9CLFNBQUMsQ0FBQyxDQUFBO1FBQ0Y1QixZQUFZLENBQUNxQixlQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQ3ZKLElBQUksQ0FBRThKLE9BQU8sSUFBSztBQUN4RUQsVUFBQUEsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQTtVQUU5QixJQUFJRixtQkFBbUIsSUFBSUMsb0JBQW9CLEVBQUU7WUFDL0M3RCxDQUFDLENBQUMrRCxjQUFjLEVBQUUsQ0FBQTtZQUNsQi9CLFdBQVcsQ0FBQzNCLE9BQU8sQ0FBQ3NDLEtBQUssR0FBRyxDQUFDLEVBQUVILFdBQVcsRUFBRUksUUFBUSxFQUFFLENBQUE7QUFDeEQsV0FBQTtBQUNGLFNBQUMsQ0FBQyxDQUFBO0FBQ0osT0FBQyxDQUFDLENBQUE7QUFDSixLQUFBO0FBQ0YsR0FBQTtBQUNGLENBQUMsQ0FBQzs7QUN6V0ZsSixLQUFLLENBQUMsWUFBWTtBQUNoQixFQUFBLE1BQU1zSyxPQUFPLEdBQUdwSyxRQUFRLENBQUNrRyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0FBQy9ELEVBQUEsSUFBSWtFLE9BQU8sQ0FBQ3RILE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDeEIsSUFBQSxLQUFLLElBQUlELE1BQU0sSUFBSXVILE9BQU8sRUFBRTtBQUMxQixNQUFBLElBQUliLFVBQVUsQ0FBQztBQUNiMUcsUUFBQUEsTUFBTSxFQUFFQSxNQUFNO0FBQ2Q0RyxRQUFBQSxRQUFRLEVBQUU7QUFDUkMsVUFBQUEsVUFBVSxFQUFFLEtBQUE7QUFDZCxTQUFBO0FBQ0YsT0FBQyxDQUFDLENBQUE7TUFFRjlHLGdCQUFnQixDQUFDQyxNQUFNLENBQUMsQ0FBQTs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDRixLQUFBO0FBQ0YsR0FBQTtBQUNGLENBQUMsQ0FBQzs7QUN2QkYsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxVQUFVLFlBQVksT0FBTyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxD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{"version":3,"file":"bundle.js","sources":["../../src/js/utils/documentReady.js","../../src/js/script.js","../../node_modules/.pnpm/just-validate@4.3.0/node_modules/just-validate/dist/just-validate.es.js","../../src/js/common/formVariables.js","../../src/blocks/form/form.js","../../src/blocks/form-set/form-set.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/core/utils.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/core/action-details.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/core/holder.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/factory.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/controls/mask-element.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/controls/html-mask-element.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/controls/html-input-mask-element.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/controls/html-contenteditable-mask-element.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/controls/input-history.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/controls/input.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/core/change-details.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/core/continuous-tail-details.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/base.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/pattern/chunk-tail-details.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/pattern/cursor.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/pattern/fixed-definition.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/pattern/input-definition.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/regexp.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/pattern.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/range.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/date.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/dynamic.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/enum.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/function.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/number.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/pipe.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/masked/repeat.js","../../node_modules/.pnpm/imask@7.6.1/node_modules/imask/esm/index.js","../../src/blocks/input/input.js","../../node_modules/.pnpm/slim-select@2.9.2/node_modules/slim-select/dist/slimselect.js","../../src/blocks/request-form/request-form.js","../../src/blocks/select/select.js","../../node_modules/.pnpm/autosize@6.0.1/node_modules/autosize/dist/autosize.esm.js","../../src/blocks/textarea/textarea.js","../../src/js/utils/getScrollSize.js"],"sourcesContent":["\"use strict\";\n\nexport function ready(fn) {\n  if (document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\n    fn();\n  } else {\n    document.addEventListener(\"DOMContentLoaded\", fn);\n  }\n}\n","import { config } from \"./utils/bundleConfig.js\";\nimport { ready } from \"./utils/documentReady.js\";\n\nready(function () {\n  if (config.getScrollSize) {\n    // Adding a custom property with a system scroll width\n    import(\"./utils/getScrollSize.js\").then(({ default: getScrollSize }) => {\n      document.documentElement.style.setProperty(\"--css-scroll-size\", `${getScrollSize()}px`);\n    });\n  }\n});\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst EMAIL_REGEXP = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nconst INTEGER_REGEXP = /^-?[0-9]\\d*$/;\nconst PASSWORD_REGEXP = /^(?=.*[A-Za-z])(?=.*\\d).{8,}$/;\nconst STRONG_PASSWORD_REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\nconst isEmpty = (value) => {\n  let newVal = value;\n  if (typeof value === \"string\") {\n    newVal = value.trim();\n  }\n  return !newVal;\n};\nconst isEmail = (value) => {\n  return EMAIL_REGEXP.test(value);\n};\nconst isLengthMoreThanMax = (value, len) => {\n  return value.length > len;\n};\nconst isLengthLessThanMin = (value, len) => {\n  return value.length < len;\n};\nconst isNumber = (value) => {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  return !isNaN(+value) && !isNaN(parseFloat(value));\n};\nconst isInteger = (value) => {\n  return INTEGER_REGEXP.test(value);\n};\nconst isPassword = (value) => {\n  return PASSWORD_REGEXP.test(value);\n};\nconst isStrongPassword = (value) => {\n  return STRONG_PASSWORD_REGEXP.test(value);\n};\nconst isNumberMoreThanMax = (value, len) => {\n  return value > len;\n};\nconst isNumberLessThanMin = (value, len) => {\n  return value < len;\n};\nconst isInvalidOrEmptyString = (value) => {\n  return typeof value !== \"string\" || value === \"\";\n};\nvar Rules = /* @__PURE__ */ ((Rules2) => {\n  Rules2[\"Required\"] = \"required\";\n  Rules2[\"Email\"] = \"email\";\n  Rules2[\"MinLength\"] = \"minLength\";\n  Rules2[\"MaxLength\"] = \"maxLength\";\n  Rules2[\"Password\"] = \"password\";\n  Rules2[\"Number\"] = \"number\";\n  Rules2[\"Integer\"] = \"integer\";\n  Rules2[\"MaxNumber\"] = \"maxNumber\";\n  Rules2[\"MinNumber\"] = \"minNumber\";\n  Rules2[\"StrongPassword\"] = \"strongPassword\";\n  Rules2[\"CustomRegexp\"] = \"customRegexp\";\n  Rules2[\"MinFilesCount\"] = \"minFilesCount\";\n  Rules2[\"MaxFilesCount\"] = \"maxFilesCount\";\n  Rules2[\"Files\"] = \"files\";\n  return Rules2;\n})(Rules || {});\nvar GroupRules = /* @__PURE__ */ ((GroupRules2) => {\n  GroupRules2[\"Required\"] = \"required\";\n  return GroupRules2;\n})(GroupRules || {});\nvar CustomStyleTagIds = /* @__PURE__ */ ((CustomStyleTagIds2) => {\n  CustomStyleTagIds2[\"Label\"] = \"label\";\n  CustomStyleTagIds2[\"LabelArrow\"] = \"labelArrow\";\n  return CustomStyleTagIds2;\n})(CustomStyleTagIds || {});\nconst defaultDictionary = [\n  {\n    key: Rules.Required,\n    dict: {\n      en: \"The field is required\"\n    }\n  },\n  {\n    key: Rules.Email,\n    dict: {\n      en: \"Email has invalid format\"\n    }\n  },\n  {\n    key: Rules.MaxLength,\n    dict: {\n      en: \"The field must contain a maximum of :value characters\"\n    }\n  },\n  {\n    key: Rules.MinLength,\n    dict: {\n      en: \"The field must contain a minimum of :value characters\"\n    }\n  },\n  {\n    key: Rules.Password,\n    dict: {\n      en: \"Password must contain minimum eight characters, at least one letter and one number\"\n    }\n  },\n  {\n    key: Rules.StrongPassword,\n    dict: {\n      en: \"Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"\n    }\n  },\n  {\n    key: Rules.Number,\n    dict: {\n      en: \"Value should be a number\"\n    }\n  },\n  {\n    key: Rules.MaxNumber,\n    dict: {\n      en: \"Number should be less or equal than :value\"\n    }\n  },\n  {\n    key: Rules.MinNumber,\n    dict: {\n      en: \"Number should be more or equal than :value\"\n    }\n  },\n  {\n    key: Rules.MinFilesCount,\n    dict: {\n      en: \"Files count should be more or equal than :value\"\n    }\n  },\n  {\n    key: Rules.MaxFilesCount,\n    dict: {\n      en: \"Files count should be less or equal than :value\"\n    }\n  },\n  {\n    key: Rules.Files,\n    dict: {\n      en: \"Uploaded files have one or several invalid properties (extension/size/type etc).\"\n    }\n  }\n];\nconst DEFAULT_ERROR_FIELD_MESSAGE = \"Value is incorrect\";\nconst isPromise = (val) => typeof val === \"object\" && val !== null && \"then\" in val && typeof val.then === \"function\";\nconst getNodeParents = (el) => {\n  let elem = el;\n  const els = [];\n  while (elem) {\n    els.unshift(elem);\n    elem = elem.parentNode;\n  }\n  return els;\n};\nconst getClosestParent = (groups, parents) => {\n  const reversedParents = [...parents].reverse();\n  for (let i = 0, len = reversedParents.length; i < len; ++i) {\n    const parent = reversedParents[i];\n    for (const key in groups) {\n      const group = groups[key];\n      if (group.groupElem === parent) {\n        return [key, group];\n      }\n    }\n  }\n  return null;\n};\nconst getClassList = (classList) => {\n  if (Array.isArray(classList)) {\n    return classList.filter((cls) => cls.length > 0);\n  }\n  if (typeof classList === \"string\" && classList.trim()) {\n    return [...classList.split(\" \").filter((cls) => cls.length > 0)];\n  }\n  return [];\n};\nconst isElement = (element) => {\n  return element instanceof Element || element instanceof HTMLDocument;\n};\nconst errorLabelCss = `.just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}`;\nconst TOOLTIP_ARROW_HEIGHT = 5;\nconst defaultGlobalConfig = {\n  errorFieldStyle: {\n    color: \"#b81111\",\n    border: \"1px solid #B81111\"\n  },\n  errorFieldCssClass: \"just-validate-error-field\",\n  successFieldCssClass: \"just-validate-success-field\",\n  errorLabelStyle: {\n    color: \"#b81111\"\n  },\n  errorLabelCssClass: \"just-validate-error-label\",\n  successLabelCssClass: \"just-validate-success-label\",\n  focusInvalidField: true,\n  lockForm: true,\n  testingMode: false,\n  validateBeforeSubmitting: false,\n  submitFormAutomatically: false\n};\nclass JustValidate {\n  constructor(form, globalConfig, dictLocale) {\n    __publicField(this, \"form\", null);\n    __publicField(this, \"fields\", {});\n    __publicField(this, \"groupFields\", {});\n    __publicField(this, \"errors\", {});\n    __publicField(this, \"isValid\", false);\n    __publicField(this, \"isSubmitted\", false);\n    __publicField(this, \"globalConfig\", defaultGlobalConfig);\n    __publicField(this, \"errorLabels\", {});\n    __publicField(this, \"successLabels\", {});\n    __publicField(this, \"eventListeners\", []);\n    __publicField(this, \"dictLocale\", defaultDictionary);\n    __publicField(this, \"currentLocale\", \"en\");\n    __publicField(this, \"customStyleTags\", {});\n    __publicField(this, \"onSuccessCallback\");\n    __publicField(this, \"onFailCallback\");\n    __publicField(this, \"onValidateCallback\");\n    __publicField(this, \"tooltips\", []);\n    __publicField(this, \"lastScrollPosition\");\n    __publicField(this, \"isScrollTick\");\n    __publicField(this, \"fieldIds\", /* @__PURE__ */ new Map());\n    __publicField(this, \"getKeyByFieldSelector\", (field) => {\n      return this.fieldIds.get(field);\n    });\n    __publicField(this, \"getFieldSelectorByKey\", (key) => {\n      for (const [fieldSelector, k] of this.fieldIds) {\n        if (key === k) {\n          return fieldSelector;\n        }\n      }\n      return void 0;\n    });\n    __publicField(this, \"getCompatibleFields\", () => {\n      const fields = {};\n      Object.keys(this.fields).forEach((key) => {\n        let newKey = key;\n        const fieldSelector = this.getFieldSelectorByKey(key);\n        if (typeof fieldSelector === \"string\") {\n          newKey = fieldSelector;\n        }\n        fields[newKey] = { ...this.fields[key] };\n      });\n      return fields;\n    });\n    __publicField(this, \"setKeyByFieldSelector\", (field) => {\n      if (this.fieldIds.has(field)) {\n        return this.fieldIds.get(field);\n      }\n      const key = String(this.fieldIds.size + 1);\n      this.fieldIds.set(field, key);\n      return key;\n    });\n    __publicField(this, \"refreshAllTooltips\", () => {\n      this.tooltips.forEach((item) => {\n        item.refresh();\n      });\n    });\n    __publicField(this, \"handleDocumentScroll\", () => {\n      this.lastScrollPosition = window.scrollY;\n      if (!this.isScrollTick) {\n        window.requestAnimationFrame(() => {\n          this.refreshAllTooltips();\n          this.isScrollTick = false;\n        });\n        this.isScrollTick = true;\n      }\n    });\n    __publicField(this, \"formSubmitHandler\", (ev) => {\n      ev.preventDefault();\n      this.isSubmitted = true;\n      this.validateHandler(ev);\n    });\n    __publicField(this, \"handleFieldChange\", (target) => {\n      let foundKey;\n      for (const key in this.fields) {\n        const field = this.fields[key];\n        if (field.elem === target) {\n          foundKey = key;\n          break;\n        }\n      }\n      if (!foundKey) {\n        return;\n      }\n      this.fields[foundKey].touched = true;\n      this.validateField(foundKey, true);\n    });\n    __publicField(this, \"handleGroupChange\", (target) => {\n      let foundKey;\n      for (const key in this.groupFields) {\n        const group = this.groupFields[key];\n        if (group.elems.find((elem) => elem === target)) {\n          foundKey = key;\n          break;\n        }\n      }\n      if (!foundKey) {\n        return;\n      }\n      this.groupFields[foundKey].touched = true;\n      this.validateGroup(foundKey, true);\n    });\n    __publicField(this, \"handlerChange\", (ev) => {\n      if (!ev.target) {\n        return;\n      }\n      this.handleFieldChange(ev.target);\n      this.handleGroupChange(ev.target);\n      this.renderErrors();\n    });\n    this.initialize(form, globalConfig, dictLocale);\n  }\n  initialize(form, globalConfig, dictLocale) {\n    this.form = null;\n    this.errors = {};\n    this.isValid = false;\n    this.isSubmitted = false;\n    this.globalConfig = defaultGlobalConfig;\n    this.errorLabels = {};\n    this.successLabels = {};\n    this.eventListeners = [];\n    this.customStyleTags = {};\n    this.tooltips = [];\n    this.currentLocale = \"en\";\n    if (typeof form === \"string\") {\n      const elem = document.querySelector(form);\n      if (!elem) {\n        throw Error(\n          `Form with ${form} selector not found! Please check the form selector`\n        );\n      }\n      this.setForm(elem);\n    } else if (form instanceof HTMLFormElement) {\n      this.setForm(form);\n    } else {\n      throw Error(\n        `Form selector is not valid. Please specify a string selector or a DOM element.`\n      );\n    }\n    this.globalConfig = { ...defaultGlobalConfig, ...globalConfig };\n    if (dictLocale) {\n      this.dictLocale = [...dictLocale, ...defaultDictionary];\n    }\n    if (this.isTooltip()) {\n      const styleTag = document.createElement(\"style\");\n      styleTag.textContent = errorLabelCss;\n      this.customStyleTags[CustomStyleTagIds.Label] = document.head.appendChild(styleTag);\n      this.addListener(\"scroll\", document, this.handleDocumentScroll);\n    }\n  }\n  getLocalisedString(rule, ruleValue, customMsg) {\n    var _a;\n    const search = customMsg != null ? customMsg : rule;\n    let localisedStr = (_a = this.dictLocale.find((item) => item.key === search)) == null ? void 0 : _a.dict[this.currentLocale];\n    if (!localisedStr) {\n      if (customMsg) {\n        localisedStr = customMsg;\n      }\n    }\n    if (localisedStr && ruleValue !== void 0) {\n      switch (rule) {\n        case Rules.MaxLength:\n        case Rules.MinLength:\n        case Rules.MaxNumber:\n        case Rules.MinNumber:\n        case Rules.MinFilesCount:\n        case Rules.MaxFilesCount:\n          localisedStr = localisedStr.replace(\":value\", String(ruleValue));\n      }\n    }\n    return localisedStr || customMsg || DEFAULT_ERROR_FIELD_MESSAGE;\n  }\n  getFieldErrorMessage(fieldRule, elem) {\n    const msg = typeof fieldRule.errorMessage === \"function\" ? fieldRule.errorMessage(this.getElemValue(elem), this.fields) : fieldRule.errorMessage;\n    return this.getLocalisedString(fieldRule.rule, fieldRule.value, msg);\n  }\n  getFieldSuccessMessage(successMessage, elem) {\n    const msg = typeof successMessage === \"function\" ? successMessage(this.getElemValue(elem), this.fields) : successMessage;\n    return this.getLocalisedString(void 0, void 0, msg);\n  }\n  getGroupErrorMessage(groupRule) {\n    return this.getLocalisedString(\n      groupRule.rule,\n      void 0,\n      groupRule.errorMessage\n    );\n  }\n  getGroupSuccessMessage(groupRule) {\n    if (!groupRule.successMessage) {\n      return void 0;\n    }\n    return this.getLocalisedString(\n      void 0,\n      void 0,\n      groupRule.successMessage\n    );\n  }\n  setFieldInvalid(key, fieldRule) {\n    this.fields[key].isValid = false;\n    this.fields[key].errorMessage = this.getFieldErrorMessage(\n      fieldRule,\n      this.fields[key].elem\n    );\n  }\n  setFieldValid(key, successMessage) {\n    this.fields[key].isValid = true;\n    if (successMessage !== void 0) {\n      this.fields[key].successMessage = this.getFieldSuccessMessage(\n        successMessage,\n        this.fields[key].elem\n      );\n    }\n  }\n  setGroupInvalid(key, groupRule) {\n    this.groupFields[key].isValid = false;\n    this.groupFields[key].errorMessage = this.getGroupErrorMessage(groupRule);\n  }\n  setGroupValid(key, groupRule) {\n    this.groupFields[key].isValid = true;\n    this.groupFields[key].successMessage = this.getGroupSuccessMessage(groupRule);\n  }\n  getElemValue(elem) {\n    switch (elem.type) {\n      case \"checkbox\":\n        return elem.checked;\n      case \"file\":\n        return elem.files;\n      default:\n        return elem.value;\n    }\n  }\n  validateGroupRule(key, elems, groupRule) {\n    switch (groupRule.rule) {\n      case GroupRules.Required: {\n        if (elems.every((elem) => !elem.checked)) {\n          this.setGroupInvalid(key, groupRule);\n        } else {\n          this.setGroupValid(key, groupRule);\n        }\n      }\n    }\n  }\n  validateFieldRule(key, elem, fieldRule, afterInputChanged = false) {\n    const ruleValue = fieldRule.value;\n    const elemValue = this.getElemValue(elem);\n    if (fieldRule.plugin) {\n      const result = fieldRule.plugin(\n        elemValue,\n        this.getCompatibleFields()\n      );\n      if (!result) {\n        this.setFieldInvalid(key, fieldRule);\n      }\n      return;\n    }\n    switch (fieldRule.rule) {\n      case Rules.Required: {\n        if (isEmpty(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Email: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isEmail(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MaxLength: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (isLengthMoreThanMax(elemValue, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MinLength: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (isLengthLessThanMin(elemValue, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Password: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isPassword(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.StrongPassword: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isStrongPassword(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Number: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isNumber(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Integer: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isInteger(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MaxNumber: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        const num = +elemValue;\n        if (Number.isNaN(num) || isNumberMoreThanMax(num, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MinNumber: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        const num = +elemValue;\n        if (Number.isNaN(num) || isNumberLessThanMin(num, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.CustomRegexp: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        let regexp;\n        try {\n          regexp = new RegExp(ruleValue);\n        } catch (e) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] should be a valid regexp. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        const str = String(elemValue);\n        if (str !== \"\" && !regexp.test(str)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MinFilesCount: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length < ruleValue) {\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        break;\n      }\n      case Rules.MaxFilesCount: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length > ruleValue) {\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        break;\n      }\n      case Rules.Files: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        if (typeof ruleValue !== \"object\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be an object. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        const filesConfig = ruleValue.files;\n        if (typeof filesConfig !== \"object\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be an object with files array. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        const isFilePropsInvalid = (file, fileConfig) => {\n          const minSizeInvalid = Number.isFinite(fileConfig.minSize) && file.size < fileConfig.minSize;\n          const maxSizeInvalid = Number.isFinite(fileConfig.maxSize) && file.size > fileConfig.maxSize;\n          const nameInvalid = Array.isArray(fileConfig.names) && !fileConfig.names.includes(file.name);\n          const extInvalid = Array.isArray(fileConfig.extensions) && !fileConfig.extensions.includes(\n            file.name.split(\".\")[file.name.split(\".\").length - 1]\n          );\n          const typeInvalid = Array.isArray(fileConfig.types) && !fileConfig.types.includes(file.type);\n          return minSizeInvalid || maxSizeInvalid || nameInvalid || extInvalid || typeInvalid;\n        };\n        if (typeof elemValue === \"object\" && elemValue !== null) {\n          for (let fileIdx = 0, len = elemValue.length; fileIdx < len; ++fileIdx) {\n            const file = elemValue.item(fileIdx);\n            if (!file) {\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            const filesInvalid = isFilePropsInvalid(file, filesConfig);\n            if (filesInvalid) {\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n          }\n        }\n        break;\n      }\n      default: {\n        if (typeof fieldRule.validator !== \"function\") {\n          console.error(\n            `Validator for custom rule for [${key}] field should be a function. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        const result = fieldRule.validator(\n          elemValue,\n          this.getCompatibleFields()\n        );\n        if (typeof result !== \"boolean\" && typeof result !== \"function\") {\n          console.error(\n            `Validator return value for [${key}] field should be boolean or function. It will be cast to boolean.`\n          );\n        }\n        if (typeof result === \"function\") {\n          if (afterInputChanged) {\n            this.fields[key].asyncCheckPending = true;\n          } else {\n            this.fields[key].asyncCheckPending = false;\n            const promise = result();\n            if (!isPromise(promise)) {\n              console.error(\n                `Validator function for custom rule for [${key}] field should return a Promise. This field will be always invalid.`\n              );\n              this.setFieldInvalid(key, fieldRule);\n              return;\n            }\n            return promise.then((resp) => {\n              if (!resp) {\n                this.setFieldInvalid(key, fieldRule);\n              }\n            }).catch(() => {\n              this.setFieldInvalid(key, fieldRule);\n            });\n          }\n        }\n        if (!result) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n      }\n    }\n  }\n  isFormValid() {\n    let isValid = true;\n    for (let i = 0, len = Object.values(this.fields).length; i < len; ++i) {\n      const item = Object.values(this.fields)[i];\n      if (item.isValid === void 0) {\n        isValid = void 0;\n        break;\n      }\n      if (item.isValid === false) {\n        isValid = false;\n        break;\n      }\n    }\n    for (let i = 0, len = Object.values(this.groupFields).length; i < len; ++i) {\n      const item = Object.values(this.groupFields)[i];\n      if (item.isValid === void 0) {\n        isValid = void 0;\n        break;\n      }\n      if (item.isValid === false) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  }\n  validateField(key, afterInputChanged = false) {\n    var _a;\n    const field = this.fields[key];\n    field.isValid = true;\n    const promises = [];\n    [...field.rules].reverse().forEach((rule) => {\n      const res = this.validateFieldRule(\n        key,\n        field.elem,\n        rule,\n        afterInputChanged\n      );\n      if (isPromise(res)) {\n        promises.push(res);\n      }\n    });\n    if (field.isValid) {\n      this.setFieldValid(key, (_a = field.config) == null ? void 0 : _a.successMessage);\n    }\n    return Promise.allSettled(promises).finally(() => {\n      var _a2;\n      if (afterInputChanged) {\n        (_a2 = this.onValidateCallback) == null ? void 0 : _a2.call(this, {\n          isValid: this.isFormValid(),\n          isSubmitted: this.isSubmitted,\n          fields: this.getCompatibleFields(),\n          groups: { ...this.groupFields }\n        });\n      }\n    });\n  }\n  revalidateField(fieldSelector) {\n    if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n      throw Error(\n        `Field selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(fieldSelector);\n    if (!key || !this.fields[key]) {\n      console.error(`Field not found. Check the field selector.`);\n      return Promise.reject();\n    }\n    return new Promise((resolve) => {\n      this.validateField(key, true).finally(() => {\n        this.clearFieldStyle(key);\n        this.clearFieldLabel(key);\n        this.renderFieldError(key, true);\n        resolve(!!this.fields[key].isValid);\n      });\n    });\n  }\n  revalidateGroup(groupSelector) {\n    if (typeof groupSelector !== \"string\" && !isElement(groupSelector)) {\n      throw Error(\n        `Group selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(groupSelector);\n    if (!key || !this.groupFields[key]) {\n      console.error(`Group not found. Check the group selector.`);\n      return Promise.reject();\n    }\n    return new Promise((resolve) => {\n      this.validateGroup(key).finally(() => {\n        this.clearFieldLabel(key);\n        this.renderGroupError(key, true);\n        resolve(!!this.groupFields[key].isValid);\n      });\n    });\n  }\n  validateGroup(key, afterInputChanged = false) {\n    const group = this.groupFields[key];\n    const promises = [];\n    [...group.rules].reverse().forEach((rule) => {\n      const res = this.validateGroupRule(key, group.elems, rule);\n      if (isPromise(res)) {\n        promises.push(res);\n      }\n    });\n    return Promise.allSettled(promises).finally(() => {\n      var _a;\n      if (afterInputChanged) {\n        (_a = this.onValidateCallback) == null ? void 0 : _a.call(this, {\n          isValid: this.isFormValid(),\n          isSubmitted: this.isSubmitted,\n          fields: this.getCompatibleFields(),\n          groups: { ...this.groupFields }\n        });\n      }\n    });\n  }\n  focusInvalidField() {\n    for (const key in this.fields) {\n      const field = this.fields[key];\n      if (!field.isValid) {\n        setTimeout(() => field.elem.focus(), 0);\n        break;\n      }\n    }\n  }\n  afterSubmitValidation(forceRevalidation = false) {\n    this.renderErrors(forceRevalidation);\n    if (this.globalConfig.focusInvalidField) {\n      this.focusInvalidField();\n    }\n  }\n  validate(forceRevalidation = false) {\n    return new Promise((resolve) => {\n      const promises = [];\n      Object.keys(this.fields).forEach((key) => {\n        const promise = this.validateField(key);\n        if (isPromise(promise)) {\n          promises.push(promise);\n        }\n      });\n      Object.keys(this.groupFields).forEach((key) => {\n        const promise = this.validateGroup(key);\n        if (isPromise(promise)) {\n          promises.push(promise);\n        }\n      });\n      Promise.allSettled(promises).then(() => {\n        var _a;\n        this.afterSubmitValidation(forceRevalidation);\n        (_a = this.onValidateCallback) == null ? void 0 : _a.call(this, {\n          isValid: this.isFormValid(),\n          isSubmitted: this.isSubmitted,\n          fields: this.getCompatibleFields(),\n          groups: { ...this.groupFields }\n        });\n        resolve(!!promises.length);\n      });\n    });\n  }\n  revalidate() {\n    return new Promise((resolve) => {\n      this.validateHandler(void 0, true).finally(() => {\n        if (this.globalConfig.focusInvalidField) {\n          this.focusInvalidField();\n        }\n        resolve(this.isValid);\n      });\n    });\n  }\n  validateHandler(ev, forceRevalidation = false) {\n    if (this.globalConfig.lockForm) {\n      this.lockForm();\n    }\n    return this.validate(forceRevalidation).finally(() => {\n      var _a, _b, _c;\n      if (this.globalConfig.lockForm) {\n        this.unlockForm();\n      }\n      if (this.isValid) {\n        (_a = this.onSuccessCallback) == null ? void 0 : _a.call(this, ev);\n        if (this.globalConfig.submitFormAutomatically) {\n          (_b = ev == null ? void 0 : ev.currentTarget) == null ? void 0 : _b.submit();\n        }\n      } else {\n        (_c = this.onFailCallback) == null ? void 0 : _c.call(this, this.getCompatibleFields(), this.groupFields);\n      }\n    });\n  }\n  setForm(form) {\n    this.form = form;\n    this.form.setAttribute(\"novalidate\", \"novalidate\");\n    this.removeListener(\"submit\", this.form, this.formSubmitHandler);\n    this.addListener(\"submit\", this.form, this.formSubmitHandler);\n  }\n  addListener(type, elem, handler) {\n    elem.addEventListener(type, handler);\n    this.eventListeners.push({ type, elem, func: handler });\n  }\n  removeListener(type, elem, handler) {\n    elem.removeEventListener(type, handler);\n    this.eventListeners = this.eventListeners.filter(\n      (item) => item.type !== type || item.elem !== elem\n    );\n  }\n  addField(fieldSelector, rules, config) {\n    if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n      throw Error(\n        `Field selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    let elem;\n    if (typeof fieldSelector === \"string\") {\n      elem = this.form.querySelector(fieldSelector);\n    } else {\n      elem = fieldSelector;\n    }\n    if (!elem) {\n      throw Error(\n        `Field doesn't exist in the DOM! Please check the field selector.`\n      );\n    }\n    if (!Array.isArray(rules) || !rules.length) {\n      throw Error(\n        `Rules argument should be an array and should contain at least 1 element.`\n      );\n    }\n    rules.forEach((item) => {\n      if (!(\"rule\" in item || \"validator\" in item || \"plugin\" in item)) {\n        throw Error(\n          `Rules argument must contain at least one rule or validator property.`\n        );\n      }\n      if (!item.validator && !item.plugin && (!item.rule || !Object.values(Rules).includes(item.rule))) {\n        throw Error(\n          `Rule should be one of these types: ${Object.values(Rules).join(\n            \", \"\n          )}. Provided value: ${item.rule}`\n        );\n      }\n    });\n    const key = this.setKeyByFieldSelector(fieldSelector);\n    this.fields[key] = {\n      elem,\n      rules,\n      isValid: void 0,\n      touched: false,\n      config\n    };\n    this.setListeners(elem);\n    if (this.isSubmitted || this.globalConfig.validateBeforeSubmitting) {\n      this.validateField(key);\n    }\n    return this;\n  }\n  removeField(fieldSelector) {\n    if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n      throw Error(\n        `Field selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(fieldSelector);\n    if (!key || !this.fields[key]) {\n      console.error(`Field not found. Check the field selector.`);\n      return this;\n    }\n    const type = this.getListenerType(this.fields[key].elem.type);\n    this.removeListener(type, this.fields[key].elem, this.handlerChange);\n    this.clearErrors();\n    delete this.fields[key];\n    return this;\n  }\n  removeGroup(group) {\n    if (typeof group !== \"string\") {\n      throw Error(\n        `Group selector is not valid. Please specify a string selector.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(group);\n    if (!key || !this.groupFields[key]) {\n      console.error(`Group not found. Check the group selector.`);\n      return this;\n    }\n    this.groupFields[key].elems.forEach((elem) => {\n      const type = this.getListenerType(elem.type);\n      this.removeListener(type, elem, this.handlerChange);\n    });\n    this.clearErrors();\n    delete this.groupFields[key];\n    return this;\n  }\n  addRequiredGroup(groupField, errorMessage, config, successMessage) {\n    if (typeof groupField !== \"string\" && !isElement(groupField)) {\n      throw Error(\n        `Group selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    let elem;\n    if (typeof groupField === \"string\") {\n      elem = this.form.querySelector(groupField);\n    } else {\n      elem = groupField;\n    }\n    if (!elem) {\n      throw Error(`Group selector not found! Please check the group selector.`);\n    }\n    const inputs = elem.querySelectorAll(\"input\");\n    const childrenInputs = Array.from(inputs).filter((input) => {\n      const parent = getClosestParent(this.groupFields, getNodeParents(input));\n      if (!parent) {\n        return true;\n      }\n      return parent[1].elems.find((elem2) => elem2 !== input);\n    });\n    const key = this.setKeyByFieldSelector(groupField);\n    this.groupFields[key] = {\n      rules: [\n        {\n          rule: GroupRules.Required,\n          errorMessage,\n          successMessage\n        }\n      ],\n      groupElem: elem,\n      elems: childrenInputs,\n      touched: false,\n      isValid: void 0,\n      config\n    };\n    inputs.forEach((input) => {\n      this.setListeners(input);\n    });\n    return this;\n  }\n  getListenerType(type) {\n    switch (type) {\n      case \"checkbox\":\n      case \"select-one\":\n      case \"file\":\n      case \"radio\": {\n        return \"change\";\n      }\n      default: {\n        return \"input\";\n      }\n    }\n  }\n  setListeners(elem) {\n    const type = this.getListenerType(elem.type);\n    this.removeListener(type, elem, this.handlerChange);\n    this.addListener(type, elem, this.handlerChange);\n  }\n  clearFieldLabel(key) {\n    var _a, _b;\n    (_a = this.errorLabels[key]) == null ? void 0 : _a.remove();\n    (_b = this.successLabels[key]) == null ? void 0 : _b.remove();\n  }\n  clearFieldStyle(key) {\n    var _a, _b, _c, _d;\n    const field = this.fields[key];\n    const errorStyle = ((_a = field.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;\n    Object.keys(errorStyle).forEach((key2) => {\n      field.elem.style[key2] = \"\";\n    });\n    const successStyle = ((_b = field.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};\n    Object.keys(successStyle).forEach((key2) => {\n      field.elem.style[key2] = \"\";\n    });\n    field.elem.classList.remove(\n      ...getClassList(\n        ((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n      ),\n      ...getClassList(\n        ((_d = field.config) == null ? void 0 : _d.successFieldCssClass) || this.globalConfig.successFieldCssClass\n      )\n    );\n  }\n  clearErrors() {\n    var _a, _b;\n    Object.keys(this.errorLabels).forEach(\n      (key) => this.errorLabels[key].remove()\n    );\n    Object.keys(this.successLabels).forEach(\n      (key) => this.successLabels[key].remove()\n    );\n    for (const key in this.fields) {\n      this.clearFieldStyle(key);\n    }\n    for (const key in this.groupFields) {\n      const group = this.groupFields[key];\n      const errorStyle = ((_a = group.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;\n      Object.keys(errorStyle).forEach((key2) => {\n        group.elems.forEach((elem) => {\n          var _a2;\n          elem.style[key2] = \"\";\n          elem.classList.remove(\n            ...getClassList(\n              ((_a2 = group.config) == null ? void 0 : _a2.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n            )\n          );\n        });\n      });\n      const successStyle = ((_b = group.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};\n      Object.keys(successStyle).forEach((key2) => {\n        group.elems.forEach((elem) => {\n          var _a2;\n          elem.style[key2] = \"\";\n          elem.classList.remove(\n            ...getClassList(\n              ((_a2 = group.config) == null ? void 0 : _a2.successFieldCssClass) || this.globalConfig.successFieldCssClass\n            )\n          );\n        });\n      });\n    }\n    this.tooltips = [];\n  }\n  isTooltip() {\n    return !!this.globalConfig.tooltip;\n  }\n  lockForm() {\n    const elems = this.form.querySelectorAll(\n      \"input, textarea, button, select\"\n    );\n    for (let i = 0, len = elems.length; i < len; ++i) {\n      elems[i].setAttribute(\n        \"data-just-validate-fallback-disabled\",\n        elems[i].disabled ? \"true\" : \"false\"\n      );\n      elems[i].setAttribute(\"disabled\", \"disabled\");\n      elems[i].style.pointerEvents = \"none\";\n      elems[i].style.webkitFilter = \"grayscale(100%)\";\n      elems[i].style.filter = \"grayscale(100%)\";\n    }\n  }\n  unlockForm() {\n    const elems = this.form.querySelectorAll(\n      \"input, textarea, button, select\"\n    );\n    for (let i = 0, len = elems.length; i < len; ++i) {\n      if (elems[i].getAttribute(\"data-just-validate-fallback-disabled\") !== \"true\") {\n        elems[i].removeAttribute(\"disabled\");\n      }\n      elems[i].style.pointerEvents = \"\";\n      elems[i].style.webkitFilter = \"\";\n      elems[i].style.filter = \"\";\n    }\n  }\n  renderTooltip(elem, errorLabel, position) {\n    var _a;\n    const { top, left, width, height } = elem.getBoundingClientRect();\n    const errorLabelRect = errorLabel.getBoundingClientRect();\n    const pos = position || ((_a = this.globalConfig.tooltip) == null ? void 0 : _a.position);\n    switch (pos) {\n      case \"left\": {\n        errorLabel.style.top = `${top + height / 2 - errorLabelRect.height / 2}px`;\n        errorLabel.style.left = `${left - errorLabelRect.width - TOOLTIP_ARROW_HEIGHT}px`;\n        break;\n      }\n      case \"top\": {\n        errorLabel.style.top = `${top - errorLabelRect.height - TOOLTIP_ARROW_HEIGHT}px`;\n        errorLabel.style.left = `${left + width / 2 - errorLabelRect.width / 2}px`;\n        break;\n      }\n      case \"right\": {\n        errorLabel.style.top = `${top + height / 2 - errorLabelRect.height / 2}px`;\n        errorLabel.style.left = `${left + width + TOOLTIP_ARROW_HEIGHT}px`;\n        break;\n      }\n      case \"bottom\": {\n        errorLabel.style.top = `${top + height + TOOLTIP_ARROW_HEIGHT}px`;\n        errorLabel.style.left = `${left + width / 2 - errorLabelRect.width / 2}px`;\n        break;\n      }\n    }\n    errorLabel.dataset.direction = pos;\n    const refresh = () => {\n      this.renderTooltip(elem, errorLabel, position);\n    };\n    return {\n      refresh\n    };\n  }\n  createErrorLabelElem(key, errorMessage, config) {\n    const errorLabel = document.createElement(\"div\");\n    errorLabel.innerHTML = errorMessage;\n    const customErrorLabelStyle = this.isTooltip() ? config == null ? void 0 : config.errorLabelStyle : (config == null ? void 0 : config.errorLabelStyle) || this.globalConfig.errorLabelStyle;\n    Object.assign(errorLabel.style, customErrorLabelStyle);\n    errorLabel.classList.add(\n      ...getClassList(\n        (config == null ? void 0 : config.errorLabelCssClass) || this.globalConfig.errorLabelCssClass\n      ),\n      \"just-validate-error-label\"\n    );\n    if (this.isTooltip()) {\n      errorLabel.dataset.tooltip = \"true\";\n    }\n    if (this.globalConfig.testingMode) {\n      errorLabel.dataset.testId = `error-label-${key}`;\n    }\n    this.errorLabels[key] = errorLabel;\n    return errorLabel;\n  }\n  createSuccessLabelElem(key, successMessage, config) {\n    if (successMessage === void 0) {\n      return null;\n    }\n    const successLabel = document.createElement(\"div\");\n    successLabel.innerHTML = successMessage;\n    const customSuccessLabelStyle = (config == null ? void 0 : config.successLabelStyle) || this.globalConfig.successLabelStyle;\n    Object.assign(successLabel.style, customSuccessLabelStyle);\n    successLabel.classList.add(\n      ...getClassList(\n        (config == null ? void 0 : config.successLabelCssClass) || this.globalConfig.successLabelCssClass\n      ),\n      \"just-validate-success-label\"\n    );\n    if (this.globalConfig.testingMode) {\n      successLabel.dataset.testId = `success-label-${key}`;\n    }\n    this.successLabels[key] = successLabel;\n    return successLabel;\n  }\n  renderErrorsContainer(label, errorsContainer) {\n    const container = errorsContainer || this.globalConfig.errorsContainer;\n    if (typeof container === \"string\") {\n      const elem = this.form.querySelector(container);\n      if (elem) {\n        elem.appendChild(label);\n        return true;\n      } else {\n        console.error(\n          `Error container with ${container} selector not found. Errors will be rendered as usual`\n        );\n      }\n    }\n    if (container instanceof Element) {\n      container.appendChild(label);\n      return true;\n    }\n    if (container !== void 0) {\n      console.error(\n        `Error container not found. It should be a string or existing Element. Errors will be rendered as usual`\n      );\n    }\n    return false;\n  }\n  renderGroupLabel(elem, label, errorsContainer, isSuccess) {\n    if (!isSuccess) {\n      const renderedInErrorsContainer = this.renderErrorsContainer(\n        label,\n        errorsContainer\n      );\n      if (renderedInErrorsContainer) {\n        return;\n      }\n    }\n    elem.appendChild(label);\n  }\n  renderFieldLabel(elem, label, errorsContainer, isSuccess) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (!isSuccess) {\n      const renderedInErrorsContainer = this.renderErrorsContainer(\n        label,\n        errorsContainer\n      );\n      if (renderedInErrorsContainer) {\n        return;\n      }\n    }\n    if (elem.type === \"checkbox\" || elem.type === \"radio\") {\n      const labelElem = document.querySelector(\n        `label[for=\"${elem.getAttribute(\"id\")}\"]`\n      );\n      if (((_b = (_a = elem.parentElement) == null ? void 0 : _a.tagName) == null ? void 0 : _b.toLowerCase()) === \"label\") {\n        (_d = (_c = elem.parentElement) == null ? void 0 : _c.parentElement) == null ? void 0 : _d.appendChild(label);\n      } else if (labelElem) {\n        (_e = labelElem.parentElement) == null ? void 0 : _e.appendChild(label);\n      } else {\n        (_f = elem.parentElement) == null ? void 0 : _f.appendChild(label);\n      }\n    } else {\n      (_g = elem.parentElement) == null ? void 0 : _g.appendChild(label);\n    }\n  }\n  showLabels(fields, isError) {\n    Object.keys(fields).forEach((fieldName, i) => {\n      const error = fields[fieldName];\n      const key = this.getKeyByFieldSelector(fieldName);\n      if (!key || !this.fields[key]) {\n        console.error(`Field not found. Check the field selector.`);\n        return;\n      }\n      const field = this.fields[key];\n      field.isValid = !isError;\n      this.clearFieldStyle(key);\n      this.clearFieldLabel(key);\n      this.renderFieldError(key, false, error);\n      if (i === 0 && this.globalConfig.focusInvalidField) {\n        setTimeout(() => field.elem.focus(), 0);\n      }\n    });\n  }\n  showErrors(fields) {\n    if (typeof fields !== \"object\") {\n      throw Error(\n        \"[showErrors]: Errors should be an object with key: value format\"\n      );\n    }\n    this.showLabels(fields, true);\n  }\n  showSuccessLabels(fields) {\n    if (typeof fields !== \"object\") {\n      throw Error(\n        \"[showSuccessLabels]: Labels should be an object with key: value format\"\n      );\n    }\n    this.showLabels(fields, false);\n  }\n  renderFieldError(key, forced = false, message) {\n    var _a, _b, _c, _d, _e, _f;\n    const field = this.fields[key];\n    if (field.isValid === false) {\n      this.isValid = false;\n    }\n    if (field.isValid === void 0 || !forced && !this.isSubmitted && !field.touched && message === void 0) {\n      return;\n    }\n    if (field.isValid) {\n      if (!field.asyncCheckPending) {\n        const successLabel = this.createSuccessLabelElem(\n          key,\n          message !== void 0 ? message : field.successMessage,\n          field.config\n        );\n        if (successLabel) {\n          this.renderFieldLabel(\n            field.elem,\n            successLabel,\n            (_a = field.config) == null ? void 0 : _a.errorsContainer,\n            true\n          );\n        }\n        field.elem.classList.add(\n          ...getClassList(\n            ((_b = field.config) == null ? void 0 : _b.successFieldCssClass) || this.globalConfig.successFieldCssClass\n          )\n        );\n      }\n      return;\n    }\n    field.elem.classList.add(\n      ...getClassList(\n        ((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n      )\n    );\n    const errorLabel = this.createErrorLabelElem(\n      key,\n      message !== void 0 ? message : field.errorMessage,\n      field.config\n    );\n    this.renderFieldLabel(\n      field.elem,\n      errorLabel,\n      (_d = field.config) == null ? void 0 : _d.errorsContainer\n    );\n    if (this.isTooltip()) {\n      this.tooltips.push(\n        this.renderTooltip(\n          field.elem,\n          errorLabel,\n          (_f = (_e = field.config) == null ? void 0 : _e.tooltip) == null ? void 0 : _f.position\n        )\n      );\n    }\n  }\n  renderGroupError(key, force = true) {\n    var _a, _b, _c, _d;\n    const group = this.groupFields[key];\n    if (group.isValid === false) {\n      this.isValid = false;\n    }\n    if (group.isValid === void 0 || !force && !this.isSubmitted && !group.touched) {\n      return;\n    }\n    if (group.isValid) {\n      group.elems.forEach((elem) => {\n        var _a2, _b2;\n        Object.assign(\n          elem.style,\n          ((_a2 = group.config) == null ? void 0 : _a2.successFieldStyle) || this.globalConfig.successFieldStyle\n        );\n        elem.classList.add(\n          ...getClassList(\n            ((_b2 = group.config) == null ? void 0 : _b2.successFieldCssClass) || this.globalConfig.successFieldCssClass\n          )\n        );\n      });\n      const successLabel = this.createSuccessLabelElem(\n        key,\n        group.successMessage,\n        group.config\n      );\n      if (successLabel) {\n        this.renderGroupLabel(\n          group.groupElem,\n          successLabel,\n          (_a = group.config) == null ? void 0 : _a.errorsContainer,\n          true\n        );\n      }\n      return;\n    }\n    this.isValid = false;\n    group.elems.forEach((elem) => {\n      var _a2, _b2;\n      Object.assign(\n        elem.style,\n        ((_a2 = group.config) == null ? void 0 : _a2.errorFieldStyle) || this.globalConfig.errorFieldStyle\n      );\n      elem.classList.add(\n        ...getClassList(\n          ((_b2 = group.config) == null ? void 0 : _b2.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n        )\n      );\n    });\n    const errorLabel = this.createErrorLabelElem(\n      key,\n      group.errorMessage,\n      group.config\n    );\n    this.renderGroupLabel(\n      group.groupElem,\n      errorLabel,\n      (_b = group.config) == null ? void 0 : _b.errorsContainer\n    );\n    if (this.isTooltip()) {\n      this.tooltips.push(\n        this.renderTooltip(\n          group.groupElem,\n          errorLabel,\n          (_d = (_c = group.config) == null ? void 0 : _c.tooltip) == null ? void 0 : _d.position\n        )\n      );\n    }\n  }\n  renderErrors(forceRevalidation = false) {\n    if (!this.isSubmitted && !forceRevalidation && !this.globalConfig.validateBeforeSubmitting) {\n      return;\n    }\n    this.clearErrors();\n    this.isValid = true;\n    for (const key in this.groupFields) {\n      this.renderGroupError(key);\n    }\n    for (const key in this.fields) {\n      this.renderFieldError(key);\n    }\n  }\n  destroy() {\n    this.eventListeners.forEach((event) => {\n      this.removeListener(event.type, event.elem, event.func);\n    });\n    Object.keys(this.customStyleTags).forEach((key) => {\n      this.customStyleTags[key].remove();\n    });\n    this.clearErrors();\n    if (this.globalConfig.lockForm) {\n      this.unlockForm();\n    }\n  }\n  refresh() {\n    this.destroy();\n    if (!this.form) {\n      console.error(\"Cannot initialize the library! Form is not defined\");\n    } else {\n      this.initialize(this.form, this.globalConfig);\n      Object.keys(this.fields).forEach((key) => {\n        const fieldSelector = this.getFieldSelectorByKey(key);\n        if (fieldSelector) {\n          this.addField(\n            fieldSelector,\n            [...this.fields[key].rules],\n            this.fields[key].config\n          );\n        }\n      });\n    }\n  }\n  setCurrentLocale(locale) {\n    if (typeof locale !== \"string\" && locale !== void 0) {\n      console.error(\"Current locale should be a string\");\n      return;\n    }\n    this.currentLocale = locale;\n    if (this.isSubmitted) {\n      this.validate();\n    }\n  }\n  onSuccess(callback) {\n    this.onSuccessCallback = callback;\n    return this;\n  }\n  onFail(callback) {\n    this.onFailCallback = callback;\n    return this;\n  }\n  onValidate(callback) {\n    this.onValidateCallback = callback;\n    return this;\n  }\n}\nexport {\n  CustomStyleTagIds,\n  GroupRules,\n  Rules,\n  JustValidate as default\n};\n","export const validationFormConfig = {\n  errorFieldCssClass: \"input--invalid\",\n  errorLabelStyle: {},\n  errorLabelCssClass: [\"form__field-error\"],\n};\n\nconst requiredFieldValidationRule = {\n  rule: \"required\",\n  errorMessage: \"Обязательное поле\",\n};\n\nexport const phoneFieldValidationRules = [\n  requiredFieldValidationRule,\n  {\n    rule: \"customRegexp\",\n    value: /^(\\+7)[\\s-]\\(([0-9]{3})\\)[\\s-]([0-9]{3})[\\s-]([0-9]{2})[\\s-]([0-9]{2})/gi,\n    errorMessage: \"Неверное значение\",\n  },\n];\n\nexport const textFieldValidationRules = [\n  requiredFieldValidationRule,\n  {\n    rule: \"minLength\",\n    value: 2,\n    errorMessage: \"Значение слишком короткое\",\n  },\n  {\n    rule: \"maxLength\",\n    value: 50,\n    errorMessage: \"Значение слишком длинное\",\n  },\n];\n\nexport const emailFieldValidationRules = [\n  requiredFieldValidationRule,\n  {\n    rule: \"email\",\n    errorMessage: \"Неверное значение\",\n  },\n];\n\nexport const requiredFieldValidationRules = [requiredFieldValidationRule];\n\nexport const integerFieldValidationRules = [\n  requiredFieldValidationRule,\n  {\n    rule: \"integer\",\n    errorMessage: \"Введите число\",\n  },\n];\n\nexport const selectFieldValidationConfig = {\n  errorFieldCssClass: \"select--invalid\",\n};\n\nexport function formSendConfig(plainFormData) {\n  return {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\",\n    },\n    body: JSON.stringify(plainFormData),\n  };\n}\n\nexport const onValidationSuccess = (form, actionUrl, success, error) => {\n  const formData = new FormData(form);\n  const plainFormData = Object.fromEntries(formData.entries());\n  fetch(actionUrl, formSendConfig(plainFormData)).then((response) => {\n    if (response.ok) {\n      success();\n    } else {\n      error();\n    }\n  });\n};\n\nexport const isSelectHasValue = (select) => {\n  if (select.value.length !== 0) select.classList.add(\"select--has-value\");\n  select.addEventListener(\"change\", function () {\n    this.value.length !== 0 ? this.classList.add(\"select--has-value\") : this.classList.remove(\"select--has-value\");\n  });\n};\n","import { ready } from \"../../js/utils/documentReady.js\";\nimport JustValidate from \"just-validate\";\nimport {\n  validationFormConfig,\n  phoneFieldValidationRules,\n  textFieldValidationRules,\n  emailFieldValidationRules,\n  requiredFieldValidationRules,\n  integerFieldValidationRules,\n  selectFieldValidationConfig,\n  onValidationSuccess,\n} from \"../../js/common/formVariables.js\";\n\nconst successFn = () => {\n  alert(\"success\");\n};\nconst errorFn = () => {\n  alert(\"error\");\n};\n\nready(function () {\n  const formMyData = document.querySelector(\"#formMyData\");\n  const formPayment = document.querySelector(\"#formPayment\");\n  const formFeedBack = document.querySelector(\"#formFeedBack\");\n  const formAddFile = document.querySelector(\"#formAddFile\");\n\n  const formVisa = document.querySelector(\"#formVisa\");\n  const formAtes = document.querySelector(\"#formAtes\");\n  const formWork = document.querySelector(\"#formWork\");\n  const formCitizenship = document.querySelector(\"#formCitizenship\");\n  const formIntPassport = document.querySelector(\"#formIntPassport\");\n  const formInvite = document.querySelector(\"#formInvite\");\n  const formAvia = document.querySelector(\"#formAvia\");\n  const formBusiness = document.querySelector(\"#formBusiness\");\n  const formMedical = document.querySelector(\"#formMedical\");\n  const formOthers = document.querySelector(\"#formOthers\");\n  const formCallback = document.querySelector(\"#formCallback\");\n\n  if (formVisa) {\n    const actionUrl = formVisa.getAttribute(\"action\");\n    const formVisaValidate = new JustValidate(formVisa, validationFormConfig);\n\n    formVisaValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"input[name='citizenship']\", requiredFieldValidationRules)\n      .addField(\"select[name='visaType']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='country']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"input[name='amount']\", integerFieldValidationRules)\n      .addField(\"input[name='dateStart']\", requiredFieldValidationRules)\n      .addField(\"input[name='dateEnd']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formVisa, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formAtes) {\n    const actionUrl = formAtes.getAttribute(\"action\");\n    const formAtesValidate = new JustValidate(formAtes, validationFormConfig);\n\n    formAtesValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"input[name='citizenship']\", requiredFieldValidationRules)\n      .addField(\"input[name='amount']\", integerFieldValidationRules)\n      .addField(\"input[name='dateStart']\", requiredFieldValidationRules)\n      .addField(\"input[name='dateEnd']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formAtes, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formWork) {\n    const actionUrl = formWork.getAttribute(\"action\");\n    const formWorkValidate = new JustValidate(formWork, validationFormConfig);\n\n    formWorkValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"input[name='citizenship']\", requiredFieldValidationRules)\n      .addField(\"select[name='country']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"input[name='amount']\", integerFieldValidationRules)\n      .addField(\"input[name='dateStart']\", requiredFieldValidationRules)\n      .addField(\"input[name='dateEnd']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formWork, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formCitizenship) {\n    const actionUrl = formCitizenship.getAttribute(\"action\");\n    const formCitizenshipValidate = new JustValidate(formCitizenship, validationFormConfig);\n\n    formCitizenshipValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"select[name='citizenshipCountry']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='program']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='criminalRecord']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .onSuccess(() => {\n        onValidationSuccess(formCitizenship, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formIntPassport) {\n    const actionUrl = formIntPassport.getAttribute(\"action\");\n    const formIntPassportValidate = new JustValidate(formIntPassport, validationFormConfig);\n\n    formIntPassportValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"select[name='age']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='militaryId']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='debt']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .onSuccess(() => {\n        onValidationSuccess(formIntPassport, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formInvite) {\n    const actionUrl = formInvite.getAttribute(\"action\");\n    const formInviteValidate = new JustValidate(formInvite, validationFormConfig);\n\n    formInviteValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"select[name='inviteType']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='stayDuration']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"input[name='inviteeCountry']\", textFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formInvite, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formAvia) {\n    const actionUrl = formAvia.getAttribute(\"action\");\n    const formAviaValidate = new JustValidate(formAvia, validationFormConfig);\n\n    formAviaValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"select[name='serviceType']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"input[name='passengersNumber']\", integerFieldValidationRules)\n      .addField(\"input[name='whatDate']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formAvia, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formBusiness) {\n    const actionUrl = formBusiness.getAttribute(\"action\");\n    const formBusinessValidate = new JustValidate(formBusiness, validationFormConfig);\n\n    formBusinessValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"input[name='citizenship']\", requiredFieldValidationRules)\n      .addField(\"select[name='inviteType']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='country']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"input[name='amount']\", integerFieldValidationRules)\n      .addField(\"input[name='dateStart']\", requiredFieldValidationRules)\n      .addField(\"input[name='dateEnd']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formBusiness, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formMedical) {\n    const actionUrl = formMedical.getAttribute(\"action\");\n    const formMedicalValidate = new JustValidate(formMedical, validationFormConfig);\n\n    formMedicalValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .addField(\"input[name='citizenship']\", requiredFieldValidationRules)\n      .addField(\"select[name='inviteType']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='country']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"input[name='amount']\", integerFieldValidationRules)\n      .addField(\"input[name='dateStart']\", requiredFieldValidationRules)\n      .addField(\"input[name='dateEnd']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formMedical, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formOthers) {\n    const actionUrl = formOthers.getAttribute(\"action\");\n    const formOthersValidate = new JustValidate(formOthers, validationFormConfig);\n\n    formOthersValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='type']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formOthers, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formMyData) {\n    const actionUrl = formMyData.getAttribute(\"action\");\n    const formMyDataValidate = new JustValidate(formMyData, validationFormConfig);\n\n    formMyDataValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='lastname']\", textFieldValidationRules)\n      .addField(\"input[name='middleName']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='birthday']\", requiredFieldValidationRules)\n      .addField(\"input[name='currentCitizenship']\", requiredFieldValidationRules)\n      .addField(\"input[name='intPassNumber']\", [\n        {\n          rule: \"required\",\n          errorMessage: \"Обязательное поле\",\n        },\n        {\n          rule: \"customRegexp\",\n          value: /\\d{2}\\s\\d{7}/gi,\n          errorMessage: \"Неверное значение\",\n        },\n      ])\n      .addField(\"input[name='intIssuedBy']\", requiredFieldValidationRules)\n      .addField(\"input[name='intIssueDate']\", requiredFieldValidationRules)\n      .addField(\"input[name='intExpiryDate']\", requiredFieldValidationRules)\n      .addField(\"input[name='passNumber']\", [\n        {\n          rule: \"required\",\n          errorMessage: \"Обязательное поле\",\n        },\n        {\n          rule: \"customRegexp\",\n          value: /\\d{4}\\s\\d{6}/gi,\n          errorMessage: \"Неверное значение\",\n        },\n      ])\n      .addField(\"input[name='passIssuedBy']\", requiredFieldValidationRules)\n      .addField(\"input[name='passIssueDate']\", requiredFieldValidationRules)\n      .addField(\"input[name='passExpiryDate']\", requiredFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formMyData, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formPayment) {\n    const actionUrl = formPayment.getAttribute(\"action\");\n    const formPaymentValidate = new JustValidate(formPayment, validationFormConfig);\n\n    formPaymentValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='sum']\", integerFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formPayment, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formFeedBack) {\n    const actionUrl = formFeedBack.getAttribute(\"action\");\n    const formFeedBackValidate = new JustValidate(formFeedBack, validationFormConfig);\n\n    formFeedBackValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(formFeedBack, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formAddFile) {\n    const actionUrl = formAddFile.getAttribute(\"action\");\n    const formAddFileValidate = new JustValidate(formAddFile, validationFormConfig);\n\n    formAddFileValidate\n      .addField(\n        \"[name='doc']\",\n        [\n          {\n            rule: \"minFilesCount\",\n            value: 1,\n            errorMessage: \"Нужно выбрать файл\",\n          },\n          {\n            rule: \"maxFilesCount\",\n            value: 3,\n            errorMessage: \"Обязательное поле\",\n          },\n          {\n            rule: \"files\",\n            value: {\n              files: {\n                extensions: [\"xls\", \"xlsx\", \"doc\", \"docx\", \"png\", \"jpg\", \"jpeg\", \"pdf\"],\n                maxSize: 5_000_000,\n                minSize: 1_000,\n                types: [\n                  \"application/vnd.ms-excel\",\n                  \"application/msword\",\n                  \"application/pdf\",\n                  \"image/jpeg\",\n                  \"image/jpg\",\n                  \"image/png\",\n                ],\n              },\n            },\n            errorMessage: `Файл должен быть документом (xls, xlsx, doc, docx, pdf) или изображением (png, jpg, jpeg),\n              максимальный размер файла 5mb`,\n          },\n        ],\n        {\n          errorFieldCssClass: \"input-file__input--invalid\",\n          errorLabelCssClass: \"input-file__error\",\n        },\n      )\n      .onSuccess(() => {\n        onValidationSuccess(formAddFile, actionUrl, successFn, errorFn);\n      });\n  }\n\n  if (formCallback) {\n    const actionUrl = formCallback.getAttribute(\"action\");\n    const formCallbackValidate = new JustValidate(formCallback, validationFormConfig);\n\n    formCallbackValidate\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .addField(\"input[name='city']\", textFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(\n          formCallback,\n          actionUrl,\n          () => {\n            location.replace(\"/thanks/\");\n          },\n          errorFn,\n        );\n      });\n  }\n});\n","import { ready } from \"../../js/utils/documentReady.js\";\n\nready(function () {\n  const formSet = document.querySelector(\"#formSet\");\n\n  if (formSet) {\n    const serviceTypeSelect = formSet.querySelector(\"#service\");\n    const formSetPanes = formSet.querySelectorAll(\".form-set__pane\");\n\n    setActivePane(formSetPanes, serviceTypeSelect.value);\n\n    serviceTypeSelect.addEventListener(\"change\", (e) => {\n      setActivePane(formSetPanes, e.target.value);\n    });\n  }\n});\n\nfunction setActivePane(panes, id) {\n  for (let pane of panes) {\n    if (pane.dataset.form === id) pane.classList.add(\"form-set__pane--active\");\n    else pane.classList.remove(\"form-set__pane--active\");\n  }\n}\n","/** Checks if value is string */\nfunction isString(str) {\n  return typeof str === 'string' || str instanceof String;\n}\n\n/** Checks if value is object */\nfunction isObject(obj) {\n  var _obj$constructor;\n  return typeof obj === 'object' && obj != null && (obj == null || (_obj$constructor = obj.constructor) == null ? void 0 : _obj$constructor.name) === 'Object';\n}\nfunction pick(obj, keys) {\n  if (Array.isArray(keys)) return pick(obj, (_, k) => keys.includes(k));\n  return Object.entries(obj).reduce((acc, _ref) => {\n    let [k, v] = _ref;\n    if (keys(v, k)) acc[k] = v;\n    return acc;\n  }, {});\n}\n\n/** Direction */\nconst DIRECTION = {\n  NONE: 'NONE',\n  LEFT: 'LEFT',\n  FORCE_LEFT: 'FORCE_LEFT',\n  RIGHT: 'RIGHT',\n  FORCE_RIGHT: 'FORCE_RIGHT'\n};\n\n/** Direction */\n\nfunction forceDirection(direction) {\n  switch (direction) {\n    case DIRECTION.LEFT:\n      return DIRECTION.FORCE_LEFT;\n    case DIRECTION.RIGHT:\n      return DIRECTION.FORCE_RIGHT;\n    default:\n      return direction;\n  }\n}\n\n/** Escapes regular expression control chars */\nfunction escapeRegExp(str) {\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n}\n\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\nfunction objectIncludes(b, a) {\n  if (a === b) return true;\n  const arrA = Array.isArray(a),\n    arrB = Array.isArray(b);\n  let i;\n  if (arrA && arrB) {\n    if (a.length != b.length) return false;\n    for (i = 0; i < a.length; i++) if (!objectIncludes(a[i], b[i])) return false;\n    return true;\n  }\n  if (arrA != arrB) return false;\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const dateA = a instanceof Date,\n      dateB = b instanceof Date;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    if (dateA != dateB) return false;\n    const regexpA = a instanceof RegExp,\n      regexpB = b instanceof RegExp;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    if (regexpA != regexpB) return false;\n    const keys = Object.keys(a);\n    // if (keys.length !== Object.keys(b).length) return false;\n\n    for (i = 0; i < keys.length; i++) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    for (i = 0; i < keys.length; i++) if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n    return true;\n  } else if (a && b && typeof a === 'function' && typeof b === 'function') {\n    return a.toString() === b.toString();\n  }\n  return false;\n}\n\n/** Selection range */\n\nexport { DIRECTION, escapeRegExp, forceDirection, isObject, isString, objectIncludes, pick };\n","import { DIRECTION } from './utils.js';\n\n/** Provides details of changing input */\nclass ActionDetails {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n\n  constructor(opts) {\n    Object.assign(this, opts);\n\n    // double check if left part was changed (autofilling, other non-standard input triggers)\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n    if (this.insertedCount) {\n      // double check right part\n      while (this.value.slice(this.cursorPos) !== this.oldValue.slice(this.oldSelection.end)) {\n        if (this.value.length - this.cursorPos < this.oldValue.length - this.oldSelection.end) ++this.oldSelection.end;else ++this.cursorPos;\n      }\n    }\n  }\n\n  /** Start changing position */\n  get startChangePos() {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n\n  /** Inserted symbols count */\n  get insertedCount() {\n    return this.cursorPos - this.startChangePos;\n  }\n\n  /** Inserted symbols */\n  get inserted() {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n\n  /** Removed symbols count */\n  get removedCount() {\n    // Math.max for opposite operation\n    return Math.max(this.oldSelection.end - this.startChangePos ||\n    // for Delete\n    this.oldValue.length - this.value.length, 0);\n  }\n\n  /** Removed symbols */\n  get removed() {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n\n  /** Unchanged head symbols */\n  get head() {\n    return this.value.substring(0, this.startChangePos);\n  }\n\n  /** Unchanged tail symbols */\n  get tail() {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n\n  /** Remove direction */\n  get removeDirection() {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n    // align right if delete at right\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n    // if not range removed (event with backspace)\n    this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n  }\n}\n\nexport { ActionDetails as default };\n","/** Applies mask on element */\nfunction IMask(el, opts) {\n  // currently available only for input-like elements\n  return new IMask.InputMask(el, opts);\n}\n\nexport { IMask as default };\n","import { isString, isObject, pick } from '../core/utils.js';\nimport IMask from '../core/holder.js';\n\n// TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754\n// export function maskedClass(mask: string): typeof MaskedPattern;\n// export function maskedClass(mask: DateConstructor): typeof MaskedDate;\n// export function maskedClass(mask: NumberConstructor): typeof MaskedNumber;\n// export function maskedClass(mask: Array<any> | ArrayConstructor): typeof MaskedDynamic;\n// export function maskedClass(mask: MaskedDate): typeof MaskedDate;\n// export function maskedClass(mask: MaskedNumber): typeof MaskedNumber;\n// export function maskedClass(mask: MaskedEnum): typeof MaskedEnum;\n// export function maskedClass(mask: MaskedRange): typeof MaskedRange;\n// export function maskedClass(mask: MaskedRegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: MaskedFunction): typeof MaskedFunction;\n// export function maskedClass(mask: MaskedPattern): typeof MaskedPattern;\n// export function maskedClass(mask: MaskedDynamic): typeof MaskedDynamic;\n// export function maskedClass(mask: Masked): typeof Masked;\n// export function maskedClass(mask: typeof Masked): typeof Masked;\n// export function maskedClass(mask: typeof MaskedDate): typeof MaskedDate;\n// export function maskedClass(mask: typeof MaskedNumber): typeof MaskedNumber;\n// export function maskedClass(mask: typeof MaskedEnum): typeof MaskedEnum;\n// export function maskedClass(mask: typeof MaskedRange): typeof MaskedRange;\n// export function maskedClass(mask: typeof MaskedRegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: typeof MaskedFunction): typeof MaskedFunction;\n// export function maskedClass(mask: typeof MaskedPattern): typeof MaskedPattern;\n// export function maskedClass(mask: typeof MaskedDynamic): typeof MaskedDynamic;\n// export function maskedClass<Mask extends typeof Masked> (mask: Mask): Mask;\n// export function maskedClass(mask: RegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: (value: string, ...args: any[]) => boolean): typeof MaskedFunction;\n\n/** Get Masked class by mask type */\nfunction maskedClass(mask) /* TODO */{\n  if (mask == null) throw new Error('mask property should be defined');\n  if (mask instanceof RegExp) return IMask.MaskedRegExp;\n  if (isString(mask)) return IMask.MaskedPattern;\n  if (mask === Date) return IMask.MaskedDate;\n  if (mask === Number) return IMask.MaskedNumber;\n  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;\n  if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask;\n  if (IMask.Masked && mask instanceof IMask.Masked) return mask.constructor;\n  if (mask instanceof Function) return IMask.MaskedFunction;\n  console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n  return IMask.Masked;\n}\nfunction normalizeOpts(opts) {\n  if (!opts) throw new Error('Options in not defined');\n  if (IMask.Masked) {\n    if (opts.prototype instanceof IMask.Masked) return {\n      mask: opts\n    };\n\n    /*\n      handle cases like:\n      1) opts = Masked\n      2) opts = { mask: Masked, ...instanceOpts }\n    */\n    const {\n      mask = undefined,\n      ...instanceOpts\n    } = opts instanceof IMask.Masked ? {\n      mask: opts\n    } : isObject(opts) && opts.mask instanceof IMask.Masked ? opts : {};\n    if (mask) {\n      const _mask = mask.mask;\n      return {\n        ...pick(mask, (_, k) => !k.startsWith('_')),\n        mask: mask.constructor,\n        _mask,\n        ...instanceOpts\n      };\n    }\n  }\n  if (!isObject(opts)) return {\n    mask: opts\n  };\n  return {\n    ...opts\n  };\n}\n\n// TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754\n\n// From masked\n// export default function createMask<Opts extends Masked, ReturnMasked=Opts> (opts: Opts): ReturnMasked;\n// // From masked class\n// export default function createMask<Opts extends MaskedOptions<typeof Masked>, ReturnMasked extends Masked=InstanceType<Opts['mask']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedDate>, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedNumber>, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedEnum>, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedRange>, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedRegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedFunction>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedPattern>, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedDynamic>, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n// // From mask opts\n// export default function createMask<Opts extends MaskedOptions<Masked>, ReturnMasked=Opts extends MaskedOptions<infer M> ? M : never> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedNumberOptions, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedDateFactoryOptions, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedEnumOptions, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedRangeOptions, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedPatternOptions, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedDynamicOptions, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<RegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<Function>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n\n/** Creates new {@link Masked} depending on mask type */\nfunction createMask(opts) {\n  if (IMask.Masked && opts instanceof IMask.Masked) return opts;\n  const nOpts = normalizeOpts(opts);\n  const MaskedClass = maskedClass(nOpts.mask);\n  if (!MaskedClass) throw new Error(\"Masked class is not found for provided mask \" + nOpts.mask + \", appropriate module needs to be imported manually before creating mask.\");\n  if (nOpts.mask === MaskedClass) delete nOpts.mask;\n  if (nOpts._mask) {\n    nOpts.mask = nOpts._mask;\n    delete nOpts._mask;\n  }\n  return new MaskedClass(nOpts);\n}\nIMask.createMask = createMask;\n\nexport { createMask as default, maskedClass, normalizeOpts };\n","import IMask from '../core/holder.js';\n\n/**  Generic element API to use with mask */\nclass MaskElement {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** Safely returns selection start */\n  get selectionStart() {\n    let start;\n    try {\n      start = this._unsafeSelectionStart;\n    } catch {}\n    return start != null ? start : this.value.length;\n  }\n\n  /** Safely returns selection end */\n  get selectionEnd() {\n    let end;\n    try {\n      end = this._unsafeSelectionEnd;\n    } catch {}\n    return end != null ? end : this.value.length;\n  }\n\n  /** Safely sets element selection */\n  select(start, end) {\n    if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n    try {\n      this._unsafeSelect(start, end);\n    } catch {}\n  }\n\n  /** */\n  get isActive() {\n    return false;\n  }\n  /** */\n\n  /** */\n\n  /** */\n}\nIMask.MaskElement = MaskElement;\n\nexport { MaskElement as default };\n","import MaskElement from './mask-element.js';\nimport IMask from '../core/holder.js';\n\nconst KEY_Z = 90;\nconst KEY_Y = 89;\n\n/** Bridge between HTMLElement and {@link Masked} */\nclass HTMLMaskElement extends MaskElement {\n  /** HTMLElement to use mask on */\n\n  constructor(input) {\n    super();\n    this.input = input;\n    this._onKeydown = this._onKeydown.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onBeforeinput = this._onBeforeinput.bind(this);\n    this._onCompositionEnd = this._onCompositionEnd.bind(this);\n  }\n  get rootElement() {\n    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) == null ? void 0 : _this$input$getRootNo2.call(_this$input)) != null ? _this$input$getRootNo : document;\n  }\n\n  /** Is element in focus */\n  get isActive() {\n    return this.input === this.rootElement.activeElement;\n  }\n\n  /** Binds HTMLElement events to mask internal events */\n  bindEvents(handlers) {\n    this.input.addEventListener('keydown', this._onKeydown);\n    this.input.addEventListener('input', this._onInput);\n    this.input.addEventListener('beforeinput', this._onBeforeinput);\n    this.input.addEventListener('compositionend', this._onCompositionEnd);\n    this.input.addEventListener('drop', handlers.drop);\n    this.input.addEventListener('click', handlers.click);\n    this.input.addEventListener('focus', handlers.focus);\n    this.input.addEventListener('blur', handlers.commit);\n    this._handlers = handlers;\n  }\n  _onKeydown(e) {\n    if (this._handlers.redo && (e.keyCode === KEY_Z && e.shiftKey && (e.metaKey || e.ctrlKey) || e.keyCode === KEY_Y && e.ctrlKey)) {\n      e.preventDefault();\n      return this._handlers.redo(e);\n    }\n    if (this._handlers.undo && e.keyCode === KEY_Z && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      return this._handlers.undo(e);\n    }\n    if (!e.isComposing) this._handlers.selectionChange(e);\n  }\n  _onBeforeinput(e) {\n    if (e.inputType === 'historyUndo' && this._handlers.undo) {\n      e.preventDefault();\n      return this._handlers.undo(e);\n    }\n    if (e.inputType === 'historyRedo' && this._handlers.redo) {\n      e.preventDefault();\n      return this._handlers.redo(e);\n    }\n  }\n  _onCompositionEnd(e) {\n    this._handlers.input(e);\n  }\n  _onInput(e) {\n    if (!e.isComposing) this._handlers.input(e);\n  }\n\n  /** Unbinds HTMLElement events to mask internal events */\n  unbindEvents() {\n    this.input.removeEventListener('keydown', this._onKeydown);\n    this.input.removeEventListener('input', this._onInput);\n    this.input.removeEventListener('beforeinput', this._onBeforeinput);\n    this.input.removeEventListener('compositionend', this._onCompositionEnd);\n    this.input.removeEventListener('drop', this._handlers.drop);\n    this.input.removeEventListener('click', this._handlers.click);\n    this.input.removeEventListener('focus', this._handlers.focus);\n    this.input.removeEventListener('blur', this._handlers.commit);\n    this._handlers = {};\n  }\n}\nIMask.HTMLMaskElement = HTMLMaskElement;\n\nexport { HTMLMaskElement as default };\n","import HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\n\n/** Bridge between InputElement and {@link Masked} */\nclass HTMLInputMaskElement extends HTMLMaskElement {\n  /** InputElement to use mask on */\n\n  constructor(input) {\n    super(input);\n    this.input = input;\n  }\n\n  /** Returns InputElement selection start */\n  get _unsafeSelectionStart() {\n    return this.input.selectionStart != null ? this.input.selectionStart : this.value.length;\n  }\n\n  /** Returns InputElement selection end */\n  get _unsafeSelectionEnd() {\n    return this.input.selectionEnd;\n  }\n\n  /** Sets InputElement selection */\n  _unsafeSelect(start, end) {\n    this.input.setSelectionRange(start, end);\n  }\n  get value() {\n    return this.input.value;\n  }\n  set value(value) {\n    this.input.value = value;\n  }\n}\nIMask.HTMLMaskElement = HTMLMaskElement;\n\nexport { HTMLInputMaskElement as default };\n","import HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\n\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  /** Returns HTMLElement selection start */\n  get _unsafeSelectionStart() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /** Returns HTMLElement selection end */\n  get _unsafeSelectionEnd() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /** Sets HTMLElement selection */\n  _unsafeSelect(start, end) {\n    if (!this.rootElement.createRange) return;\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  /** HTMLElement value */\n  get value() {\n    return this.input.textContent || '';\n  }\n  set value(value) {\n    this.input.textContent = value;\n  }\n}\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n\nexport { HTMLContenteditableMaskElement as default };\n","class InputHistory {\n  constructor() {\n    this.states = [];\n    this.currentIndex = 0;\n  }\n  get currentState() {\n    return this.states[this.currentIndex];\n  }\n  get isEmpty() {\n    return this.states.length === 0;\n  }\n  push(state) {\n    // if current index points before the last element then remove the future\n    if (this.currentIndex < this.states.length - 1) this.states.length = this.currentIndex + 1;\n    this.states.push(state);\n    if (this.states.length > InputHistory.MAX_LENGTH) this.states.shift();\n    this.currentIndex = this.states.length - 1;\n  }\n  go(steps) {\n    this.currentIndex = Math.min(Math.max(this.currentIndex + steps, 0), this.states.length - 1);\n    return this.currentState;\n  }\n  undo() {\n    return this.go(-1);\n  }\n  redo() {\n    return this.go(+1);\n  }\n  clear() {\n    this.states.length = 0;\n    this.currentIndex = 0;\n  }\n}\nInputHistory.MAX_LENGTH = 100;\n\nexport { InputHistory as default };\n","import { DIRECTION } from '../core/utils.js';\nimport ActionDetails from '../core/action-details.js';\nimport createMask, { maskedClass } from '../masked/factory.js';\nimport MaskElement from './mask-element.js';\nimport HTMLInputMaskElement from './html-input-mask-element.js';\nimport HTMLContenteditableMaskElement from './html-contenteditable-mask-element.js';\nimport IMask from '../core/holder.js';\nimport InputHistory from './input-history.js';\nimport './html-mask-element.js';\n\n/** Listens to element events and controls changes between element and {@link Masked} */\nclass InputMask {\n  /**\n    View element\n  */\n\n  /** Internal {@link Masked} model */\n\n  constructor(el, opts) {\n    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);\n    this.masked = createMask(opts);\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n    this._rawInputValue = '';\n    this.history = new InputHistory();\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this._onUndo = this._onUndo.bind(this);\n    this._onRedo = this._onRedo.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n    this._bindEvents();\n\n    // refresh\n    this.updateValue();\n    this._onChange();\n  }\n  maskEquals(mask) {\n    var _this$masked;\n    return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));\n  }\n\n  /** Masked */\n  get mask() {\n    return this.masked.mask;\n  }\n  set mask(mask) {\n    if (this.maskEquals(mask)) return;\n    if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n      // TODO \"any\" no idea\n      this.masked.updateOptions({\n        mask\n      });\n      return;\n    }\n    const masked = mask instanceof IMask.Masked ? mask : createMask({\n      mask\n    });\n    masked.unmaskedValue = this.masked.unmaskedValue;\n    this.masked = masked;\n  }\n\n  /** Raw value */\n  get value() {\n    return this._value;\n  }\n  set value(str) {\n    if (this.value === str) return;\n    this.masked.value = str;\n    this.updateControl('auto');\n  }\n\n  /** Unmasked value */\n  get unmaskedValue() {\n    return this._unmaskedValue;\n  }\n  set unmaskedValue(str) {\n    if (this.unmaskedValue === str) return;\n    this.masked.unmaskedValue = str;\n    this.updateControl('auto');\n  }\n\n  /** Raw input value */\n  get rawInputValue() {\n    return this._rawInputValue;\n  }\n  set rawInputValue(str) {\n    if (this.rawInputValue === str) return;\n    this.masked.rawInputValue = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Typed unmasked value */\n  get typedValue() {\n    return this.masked.typedValue;\n  }\n  set typedValue(val) {\n    if (this.masked.typedValueEquals(val)) return;\n    this.masked.typedValue = val;\n    this.updateControl('auto');\n  }\n\n  /** Display value */\n  get displayValue() {\n    return this.masked.displayValue;\n  }\n\n  /** Starts listening to element events */\n  _bindEvents() {\n    this.el.bindEvents({\n      selectionChange: this._saveSelection,\n      input: this._onInput,\n      drop: this._onDrop,\n      click: this._onClick,\n      focus: this._onFocus,\n      commit: this._onChange,\n      undo: this._onUndo,\n      redo: this._onRedo\n    });\n  }\n\n  /** Stops listening to element events */\n  _unbindEvents() {\n    if (this.el) this.el.unbindEvents();\n  }\n\n  /** Fires custom event */\n  _fireEvent(ev, e) {\n    const listeners = this._listeners[ev];\n    if (!listeners) return;\n    listeners.forEach(l => l(e));\n  }\n\n  /** Current selection start */\n  get selectionStart() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n  }\n\n  /** Current cursor position */\n  get cursorPos() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n  }\n  set cursorPos(pos) {\n    if (!this.el || !this.el.isActive) return;\n    this.el.select(pos, pos);\n    this._saveSelection();\n  }\n\n  /** Stores current selection */\n  _saveSelection( /* ev */\n  ) {\n    if (this.displayValue !== this.el.value) {\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n    }\n    this._selection = {\n      start: this.selectionStart,\n      end: this.cursorPos\n    };\n  }\n\n  /** Syncronizes model value from view */\n  updateValue() {\n    this.masked.value = this.el.value;\n    this._value = this.masked.value;\n    this._unmaskedValue = this.masked.unmaskedValue;\n    this._rawInputValue = this.masked.rawInputValue;\n  }\n\n  /** Syncronizes view from model value, fires change events */\n  updateControl(cursorPos) {\n    const newUnmaskedValue = this.masked.unmaskedValue;\n    const newValue = this.masked.value;\n    const newRawInputValue = this.masked.rawInputValue;\n    const newDisplayValue = this.displayValue;\n    const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue || this._rawInputValue !== newRawInputValue;\n    this._unmaskedValue = newUnmaskedValue;\n    this._value = newValue;\n    this._rawInputValue = newRawInputValue;\n    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n    if (cursorPos === 'auto') this.alignCursor();else if (cursorPos != null) this.cursorPos = cursorPos;\n    if (isChanged) this._fireChangeEvents();\n    if (!this._historyChanging && (isChanged || this.history.isEmpty)) this.history.push({\n      unmaskedValue: newUnmaskedValue,\n      selection: {\n        start: this.selectionStart,\n        end: this.cursorPos\n      }\n    });\n  }\n\n  /** Updates options with deep equal check, recreates {@link Masked} model if mask type changes */\n  updateOptions(opts) {\n    const {\n      mask,\n      ...restOpts\n    } = opts; // TODO types, yes, mask is optional\n\n    const updateMask = !this.maskEquals(mask);\n    const updateOpts = this.masked.optionsIsChanged(restOpts);\n    if (updateMask) this.mask = mask;\n    if (updateOpts) this.masked.updateOptions(restOpts); // TODO\n\n    if (updateMask || updateOpts) this.updateControl();\n  }\n\n  /** Updates cursor */\n  updateCursor(cursorPos) {\n    if (cursorPos == null) return;\n    this.cursorPos = cursorPos;\n\n    // also queue change cursor for mobile browsers\n    this._delayUpdateCursor(cursorPos);\n  }\n\n  /** Delays cursor update to support mobile browsers */\n  _delayUpdateCursor(cursorPos) {\n    this._abortUpdateCursor();\n    this._changingCursorPos = cursorPos;\n    this._cursorChanging = setTimeout(() => {\n      if (!this.el) return; // if was destroyed\n      this.cursorPos = this._changingCursorPos;\n      this._abortUpdateCursor();\n    }, 10);\n  }\n\n  /** Fires custom events */\n  _fireChangeEvents() {\n    this._fireEvent('accept', this._inputEvent);\n    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n  }\n\n  /** Aborts delayed cursor update */\n  _abortUpdateCursor() {\n    if (this._cursorChanging) {\n      clearTimeout(this._cursorChanging);\n      delete this._cursorChanging;\n    }\n  }\n\n  /** Aligns cursor to nearest available position */\n  alignCursor() {\n    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n  }\n\n  /** Aligns cursor only if selection is empty */\n  alignCursorFriendly() {\n    if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n    this.alignCursor();\n  }\n\n  /** Adds listener on custom event */\n  on(ev, handler) {\n    if (!this._listeners[ev]) this._listeners[ev] = [];\n    this._listeners[ev].push(handler);\n    return this;\n  }\n\n  /** Removes custom event listener */\n  off(ev, handler) {\n    if (!this._listeners[ev]) return this;\n    if (!handler) {\n      delete this._listeners[ev];\n      return this;\n    }\n    const hIndex = this._listeners[ev].indexOf(handler);\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n    return this;\n  }\n\n  /** Handles view input event */\n  _onInput(e) {\n    this._inputEvent = e;\n    this._abortUpdateCursor();\n    const details = new ActionDetails({\n      // new state\n      value: this.el.value,\n      cursorPos: this.cursorPos,\n      // old state\n      oldValue: this.displayValue,\n      oldSelection: this._selection\n    });\n    const oldRawValue = this.masked.rawInputValue;\n    const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {\n      input: true,\n      raw: true\n    }).offset;\n\n    // force align in remove direction only if no input chars were removed\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n    const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n    let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n    this.updateControl(cursorPos);\n    delete this._inputEvent;\n  }\n\n  /** Handles view change event and commits model value */\n  _onChange() {\n    if (this.displayValue !== this.el.value) this.updateValue();\n    this.masked.doCommit();\n    this.updateControl();\n    this._saveSelection();\n  }\n\n  /** Handles view drop event, prevents by default */\n  _onDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  /** Restore last selection on focus */\n  _onFocus(ev) {\n    this.alignCursorFriendly();\n  }\n\n  /** Restore last selection on focus */\n  _onClick(ev) {\n    this.alignCursorFriendly();\n  }\n  _onUndo() {\n    this._applyHistoryState(this.history.undo());\n  }\n  _onRedo() {\n    this._applyHistoryState(this.history.redo());\n  }\n  _applyHistoryState(state) {\n    if (!state) return;\n    this._historyChanging = true;\n    this.unmaskedValue = state.unmaskedValue;\n    this.el.select(state.selection.start, state.selection.end);\n    this._saveSelection();\n    this._historyChanging = false;\n  }\n\n  /** Unbind view events and removes element reference */\n  destroy() {\n    this._unbindEvents();\n    this._listeners.length = 0;\n    delete this.el;\n  }\n}\nIMask.InputMask = InputMask;\n\nexport { InputMask as default };\n","import IMask from './holder.js';\n\n/** Provides details of changing model value */\nclass ChangeDetails {\n  /** Inserted symbols */\n\n  /** Additional offset if any changes occurred before tail */\n\n  /** Raw inserted is used by dynamic mask */\n\n  /** Can skip chars */\n\n  static normalize(prep) {\n    return Array.isArray(prep) ? prep : [prep, new ChangeDetails()];\n  }\n  constructor(details) {\n    Object.assign(this, {\n      inserted: '',\n      rawInserted: '',\n      tailShift: 0,\n      skip: false\n    }, details);\n  }\n\n  /** Aggregate changes */\n  aggregate(details) {\n    this.inserted += details.inserted;\n    this.rawInserted += details.rawInserted;\n    this.tailShift += details.tailShift;\n    this.skip = this.skip || details.skip;\n    return this;\n  }\n\n  /** Total offset considering all changes */\n  get offset() {\n    return this.tailShift + this.inserted.length;\n  }\n  get consumed() {\n    return Boolean(this.rawInserted) || this.skip;\n  }\n  equals(details) {\n    return this.inserted === details.inserted && this.tailShift === details.tailShift && this.rawInserted === details.rawInserted && this.skip === details.skip;\n  }\n}\nIMask.ChangeDetails = ChangeDetails;\n\nexport { ChangeDetails as default };\n","/** Provides details of continuous extracted tail */\nclass ContinuousTailDetails {\n  /** Tail value as string */\n\n  /** Tail start position */\n\n  /** Start position */\n\n  constructor(value, from, stop) {\n    if (value === void 0) {\n      value = '';\n    }\n    if (from === void 0) {\n      from = 0;\n    }\n    this.value = value;\n    this.from = from;\n    this.stop = stop;\n  }\n  toString() {\n    return this.value;\n  }\n  extend(tail) {\n    this.value += String(tail);\n  }\n  appendTo(masked) {\n    return masked.append(this.toString(), {\n      tail: true\n    }).aggregate(masked._appendPlaceholder());\n  }\n  get state() {\n    return {\n      value: this.value,\n      from: this.from,\n      stop: this.stop\n    };\n  }\n  set state(state) {\n    Object.assign(this, state);\n  }\n  unshift(beforePos) {\n    if (!this.value.length || beforePos != null && this.from >= beforePos) return '';\n    const shiftChar = this.value[0];\n    this.value = this.value.slice(1);\n    return shiftChar;\n  }\n  shift() {\n    if (!this.value.length) return '';\n    const shiftChar = this.value[this.value.length - 1];\n    this.value = this.value.slice(0, -1);\n    return shiftChar;\n  }\n}\n\nexport { ContinuousTailDetails as default };\n","import ChangeDetails from '../core/change-details.js';\nimport ContinuousTailDetails from '../core/continuous-tail-details.js';\nimport { isString, DIRECTION, objectIncludes, forceDirection } from '../core/utils.js';\nimport IMask from '../core/holder.js';\n\n/** Append flags */\n\n/** Extract flags */\n\n// see https://github.com/microsoft/TypeScript/issues/6223\n\n/** Provides common masking stuff */\nclass Masked {\n  /** */\n\n  /** */\n\n  /** Transforms value before mask processing */\n\n  /** Transforms each char before mask processing */\n\n  /** Validates if value is acceptable */\n\n  /** Does additional processing at the end of editing */\n\n  /** Format typed value to string */\n\n  /** Parse string to get typed value */\n\n  /** Enable characters overwriting */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  constructor(opts) {\n    this._value = '';\n    this._update({\n      ...Masked.DEFAULTS,\n      ...opts\n    });\n    this._initialized = true;\n  }\n\n  /** Sets and applies new options */\n  updateOptions(opts) {\n    if (!this.optionsIsChanged(opts)) return;\n    this.withValueRefresh(this._update.bind(this, opts));\n  }\n\n  /** Sets new options */\n  _update(opts) {\n    Object.assign(this, opts);\n  }\n\n  /** Mask state */\n  get state() {\n    return {\n      _value: this.value,\n      _rawInputValue: this.rawInputValue\n    };\n  }\n  set state(state) {\n    this._value = state._value;\n  }\n\n  /** Resets value */\n  reset() {\n    this._value = '';\n  }\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this.resolve(value, {\n      input: true\n    });\n  }\n\n  /** Resolve new value */\n  resolve(value, flags) {\n    if (flags === void 0) {\n      flags = {\n        input: true\n      };\n    }\n    this.reset();\n    this.append(value, flags, '');\n    this.doCommit();\n  }\n  get unmaskedValue() {\n    return this.value;\n  }\n  set unmaskedValue(value) {\n    this.resolve(value, {});\n  }\n  get typedValue() {\n    return this.parse ? this.parse(this.value, this) : this.unmaskedValue;\n  }\n  set typedValue(value) {\n    if (this.format) {\n      this.value = this.format(value, this);\n    } else {\n      this.unmaskedValue = String(value);\n    }\n  }\n\n  /** Value that includes raw user input */\n  get rawInputValue() {\n    return this.extractInput(0, this.displayValue.length, {\n      raw: true\n    });\n  }\n  set rawInputValue(value) {\n    this.resolve(value, {\n      raw: true\n    });\n  }\n  get displayValue() {\n    return this.value;\n  }\n  get isComplete() {\n    return true;\n  }\n  get isFilled() {\n    return this.isComplete;\n  }\n\n  /** Finds nearest input position in direction */\n  nearestInputPos(cursorPos, direction) {\n    return cursorPos;\n  }\n  totalInputPositions(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    return Math.min(this.displayValue.length, toPos - fromPos);\n  }\n\n  /** Extracts value in range considering flags */\n  extractInput(fromPos, toPos, flags) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    return this.displayValue.slice(fromPos, toPos);\n  }\n\n  /** Extracts tail in range */\n  extractTail(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);\n  }\n\n  /** Appends tail */\n  appendTail(tail) {\n    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n    return tail.appendTo(this);\n  }\n\n  /** Appends char */\n  _appendCharRaw(ch, flags) {\n    if (!ch) return new ChangeDetails();\n    this._value += ch;\n    return new ChangeDetails({\n      inserted: ch,\n      rawInserted: ch\n    });\n  }\n\n  /** Appends char */\n  _appendChar(ch, flags, checkTail) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const consistentState = this.state;\n    let details;\n    [ch, details] = this.doPrepareChar(ch, flags);\n    if (ch) {\n      details = details.aggregate(this._appendCharRaw(ch, flags));\n\n      // TODO handle `skip`?\n\n      // try `autofix` lookahead\n      if (!details.rawInserted && this.autofix === 'pad') {\n        const noFixState = this.state;\n        this.state = consistentState;\n        let fixDetails = this.pad(flags);\n        const chDetails = this._appendCharRaw(ch, flags);\n        fixDetails = fixDetails.aggregate(chDetails);\n\n        // if fix was applied or\n        // if details are equal use skip restoring state optimization\n        if (chDetails.rawInserted || fixDetails.equals(details)) {\n          details = fixDetails;\n        } else {\n          this.state = noFixState;\n        }\n      }\n    }\n    if (details.inserted) {\n      let consistentTail;\n      let appended = this.doValidate(flags) !== false;\n      if (appended && checkTail != null) {\n        // validation ok, check tail\n        const beforeTailState = this.state;\n        if (this.overwrite === true) {\n          consistentTail = checkTail.state;\n          for (let i = 0; i < details.rawInserted.length; ++i) {\n            checkTail.unshift(this.displayValue.length - details.tailShift);\n          }\n        }\n        let tailDetails = this.appendTail(checkTail);\n        appended = tailDetails.rawInserted.length === checkTail.toString().length;\n\n        // not ok, try shift\n        if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {\n          this.state = beforeTailState;\n          consistentTail = checkTail.state;\n          for (let i = 0; i < details.rawInserted.length; ++i) {\n            checkTail.shift();\n          }\n          tailDetails = this.appendTail(checkTail);\n          appended = tailDetails.rawInserted.length === checkTail.toString().length;\n        }\n\n        // if ok, rollback state after tail\n        if (appended && tailDetails.inserted) this.state = beforeTailState;\n      }\n\n      // revert all if something went wrong\n      if (!appended) {\n        details = new ChangeDetails();\n        this.state = consistentState;\n        if (checkTail && consistentTail) checkTail.state = consistentTail;\n      }\n    }\n    return details;\n  }\n\n  /** Appends optional placeholder at the end */\n  _appendPlaceholder() {\n    return new ChangeDetails();\n  }\n\n  /** Appends optional eager placeholder at the end */\n  _appendEager() {\n    return new ChangeDetails();\n  }\n\n  /** Appends symbols considering flags */\n  append(str, flags, tail) {\n    if (!isString(str)) throw new Error('value should be string');\n    const checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail;\n    if (flags != null && flags.tail) flags._beforeTailState = this.state;\n    let details;\n    [str, details] = this.doPrepare(str, flags);\n    for (let ci = 0; ci < str.length; ++ci) {\n      const d = this._appendChar(str[ci], flags, checkTail);\n      if (!d.rawInserted && !this.doSkipInvalid(str[ci], flags, checkTail)) break;\n      details.aggregate(d);\n    }\n    if ((this.eager === true || this.eager === 'append') && flags != null && flags.input && str) {\n      details.aggregate(this._appendEager());\n    }\n\n    // append tail but aggregate only tailShift\n    if (checkTail != null) {\n      details.tailShift += this.appendTail(checkTail).tailShift;\n      // TODO it's a good idea to clear state after appending ends\n      // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n      // this._resetBeforeTailState();\n    }\n    return details;\n  }\n  remove(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    this._value = this.displayValue.slice(0, fromPos) + this.displayValue.slice(toPos);\n    return new ChangeDetails();\n  }\n\n  /** Calls function and reapplies current value */\n  withValueRefresh(fn) {\n    if (this._refreshing || !this._initialized) return fn();\n    this._refreshing = true;\n    const rawInput = this.rawInputValue;\n    const value = this.value;\n    const ret = fn();\n    this.rawInputValue = rawInput;\n    // append lost trailing chars at the end\n    if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\n      this.append(value.slice(this.displayValue.length), {}, '');\n      this.doCommit();\n    }\n    delete this._refreshing;\n    return ret;\n  }\n  runIsolated(fn) {\n    if (this._isolated || !this._initialized) return fn(this);\n    this._isolated = true;\n    const state = this.state;\n    const ret = fn(this);\n    this.state = state;\n    delete this._isolated;\n    return ret;\n  }\n  doSkipInvalid(ch, flags, checkTail) {\n    return Boolean(this.skipInvalid);\n  }\n\n  /** Prepares string before mask processing */\n  doPrepare(str, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    return ChangeDetails.normalize(this.prepare ? this.prepare(str, this, flags) : str);\n  }\n\n  /** Prepares each char before mask processing */\n  doPrepareChar(str, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    return ChangeDetails.normalize(this.prepareChar ? this.prepareChar(str, this, flags) : str);\n  }\n\n  /** Validates if value is acceptable */\n  doValidate(flags) {\n    return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\n  }\n\n  /** Does additional processing at the end of editing */\n  doCommit() {\n    if (this.commit) this.commit(this.value, this);\n  }\n  splice(start, deleteCount, inserted, removeDirection, flags) {\n    if (inserted === void 0) {\n      inserted = '';\n    }\n    if (removeDirection === void 0) {\n      removeDirection = DIRECTION.NONE;\n    }\n    if (flags === void 0) {\n      flags = {\n        input: true\n      };\n    }\n    const tailPos = start + deleteCount;\n    const tail = this.extractTail(tailPos);\n    const eagerRemove = this.eager === true || this.eager === 'remove';\n    let oldRawValue;\n    if (eagerRemove) {\n      removeDirection = forceDirection(removeDirection);\n      oldRawValue = this.extractInput(0, tailPos, {\n        raw: true\n      });\n    }\n    let startChangePos = start;\n    const details = new ChangeDetails();\n\n    // if it is just deletion without insertion\n    if (removeDirection !== DIRECTION.NONE) {\n      startChangePos = this.nearestInputPos(start, deleteCount > 1 && start !== 0 && !eagerRemove ? DIRECTION.NONE : removeDirection);\n\n      // adjust tailShift if start was aligned\n      details.tailShift = startChangePos - start;\n    }\n    details.aggregate(this.remove(startChangePos));\n    if (eagerRemove && removeDirection !== DIRECTION.NONE && oldRawValue === this.rawInputValue) {\n      if (removeDirection === DIRECTION.FORCE_LEFT) {\n        let valLength;\n        while (oldRawValue === this.rawInputValue && (valLength = this.displayValue.length)) {\n          details.aggregate(new ChangeDetails({\n            tailShift: -1\n          })).aggregate(this.remove(valLength - 1));\n        }\n      } else if (removeDirection === DIRECTION.FORCE_RIGHT) {\n        tail.unshift();\n      }\n    }\n    return details.aggregate(this.append(inserted, flags, tail));\n  }\n  maskEquals(mask) {\n    return this.mask === mask;\n  }\n  optionsIsChanged(opts) {\n    return !objectIncludes(this, opts);\n  }\n  typedValueEquals(value) {\n    const tval = this.typedValue;\n    return value === tval || Masked.EMPTY_VALUES.includes(value) && Masked.EMPTY_VALUES.includes(tval) || (this.format ? this.format(value, this) === this.format(this.typedValue, this) : false);\n  }\n  pad(flags) {\n    return new ChangeDetails();\n  }\n}\nMasked.DEFAULTS = {\n  skipInvalid: true\n};\nMasked.EMPTY_VALUES = [undefined, null, ''];\nIMask.Masked = Masked;\n\nexport { Masked as default };\n","import ChangeDetails from '../../core/change-details.js';\nimport { isString } from '../../core/utils.js';\nimport ContinuousTailDetails from '../../core/continuous-tail-details.js';\nimport IMask from '../../core/holder.js';\n\nclass ChunksTailDetails {\n  /** */\n\n  constructor(chunks, from) {\n    if (chunks === void 0) {\n      chunks = [];\n    }\n    if (from === void 0) {\n      from = 0;\n    }\n    this.chunks = chunks;\n    this.from = from;\n  }\n  toString() {\n    return this.chunks.map(String).join('');\n  }\n  extend(tailChunk) {\n    if (!String(tailChunk)) return;\n    tailChunk = isString(tailChunk) ? new ContinuousTailDetails(String(tailChunk)) : tailChunk;\n    const lastChunk = this.chunks[this.chunks.length - 1];\n    const extendLast = lastChunk && (\n    // if stops are same or tail has no stop\n    lastChunk.stop === tailChunk.stop || tailChunk.stop == null) &&\n    // if tail chunk goes just after last chunk\n    tailChunk.from === lastChunk.from + lastChunk.toString().length;\n    if (tailChunk instanceof ContinuousTailDetails) {\n      // check the ability to extend previous chunk\n      if (extendLast) {\n        // extend previous chunk\n        lastChunk.extend(tailChunk.toString());\n      } else {\n        // append new chunk\n        this.chunks.push(tailChunk);\n      }\n    } else if (tailChunk instanceof ChunksTailDetails) {\n      if (tailChunk.stop == null) {\n        // unwrap floating chunks to parent, keeping `from` pos\n        let firstTailChunk;\n        while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n          firstTailChunk = tailChunk.chunks.shift(); // not possible to be `undefined` because length was checked above\n          firstTailChunk.from += tailChunk.from;\n          this.extend(firstTailChunk);\n        }\n      }\n\n      // if tail chunk still has value\n      if (tailChunk.toString()) {\n        // if chunks contains stops, then popup stop to container\n        tailChunk.stop = tailChunk.blockIndex;\n        this.chunks.push(tailChunk);\n      }\n    }\n  }\n  appendTo(masked) {\n    if (!(masked instanceof IMask.MaskedPattern)) {\n      const tail = new ContinuousTailDetails(this.toString());\n      return tail.appendTo(masked);\n    }\n    const details = new ChangeDetails();\n    for (let ci = 0; ci < this.chunks.length; ++ci) {\n      const chunk = this.chunks[ci];\n      const lastBlockIter = masked._mapPosToBlock(masked.displayValue.length);\n      const stop = chunk.stop;\n      let chunkBlock;\n      if (stop != null && (\n      // if block not found or stop is behind lastBlock\n      !lastBlockIter || lastBlockIter.index <= stop)) {\n        if (chunk instanceof ChunksTailDetails ||\n        // for continuous block also check if stop is exist\n        masked._stops.indexOf(stop) >= 0) {\n          details.aggregate(masked._appendPlaceholder(stop));\n        }\n        chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n      }\n      if (chunkBlock) {\n        const tailDetails = chunkBlock.appendTail(chunk);\n        details.aggregate(tailDetails);\n\n        // get not inserted chars\n        const remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n        if (remainChars) details.aggregate(masked.append(remainChars, {\n          tail: true\n        }));\n      } else {\n        details.aggregate(masked.append(chunk.toString(), {\n          tail: true\n        }));\n      }\n    }\n    return details;\n  }\n  get state() {\n    return {\n      chunks: this.chunks.map(c => c.state),\n      from: this.from,\n      stop: this.stop,\n      blockIndex: this.blockIndex\n    };\n  }\n  set state(state) {\n    const {\n      chunks,\n      ...props\n    } = state;\n    Object.assign(this, props);\n    this.chunks = chunks.map(cstate => {\n      const chunk = \"chunks\" in cstate ? new ChunksTailDetails() : new ContinuousTailDetails();\n      chunk.state = cstate;\n      return chunk;\n    });\n  }\n  unshift(beforePos) {\n    if (!this.chunks.length || beforePos != null && this.from >= beforePos) return '';\n    const chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;\n    let ci = 0;\n    while (ci < this.chunks.length) {\n      const chunk = this.chunks[ci];\n      const shiftChar = chunk.unshift(chunkShiftPos);\n      if (chunk.toString()) {\n        // chunk still contains value\n        // but not shifted - means no more available chars to shift\n        if (!shiftChar) break;\n        ++ci;\n      } else {\n        // clean if chunk has no value\n        this.chunks.splice(ci, 1);\n      }\n      if (shiftChar) return shiftChar;\n    }\n    return '';\n  }\n  shift() {\n    if (!this.chunks.length) return '';\n    let ci = this.chunks.length - 1;\n    while (0 <= ci) {\n      const chunk = this.chunks[ci];\n      const shiftChar = chunk.shift();\n      if (chunk.toString()) {\n        // chunk still contains value\n        // but not shifted - means no more available chars to shift\n        if (!shiftChar) break;\n        --ci;\n      } else {\n        // clean if chunk has no value\n        this.chunks.splice(ci, 1);\n      }\n      if (shiftChar) return shiftChar;\n    }\n    return '';\n  }\n}\n\nexport { ChunksTailDetails as default };\n","import { DIRECTION } from '../../core/utils.js';\n\nclass PatternCursor {\n  constructor(masked, pos) {\n    this.masked = masked;\n    this._log = [];\n    const {\n      offset,\n      index\n    } = masked._mapPosToBlock(pos) || (pos < 0 ?\n    // first\n    {\n      index: 0,\n      offset: 0\n    } :\n    // last\n    {\n      index: this.masked._blocks.length,\n      offset: 0\n    });\n    this.offset = offset;\n    this.index = index;\n    this.ok = false;\n  }\n  get block() {\n    return this.masked._blocks[this.index];\n  }\n  get pos() {\n    return this.masked._blockStartPos(this.index) + this.offset;\n  }\n  get state() {\n    return {\n      index: this.index,\n      offset: this.offset,\n      ok: this.ok\n    };\n  }\n  set state(s) {\n    Object.assign(this, s);\n  }\n  pushState() {\n    this._log.push(this.state);\n  }\n  popState() {\n    const s = this._log.pop();\n    if (s) this.state = s;\n    return s;\n  }\n  bindBlock() {\n    if (this.block) return;\n    if (this.index < 0) {\n      this.index = 0;\n      this.offset = 0;\n    }\n    if (this.index >= this.masked._blocks.length) {\n      this.index = this.masked._blocks.length - 1;\n      this.offset = this.block.displayValue.length; // TODO this is stupid type error, `block` depends on index that was changed above\n    }\n  }\n  _pushLeft(fn) {\n    this.pushState();\n    for (this.bindBlock(); 0 <= this.index; --this.index, this.offset = ((_this$block = this.block) == null ? void 0 : _this$block.displayValue.length) || 0) {\n      var _this$block;\n      if (fn()) return this.ok = true;\n    }\n    return this.ok = false;\n  }\n  _pushRight(fn) {\n    this.pushState();\n    for (this.bindBlock(); this.index < this.masked._blocks.length; ++this.index, this.offset = 0) {\n      if (fn()) return this.ok = true;\n    }\n    return this.ok = false;\n  }\n  pushLeftBeforeFilled() {\n    return this._pushLeft(() => {\n      if (this.block.isFixed || !this.block.value) return;\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_LEFT);\n      if (this.offset !== 0) return true;\n    });\n  }\n  pushLeftBeforeInput() {\n    // cases:\n    // filled input: 00|\n    // optional empty input: 00[]|\n    // nested block: XX<[]>|\n    return this._pushLeft(() => {\n      if (this.block.isFixed) return;\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n      return true;\n    });\n  }\n  pushLeftBeforeRequired() {\n    return this._pushLeft(() => {\n      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n      return true;\n    });\n  }\n  pushRightBeforeFilled() {\n    return this._pushRight(() => {\n      if (this.block.isFixed || !this.block.value) return;\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_RIGHT);\n      if (this.offset !== this.block.value.length) return true;\n    });\n  }\n  pushRightBeforeInput() {\n    return this._pushRight(() => {\n      if (this.block.isFixed) return;\n\n      // const o = this.offset;\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n      // HACK cases like (STILL DOES NOT WORK FOR NESTED)\n      // aa|X\n      // aa<X|[]>X_    - this will not work\n      // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;\n      return true;\n    });\n  }\n  pushRightBeforeRequired() {\n    return this._pushRight(() => {\n      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n\n      // TODO check |[*]XX_\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n      return true;\n    });\n  }\n}\n\nexport { PatternCursor as default };\n","import ChangeDetails from '../../core/change-details.js';\nimport { DIRECTION, isString } from '../../core/utils.js';\nimport ContinuousTailDetails from '../../core/continuous-tail-details.js';\nimport '../../core/holder.js';\n\nclass PatternFixedDefinition {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  constructor(opts) {\n    Object.assign(this, opts);\n    this._value = '';\n    this.isFixed = true;\n  }\n  get value() {\n    return this._value;\n  }\n  get unmaskedValue() {\n    return this.isUnmasking ? this.value : '';\n  }\n  get rawInputValue() {\n    return this._isRawInput ? this.value : '';\n  }\n  get displayValue() {\n    return this.value;\n  }\n  reset() {\n    this._isRawInput = false;\n    this._value = '';\n  }\n  remove(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this._value.length;\n    }\n    this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n    if (!this._value) this._isRawInput = false;\n    return new ChangeDetails();\n  }\n  nearestInputPos(cursorPos, direction) {\n    if (direction === void 0) {\n      direction = DIRECTION.NONE;\n    }\n    const minPos = 0;\n    const maxPos = this._value.length;\n    switch (direction) {\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        return minPos;\n      case DIRECTION.NONE:\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n      default:\n        return maxPos;\n    }\n  }\n  totalInputPositions(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this._value.length;\n    }\n    return this._isRawInput ? toPos - fromPos : 0;\n  }\n  extractInput(fromPos, toPos, flags) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this._value.length;\n    }\n    if (flags === void 0) {\n      flags = {};\n    }\n    return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n  }\n  get isComplete() {\n    return true;\n  }\n  get isFilled() {\n    return Boolean(this._value);\n  }\n  _appendChar(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    if (this.isFilled) return new ChangeDetails();\n    const appendEager = this.eager === true || this.eager === 'append';\n    const appended = this.char === ch;\n    const isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !appendEager) && !flags.tail;\n    const details = new ChangeDetails({\n      inserted: this.char,\n      rawInserted: isResolved ? this.char : ''\n    });\n    this._value = this.char;\n    this._isRawInput = isResolved && (flags.raw || flags.input);\n    return details;\n  }\n  _appendEager() {\n    return this._appendChar(this.char, {\n      tail: true\n    });\n  }\n  _appendPlaceholder() {\n    const details = new ChangeDetails();\n    if (this.isFilled) return details;\n    this._value = details.inserted = this.char;\n    return details;\n  }\n  extractTail() {\n    return new ContinuousTailDetails('');\n  }\n  appendTail(tail) {\n    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n    return tail.appendTo(this);\n  }\n  append(str, flags, tail) {\n    const details = this._appendChar(str[0], flags);\n    if (tail != null) {\n      details.tailShift += this.appendTail(tail).tailShift;\n    }\n    return details;\n  }\n  doCommit() {}\n  get state() {\n    return {\n      _value: this._value,\n      _rawInputValue: this.rawInputValue\n    };\n  }\n  set state(state) {\n    this._value = state._value;\n    this._isRawInput = Boolean(state._rawInputValue);\n  }\n  pad(flags) {\n    return this._appendPlaceholder();\n  }\n}\n\nexport { PatternFixedDefinition as default };\n","import createMask from '../factory.js';\nimport ChangeDetails from '../../core/change-details.js';\nimport { DIRECTION } from '../../core/utils.js';\nimport '../../core/holder.js';\n\nclass PatternInputDefinition {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  constructor(opts) {\n    const {\n      parent,\n      isOptional,\n      placeholderChar,\n      displayChar,\n      lazy,\n      eager,\n      ...maskOpts\n    } = opts;\n    this.masked = createMask(maskOpts);\n    Object.assign(this, {\n      parent,\n      isOptional,\n      placeholderChar,\n      displayChar,\n      lazy,\n      eager\n    });\n  }\n  reset() {\n    this.isFilled = false;\n    this.masked.reset();\n  }\n  remove(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.value.length;\n    }\n    if (fromPos === 0 && toPos >= 1) {\n      this.isFilled = false;\n      return this.masked.remove(fromPos, toPos);\n    }\n    return new ChangeDetails();\n  }\n  get value() {\n    return this.masked.value || (this.isFilled && !this.isOptional ? this.placeholderChar : '');\n  }\n  get unmaskedValue() {\n    return this.masked.unmaskedValue;\n  }\n  get rawInputValue() {\n    return this.masked.rawInputValue;\n  }\n  get displayValue() {\n    return this.masked.value && this.displayChar || this.value;\n  }\n  get isComplete() {\n    return Boolean(this.masked.value) || this.isOptional;\n  }\n  _appendChar(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    if (this.isFilled) return new ChangeDetails();\n    const state = this.masked.state;\n    // simulate input\n    let details = this.masked._appendChar(ch, this.currentMaskFlags(flags));\n    if (details.inserted && this.doValidate(flags) === false) {\n      details = new ChangeDetails();\n      this.masked.state = state;\n    }\n    if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n      details.inserted = this.placeholderChar;\n    }\n    details.skip = !details.inserted && !this.isOptional;\n    this.isFilled = Boolean(details.inserted);\n    return details;\n  }\n  append(str, flags, tail) {\n    // TODO probably should be done via _appendChar\n    return this.masked.append(str, this.currentMaskFlags(flags), tail);\n  }\n  _appendPlaceholder() {\n    if (this.isFilled || this.isOptional) return new ChangeDetails();\n    this.isFilled = true;\n    return new ChangeDetails({\n      inserted: this.placeholderChar\n    });\n  }\n  _appendEager() {\n    return new ChangeDetails();\n  }\n  extractTail(fromPos, toPos) {\n    return this.masked.extractTail(fromPos, toPos);\n  }\n  appendTail(tail) {\n    return this.masked.appendTail(tail);\n  }\n  extractInput(fromPos, toPos, flags) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.value.length;\n    }\n    return this.masked.extractInput(fromPos, toPos, flags);\n  }\n  nearestInputPos(cursorPos, direction) {\n    if (direction === void 0) {\n      direction = DIRECTION.NONE;\n    }\n    const minPos = 0;\n    const maxPos = this.value.length;\n    const boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n    switch (direction) {\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        return this.isComplete ? boundPos : minPos;\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n        return this.isComplete ? boundPos : maxPos;\n      case DIRECTION.NONE:\n      default:\n        return boundPos;\n    }\n  }\n  totalInputPositions(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.value.length;\n    }\n    return this.value.slice(fromPos, toPos).length;\n  }\n  doValidate(flags) {\n    return this.masked.doValidate(this.currentMaskFlags(flags)) && (!this.parent || this.parent.doValidate(this.currentMaskFlags(flags)));\n  }\n  doCommit() {\n    this.masked.doCommit();\n  }\n  get state() {\n    return {\n      _value: this.value,\n      _rawInputValue: this.rawInputValue,\n      masked: this.masked.state,\n      isFilled: this.isFilled\n    };\n  }\n  set state(state) {\n    this.masked.state = state.masked;\n    this.isFilled = state.isFilled;\n  }\n  currentMaskFlags(flags) {\n    var _flags$_beforeTailSta;\n    return {\n      ...flags,\n      _beforeTailState: (flags == null || (_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.masked) || (flags == null ? void 0 : flags._beforeTailState)\n    };\n  }\n  pad(flags) {\n    return new ChangeDetails();\n  }\n}\nPatternInputDefinition.DEFAULT_DEFINITIONS = {\n  '0': /\\d/,\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n  // http://stackoverflow.com/a/22075070\n  '*': /./\n};\n\nexport { PatternInputDefinition as default };\n","import Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/change-details.js';\nimport '../core/continuous-tail-details.js';\nimport '../core/utils.js';\n\n/** Masking by RegExp */\nclass MaskedRegExp extends Masked {\n  /** */\n\n  /** Enable characters overwriting */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    const mask = opts.mask;\n    if (mask) opts.validate = value => value.search(mask) >= 0;\n    super._update(opts);\n  }\n}\nIMask.MaskedRegExp = MaskedRegExp;\n\nexport { MaskedRegExp as default };\n","import ChangeDetails from '../core/change-details.js';\nimport IMask from '../core/holder.js';\nimport { DIRECTION } from '../core/utils.js';\nimport Masked from './base.js';\nimport createMask, { normalizeOpts } from './factory.js';\nimport ChunksTailDetails from './pattern/chunk-tail-details.js';\nimport PatternCursor from './pattern/cursor.js';\nimport PatternFixedDefinition from './pattern/fixed-definition.js';\nimport PatternInputDefinition from './pattern/input-definition.js';\nimport './regexp.js';\nimport '../core/continuous-tail-details.js';\n\n/** Pattern mask */\nclass MaskedPattern extends Masked {\n  /** */\n\n  /** */\n\n  /** Single char for empty input */\n\n  /** Single char for filled input */\n\n  /** Show placeholder only when needed */\n\n  /** Enable characters overwriting */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  constructor(opts) {\n    super({\n      ...MaskedPattern.DEFAULTS,\n      ...opts,\n      definitions: Object.assign({}, PatternInputDefinition.DEFAULT_DEFINITIONS, opts == null ? void 0 : opts.definitions)\n    });\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\n    super._update(opts);\n    this._rebuildMask();\n  }\n  _rebuildMask() {\n    const defs = this.definitions;\n    this._blocks = [];\n    this.exposeBlock = undefined;\n    this._stops = [];\n    this._maskedBlocks = {};\n    const pattern = this.mask;\n    if (!pattern || !defs) return;\n    let unmaskingBlock = false;\n    let optionalBlock = false;\n    for (let i = 0; i < pattern.length; ++i) {\n      if (this.blocks) {\n        const p = pattern.slice(i);\n        const bNames = Object.keys(this.blocks).filter(bName => p.indexOf(bName) === 0);\n        // order by key length\n        bNames.sort((a, b) => b.length - a.length);\n        // use block name with max length\n        const bName = bNames[0];\n        if (bName) {\n          const {\n            expose,\n            repeat,\n            ...bOpts\n          } = normalizeOpts(this.blocks[bName]); // TODO type Opts<Arg & Extra>\n          const blockOpts = {\n            lazy: this.lazy,\n            eager: this.eager,\n            placeholderChar: this.placeholderChar,\n            displayChar: this.displayChar,\n            overwrite: this.overwrite,\n            autofix: this.autofix,\n            ...bOpts,\n            repeat,\n            parent: this\n          };\n          const maskedBlock = repeat != null ? new IMask.RepeatBlock(blockOpts /* TODO */) : createMask(blockOpts);\n          if (maskedBlock) {\n            this._blocks.push(maskedBlock);\n            if (expose) this.exposeBlock = maskedBlock;\n\n            // store block index\n            if (!this._maskedBlocks[bName]) this._maskedBlocks[bName] = [];\n            this._maskedBlocks[bName].push(this._blocks.length - 1);\n          }\n          i += bName.length - 1;\n          continue;\n        }\n      }\n      let char = pattern[i];\n      let isInput = (char in defs);\n      if (char === MaskedPattern.STOP_CHAR) {\n        this._stops.push(this._blocks.length);\n        continue;\n      }\n      if (char === '{' || char === '}') {\n        unmaskingBlock = !unmaskingBlock;\n        continue;\n      }\n      if (char === '[' || char === ']') {\n        optionalBlock = !optionalBlock;\n        continue;\n      }\n      if (char === MaskedPattern.ESCAPE_CHAR) {\n        ++i;\n        char = pattern[i];\n        if (!char) break;\n        isInput = false;\n      }\n      const def = isInput ? new PatternInputDefinition({\n        isOptional: optionalBlock,\n        lazy: this.lazy,\n        eager: this.eager,\n        placeholderChar: this.placeholderChar,\n        displayChar: this.displayChar,\n        ...normalizeOpts(defs[char]),\n        parent: this\n      }) : new PatternFixedDefinition({\n        char,\n        eager: this.eager,\n        isUnmasking: unmaskingBlock\n      });\n      this._blocks.push(def);\n    }\n  }\n  get state() {\n    return {\n      ...super.state,\n      _blocks: this._blocks.map(b => b.state)\n    };\n  }\n  set state(state) {\n    if (!state) {\n      this.reset();\n      return;\n    }\n    const {\n      _blocks,\n      ...maskedState\n    } = state;\n    this._blocks.forEach((b, bi) => b.state = _blocks[bi]);\n    super.state = maskedState;\n  }\n  reset() {\n    super.reset();\n    this._blocks.forEach(b => b.reset());\n  }\n  get isComplete() {\n    return this.exposeBlock ? this.exposeBlock.isComplete : this._blocks.every(b => b.isComplete);\n  }\n  get isFilled() {\n    return this._blocks.every(b => b.isFilled);\n  }\n  get isFixed() {\n    return this._blocks.every(b => b.isFixed);\n  }\n  get isOptional() {\n    return this._blocks.every(b => b.isOptional);\n  }\n  doCommit() {\n    this._blocks.forEach(b => b.doCommit());\n    super.doCommit();\n  }\n  get unmaskedValue() {\n    return this.exposeBlock ? this.exposeBlock.unmaskedValue : this._blocks.reduce((str, b) => str += b.unmaskedValue, '');\n  }\n  set unmaskedValue(unmaskedValue) {\n    if (this.exposeBlock) {\n      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n      this.exposeBlock.unmaskedValue = unmaskedValue;\n      this.appendTail(tail);\n      this.doCommit();\n    } else super.unmaskedValue = unmaskedValue;\n  }\n  get value() {\n    return this.exposeBlock ? this.exposeBlock.value :\n    // TODO return _value when not in change?\n    this._blocks.reduce((str, b) => str += b.value, '');\n  }\n  set value(value) {\n    if (this.exposeBlock) {\n      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n      this.exposeBlock.value = value;\n      this.appendTail(tail);\n      this.doCommit();\n    } else super.value = value;\n  }\n  get typedValue() {\n    return this.exposeBlock ? this.exposeBlock.typedValue : super.typedValue;\n  }\n  set typedValue(value) {\n    if (this.exposeBlock) {\n      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n      this.exposeBlock.typedValue = value;\n      this.appendTail(tail);\n      this.doCommit();\n    } else super.typedValue = value;\n  }\n  get displayValue() {\n    return this._blocks.reduce((str, b) => str += b.displayValue, '');\n  }\n  appendTail(tail) {\n    return super.appendTail(tail).aggregate(this._appendPlaceholder());\n  }\n  _appendEager() {\n    var _this$_mapPosToBlock;\n    const details = new ChangeDetails();\n    let startBlockIndex = (_this$_mapPosToBlock = this._mapPosToBlock(this.displayValue.length)) == null ? void 0 : _this$_mapPosToBlock.index;\n    if (startBlockIndex == null) return details;\n\n    // TODO test if it works for nested pattern masks\n    if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;\n    for (let bi = startBlockIndex; bi < this._blocks.length; ++bi) {\n      const d = this._blocks[bi]._appendEager();\n      if (!d.inserted) break;\n      details.aggregate(d);\n    }\n    return details;\n  }\n  _appendCharRaw(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const blockIter = this._mapPosToBlock(this.displayValue.length);\n    const details = new ChangeDetails();\n    if (!blockIter) return details;\n    for (let bi = blockIter.index, block; block = this._blocks[bi]; ++bi) {\n      var _flags$_beforeTailSta;\n      const blockDetails = block._appendChar(ch, {\n        ...flags,\n        _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) == null || (_flags$_beforeTailSta = _flags$_beforeTailSta._blocks) == null ? void 0 : _flags$_beforeTailSta[bi]\n      });\n      details.aggregate(blockDetails);\n      if (blockDetails.consumed) break; // go next char\n    }\n    return details;\n  }\n  extractTail(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    const chunkTail = new ChunksTailDetails();\n    if (fromPos === toPos) return chunkTail;\n    this._forEachBlocksInRange(fromPos, toPos, (b, bi, bFromPos, bToPos) => {\n      const blockChunk = b.extractTail(bFromPos, bToPos);\n      blockChunk.stop = this._findStopBefore(bi);\n      blockChunk.from = this._blockStartPos(bi);\n      if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;\n      chunkTail.extend(blockChunk);\n    });\n    return chunkTail;\n  }\n  extractInput(fromPos, toPos, flags) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    if (flags === void 0) {\n      flags = {};\n    }\n    if (fromPos === toPos) return '';\n    let input = '';\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, fromPos, toPos) => {\n      input += b.extractInput(fromPos, toPos, flags);\n    });\n    return input;\n  }\n  _findStopBefore(blockIndex) {\n    let stopBefore;\n    for (let si = 0; si < this._stops.length; ++si) {\n      const stop = this._stops[si];\n      if (stop <= blockIndex) stopBefore = stop;else break;\n    }\n    return stopBefore;\n  }\n\n  /** Appends placeholder depending on laziness */\n  _appendPlaceholder(toBlockIndex) {\n    const details = new ChangeDetails();\n    if (this.lazy && toBlockIndex == null) return details;\n    const startBlockIter = this._mapPosToBlock(this.displayValue.length);\n    if (!startBlockIter) return details;\n    const startBlockIndex = startBlockIter.index;\n    const endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n    this._blocks.slice(startBlockIndex, endBlockIndex).forEach(b => {\n      if (!b.lazy || toBlockIndex != null) {\n        var _blocks2;\n        details.aggregate(b._appendPlaceholder((_blocks2 = b._blocks) == null ? void 0 : _blocks2.length));\n      }\n    });\n    return details;\n  }\n\n  /** Finds block in pos */\n  _mapPosToBlock(pos) {\n    let accVal = '';\n    for (let bi = 0; bi < this._blocks.length; ++bi) {\n      const block = this._blocks[bi];\n      const blockStartPos = accVal.length;\n      accVal += block.displayValue;\n      if (pos <= accVal.length) {\n        return {\n          index: bi,\n          offset: pos - blockStartPos\n        };\n      }\n    }\n  }\n  _blockStartPos(blockIndex) {\n    return this._blocks.slice(0, blockIndex).reduce((pos, b) => pos += b.displayValue.length, 0);\n  }\n  _forEachBlocksInRange(fromPos, toPos, fn) {\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    const fromBlockIter = this._mapPosToBlock(fromPos);\n    if (fromBlockIter) {\n      const toBlockIter = this._mapPosToBlock(toPos);\n      // process first block\n      const isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\n      const fromBlockStartPos = fromBlockIter.offset;\n      const fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].displayValue.length;\n      fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\n      if (toBlockIter && !isSameBlock) {\n        // process intermediate blocks\n        for (let bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {\n          fn(this._blocks[bi], bi, 0, this._blocks[bi].displayValue.length);\n        }\n\n        // process last block\n        fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\n      }\n    }\n  }\n  remove(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    const removeDetails = super.remove(fromPos, toPos);\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n      removeDetails.aggregate(b.remove(bFromPos, bToPos));\n    });\n    return removeDetails;\n  }\n  nearestInputPos(cursorPos, direction) {\n    if (direction === void 0) {\n      direction = DIRECTION.NONE;\n    }\n    if (!this._blocks.length) return 0;\n    const cursor = new PatternCursor(this, cursorPos);\n    if (direction === DIRECTION.NONE) {\n      // -------------------------------------------------\n      // NONE should only go out from fixed to the right!\n      // -------------------------------------------------\n      if (cursor.pushRightBeforeInput()) return cursor.pos;\n      cursor.popState();\n      if (cursor.pushLeftBeforeInput()) return cursor.pos;\n      return this.displayValue.length;\n    }\n\n    // FORCE is only about a|* otherwise is 0\n    if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\n      // try to break fast when *|a\n      if (direction === DIRECTION.LEFT) {\n        cursor.pushRightBeforeFilled();\n        if (cursor.ok && cursor.pos === cursorPos) return cursorPos;\n        cursor.popState();\n      }\n\n      // forward flow\n      cursor.pushLeftBeforeInput();\n      cursor.pushLeftBeforeRequired();\n      cursor.pushLeftBeforeFilled();\n\n      // backward flow\n      if (direction === DIRECTION.LEFT) {\n        cursor.pushRightBeforeInput();\n        cursor.pushRightBeforeRequired();\n        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n        cursor.popState();\n        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n        cursor.popState();\n      }\n      if (cursor.ok) return cursor.pos;\n      if (direction === DIRECTION.FORCE_LEFT) return 0;\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n      return 0;\n    }\n    if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\n      // forward flow\n      cursor.pushRightBeforeInput();\n      cursor.pushRightBeforeRequired();\n      if (cursor.pushRightBeforeFilled()) return cursor.pos;\n      if (direction === DIRECTION.FORCE_RIGHT) return this.displayValue.length;\n\n      // backward flow\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n      return this.nearestInputPos(cursorPos, DIRECTION.LEFT);\n    }\n    return cursorPos;\n  }\n  totalInputPositions(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    let total = 0;\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n      total += b.totalInputPositions(bFromPos, bToPos);\n    });\n    return total;\n  }\n\n  /** Get block by name */\n  maskedBlock(name) {\n    return this.maskedBlocks(name)[0];\n  }\n\n  /** Get all blocks by name */\n  maskedBlocks(name) {\n    const indices = this._maskedBlocks[name];\n    if (!indices) return [];\n    return indices.map(gi => this._blocks[gi]);\n  }\n  pad(flags) {\n    const details = new ChangeDetails();\n    this._forEachBlocksInRange(0, this.displayValue.length, b => details.aggregate(b.pad(flags)));\n    return details;\n  }\n}\nMaskedPattern.DEFAULTS = {\n  ...Masked.DEFAULTS,\n  lazy: true,\n  placeholderChar: '_'\n};\nMaskedPattern.STOP_CHAR = '`';\nMaskedPattern.ESCAPE_CHAR = '\\\\';\nMaskedPattern.InputDefinition = PatternInputDefinition;\nMaskedPattern.FixedDefinition = PatternFixedDefinition;\nIMask.MaskedPattern = MaskedPattern;\n\nexport { MaskedPattern as default };\n","import ChangeDetails from '../core/change-details.js';\nimport IMask from '../core/holder.js';\nimport MaskedPattern from './pattern.js';\nimport '../core/utils.js';\nimport './base.js';\nimport '../core/continuous-tail-details.js';\nimport './factory.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n\n/** Pattern which accepts ranges */\nclass MaskedRange extends MaskedPattern {\n  /**\n    Optionally sets max length of pattern.\n    Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n  */\n\n  /** Min bound */\n\n  /** Max bound */\n\n  get _matchFrom() {\n    return this.maxLength - String(this.from).length;\n  }\n  constructor(opts) {\n    super(opts); // mask will be created in _update\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    const {\n      to = this.to || 0,\n      from = this.from || 0,\n      maxLength = this.maxLength || 0,\n      autofix = this.autofix,\n      ...patternOpts\n    } = opts;\n    this.to = to;\n    this.from = from;\n    this.maxLength = Math.max(String(to).length, maxLength);\n    this.autofix = autofix;\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    let sameCharsCount = 0;\n    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;\n    patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(this.maxLength - sameCharsCount);\n    super._update(patternOpts);\n  }\n  get isComplete() {\n    return super.isComplete && Boolean(this.value);\n  }\n  boundaries(str) {\n    let minstr = '';\n    let maxstr = '';\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\n    if (num) {\n      minstr = '0'.repeat(placeholder.length) + num;\n      maxstr = '9'.repeat(placeholder.length) + num;\n    }\n    minstr = minstr.padEnd(this.maxLength, '0');\n    maxstr = maxstr.padEnd(this.maxLength, '9');\n    return [minstr, maxstr];\n  }\n  doPrepareChar(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    let details;\n    [ch, details] = super.doPrepareChar(ch.replace(/\\D/g, ''), flags);\n    if (!ch) details.skip = !this.isComplete;\n    return [ch, details];\n  }\n  _appendCharRaw(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    if (!this.autofix || this.value.length + 1 > this.maxLength) return super._appendCharRaw(ch, flags);\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    const [minstr, maxstr] = this.boundaries(this.value + ch);\n    if (Number(maxstr) < this.from) return super._appendCharRaw(fromStr[this.value.length], flags);\n    if (Number(minstr) > this.to) {\n      if (!flags.tail && this.autofix === 'pad' && this.value.length + 1 < this.maxLength) {\n        return super._appendCharRaw(fromStr[this.value.length], flags).aggregate(this._appendCharRaw(ch, flags));\n      }\n      return super._appendCharRaw(toStr[this.value.length], flags);\n    }\n    return super._appendCharRaw(ch, flags);\n  }\n  doValidate(flags) {\n    const str = this.value;\n    const firstNonZero = str.search(/[^0]/);\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n    const [minstr, maxstr] = this.boundaries(str);\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to && super.doValidate(flags);\n  }\n  pad(flags) {\n    const details = new ChangeDetails();\n    if (this.value.length === this.maxLength) return details;\n    const value = this.value;\n    const padLength = this.maxLength - this.value.length;\n    if (padLength) {\n      this.reset();\n      for (let i = 0; i < padLength; ++i) {\n        details.aggregate(super._appendCharRaw('0', flags));\n      }\n\n      // append tail\n      value.split('').forEach(ch => this._appendCharRaw(ch));\n    }\n    return details;\n  }\n}\nIMask.MaskedRange = MaskedRange;\n\nexport { MaskedRange as default };\n","import MaskedPattern from './pattern.js';\nimport MaskedRange from './range.js';\nimport IMask from '../core/holder.js';\nimport { isString } from '../core/utils.js';\nimport '../core/change-details.js';\nimport './base.js';\nimport '../core/continuous-tail-details.js';\nimport './factory.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n\nconst DefaultPattern = 'd{.}`m{.}`Y';\n\n// Make format and parse required when pattern is provided\n\n/** Date mask */\nclass MaskedDate extends MaskedPattern {\n  static extractPatternOptions(opts) {\n    const {\n      mask,\n      pattern,\n      ...patternOpts\n    } = opts;\n    return {\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern\n    };\n  }\n\n  /** Pattern mask for date according to {@link MaskedDate#format} */\n\n  /** Start date */\n\n  /** End date */\n\n  /** Format typed value to string */\n\n  /** Parse string to get typed value */\n\n  constructor(opts) {\n    super(MaskedDate.extractPatternOptions({\n      ...MaskedDate.DEFAULTS,\n      ...opts\n    }));\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    const {\n      mask,\n      pattern,\n      blocks,\n      ...patternOpts\n    } = {\n      ...MaskedDate.DEFAULTS,\n      ...opts\n    };\n    const patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());\n    // adjust year block\n    if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();\n    if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();\n    if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to) {\n      patternBlocks.m.from = opts.min.getMonth() + 1;\n      patternBlocks.m.to = opts.max.getMonth() + 1;\n      if (patternBlocks.m.from === patternBlocks.m.to) {\n        patternBlocks.d.from = opts.min.getDate();\n        patternBlocks.d.to = opts.max.getDate();\n      }\n    }\n    Object.assign(patternBlocks, this.blocks, blocks);\n    super._update({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern,\n      blocks: patternBlocks\n    });\n  }\n  doValidate(flags) {\n    const date = this.date;\n    return super.doValidate(flags) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n  }\n\n  /** Checks if date is exists */\n  isDateExist(str) {\n    return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n  }\n\n  /** Parsed Date */\n  get date() {\n    return this.typedValue;\n  }\n  set date(date) {\n    this.typedValue = date;\n  }\n  get typedValue() {\n    return this.isComplete ? super.typedValue : null;\n  }\n  set typedValue(value) {\n    super.typedValue = value;\n  }\n  maskEquals(mask) {\n    return mask === Date || super.maskEquals(mask);\n  }\n  optionsIsChanged(opts) {\n    return super.optionsIsChanged(MaskedDate.extractPatternOptions(opts));\n  }\n}\nMaskedDate.GET_DEFAULT_BLOCKS = () => ({\n  d: {\n    mask: MaskedRange,\n    from: 1,\n    to: 31,\n    maxLength: 2\n  },\n  m: {\n    mask: MaskedRange,\n    from: 1,\n    to: 12,\n    maxLength: 2\n  },\n  Y: {\n    mask: MaskedRange,\n    from: 1900,\n    to: 9999\n  }\n});\nMaskedDate.DEFAULTS = {\n  ...MaskedPattern.DEFAULTS,\n  mask: Date,\n  pattern: DefaultPattern,\n  format: (date, masked) => {\n    if (!date) return '';\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return [day, month, year].join('.');\n  },\n  parse: (str, masked) => {\n    const [day, month, year] = str.split('.').map(Number);\n    return new Date(year, month - 1, day);\n  }\n};\nIMask.MaskedDate = MaskedDate;\n\nexport { MaskedDate as default };\n","import { DIRECTION, objectIncludes } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport createMask, { normalizeOpts } from './factory.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\n/** Dynamic mask for choosing appropriate mask in run-time */\nclass MaskedDynamic extends Masked {\n  constructor(opts) {\n    super({\n      ...MaskedDynamic.DEFAULTS,\n      ...opts\n    });\n    this.currentMask = undefined;\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    super._update(opts);\n    if ('mask' in opts) {\n      this.exposeMask = undefined;\n      // mask could be totally dynamic with only `dispatch` option\n      this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(m => {\n        const {\n          expose,\n          ...maskOpts\n        } = normalizeOpts(m);\n        const masked = createMask({\n          overwrite: this._overwrite,\n          eager: this._eager,\n          skipInvalid: this._skipInvalid,\n          ...maskOpts\n        });\n        if (expose) this.exposeMask = masked;\n        return masked;\n      }) : [];\n\n      // this.currentMask = this.doDispatch(''); // probably not needed but lets see\n    }\n  }\n  _appendCharRaw(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const details = this._applyDispatch(ch, flags);\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));\n    }\n    return details;\n  }\n  _applyDispatch(appended, flags, tail) {\n    if (appended === void 0) {\n      appended = '';\n    }\n    if (flags === void 0) {\n      flags = {};\n    }\n    if (tail === void 0) {\n      tail = '';\n    }\n    const prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\n    const inputValue = this.rawInputValue;\n    const insertValue = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._rawInputValue : inputValue;\n    const tailValue = inputValue.slice(insertValue.length);\n    const prevMask = this.currentMask;\n    const details = new ChangeDetails();\n    const prevMaskState = prevMask == null ? void 0 : prevMask.state;\n\n    // clone flags to prevent overwriting `_beforeTailState`\n    this.currentMask = this.doDispatch(appended, {\n      ...flags\n    }, tail);\n\n    // restore state after dispatch\n    if (this.currentMask) {\n      if (this.currentMask !== prevMask) {\n        // if mask changed reapply input\n        this.currentMask.reset();\n        if (insertValue) {\n          this.currentMask.append(insertValue, {\n            raw: true\n          });\n          details.tailShift = this.currentMask.value.length - prevValueBeforeTail.length;\n        }\n        if (tailValue) {\n          details.tailShift += this.currentMask.append(tailValue, {\n            raw: true,\n            tail: true\n          }).tailShift;\n        }\n      } else if (prevMaskState) {\n        // Dispatch can do something bad with state, so\n        // restore prev mask state\n        this.currentMask.state = prevMaskState;\n      }\n    }\n    return details;\n  }\n  _appendPlaceholder() {\n    const details = this._applyDispatch();\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendPlaceholder());\n    }\n    return details;\n  }\n  _appendEager() {\n    const details = this._applyDispatch();\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendEager());\n    }\n    return details;\n  }\n  appendTail(tail) {\n    const details = new ChangeDetails();\n    if (tail) details.aggregate(this._applyDispatch('', {}, tail));\n    return details.aggregate(this.currentMask ? this.currentMask.appendTail(tail) : super.appendTail(tail));\n  }\n  currentMaskFlags(flags) {\n    var _flags$_beforeTailSta, _flags$_beforeTailSta2;\n    return {\n      ...flags,\n      _beforeTailState: ((_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.currentMaskRef) === this.currentMask && ((_flags$_beforeTailSta2 = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta2.currentMask) || flags._beforeTailState\n    };\n  }\n  doDispatch(appended, flags, tail) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    if (tail === void 0) {\n      tail = '';\n    }\n    return this.dispatch(appended, this, flags, tail);\n  }\n  doValidate(flags) {\n    return super.doValidate(flags) && (!this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags)));\n  }\n  doPrepare(str, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    let [s, details] = super.doPrepare(str, flags);\n    if (this.currentMask) {\n      let currentDetails;\n      [s, currentDetails] = super.doPrepare(s, this.currentMaskFlags(flags));\n      details = details.aggregate(currentDetails);\n    }\n    return [s, details];\n  }\n  doPrepareChar(str, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    let [s, details] = super.doPrepareChar(str, flags);\n    if (this.currentMask) {\n      let currentDetails;\n      [s, currentDetails] = super.doPrepareChar(s, this.currentMaskFlags(flags));\n      details = details.aggregate(currentDetails);\n    }\n    return [s, details];\n  }\n  reset() {\n    var _this$currentMask;\n    (_this$currentMask = this.currentMask) == null || _this$currentMask.reset();\n    this.compiledMasks.forEach(m => m.reset());\n  }\n  get value() {\n    return this.exposeMask ? this.exposeMask.value : this.currentMask ? this.currentMask.value : '';\n  }\n  set value(value) {\n    if (this.exposeMask) {\n      this.exposeMask.value = value;\n      this.currentMask = this.exposeMask;\n      this._applyDispatch();\n    } else super.value = value;\n  }\n  get unmaskedValue() {\n    return this.exposeMask ? this.exposeMask.unmaskedValue : this.currentMask ? this.currentMask.unmaskedValue : '';\n  }\n  set unmaskedValue(unmaskedValue) {\n    if (this.exposeMask) {\n      this.exposeMask.unmaskedValue = unmaskedValue;\n      this.currentMask = this.exposeMask;\n      this._applyDispatch();\n    } else super.unmaskedValue = unmaskedValue;\n  }\n  get typedValue() {\n    return this.exposeMask ? this.exposeMask.typedValue : this.currentMask ? this.currentMask.typedValue : '';\n  }\n  set typedValue(typedValue) {\n    if (this.exposeMask) {\n      this.exposeMask.typedValue = typedValue;\n      this.currentMask = this.exposeMask;\n      this._applyDispatch();\n      return;\n    }\n    let unmaskedValue = String(typedValue);\n\n    // double check it\n    if (this.currentMask) {\n      this.currentMask.typedValue = typedValue;\n      unmaskedValue = this.currentMask.unmaskedValue;\n    }\n    this.unmaskedValue = unmaskedValue;\n  }\n  get displayValue() {\n    return this.currentMask ? this.currentMask.displayValue : '';\n  }\n  get isComplete() {\n    var _this$currentMask2;\n    return Boolean((_this$currentMask2 = this.currentMask) == null ? void 0 : _this$currentMask2.isComplete);\n  }\n  get isFilled() {\n    var _this$currentMask3;\n    return Boolean((_this$currentMask3 = this.currentMask) == null ? void 0 : _this$currentMask3.isFilled);\n  }\n  remove(fromPos, toPos) {\n    const details = new ChangeDetails();\n    if (this.currentMask) {\n      details.aggregate(this.currentMask.remove(fromPos, toPos))\n      // update with dispatch\n      .aggregate(this._applyDispatch());\n    }\n    return details;\n  }\n  get state() {\n    var _this$currentMask4;\n    return {\n      ...super.state,\n      _rawInputValue: this.rawInputValue,\n      compiledMasks: this.compiledMasks.map(m => m.state),\n      currentMaskRef: this.currentMask,\n      currentMask: (_this$currentMask4 = this.currentMask) == null ? void 0 : _this$currentMask4.state\n    };\n  }\n  set state(state) {\n    const {\n      compiledMasks,\n      currentMaskRef,\n      currentMask,\n      ...maskedState\n    } = state;\n    if (compiledMasks) this.compiledMasks.forEach((m, mi) => m.state = compiledMasks[mi]);\n    if (currentMaskRef != null) {\n      this.currentMask = currentMaskRef;\n      this.currentMask.state = currentMask;\n    }\n    super.state = maskedState;\n  }\n  extractInput(fromPos, toPos, flags) {\n    return this.currentMask ? this.currentMask.extractInput(fromPos, toPos, flags) : '';\n  }\n  extractTail(fromPos, toPos) {\n    return this.currentMask ? this.currentMask.extractTail(fromPos, toPos) : super.extractTail(fromPos, toPos);\n  }\n  doCommit() {\n    if (this.currentMask) this.currentMask.doCommit();\n    super.doCommit();\n  }\n  nearestInputPos(cursorPos, direction) {\n    return this.currentMask ? this.currentMask.nearestInputPos(cursorPos, direction) : super.nearestInputPos(cursorPos, direction);\n  }\n  get overwrite() {\n    return this.currentMask ? this.currentMask.overwrite : this._overwrite;\n  }\n  set overwrite(overwrite) {\n    this._overwrite = overwrite;\n  }\n  get eager() {\n    return this.currentMask ? this.currentMask.eager : this._eager;\n  }\n  set eager(eager) {\n    this._eager = eager;\n  }\n  get skipInvalid() {\n    return this.currentMask ? this.currentMask.skipInvalid : this._skipInvalid;\n  }\n  set skipInvalid(skipInvalid) {\n    this._skipInvalid = skipInvalid;\n  }\n  get autofix() {\n    return this.currentMask ? this.currentMask.autofix : this._autofix;\n  }\n  set autofix(autofix) {\n    this._autofix = autofix;\n  }\n  maskEquals(mask) {\n    return Array.isArray(mask) ? this.compiledMasks.every((m, mi) => {\n      if (!mask[mi]) return;\n      const {\n        mask: oldMask,\n        ...restOpts\n      } = mask[mi];\n      return objectIncludes(m, restOpts) && m.maskEquals(oldMask);\n    }) : super.maskEquals(mask);\n  }\n  typedValueEquals(value) {\n    var _this$currentMask5;\n    return Boolean((_this$currentMask5 = this.currentMask) == null ? void 0 : _this$currentMask5.typedValueEquals(value));\n  }\n}\n/** Currently chosen mask */\n/** Currently chosen mask */\n/** Compliled {@link Masked} options */\n/** Chooses {@link Masked} depending on input value */\nMaskedDynamic.DEFAULTS = {\n  ...Masked.DEFAULTS,\n  dispatch: (appended, masked, flags, tail) => {\n    if (!masked.compiledMasks.length) return;\n    const inputValue = masked.rawInputValue;\n\n    // simulate input\n    const inputs = masked.compiledMasks.map((m, index) => {\n      const isCurrent = masked.currentMask === m;\n      const startInputPos = isCurrent ? m.displayValue.length : m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT);\n      if (m.rawInputValue !== inputValue) {\n        m.reset();\n        m.append(inputValue, {\n          raw: true\n        });\n      } else if (!isCurrent) {\n        m.remove(startInputPos);\n      }\n      m.append(appended, masked.currentMaskFlags(flags));\n      m.appendTail(tail);\n      return {\n        index,\n        weight: m.rawInputValue.length,\n        totalInputPositions: m.totalInputPositions(0, Math.max(startInputPos, m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT)))\n      };\n    });\n\n    // pop masks with longer values first\n    inputs.sort((i1, i2) => i2.weight - i1.weight || i2.totalInputPositions - i1.totalInputPositions);\n    return masked.compiledMasks[inputs[0].index];\n  }\n};\nIMask.MaskedDynamic = MaskedDynamic;\n\nexport { MaskedDynamic as default };\n","import MaskedPattern from './pattern.js';\nimport IMask from '../core/holder.js';\nimport ChangeDetails from '../core/change-details.js';\nimport { DIRECTION } from '../core/utils.js';\nimport ContinuousTailDetails from '../core/continuous-tail-details.js';\nimport './base.js';\nimport './factory.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n\n/** Pattern which validates enum values */\nclass MaskedEnum extends MaskedPattern {\n  constructor(opts) {\n    super({\n      ...MaskedEnum.DEFAULTS,\n      ...opts\n    }); // mask will be created in _update\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    const {\n      enum: enum_,\n      ...eopts\n    } = opts;\n    if (enum_) {\n      const lengths = enum_.map(e => e.length);\n      const requiredLength = Math.min(...lengths);\n      const optionalLength = Math.max(...lengths) - requiredLength;\n      eopts.mask = '*'.repeat(requiredLength);\n      if (optionalLength) eopts.mask += '[' + '*'.repeat(optionalLength) + ']';\n      this.enum = enum_;\n    }\n    super._update(eopts);\n  }\n  _appendCharRaw(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const matchFrom = Math.min(this.nearestInputPos(0, DIRECTION.FORCE_RIGHT), this.value.length);\n    const matches = this.enum.filter(e => this.matchValue(e, this.unmaskedValue + ch, matchFrom));\n    if (matches.length) {\n      if (matches.length === 1) {\n        this._forEachBlocksInRange(0, this.value.length, (b, bi) => {\n          const mch = matches[0][bi];\n          if (bi >= this.value.length || mch === b.value) return;\n          b.reset();\n          b._appendChar(mch, flags);\n        });\n      }\n      const d = super._appendCharRaw(matches[0][this.value.length], flags);\n      if (matches.length === 1) {\n        matches[0].slice(this.unmaskedValue.length).split('').forEach(mch => d.aggregate(super._appendCharRaw(mch)));\n      }\n      return d;\n    }\n    return new ChangeDetails({\n      skip: !this.isComplete\n    });\n  }\n  extractTail(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    // just drop tail\n    return new ContinuousTailDetails('', fromPos);\n  }\n  remove(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    if (fromPos === toPos) return new ChangeDetails();\n    const matchFrom = Math.min(super.nearestInputPos(0, DIRECTION.FORCE_RIGHT), this.value.length);\n    let pos;\n    for (pos = fromPos; pos >= 0; --pos) {\n      const matches = this.enum.filter(e => this.matchValue(e, this.value.slice(matchFrom, pos), matchFrom));\n      if (matches.length > 1) break;\n    }\n    const details = super.remove(pos, toPos);\n    details.tailShift += pos - fromPos;\n    return details;\n  }\n  get isComplete() {\n    return this.enum.indexOf(this.value) >= 0;\n  }\n}\n/** Match enum value */\nMaskedEnum.DEFAULTS = {\n  ...MaskedPattern.DEFAULTS,\n  matchValue: (estr, istr, matchFrom) => estr.indexOf(istr, matchFrom) === matchFrom\n};\nIMask.MaskedEnum = MaskedEnum;\n\nexport { MaskedEnum as default };\n","import Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/change-details.js';\nimport '../core/continuous-tail-details.js';\nimport '../core/utils.js';\n\n/** Masking by custom Function */\nclass MaskedFunction extends Masked {\n  /** */\n\n  /** Enable characters overwriting */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    super._update({\n      ...opts,\n      validate: opts.mask\n    });\n  }\n}\nIMask.MaskedFunction = MaskedFunction;\n\nexport { MaskedFunction as default };\n","import { escapeRegExp, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\nvar _MaskedNumber;\n/** Number mask */\nclass MaskedNumber extends Masked {\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n\n  /** Enable characters overwriting */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** Format typed value to string */\n\n  /** Parse string to get typed value */\n\n  constructor(opts) {\n    super({\n      ...MaskedNumber.DEFAULTS,\n      ...opts\n    });\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    super._update(opts);\n    this._updateRegExps();\n  }\n  _updateRegExps() {\n    const start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n    const mid = '\\\\d*';\n    const end = (this.scale ? \"(\" + escapeRegExp(this.radix) + \"\\\\d{0,\" + this.scale + \"})?\" : '') + '$';\n    this._numberRegExp = new RegExp(start + mid + end);\n    this._mapToRadixRegExp = new RegExp(\"[\" + this.mapToRadix.map(escapeRegExp).join('') + \"]\", 'g');\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n  }\n  _removeThousandsSeparators(value) {\n    return value.replace(this._thousandsSeparatorRegExp, '');\n  }\n  _insertThousandsSeparators(value) {\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n    const parts = value.split(this.radix);\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n    return parts.join(this.radix);\n  }\n  doPrepareChar(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const [prepCh, details] = super.doPrepareChar(this._removeThousandsSeparators(this.scale && this.mapToRadix.length && (\n    /*\n      radix should be mapped when\n      1) input is done from keyboard = flags.input && flags.raw\n      2) unmasked value is set = !flags.input && !flags.raw\n      and should not be mapped when\n      1) value is set = flags.input && !flags.raw\n      2) raw value is set = !flags.input && flags.raw\n    */\n    flags.input && flags.raw || !flags.input && !flags.raw) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch), flags);\n    if (ch && !prepCh) details.skip = true;\n    if (prepCh && !this.allowPositive && !this.value && prepCh !== '-') details.aggregate(this._appendChar('-'));\n    return [prepCh, details];\n  }\n  _separatorsCount(to, extendOnSeparators) {\n    if (extendOnSeparators === void 0) {\n      extendOnSeparators = false;\n    }\n    let count = 0;\n    for (let pos = 0; pos < to; ++pos) {\n      if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n        ++count;\n        if (extendOnSeparators) to += this.thousandsSeparator.length;\n      }\n    }\n    return count;\n  }\n  _separatorsCountFromSlice(slice) {\n    if (slice === void 0) {\n      slice = this._value;\n    }\n    return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n  }\n  extractInput(fromPos, toPos, flags) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n    return this._removeThousandsSeparators(super.extractInput(fromPos, toPos, flags));\n  }\n  _appendCharRaw(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n    const prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n    this._value = this._removeThousandsSeparators(this.value);\n    const oldValue = this._value;\n    this._value += ch;\n    const num = this.number;\n    let accepted = !isNaN(num);\n    let skip = false;\n    if (accepted) {\n      let fixedNum;\n      if (this.min != null && this.min < 0 && this.number < this.min) fixedNum = this.min;\n      if (this.max != null && this.max > 0 && this.number > this.max) fixedNum = this.max;\n      if (fixedNum != null) {\n        if (this.autofix) {\n          this._value = this.format(fixedNum, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);\n          skip || (skip = oldValue === this._value && !flags.tail); // if not changed on tail it's still ok to proceed\n        } else {\n          accepted = false;\n        }\n      }\n      accepted && (accepted = Boolean(this._value.match(this._numberRegExp)));\n    }\n    let appendDetails;\n    if (!accepted) {\n      this._value = oldValue;\n      appendDetails = new ChangeDetails();\n    } else {\n      appendDetails = new ChangeDetails({\n        inserted: this._value.slice(oldValue.length),\n        rawInserted: skip ? '' : ch,\n        skip\n      });\n    }\n    this._value = this._insertThousandsSeparators(this._value);\n    const beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n    appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n    return appendDetails;\n  }\n  _findSeparatorAround(pos) {\n    if (this.thousandsSeparator) {\n      const searchFrom = pos - this.thousandsSeparator.length + 1;\n      const separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n      if (separatorPos <= pos) return separatorPos;\n    }\n    return -1;\n  }\n  _adjustRangeWithSeparators(from, to) {\n    const separatorAroundFromPos = this._findSeparatorAround(from);\n    if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n    const separatorAroundToPos = this._findSeparatorAround(to);\n    if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n    return [from, to];\n  }\n  remove(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n    const valueBeforePos = this.value.slice(0, fromPos);\n    const valueAfterPos = this.value.slice(toPos);\n    const prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n    this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n    return new ChangeDetails({\n      tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n    });\n  }\n  nearestInputPos(cursorPos, direction) {\n    if (!this.thousandsSeparator) return cursorPos;\n    switch (direction) {\n      case DIRECTION.NONE:\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        {\n          const separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n          if (separatorAtLeftPos >= 0) {\n            const separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n            if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n              return separatorAtLeftPos;\n            }\n          }\n          break;\n        }\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n        {\n          const separatorAtRightPos = this._findSeparatorAround(cursorPos);\n          if (separatorAtRightPos >= 0) {\n            return separatorAtRightPos + this.thousandsSeparator.length;\n          }\n        }\n    }\n    return cursorPos;\n  }\n  doCommit() {\n    if (this.value) {\n      const number = this.number;\n      let validnum = number;\n\n      // check bounds\n      if (this.min != null) validnum = Math.max(validnum, this.min);\n      if (this.max != null) validnum = Math.min(validnum, this.max);\n      if (validnum !== number) this.unmaskedValue = this.format(validnum, this);\n      let formatted = this.value;\n      if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n      if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n      this._value = formatted;\n    }\n    super.doCommit();\n  }\n  _normalizeZeros(value) {\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\n\n    // remove leading zeros\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\n    // add leading zero\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n    if (parts.length > 1) {\n      parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n      if (!parts[1].length) parts.length = 1; // remove fractional\n    }\n    return this._insertThousandsSeparators(parts.join(this.radix));\n  }\n  _padFractionalZeros(value) {\n    if (!value) return value;\n    const parts = value.split(this.radix);\n    if (parts.length < 2) parts.push('');\n    parts[1] = parts[1].padEnd(this.scale, '0');\n    return parts.join(this.radix);\n  }\n  doSkipInvalid(ch, flags, checkTail) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (ch === this.radix || ch === MaskedNumber.UNMASKED_RADIX || this.mapToRadix.includes(ch));\n    return super.doSkipInvalid(ch, flags, checkTail) && !dropFractional;\n  }\n  get unmaskedValue() {\n    return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, MaskedNumber.UNMASKED_RADIX);\n  }\n  set unmaskedValue(unmaskedValue) {\n    super.unmaskedValue = unmaskedValue;\n  }\n  get typedValue() {\n    return this.parse(this.unmaskedValue, this);\n  }\n  set typedValue(n) {\n    this.rawInputValue = this.format(n, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);\n  }\n\n  /** Parsed Number */\n  get number() {\n    return this.typedValue;\n  }\n  set number(number) {\n    this.typedValue = number;\n  }\n  get allowNegative() {\n    return this.min != null && this.min < 0 || this.max != null && this.max < 0;\n  }\n  get allowPositive() {\n    return this.min != null && this.min > 0 || this.max != null && this.max > 0;\n  }\n  typedValueEquals(value) {\n    // handle  0 -> '' case (typed = 0 even if value = '')\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n    return (super.typedValueEquals(value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');\n  }\n}\n_MaskedNumber = MaskedNumber;\nMaskedNumber.UNMASKED_RADIX = '.';\nMaskedNumber.EMPTY_VALUES = [...Masked.EMPTY_VALUES, 0];\nMaskedNumber.DEFAULTS = {\n  ...Masked.DEFAULTS,\n  mask: Number,\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: [_MaskedNumber.UNMASKED_RADIX],\n  min: Number.MIN_SAFE_INTEGER,\n  max: Number.MAX_SAFE_INTEGER,\n  scale: 2,\n  normalizeZeros: true,\n  padFractionalZeros: false,\n  parse: Number,\n  format: n => n.toLocaleString('en-US', {\n    useGrouping: false,\n    maximumFractionDigits: 20\n  })\n};\nIMask.MaskedNumber = MaskedNumber;\n\nexport { MaskedNumber as default };\n","import createMask from './factory.js';\nimport IMask from '../core/holder.js';\nimport '../core/utils.js';\n\n/** Mask pipe source and destination types */\nconst PIPE_TYPE = {\n  MASKED: 'value',\n  UNMASKED: 'unmaskedValue',\n  TYPED: 'typedValue'\n};\n/** Creates new pipe function depending on mask type, source and destination options */\nfunction createPipe(arg, from, to) {\n  if (from === void 0) {\n    from = PIPE_TYPE.MASKED;\n  }\n  if (to === void 0) {\n    to = PIPE_TYPE.MASKED;\n  }\n  const masked = createMask(arg);\n  return value => masked.runIsolated(m => {\n    m[from] = value;\n    return m[to];\n  });\n}\n\n/** Pipes value through mask depending on mask type, source and destination options */\nfunction pipe(value, mask, from, to) {\n  return createPipe(mask, from, to)(value);\n}\nIMask.PIPE_TYPE = PIPE_TYPE;\nIMask.createPipe = createPipe;\nIMask.pipe = pipe;\n\nexport { PIPE_TYPE, createPipe, pipe };\n","import ChangeDetails from '../core/change-details.js';\nimport IMask from '../core/holder.js';\nimport createMask, { normalizeOpts } from './factory.js';\nimport MaskedPattern from './pattern.js';\nimport '../core/utils.js';\nimport './base.js';\nimport '../core/continuous-tail-details.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n\n/** Pattern mask */\nclass RepeatBlock extends MaskedPattern {\n  get repeatFrom() {\n    var _ref;\n    return (_ref = Array.isArray(this.repeat) ? this.repeat[0] : this.repeat === Infinity ? 0 : this.repeat) != null ? _ref : 0;\n  }\n  get repeatTo() {\n    var _ref2;\n    return (_ref2 = Array.isArray(this.repeat) ? this.repeat[1] : this.repeat) != null ? _ref2 : Infinity;\n  }\n  constructor(opts) {\n    super(opts);\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    var _ref3, _ref4, _this$_blocks;\n    const {\n      repeat,\n      ...blockOpts\n    } = normalizeOpts(opts); // TODO type\n    this._blockOpts = Object.assign({}, this._blockOpts, blockOpts);\n    const block = createMask(this._blockOpts);\n    this.repeat = (_ref3 = (_ref4 = repeat != null ? repeat : block.repeat) != null ? _ref4 : this.repeat) != null ? _ref3 : Infinity; // TODO type\n\n    super._update({\n      mask: 'm'.repeat(Math.max(this.repeatTo === Infinity && ((_this$_blocks = this._blocks) == null ? void 0 : _this$_blocks.length) || 0, this.repeatFrom)),\n      blocks: {\n        m: block\n      },\n      eager: block.eager,\n      overwrite: block.overwrite,\n      skipInvalid: block.skipInvalid,\n      lazy: block.lazy,\n      placeholderChar: block.placeholderChar,\n      displayChar: block.displayChar\n    });\n  }\n  _allocateBlock(bi) {\n    if (bi < this._blocks.length) return this._blocks[bi];\n    if (this.repeatTo === Infinity || this._blocks.length < this.repeatTo) {\n      this._blocks.push(createMask(this._blockOpts));\n      this.mask += 'm';\n      return this._blocks[this._blocks.length - 1];\n    }\n  }\n  _appendCharRaw(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    const details = new ChangeDetails();\n    for (let bi = (_this$_mapPosToBlock$ = (_this$_mapPosToBlock = this._mapPosToBlock(this.displayValue.length)) == null ? void 0 : _this$_mapPosToBlock.index) != null ? _this$_mapPosToBlock$ : Math.max(this._blocks.length - 1, 0), block, allocated;\n    // try to get a block or\n    // try to allocate a new block if not allocated already\n    block = (_this$_blocks$bi = this._blocks[bi]) != null ? _this$_blocks$bi : allocated = !allocated && this._allocateBlock(bi); ++bi) {\n      var _this$_mapPosToBlock$, _this$_mapPosToBlock, _this$_blocks$bi, _flags$_beforeTailSta;\n      const blockDetails = block._appendChar(ch, {\n        ...flags,\n        _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) == null || (_flags$_beforeTailSta = _flags$_beforeTailSta._blocks) == null ? void 0 : _flags$_beforeTailSta[bi]\n      });\n      if (blockDetails.skip && allocated) {\n        // remove the last allocated block and break\n        this._blocks.pop();\n        this.mask = this.mask.slice(1);\n        break;\n      }\n      details.aggregate(blockDetails);\n      if (blockDetails.consumed) break; // go next char\n    }\n    return details;\n  }\n  _trimEmptyTail(fromPos, toPos) {\n    var _this$_mapPosToBlock2, _this$_mapPosToBlock3;\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    const firstBlockIndex = Math.max(((_this$_mapPosToBlock2 = this._mapPosToBlock(fromPos)) == null ? void 0 : _this$_mapPosToBlock2.index) || 0, this.repeatFrom, 0);\n    let lastBlockIndex;\n    if (toPos != null) lastBlockIndex = (_this$_mapPosToBlock3 = this._mapPosToBlock(toPos)) == null ? void 0 : _this$_mapPosToBlock3.index;\n    if (lastBlockIndex == null) lastBlockIndex = this._blocks.length - 1;\n    let removeCount = 0;\n    for (let blockIndex = lastBlockIndex; firstBlockIndex <= blockIndex; --blockIndex, ++removeCount) {\n      if (this._blocks[blockIndex].unmaskedValue) break;\n    }\n    if (removeCount) {\n      this._blocks.splice(lastBlockIndex - removeCount + 1, removeCount);\n      this.mask = this.mask.slice(removeCount);\n    }\n  }\n  reset() {\n    super.reset();\n    this._trimEmptyTail();\n  }\n  remove(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos === void 0) {\n      toPos = this.displayValue.length;\n    }\n    const removeDetails = super.remove(fromPos, toPos);\n    this._trimEmptyTail(fromPos, toPos);\n    return removeDetails;\n  }\n  totalInputPositions(fromPos, toPos) {\n    if (fromPos === void 0) {\n      fromPos = 0;\n    }\n    if (toPos == null && this.repeatTo === Infinity) return Infinity;\n    return super.totalInputPositions(fromPos, toPos);\n  }\n  get state() {\n    return super.state;\n  }\n  set state(state) {\n    this._blocks.length = state._blocks.length;\n    this.mask = this.mask.slice(0, this._blocks.length);\n    super.state = state;\n  }\n}\nIMask.RepeatBlock = RepeatBlock;\n\nexport { RepeatBlock as default };\n","export { default as InputMask } from './controls/input.js';\nimport IMask from './core/holder.js';\nexport { default as HTMLContenteditableMaskElement } from './controls/html-contenteditable-mask-element.js';\nexport { default as HTMLInputMaskElement } from './controls/html-input-mask-element.js';\nexport { default as HTMLMaskElement } from './controls/html-mask-element.js';\nexport { default as MaskElement } from './controls/mask-element.js';\nexport { default as ChangeDetails } from './core/change-details.js';\nexport { DIRECTION, forceDirection } from './core/utils.js';\nexport { default as Masked } from './masked/base.js';\nexport { default as MaskedDate } from './masked/date.js';\nexport { default as MaskedDynamic } from './masked/dynamic.js';\nexport { default as MaskedEnum } from './masked/enum.js';\nexport { default as createMask, normalizeOpts } from './masked/factory.js';\nexport { default as MaskedFunction } from './masked/function.js';\nexport { default as MaskedNumber } from './masked/number.js';\nexport { default as MaskedPattern } from './masked/pattern.js';\nexport { default as ChunksTailDetails } from './masked/pattern/chunk-tail-details.js';\nexport { default as PatternFixedDefinition } from './masked/pattern/fixed-definition.js';\nexport { default as PatternInputDefinition } from './masked/pattern/input-definition.js';\nexport { PIPE_TYPE, createPipe, pipe } from './masked/pipe.js';\nexport { default as MaskedRange } from './masked/range.js';\nexport { default as MaskedRegExp } from './masked/regexp.js';\nexport { default as RepeatBlock } from './masked/repeat.js';\nimport './core/action-details.js';\nimport './controls/input-history.js';\nimport './core/continuous-tail-details.js';\nimport './masked/pattern/cursor.js';\n\ntry {\n  globalThis.IMask = IMask;\n} catch {}\n\nexport { IMask as default };\n","import { ready } from \"../../js/utils/documentReady\";\nimport IMask from \"imask\";\n\nready(function () {\n  const inputs = document.querySelectorAll(\".input\");\n  if (inputs.length !== 0) {\n    for (let input of inputs) {\n      if (input.value.length !== 0) input.classList.add(\"input--has-value\");\n      input.addEventListener(\"input\", function () {\n        this.value.length !== 0 ? this.classList.add(\"input--has-value\") : this.classList.remove(\"input--has-value\");\n      });\n    }\n  }\n\n  const phoneFields = document.querySelectorAll(\"[data-phone-field]\");\n  if (phoneFields) {\n    phoneFields.forEach((field) => {\n      IMask(field, {\n        lazy: true,\n        mask: \"+{7} (000) 000 00 00\",\n        prepare: function (appended, masked) {\n          if (appended === \"8\" && masked.value === \"\") {\n            return \"+7\";\n          }\n          return appended;\n        },\n      });\n    });\n  }\n\n  const numberFields = document.querySelectorAll(\"input[data-number]\");\n  if (numberFields) {\n    numberFields.forEach((field) => {\n      IMask(field, {\n        mask: Number,\n        min: 0,\n      });\n    });\n  }\n\n  const passportRussia = document.querySelectorAll(\"input[data-passport-russia]\");\n  if (passportRussia) {\n    passportRussia.forEach((field) => {\n      IMask(field, {\n        lazy: true,\n        mask: \"0000 000000\",\n      });\n    });\n  }\n\n  const passportInt = document.querySelectorAll(\"input[data-passport-int]\");\n  if (passportInt) {\n    passportInt.forEach((field) => {\n      IMask(field, {\n        lazy: true,\n        mask: \"00 0000000\",\n      });\n    });\n  }\n});\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.SlimSelect = factory());\n})(this, (function () { 'use strict';\n\n    class CssClasses {\n        constructor(classes) {\n            if (!classes) {\n                classes = {};\n            }\n            this.main = classes.main || 'ss-main';\n            this.placeholder = classes.placeholder || 'ss-placeholder';\n            this.values = classes.values || 'ss-values';\n            this.single = classes.single || 'ss-single';\n            this.max = classes.max || 'ss-max';\n            this.value = classes.value || 'ss-value';\n            this.valueText = classes.valueText || 'ss-value-text';\n            this.valueDelete = classes.valueDelete || 'ss-value-delete';\n            this.valueOut = classes.valueOut || 'ss-value-out';\n            this.deselect = classes.deselect || 'ss-deselect';\n            this.deselectPath = classes.deselectPath || 'M10,10 L90,90 M10,90 L90,10';\n            this.arrow = classes.arrow || 'ss-arrow';\n            this.arrowClose = classes.arrowClose || 'M10,30 L50,70 L90,30';\n            this.arrowOpen = classes.arrowOpen || 'M10,70 L50,30 L90,70';\n            this.content = classes.content || 'ss-content';\n            this.openAbove = classes.openAbove || 'ss-open-above';\n            this.openBelow = classes.openBelow || 'ss-open-below';\n            this.search = classes.search || 'ss-search';\n            this.searchHighlighter = classes.searchHighlighter || 'ss-search-highlight';\n            this.searching = classes.searching || 'ss-searching';\n            this.addable = classes.addable || 'ss-addable';\n            this.addablePath = classes.addablePath || 'M50,10 L50,90 M10,50 L90,50';\n            this.list = classes.list || 'ss-list';\n            this.optgroup = classes.optgroup || 'ss-optgroup';\n            this.optgroupLabel = classes.optgroupLabel || 'ss-optgroup-label';\n            this.optgroupLabelText = classes.optgroupLabelText || 'ss-optgroup-label-text';\n            this.optgroupActions = classes.optgroupActions || 'ss-optgroup-actions';\n            this.optgroupSelectAll = classes.optgroupSelectAll || 'ss-selectall';\n            this.optgroupSelectAllBox = classes.optgroupSelectAllBox || 'M60,10 L10,10 L10,90 L90,90 L90,50';\n            this.optgroupSelectAllCheck = classes.optgroupSelectAllCheck || 'M30,45 L50,70 L90,10';\n            this.optgroupClosable = classes.optgroupClosable || 'ss-closable';\n            this.option = classes.option || 'ss-option';\n            this.optionDelete = classes.optionDelete || 'M10,10 L90,90 M10,90 L90,10';\n            this.highlighted = classes.highlighted || 'ss-highlighted';\n            this.open = classes.open || 'ss-open';\n            this.close = classes.close || 'ss-close';\n            this.selected = classes.selected || 'ss-selected';\n            this.error = classes.error || 'ss-error';\n            this.disabled = classes.disabled || 'ss-disabled';\n            this.hide = classes.hide || 'ss-hide';\n        }\n    }\n\n    function generateID() {\n        return Math.random().toString(36).substring(2, 10);\n    }\n    function hasClassInTree(element, className) {\n        function hasClass(e, c) {\n            if (c && e && e.classList && e.classList.contains(c)) {\n                return e;\n            }\n            if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) {\n                return e;\n            }\n            return null;\n        }\n        function parentByClass(e, c) {\n            if (!e || e === document) {\n                return null;\n            }\n            else if (hasClass(e, c)) {\n                return e;\n            }\n            else {\n                return parentByClass(e.parentNode, c);\n            }\n        }\n        return hasClass(element, className) || parentByClass(element, className);\n    }\n    function debounce(func, wait = 50, immediate = false) {\n        let timeout;\n        return function (...args) {\n            const context = self;\n            const later = () => {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            };\n            const callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) {\n                func.apply(context, args);\n            }\n        };\n    }\n    function isEqual(a, b) {\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n    function kebabCase(str) {\n        const result = str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, (match) => '-' + match.toLowerCase());\n        return str[0] === str[0].toUpperCase() ? result.substring(1) : result;\n    }\n\n    class Optgroup {\n        constructor(optgroup) {\n            this.id = !optgroup.id || optgroup.id === '' ? generateID() : optgroup.id;\n            this.label = optgroup.label || '';\n            this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll;\n            this.selectAllText = optgroup.selectAllText || 'Select All';\n            this.closable = optgroup.closable || 'off';\n            this.options = [];\n            if (optgroup.options) {\n                for (const o of optgroup.options) {\n                    this.options.push(new Option(o));\n                }\n            }\n        }\n    }\n    class Option {\n        constructor(option) {\n            this.id = !option.id || option.id === '' ? generateID() : option.id;\n            this.value = option.value === undefined ? option.text : option.value;\n            this.text = option.text || '';\n            this.html = option.html || '';\n            this.selected = option.selected !== undefined ? option.selected : false;\n            this.display = option.display !== undefined ? option.display : true;\n            this.disabled = option.disabled !== undefined ? option.disabled : false;\n            this.mandatory = option.mandatory !== undefined ? option.mandatory : false;\n            this.placeholder = option.placeholder !== undefined ? option.placeholder : false;\n            this.class = option.class || '';\n            this.style = option.style || '';\n            this.data = option.data || {};\n        }\n    }\n    class Store {\n        constructor(type, data) {\n            this.selectType = 'single';\n            this.data = [];\n            this.selectedOrder = [];\n            this.selectType = type;\n            this.setData(data);\n        }\n        validateDataArray(data) {\n            if (!Array.isArray(data)) {\n                return new Error('Data must be an array');\n            }\n            for (let dataObj of data) {\n                if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                    if (!('label' in dataObj)) {\n                        return new Error('Optgroup must have a label');\n                    }\n                    if ('options' in dataObj && dataObj.options) {\n                        for (let option of dataObj.options) {\n                            const validationError = this.validateOption(option);\n                            if (validationError) {\n                                return validationError;\n                            }\n                        }\n                    }\n                }\n                else if (dataObj instanceof Option || 'text' in dataObj) {\n                    const validationError = this.validateOption(dataObj);\n                    if (validationError) {\n                        return validationError;\n                    }\n                }\n                else {\n                    return new Error('Data object must be a valid optgroup or option');\n                }\n            }\n            return null;\n        }\n        validateOption(option) {\n            if (!('text' in option)) {\n                return new Error('Option must have a text');\n            }\n            return null;\n        }\n        partialToFullData(data) {\n            let dataFinal = [];\n            data.forEach((dataObj) => {\n                if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                    let optOptions = [];\n                    if ('options' in dataObj && dataObj.options) {\n                        dataObj.options.forEach((option) => {\n                            optOptions.push(new Option(option));\n                        });\n                    }\n                    if (optOptions.length > 0) {\n                        dataFinal.push(new Optgroup(dataObj));\n                    }\n                }\n                if (dataObj instanceof Option || 'text' in dataObj) {\n                    dataFinal.push(new Option(dataObj));\n                }\n            });\n            return dataFinal;\n        }\n        setData(data) {\n            this.data = this.partialToFullData(data);\n            if (this.selectType === 'single') {\n                this.setSelectedBy('id', this.getSelected());\n            }\n        }\n        getData() {\n            return this.filter(null, true);\n        }\n        getDataOptions() {\n            return this.filter(null, false);\n        }\n        addOption(option, addToStart = false) {\n            if (addToStart) {\n                let data = [new Option(option)];\n                this.setData(data.concat(this.getData()));\n            }\n            else {\n                this.setData(this.getData().concat(new Option(option)));\n            }\n        }\n        setSelectedBy(selectedType, selectedValues) {\n            let firstOption = null;\n            let hasSelected = false;\n            const selectedObjects = [];\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup) {\n                    for (let option of dataObj.options) {\n                        if (!firstOption) {\n                            firstOption = option;\n                        }\n                        option.selected = hasSelected ? false : selectedValues.includes(option[selectedType]);\n                        if (option.selected) {\n                            selectedObjects.push(option);\n                            if (this.selectType === 'single') {\n                                hasSelected = true;\n                            }\n                        }\n                    }\n                }\n                if (dataObj instanceof Option) {\n                    if (!firstOption) {\n                        firstOption = dataObj;\n                    }\n                    dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType]);\n                    if (dataObj.selected) {\n                        selectedObjects.push(dataObj);\n                        if (this.selectType === 'single') {\n                            hasSelected = true;\n                        }\n                    }\n                }\n            }\n            if (this.selectType === 'single' && firstOption && !hasSelected) {\n                firstOption.selected = true;\n                selectedObjects.push(firstOption);\n            }\n            const selectedIds = selectedValues.map((value) => {\n                var _a;\n                return ((_a = selectedObjects.find((option) => option[selectedType] === value)) === null || _a === void 0 ? void 0 : _a.id) || '';\n            });\n            this.selectedOrder = selectedIds;\n        }\n        getSelected() {\n            return this.getSelectedOptions().map((option) => option.id);\n        }\n        getSelectedValues() {\n            return this.getSelectedOptions().map((option) => option.value);\n        }\n        getSelectedOptions() {\n            return this.filter((opt) => {\n                return opt.selected;\n            }, false);\n        }\n        getOptgroupByID(id) {\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup && dataObj.id === id) {\n                    return dataObj;\n                }\n            }\n            return null;\n        }\n        getOptionByID(id) {\n            let options = this.filter((opt) => {\n                return opt.id === id;\n            }, false);\n            return options.length ? options[0] : null;\n        }\n        getSelectType() {\n            return this.selectType;\n        }\n        getFirstOption() {\n            let option = null;\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup) {\n                    option = dataObj.options[0];\n                }\n                else if (dataObj instanceof Option) {\n                    option = dataObj;\n                }\n                if (option) {\n                    break;\n                }\n            }\n            return option;\n        }\n        search(search, searchFilter) {\n            search = search.trim();\n            if (search === '') {\n                return this.getData();\n            }\n            return this.filter((opt) => {\n                return searchFilter(opt, search);\n            }, true);\n        }\n        filter(filter, includeOptgroup) {\n            const dataSearch = [];\n            this.data.forEach((dataObj) => {\n                if (dataObj instanceof Optgroup) {\n                    let optOptions = [];\n                    dataObj.options.forEach((option) => {\n                        if (!filter || filter(option)) {\n                            if (!includeOptgroup) {\n                                dataSearch.push(new Option(option));\n                            }\n                            else {\n                                optOptions.push(new Option(option));\n                            }\n                        }\n                    });\n                    if (optOptions.length > 0) {\n                        let optgroup = new Optgroup(dataObj);\n                        optgroup.options = optOptions;\n                        dataSearch.push(optgroup);\n                    }\n                }\n                if (dataObj instanceof Option) {\n                    if (!filter || filter(dataObj)) {\n                        dataSearch.push(new Option(dataObj));\n                    }\n                }\n            });\n            return dataSearch;\n        }\n        selectedOrderOptions(options) {\n            const newOrder = [];\n            this.selectedOrder.forEach((id) => {\n                const option = options.find((opt) => opt.id === id);\n                if (option) {\n                    newOrder.push(option);\n                }\n            });\n            options.forEach((option) => {\n                let isIn = false;\n                newOrder.forEach((selectedOption) => {\n                    if (option.id === selectedOption.id) {\n                        isIn = true;\n                        return;\n                    }\n                });\n                if (!isIn) {\n                    newOrder.push(option);\n                }\n            });\n            return newOrder;\n        }\n    }\n\n    class Render {\n        constructor(settings, classes, store, callbacks) {\n            this.store = store;\n            this.settings = settings;\n            this.classes = classes;\n            this.callbacks = callbacks;\n            this.main = this.mainDiv();\n            this.content = this.contentDiv();\n            this.updateClassStyles();\n            this.updateAriaAttributes();\n            if (this.settings.contentLocation) {\n                this.settings.contentLocation.appendChild(this.content.main);\n            }\n        }\n        enable() {\n            this.main.main.classList.remove(this.classes.disabled);\n            this.content.search.input.disabled = false;\n        }\n        disable() {\n            this.main.main.classList.add(this.classes.disabled);\n            this.content.search.input.disabled = true;\n        }\n        open() {\n            this.main.arrow.path.setAttribute('d', this.classes.arrowOpen);\n            this.main.main.classList.add(this.settings.openPosition === 'up' ? this.classes.openAbove : this.classes.openBelow);\n            this.main.main.setAttribute('aria-expanded', 'true');\n            this.moveContent();\n            const selectedOptions = this.store.getSelectedOptions();\n            if (selectedOptions.length) {\n                const selectedId = selectedOptions[selectedOptions.length - 1].id;\n                const selectedOption = this.content.list.querySelector('[data-id=\"' + selectedId + '\"]');\n                if (selectedOption) {\n                    this.ensureElementInView(this.content.list, selectedOption);\n                }\n            }\n        }\n        close() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.setAttribute('aria-expanded', 'false');\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.main.arrow.path.setAttribute('d', this.classes.arrowClose);\n        }\n        updateClassStyles() {\n            this.main.main.className = '';\n            this.main.main.removeAttribute('style');\n            this.content.main.className = '';\n            this.content.main.removeAttribute('style');\n            this.main.main.classList.add(this.classes.main);\n            this.content.main.classList.add(this.classes.content);\n            if (this.settings.style !== '') {\n                this.main.main.style.cssText = this.settings.style;\n                this.content.main.style.cssText = this.settings.style;\n            }\n            if (this.settings.class.length) {\n                for (const c of this.settings.class) {\n                    if (c.trim() !== '') {\n                        this.main.main.classList.add(c.trim());\n                        this.content.main.classList.add(c.trim());\n                    }\n                }\n            }\n            if (this.settings.contentPosition === 'relative') {\n                this.content.main.classList.add('ss-' + this.settings.contentPosition);\n            }\n        }\n        updateAriaAttributes() {\n            this.main.main.role = 'combobox';\n            this.main.main.setAttribute('aria-haspopup', 'listbox');\n            this.main.main.setAttribute('aria-controls', this.content.main.id);\n            this.main.main.setAttribute('aria-expanded', 'false');\n            this.content.main.setAttribute('role', 'listbox');\n        }\n        mainDiv() {\n            var _a;\n            const main = document.createElement('div');\n            main.dataset.id = this.settings.id;\n            main.setAttribute('aria-label', this.settings.ariaLabel);\n            main.tabIndex = 0;\n            main.onkeydown = (e) => {\n                switch (e.key) {\n                    case 'ArrowUp':\n                    case 'ArrowDown':\n                        this.callbacks.open();\n                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                        return false;\n                    case 'Tab':\n                        this.callbacks.close();\n                        return true;\n                    case 'Enter':\n                    case ' ':\n                        this.callbacks.open();\n                        const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                        if (highlighted) {\n                            highlighted.click();\n                        }\n                        return false;\n                    case 'Escape':\n                        this.callbacks.close();\n                        return false;\n                }\n                return true;\n            };\n            main.onclick = (e) => {\n                if (this.settings.disabled) {\n                    return;\n                }\n                this.settings.isOpen ? this.callbacks.close() : this.callbacks.open();\n            };\n            const values = document.createElement('div');\n            values.classList.add(this.classes.values);\n            main.appendChild(values);\n            const deselect = document.createElement('div');\n            deselect.classList.add(this.classes.deselect);\n            const selectedOptions = (_a = this.store) === null || _a === void 0 ? void 0 : _a.getSelectedOptions();\n            if (!this.settings.allowDeselect || (this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0)) {\n                deselect.classList.add(this.classes.hide);\n            }\n            else {\n                deselect.classList.remove(this.classes.hide);\n            }\n            deselect.onclick = (e) => {\n                e.stopPropagation();\n                if (this.settings.disabled) {\n                    return;\n                }\n                let shouldDelete = true;\n                const before = this.store.getSelectedOptions();\n                const after = [];\n                if (this.callbacks.beforeChange) {\n                    shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                }\n                if (shouldDelete) {\n                    if (this.settings.isMultiple) {\n                        this.callbacks.setSelected([], false);\n                        this.updateDeselectAll();\n                    }\n                    else {\n                        const firstOption = this.store.getFirstOption();\n                        const id = firstOption ? firstOption.id : '';\n                        this.callbacks.setSelected(id, false);\n                    }\n                    if (this.settings.closeOnSelect) {\n                        this.callbacks.close();\n                    }\n                    if (this.callbacks.afterChange) {\n                        this.callbacks.afterChange(this.store.getSelectedOptions());\n                    }\n                }\n            };\n            const deselectSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            deselectSvg.setAttribute('viewBox', '0 0 100 100');\n            const deselectPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            deselectPath.setAttribute('d', this.classes.deselectPath);\n            deselectSvg.appendChild(deselectPath);\n            deselect.appendChild(deselectSvg);\n            main.appendChild(deselect);\n            const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            arrow.classList.add(this.classes.arrow);\n            arrow.setAttribute('viewBox', '0 0 100 100');\n            const arrowPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            arrowPath.setAttribute('d', this.classes.arrowClose);\n            if (this.settings.alwaysOpen) {\n                arrow.classList.add(this.classes.hide);\n            }\n            arrow.appendChild(arrowPath);\n            main.appendChild(arrow);\n            return {\n                main: main,\n                values: values,\n                deselect: {\n                    main: deselect,\n                    svg: deselectSvg,\n                    path: deselectPath\n                },\n                arrow: {\n                    main: arrow,\n                    path: arrowPath\n                }\n            };\n        }\n        mainFocus(eventType) {\n            if (eventType !== 'click') {\n                this.main.main.focus({ preventScroll: true });\n            }\n        }\n        placeholder() {\n            const placeholderOption = this.store.filter((o) => o.placeholder, false);\n            let placeholderText = this.settings.placeholderText;\n            if (placeholderOption.length) {\n                if (placeholderOption[0].html !== '') {\n                    placeholderText = placeholderOption[0].html;\n                }\n                else if (placeholderOption[0].text !== '') {\n                    placeholderText = placeholderOption[0].text;\n                }\n            }\n            const placeholder = document.createElement('div');\n            placeholder.classList.add(this.classes.placeholder);\n            placeholder.innerHTML = placeholderText;\n            return placeholder;\n        }\n        renderValues() {\n            if (!this.settings.isMultiple) {\n                this.renderSingleValue();\n                return;\n            }\n            this.renderMultipleValues();\n            this.updateDeselectAll();\n        }\n        renderSingleValue() {\n            const selected = this.store.filter((o) => {\n                return o.selected && !o.placeholder;\n            }, false);\n            const selectedSingle = selected.length > 0 ? selected[0] : null;\n            if (!selectedSingle) {\n                this.main.values.innerHTML = this.placeholder().outerHTML;\n            }\n            else {\n                const singleValue = document.createElement('div');\n                singleValue.classList.add(this.classes.single);\n                if (selectedSingle.html) {\n                    singleValue.innerHTML = selectedSingle.html;\n                }\n                else {\n                    singleValue.innerText = selectedSingle.text;\n                }\n                this.main.values.innerHTML = singleValue.outerHTML;\n            }\n            if (!this.settings.allowDeselect || !selected.length) {\n                this.main.deselect.main.classList.add(this.classes.hide);\n            }\n            else {\n                this.main.deselect.main.classList.remove(this.classes.hide);\n            }\n        }\n        renderMultipleValues() {\n            let currentNodes = this.main.values.childNodes;\n            let selectedOptions = this.store.filter((opt) => {\n                return opt.selected && opt.display;\n            }, false);\n            if (selectedOptions.length === 0) {\n                this.main.values.innerHTML = this.placeholder().outerHTML;\n                return;\n            }\n            else {\n                const placeholder = this.main.values.querySelector('.' + this.classes.placeholder);\n                if (placeholder) {\n                    placeholder.remove();\n                }\n            }\n            if (selectedOptions.length > this.settings.maxValuesShown) {\n                const singleValue = document.createElement('div');\n                singleValue.classList.add(this.classes.max);\n                singleValue.textContent = this.settings.maxValuesMessage.replace('{number}', selectedOptions.length.toString());\n                this.main.values.innerHTML = singleValue.outerHTML;\n                return;\n            }\n            else {\n                const maxValuesMessage = this.main.values.querySelector('.' + this.classes.max);\n                if (maxValuesMessage) {\n                    maxValuesMessage.remove();\n                }\n            }\n            if (this.settings.keepOrder) {\n                selectedOptions = this.store.selectedOrderOptions(selectedOptions);\n            }\n            let removeNodes = [];\n            for (let i = 0; i < currentNodes.length; i++) {\n                const node = currentNodes[i];\n                const id = node.getAttribute('data-id');\n                if (id) {\n                    const found = selectedOptions.filter((opt) => {\n                        return opt.id === id;\n                    }, false);\n                    if (!found.length) {\n                        removeNodes.push(node);\n                    }\n                }\n            }\n            for (const n of removeNodes) {\n                n.classList.add(this.classes.valueOut);\n                setTimeout(() => {\n                    if (this.main.values.hasChildNodes() && this.main.values.contains(n)) {\n                        this.main.values.removeChild(n);\n                    }\n                }, 100);\n            }\n            currentNodes = this.main.values.childNodes;\n            for (let d = 0; d < selectedOptions.length; d++) {\n                let shouldAdd = true;\n                for (let i = 0; i < currentNodes.length; i++) {\n                    if (selectedOptions[d].id === String(currentNodes[i].dataset.id)) {\n                        shouldAdd = false;\n                    }\n                }\n                if (shouldAdd) {\n                    if (this.settings.keepOrder) {\n                        this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                    }\n                    else {\n                        if (currentNodes.length === 0) {\n                            this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                        }\n                        else if (d === 0) {\n                            this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d]);\n                        }\n                        else {\n                            currentNodes[d - 1].insertAdjacentElement('afterend', this.multipleValue(selectedOptions[d]));\n                        }\n                    }\n                }\n            }\n        }\n        multipleValue(option) {\n            const value = document.createElement('div');\n            value.classList.add(this.classes.value);\n            value.dataset.id = option.id;\n            const text = document.createElement('div');\n            text.classList.add(this.classes.valueText);\n            text.textContent = option.text;\n            value.appendChild(text);\n            if (!option.mandatory) {\n                const deleteDiv = document.createElement('div');\n                deleteDiv.classList.add(this.classes.valueDelete);\n                deleteDiv.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (this.settings.disabled) {\n                        return;\n                    }\n                    let shouldDelete = true;\n                    const before = this.store.getSelectedOptions();\n                    const after = before.filter((o) => {\n                        return o.selected && o.id !== option.id;\n                    }, true);\n                    if (this.settings.minSelected && after.length < this.settings.minSelected) {\n                        return;\n                    }\n                    if (this.callbacks.beforeChange) {\n                        shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                    }\n                    if (shouldDelete) {\n                        let selectedIds = [];\n                        for (const o of after) {\n                            if (o instanceof Optgroup) {\n                                for (const c of o.options) {\n                                    selectedIds.push(c.id);\n                                }\n                            }\n                            if (o instanceof Option) {\n                                selectedIds.push(o.id);\n                            }\n                        }\n                        this.callbacks.setSelected(selectedIds, false);\n                        if (this.settings.closeOnSelect) {\n                            this.callbacks.close();\n                        }\n                        if (this.callbacks.afterChange) {\n                            this.callbacks.afterChange(after);\n                        }\n                        this.updateDeselectAll();\n                    }\n                };\n                const deleteSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                deleteSvg.setAttribute('viewBox', '0 0 100 100');\n                const deletePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                deletePath.setAttribute('d', this.classes.optionDelete);\n                deleteSvg.appendChild(deletePath);\n                deleteDiv.appendChild(deleteSvg);\n                value.appendChild(deleteDiv);\n            }\n            return value;\n        }\n        contentDiv() {\n            const main = document.createElement('div');\n            main.dataset.id = this.settings.id;\n            const search = this.searchDiv();\n            main.appendChild(search.main);\n            const list = this.listDiv();\n            main.appendChild(list);\n            return {\n                main: main,\n                search: search,\n                list: list\n            };\n        }\n        moveContent() {\n            if (this.settings.contentPosition === 'relative') {\n                this.moveContentBelow();\n                return;\n            }\n            if (this.settings.openPosition === 'down') {\n                this.moveContentBelow();\n                return;\n            }\n            else if (this.settings.openPosition === 'up') {\n                this.moveContentAbove();\n                return;\n            }\n            if (this.putContent() === 'up') {\n                this.moveContentAbove();\n            }\n            else {\n                this.moveContentBelow();\n            }\n        }\n        searchDiv() {\n            const main = document.createElement('div');\n            const input = document.createElement('input');\n            const addable = document.createElement('div');\n            main.classList.add(this.classes.search);\n            const searchReturn = {\n                main,\n                input\n            };\n            if (!this.settings.showSearch) {\n                main.classList.add(this.classes.hide);\n                input.readOnly = true;\n            }\n            input.type = 'search';\n            input.placeholder = this.settings.searchPlaceholder;\n            input.tabIndex = -1;\n            input.setAttribute('aria-label', this.settings.searchPlaceholder);\n            input.setAttribute('autocapitalize', 'off');\n            input.setAttribute('autocomplete', 'off');\n            input.setAttribute('autocorrect', 'off');\n            input.oninput = debounce((e) => {\n                this.callbacks.search(e.target.value);\n            }, 100);\n            input.onkeydown = (e) => {\n                switch (e.key) {\n                    case 'ArrowUp':\n                    case 'ArrowDown':\n                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                        return false;\n                    case 'Tab':\n                        this.callbacks.close();\n                        return true;\n                    case 'Escape':\n                        this.callbacks.close();\n                        return false;\n                    case ' ':\n                        const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                        if (highlighted) {\n                            highlighted.click();\n                            return false;\n                        }\n                        return true;\n                    case 'Enter':\n                        if (this.callbacks.addable) {\n                            addable.click();\n                            return false;\n                        }\n                        else {\n                            const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                            if (highlighted) {\n                                highlighted.click();\n                                return false;\n                            }\n                        }\n                        return true;\n                }\n                return true;\n            };\n            main.appendChild(input);\n            if (this.callbacks.addable) {\n                addable.classList.add(this.classes.addable);\n                const plus = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                plus.setAttribute('viewBox', '0 0 100 100');\n                const plusPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                plusPath.setAttribute('d', this.classes.addablePath);\n                plus.appendChild(plusPath);\n                addable.appendChild(plus);\n                addable.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (!this.callbacks.addable) {\n                        return;\n                    }\n                    const inputValue = this.content.search.input.value.trim();\n                    if (inputValue === '') {\n                        this.content.search.input.focus();\n                        return;\n                    }\n                    const runFinish = (oo) => {\n                        let newOption = new Option(oo);\n                        this.callbacks.addOption(newOption);\n                        if (this.settings.isMultiple) {\n                            let ids = this.store.getSelected();\n                            ids.push(newOption.id);\n                            this.callbacks.setSelected(ids, true);\n                        }\n                        else {\n                            this.callbacks.setSelected([newOption.id], true);\n                        }\n                        this.callbacks.search('');\n                        if (this.settings.closeOnSelect) {\n                            setTimeout(() => {\n                                this.callbacks.close();\n                            }, 100);\n                        }\n                    };\n                    const addableValue = this.callbacks.addable(inputValue);\n                    if (addableValue === false || addableValue === undefined || addableValue === null) {\n                        return;\n                    }\n                    if (addableValue instanceof Promise) {\n                        addableValue.then((value) => {\n                            if (typeof value === 'string') {\n                                runFinish({\n                                    text: value,\n                                    value: value\n                                });\n                            }\n                            else if (addableValue instanceof Error) {\n                                this.renderError(addableValue.message);\n                            }\n                            else {\n                                runFinish(value);\n                            }\n                        });\n                    }\n                    else if (typeof addableValue === 'string') {\n                        runFinish({\n                            text: addableValue,\n                            value: addableValue\n                        });\n                    }\n                    else if (addableValue instanceof Error) {\n                        this.renderError(addableValue.message);\n                    }\n                    else {\n                        runFinish(addableValue);\n                    }\n                    return;\n                };\n                main.appendChild(addable);\n                searchReturn.addable = {\n                    main: addable,\n                    svg: plus,\n                    path: plusPath\n                };\n            }\n            return searchReturn;\n        }\n        searchFocus() {\n            this.content.search.input.focus();\n        }\n        getOptions(notPlaceholder = false, notDisabled = false, notHidden = false) {\n            let query = '.' + this.classes.option;\n            if (notPlaceholder) {\n                query += ':not(.' + this.classes.placeholder + ')';\n            }\n            if (notDisabled) {\n                query += ':not(.' + this.classes.disabled + ')';\n            }\n            if (notHidden) {\n                query += ':not(.' + this.classes.hide + ')';\n            }\n            return Array.from(this.content.list.querySelectorAll(query));\n        }\n        highlight(dir) {\n            const options = this.getOptions(true, true, true);\n            if (options.length === 0) {\n                return;\n            }\n            if (options.length === 1) {\n                if (!options[0].classList.contains(this.classes.highlighted)) {\n                    options[0].classList.add(this.classes.highlighted);\n                    return;\n                }\n            }\n            let highlighted = false;\n            for (const o of options) {\n                if (o.classList.contains(this.classes.highlighted)) {\n                    highlighted = true;\n                }\n            }\n            if (!highlighted) {\n                for (const o of options) {\n                    if (o.classList.contains(this.classes.selected)) {\n                        o.classList.add(this.classes.highlighted);\n                        break;\n                    }\n                }\n            }\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].classList.contains(this.classes.highlighted)) {\n                    const prevOption = options[i];\n                    prevOption.classList.remove(this.classes.highlighted);\n                    const prevParent = prevOption.parentElement;\n                    if (prevParent && prevParent.classList.contains(this.classes.open)) {\n                        const optgroupLabel = prevParent.querySelector('.' + this.classes.optgroupLabel);\n                        if (optgroupLabel) {\n                            optgroupLabel.click();\n                        }\n                    }\n                    let selectOption = options[dir === 'down' ? (i + 1 < options.length ? i + 1 : 0) : i - 1 >= 0 ? i - 1 : options.length - 1];\n                    selectOption.classList.add(this.classes.highlighted);\n                    this.ensureElementInView(this.content.list, selectOption);\n                    const selectParent = selectOption.parentElement;\n                    if (selectParent && selectParent.classList.contains(this.classes.close)) {\n                        const optgroupLabel = selectParent.querySelector('.' + this.classes.optgroupLabel);\n                        if (optgroupLabel) {\n                            optgroupLabel.click();\n                        }\n                    }\n                    return;\n                }\n            }\n            options[dir === 'down' ? 0 : options.length - 1].classList.add(this.classes.highlighted);\n            this.ensureElementInView(this.content.list, options[dir === 'down' ? 0 : options.length - 1]);\n        }\n        listDiv() {\n            const options = document.createElement('div');\n            options.classList.add(this.classes.list);\n            return options;\n        }\n        renderError(error) {\n            this.content.list.innerHTML = '';\n            const errorDiv = document.createElement('div');\n            errorDiv.classList.add(this.classes.error);\n            errorDiv.textContent = error;\n            this.content.list.appendChild(errorDiv);\n        }\n        renderSearching() {\n            this.content.list.innerHTML = '';\n            const searchingDiv = document.createElement('div');\n            searchingDiv.classList.add(this.classes.searching);\n            searchingDiv.textContent = this.settings.searchingText;\n            this.content.list.appendChild(searchingDiv);\n        }\n        renderOptions(data) {\n            this.content.list.innerHTML = '';\n            if (data.length === 0) {\n                const noResults = document.createElement('div');\n                noResults.classList.add(this.classes.search);\n                if (this.callbacks.addable) {\n                    noResults.innerHTML = this.settings.addableText.replace('{value}', this.content.search.input.value);\n                }\n                else {\n                    noResults.innerHTML = this.settings.searchText;\n                }\n                this.content.list.appendChild(noResults);\n                return;\n            }\n            if (this.settings.allowDeselect && !this.settings.isMultiple) {\n                const placeholderOption = this.store.filter((o) => o.placeholder, false);\n                if (!placeholderOption.length) {\n                    this.store.addOption(new Option({\n                        text: '',\n                        value: '',\n                        selected: false,\n                        placeholder: true\n                    }), true);\n                }\n            }\n            for (const d of data) {\n                if (d instanceof Optgroup) {\n                    const optgroupEl = document.createElement('div');\n                    optgroupEl.classList.add(this.classes.optgroup);\n                    const optgroupLabel = document.createElement('div');\n                    optgroupLabel.classList.add(this.classes.optgroupLabel);\n                    optgroupEl.appendChild(optgroupLabel);\n                    const optgroupLabelText = document.createElement('div');\n                    optgroupLabelText.classList.add(this.classes.optgroupLabelText);\n                    optgroupLabelText.textContent = d.label;\n                    optgroupLabel.appendChild(optgroupLabelText);\n                    const optgroupActions = document.createElement('div');\n                    optgroupActions.classList.add(this.classes.optgroupActions);\n                    optgroupLabel.appendChild(optgroupActions);\n                    if (this.settings.isMultiple && d.selectAll) {\n                        const selectAll = document.createElement('div');\n                        selectAll.classList.add(this.classes.optgroupSelectAll);\n                        let allSelected = true;\n                        for (const o of d.options) {\n                            if (!o.selected) {\n                                allSelected = false;\n                                break;\n                            }\n                        }\n                        if (allSelected) {\n                            selectAll.classList.add(this.classes.selected);\n                        }\n                        const selectAllText = document.createElement('span');\n                        selectAllText.textContent = d.selectAllText;\n                        selectAll.appendChild(selectAllText);\n                        const selectAllSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                        selectAllSvg.setAttribute('viewBox', '0 0 100 100');\n                        selectAll.appendChild(selectAllSvg);\n                        const selectAllBox = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        selectAllBox.setAttribute('d', this.classes.optgroupSelectAllBox);\n                        selectAllSvg.appendChild(selectAllBox);\n                        const selectAllCheck = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        selectAllCheck.setAttribute('d', this.classes.optgroupSelectAllCheck);\n                        selectAllSvg.appendChild(selectAllCheck);\n                        selectAll.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            const currentSelected = this.store.getSelected();\n                            if (allSelected) {\n                                const newSelected = currentSelected.filter((s) => {\n                                    for (const o of d.options) {\n                                        if (s === o.id) {\n                                            return false;\n                                        }\n                                    }\n                                    return true;\n                                });\n                                this.callbacks.setSelected(newSelected, true);\n                                return;\n                            }\n                            else {\n                                const newSelected = currentSelected.concat(d.options.map((o) => o.id));\n                                for (const o of d.options) {\n                                    if (!this.store.getOptionByID(o.id)) {\n                                        this.callbacks.addOption(o);\n                                    }\n                                }\n                                this.callbacks.setSelected(newSelected, true);\n                                return;\n                            }\n                        });\n                        optgroupActions.appendChild(selectAll);\n                    }\n                    if (d.closable !== 'off') {\n                        const optgroupClosable = document.createElement('div');\n                        optgroupClosable.classList.add(this.classes.optgroupClosable);\n                        const optgroupClosableSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                        optgroupClosableSvg.setAttribute('viewBox', '0 0 100 100');\n                        optgroupClosableSvg.classList.add(this.classes.arrow);\n                        optgroupClosable.appendChild(optgroupClosableSvg);\n                        const optgroupClosableArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        optgroupClosableSvg.appendChild(optgroupClosableArrow);\n                        if (d.options.some((o) => o.selected) || this.content.search.input.value.trim() !== '') {\n                            optgroupClosable.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                        }\n                        else if (d.closable === 'open') {\n                            optgroupEl.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                        }\n                        else if (d.closable === 'close') {\n                            optgroupEl.classList.add(this.classes.close);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                        }\n                        optgroupLabel.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (optgroupEl.classList.contains(this.classes.close)) {\n                                optgroupEl.classList.remove(this.classes.close);\n                                optgroupEl.classList.add(this.classes.open);\n                                optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                            }\n                            else {\n                                optgroupEl.classList.remove(this.classes.open);\n                                optgroupEl.classList.add(this.classes.close);\n                                optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                            }\n                        });\n                        optgroupActions.appendChild(optgroupClosable);\n                    }\n                    optgroupEl.appendChild(optgroupLabel);\n                    for (const o of d.options) {\n                        optgroupEl.appendChild(this.option(o));\n                    }\n                    this.content.list.appendChild(optgroupEl);\n                }\n                if (d instanceof Option) {\n                    this.content.list.appendChild(this.option(d));\n                }\n            }\n        }\n        option(option) {\n            if (option.placeholder) {\n                const placeholder = document.createElement('div');\n                placeholder.classList.add(this.classes.option);\n                placeholder.classList.add(this.classes.hide);\n                return placeholder;\n            }\n            const optionEl = document.createElement('div');\n            optionEl.dataset.id = option.id;\n            optionEl.id = option.id;\n            optionEl.classList.add(this.classes.option);\n            optionEl.setAttribute('role', 'option');\n            if (option.class) {\n                option.class.split(' ').forEach((dataClass) => {\n                    optionEl.classList.add(dataClass);\n                });\n            }\n            if (option.style) {\n                optionEl.style.cssText = option.style;\n            }\n            if (this.settings.searchHighlight && this.content.search.input.value.trim() !== '') {\n                optionEl.innerHTML = this.highlightText(option.html !== '' ? option.html : option.text, this.content.search.input.value, this.classes.searchHighlighter);\n            }\n            else if (option.html !== '') {\n                optionEl.innerHTML = option.html;\n            }\n            else {\n                optionEl.textContent = option.text;\n            }\n            if (this.settings.showOptionTooltips && optionEl.textContent) {\n                optionEl.setAttribute('title', optionEl.textContent);\n            }\n            if (!option.display) {\n                optionEl.classList.add(this.classes.hide);\n            }\n            if (option.disabled) {\n                optionEl.classList.add(this.classes.disabled);\n            }\n            if (option.selected && this.settings.hideSelected) {\n                optionEl.classList.add(this.classes.hide);\n            }\n            if (option.selected) {\n                optionEl.classList.add(this.classes.selected);\n                optionEl.setAttribute('aria-selected', 'true');\n                this.main.main.setAttribute('aria-activedescendant', optionEl.id);\n            }\n            else {\n                optionEl.classList.remove(this.classes.selected);\n                optionEl.setAttribute('aria-selected', 'false');\n            }\n            optionEl.addEventListener('click', (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                const selectedOptions = this.store.getSelected();\n                const element = e.currentTarget;\n                const elementID = String(element.dataset.id);\n                if (option.disabled || (option.selected && !this.settings.allowDeselect)) {\n                    return;\n                }\n                if ((this.settings.isMultiple && this.settings.maxSelected <= selectedOptions.length && !option.selected) ||\n                    (this.settings.isMultiple && this.settings.minSelected >= selectedOptions.length && option.selected)) {\n                    return;\n                }\n                let shouldUpdate = false;\n                const before = this.store.getSelectedOptions();\n                let after = [];\n                if (this.settings.isMultiple) {\n                    if (option.selected) {\n                        after = before.filter((o) => o.id !== elementID);\n                    }\n                    else {\n                        after = before.concat(option);\n                    }\n                }\n                if (!this.settings.isMultiple) {\n                    if (option.selected) {\n                        after = [];\n                    }\n                    else {\n                        after = [option];\n                    }\n                }\n                if (!this.callbacks.beforeChange) {\n                    shouldUpdate = true;\n                }\n                if (this.callbacks.beforeChange) {\n                    if (this.callbacks.beforeChange(after, before) === false) {\n                        shouldUpdate = false;\n                    }\n                    else {\n                        shouldUpdate = true;\n                    }\n                }\n                if (shouldUpdate) {\n                    if (!this.store.getOptionByID(elementID)) {\n                        this.callbacks.addOption(option);\n                    }\n                    this.callbacks.setSelected(after.map((o) => o.id), false);\n                    if (this.settings.closeOnSelect) {\n                        this.callbacks.close();\n                    }\n                    if (this.callbacks.afterChange) {\n                        this.callbacks.afterChange(after);\n                    }\n                }\n            });\n            return optionEl;\n        }\n        destroy() {\n            this.main.main.remove();\n            this.content.main.remove();\n        }\n        highlightText(str, search, className) {\n            let completedString = str;\n            const regex = new RegExp('(?![^<]*>)(' + search.trim() + ')(?![^<]*>[^<>]*</)', 'i');\n            if (!str.match(regex)) {\n                return str;\n            }\n            const matchStartPosition = str.match(regex).index;\n            const matchEndPosition = matchStartPosition + str.match(regex)[0].toString().length;\n            const originalTextFoundByRegex = str.substring(matchStartPosition, matchEndPosition);\n            completedString = completedString.replace(regex, `<mark class=\"${className}\">${originalTextFoundByRegex}</mark>`);\n            return completedString;\n        }\n        moveContentAbove() {\n            const mainHeight = this.main.main.offsetHeight;\n            const contentHeight = this.content.main.offsetHeight;\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.classList.add(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.content.main.classList.add(this.classes.openAbove);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = '-' + (mainHeight + contentHeight - 1) + 'px 0px 0px 0px';\n            this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';\n            this.content.main.style.left = containerRect.left + window.scrollX + 'px';\n            this.content.main.style.width = containerRect.width + 'px';\n        }\n        moveContentBelow() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.add(this.classes.openBelow);\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.add(this.classes.openBelow);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = '-1px 0px 0px 0px';\n            if (this.settings.contentPosition !== 'relative') {\n                this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';\n                this.content.main.style.left = containerRect.left + window.scrollX + 'px';\n                this.content.main.style.width = containerRect.width + 'px';\n            }\n        }\n        ensureElementInView(container, element) {\n            const cTop = container.scrollTop + container.offsetTop;\n            const cBottom = cTop + container.clientHeight;\n            const eTop = element.offsetTop;\n            const eBottom = eTop + element.clientHeight;\n            if (eTop < cTop) {\n                container.scrollTop -= cTop - eTop;\n            }\n            else if (eBottom > cBottom) {\n                container.scrollTop += eBottom - cBottom;\n            }\n        }\n        putContent() {\n            const mainHeight = this.main.main.offsetHeight;\n            const mainRect = this.main.main.getBoundingClientRect();\n            const contentHeight = this.content.main.offsetHeight;\n            const spaceBelow = window.innerHeight - (mainRect.top + mainHeight);\n            if (spaceBelow <= contentHeight) {\n                if (mainRect.top > contentHeight) {\n                    return 'up';\n                }\n                else {\n                    return 'down';\n                }\n            }\n            return 'down';\n        }\n        updateDeselectAll() {\n            if (!this.store || !this.settings) {\n                return;\n            }\n            const selected = this.store.getSelectedOptions();\n            const hasSelectedItems = selected && selected.length > 0;\n            const isMultiple = this.settings.isMultiple;\n            const allowDeselect = this.settings.allowDeselect;\n            const deselectButton = this.main.deselect.main;\n            const hideClass = this.classes.hide;\n            if (allowDeselect && !(isMultiple && !hasSelectedItems)) {\n                deselectButton.classList.remove(hideClass);\n            }\n            else {\n                deselectButton.classList.add(hideClass);\n            }\n        }\n    }\n\n    class Select {\n        constructor(select) {\n            this.listen = false;\n            this.observer = null;\n            this.select = select;\n            this.valueChange = this.valueChange.bind(this);\n            this.select.addEventListener('change', this.valueChange, {\n                passive: true\n            });\n            this.observer = new MutationObserver(this.observeCall.bind(this));\n            this.changeListen(true);\n        }\n        enable() {\n            this.select.disabled = false;\n        }\n        disable() {\n            this.select.disabled = true;\n        }\n        hideUI() {\n            this.select.tabIndex = -1;\n            this.select.style.display = 'none';\n            this.select.setAttribute('aria-hidden', 'true');\n        }\n        showUI() {\n            this.select.removeAttribute('tabindex');\n            this.select.style.display = '';\n            this.select.removeAttribute('aria-hidden');\n        }\n        changeListen(listen) {\n            this.listen = listen;\n            if (listen) {\n                if (this.observer) {\n                    this.observer.observe(this.select, {\n                        subtree: true,\n                        childList: true,\n                        attributes: true\n                    });\n                }\n            }\n            if (!listen) {\n                if (this.observer) {\n                    this.observer.disconnect();\n                }\n            }\n        }\n        valueChange(ev) {\n            if (this.listen && this.onValueChange) {\n                this.onValueChange(this.getSelectedOptions());\n            }\n            return true;\n        }\n        observeCall(mutations) {\n            if (!this.listen) {\n                return;\n            }\n            let classChanged = false;\n            let disabledChanged = false;\n            let optgroupOptionChanged = false;\n            for (const m of mutations) {\n                if (m.target === this.select) {\n                    if (m.attributeName === 'disabled') {\n                        disabledChanged = true;\n                    }\n                    if (m.attributeName === 'class') {\n                        classChanged = true;\n                    }\n                    if (m.type === 'childList') {\n                        for (const n of m.addedNodes) {\n                            if (n.nodeName === 'OPTION' && n.value === this.select.value) {\n                                this.select.dispatchEvent(new Event('change'));\n                                break;\n                            }\n                        }\n                        optgroupOptionChanged = true;\n                    }\n                }\n                if (m.target.nodeName === 'OPTGROUP' || m.target.nodeName === 'OPTION') {\n                    optgroupOptionChanged = true;\n                }\n            }\n            if (classChanged && this.onClassChange) {\n                this.onClassChange(this.select.className.split(' '));\n            }\n            if (disabledChanged && this.onDisabledChange) {\n                this.changeListen(false);\n                this.onDisabledChange(this.select.disabled);\n                this.changeListen(true);\n            }\n            if (optgroupOptionChanged && this.onOptionsChange) {\n                this.changeListen(false);\n                this.onOptionsChange(this.getData());\n                this.changeListen(true);\n            }\n        }\n        getData() {\n            let data = [];\n            const nodes = this.select.childNodes;\n            for (const n of nodes) {\n                if (n.nodeName === 'OPTGROUP') {\n                    data.push(this.getDataFromOptgroup(n));\n                }\n                if (n.nodeName === 'OPTION') {\n                    data.push(this.getDataFromOption(n));\n                }\n            }\n            return data;\n        }\n        getDataFromOptgroup(optgroup) {\n            let data = {\n                id: optgroup.id,\n                label: optgroup.label,\n                selectAll: optgroup.dataset ? optgroup.dataset.selectall === 'true' : false,\n                selectAllText: optgroup.dataset ? optgroup.dataset.selectalltext : 'Select all',\n                closable: optgroup.dataset ? optgroup.dataset.closable : 'off',\n                options: []\n            };\n            const options = optgroup.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTION') {\n                    data.options.push(this.getDataFromOption(o));\n                }\n            }\n            return data;\n        }\n        getDataFromOption(option) {\n            return {\n                id: option.id,\n                value: option.value,\n                text: option.text,\n                html: option.dataset && option.dataset.html ? option.dataset.html : '',\n                selected: option.selected,\n                display: option.style.display !== 'none',\n                disabled: option.disabled,\n                mandatory: option.dataset ? option.dataset.mandatory === 'true' : false,\n                placeholder: option.dataset.placeholder === 'true',\n                class: option.className,\n                style: option.style.cssText,\n                data: option.dataset\n            };\n        }\n        getSelectedOptions() {\n            let options = [];\n            const opts = this.select.childNodes;\n            for (const o of opts) {\n                if (o.nodeName === 'OPTGROUP') {\n                    const optgroupOptions = o.childNodes;\n                    for (const oo of optgroupOptions) {\n                        if (oo.nodeName === 'OPTION') {\n                            const option = oo;\n                            if (option.selected) {\n                                options.push(this.getDataFromOption(option));\n                            }\n                        }\n                    }\n                }\n                if (o.nodeName === 'OPTION') {\n                    const option = o;\n                    if (option.selected) {\n                        options.push(this.getDataFromOption(option));\n                    }\n                }\n            }\n            return options;\n        }\n        getSelectedValues() {\n            return this.getSelectedOptions().map((option) => option.value);\n        }\n        setSelected(ids) {\n            this.changeListen(false);\n            const options = this.select.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTGROUP') {\n                    const optgroup = o;\n                    const optgroupOptions = optgroup.childNodes;\n                    for (const oo of optgroupOptions) {\n                        if (oo.nodeName === 'OPTION') {\n                            const option = oo;\n                            option.selected = ids.includes(option.id);\n                        }\n                    }\n                }\n                if (o.nodeName === 'OPTION') {\n                    const option = o;\n                    option.selected = ids.includes(option.id);\n                }\n            }\n            this.changeListen(true);\n        }\n        setSelectedByValue(values) {\n            this.changeListen(false);\n            const options = this.select.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTGROUP') {\n                    const optgroup = o;\n                    const optgroupOptions = optgroup.childNodes;\n                    for (const oo of optgroupOptions) {\n                        if (oo.nodeName === 'OPTION') {\n                            const option = oo;\n                            option.selected = values.includes(option.value);\n                        }\n                    }\n                }\n                if (o.nodeName === 'OPTION') {\n                    const option = o;\n                    option.selected = values.includes(option.value);\n                }\n            }\n            this.changeListen(true);\n        }\n        updateSelect(id, style, classes) {\n            this.changeListen(false);\n            if (id) {\n                this.select.dataset.id = id;\n            }\n            if (style) {\n                this.select.style.cssText = style;\n            }\n            if (classes) {\n                this.select.className = '';\n                classes.forEach((c) => {\n                    if (c.trim() !== '') {\n                        this.select.classList.add(c.trim());\n                    }\n                });\n            }\n            this.changeListen(true);\n        }\n        updateOptions(data) {\n            this.changeListen(false);\n            this.select.innerHTML = '';\n            for (const d of data) {\n                if (d instanceof Optgroup) {\n                    this.select.appendChild(this.createOptgroup(d));\n                }\n                if (d instanceof Option) {\n                    this.select.appendChild(this.createOption(d));\n                }\n            }\n            this.select.dispatchEvent(new Event('change', { bubbles: true }));\n            this.changeListen(true);\n        }\n        createOptgroup(optgroup) {\n            const optgroupEl = document.createElement('optgroup');\n            optgroupEl.id = optgroup.id;\n            optgroupEl.label = optgroup.label;\n            if (optgroup.selectAll) {\n                optgroupEl.dataset.selectAll = 'true';\n            }\n            if (optgroup.closable !== 'off') {\n                optgroupEl.dataset.closable = optgroup.closable;\n            }\n            if (optgroup.options) {\n                for (const o of optgroup.options) {\n                    optgroupEl.appendChild(this.createOption(o));\n                }\n            }\n            return optgroupEl;\n        }\n        createOption(info) {\n            const optionEl = document.createElement('option');\n            optionEl.id = info.id;\n            optionEl.value = info.value;\n            optionEl.textContent = info.text;\n            if (info.html !== '') {\n                optionEl.setAttribute('data-html', info.html);\n            }\n            if (info.selected) {\n                optionEl.selected = info.selected;\n            }\n            if (info.disabled) {\n                optionEl.disabled = true;\n            }\n            if (!info.display) {\n                optionEl.style.display = 'none';\n            }\n            if (info.placeholder) {\n                optionEl.setAttribute('data-placeholder', 'true');\n            }\n            if (info.mandatory) {\n                optionEl.setAttribute('data-mandatory', 'true');\n            }\n            if (info.class) {\n                info.class.split(' ').forEach((optionClass) => {\n                    optionEl.classList.add(optionClass);\n                });\n            }\n            if (info.data && typeof info.data === 'object') {\n                Object.keys(info.data).forEach((key) => {\n                    optionEl.setAttribute('data-' + kebabCase(key), info.data[key]);\n                });\n            }\n            return optionEl;\n        }\n        destroy() {\n            this.changeListen(false);\n            this.select.removeEventListener('change', this.valueChange);\n            if (this.observer) {\n                this.observer.disconnect();\n                this.observer = null;\n            }\n            delete this.select.dataset.id;\n            this.showUI();\n        }\n    }\n\n    class Settings {\n        constructor(settings) {\n            this.id = '';\n            this.style = '';\n            this.class = [];\n            this.isMultiple = false;\n            this.isOpen = false;\n            this.isFullOpen = false;\n            this.intervalMove = null;\n            if (!settings) {\n                settings = {};\n            }\n            this.id = 'ss-' + generateID();\n            this.style = settings.style || '';\n            this.class = settings.class || [];\n            this.disabled = settings.disabled !== undefined ? settings.disabled : false;\n            this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false;\n            this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true;\n            this.focusSearch = settings.focusSearch !== undefined ? settings.focusSearch : true;\n            this.ariaLabel = settings.ariaLabel || 'Combobox';\n            this.searchPlaceholder = settings.searchPlaceholder || 'Search';\n            this.searchText = settings.searchText || 'No Results';\n            this.searchingText = settings.searchingText || 'Searching...';\n            this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false;\n            this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true;\n            this.contentLocation = settings.contentLocation || document.body;\n            this.contentPosition = settings.contentPosition || 'absolute';\n            this.openPosition = settings.openPosition || 'auto';\n            this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : 'Select Value';\n            this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false;\n            this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false;\n            this.keepOrder = settings.keepOrder !== undefined ? settings.keepOrder : false;\n            this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false;\n            this.minSelected = settings.minSelected || 0;\n            this.maxSelected = settings.maxSelected || 1000;\n            this.timeoutDelay = settings.timeoutDelay || 200;\n            this.maxValuesShown = settings.maxValuesShown || 20;\n            this.maxValuesMessage = settings.maxValuesMessage || '{number} selected';\n            this.addableText = settings.addableText || 'Press \"Enter\" to add {value}';\n        }\n    }\n\n    class SlimSelect {\n        constructor(config) {\n            var _a;\n            this.events = {\n                search: undefined,\n                searchFilter: (opt, search) => {\n                    return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n                },\n                addable: undefined,\n                beforeChange: undefined,\n                afterChange: undefined,\n                beforeOpen: undefined,\n                afterOpen: undefined,\n                beforeClose: undefined,\n                afterClose: undefined\n            };\n            this.windowResize = debounce(() => {\n                if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                    return;\n                }\n                this.render.moveContent();\n            });\n            this.windowScroll = debounce(() => {\n                if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                    return;\n                }\n                this.render.moveContent();\n            });\n            this.documentClick = (e) => {\n                if (!this.settings.isOpen) {\n                    return;\n                }\n                if (e.target && !hasClassInTree(e.target, this.settings.id)) {\n                    this.close(e.type);\n                }\n            };\n            this.windowVisibilityChange = () => {\n                if (document.hidden) {\n                    this.close();\n                }\n            };\n            this.selectEl = (typeof config.select === 'string' ? document.querySelector(config.select) : config.select);\n            if (!this.selectEl) {\n                if (config.events && config.events.error) {\n                    config.events.error(new Error('Could not find select element'));\n                }\n                return;\n            }\n            if (this.selectEl.tagName !== 'SELECT') {\n                if (config.events && config.events.error) {\n                    config.events.error(new Error('Element isnt of type select'));\n                }\n                return;\n            }\n            if (this.selectEl.dataset.ssid) {\n                this.destroy();\n            }\n            this.settings = new Settings(config.settings);\n            this.cssClasses = new CssClasses(config.cssClasses);\n            const debounceEvents = ['afterChange', 'beforeOpen', 'afterOpen', 'beforeClose', 'afterClose'];\n            for (const key in config.events) {\n                if (!config.events.hasOwnProperty(key)) {\n                    continue;\n                }\n                if (debounceEvents.indexOf(key) !== -1) {\n                    this.events[key] = debounce(config.events[key], 100);\n                }\n                else {\n                    this.events[key] = config.events[key];\n                }\n            }\n            this.settings.disabled = ((_a = config.settings) === null || _a === void 0 ? void 0 : _a.disabled) ? config.settings.disabled : this.selectEl.disabled;\n            this.settings.isMultiple = this.selectEl.multiple;\n            this.settings.style = this.selectEl.style.cssText;\n            this.settings.class = this.selectEl.className.split(' ');\n            this.select = new Select(this.selectEl);\n            this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class);\n            this.select.hideUI();\n            this.select.onValueChange = (options) => {\n                this.setSelected(options.map((option) => option.id));\n            };\n            this.select.onClassChange = (classes) => {\n                this.settings.class = classes;\n                this.render.updateClassStyles();\n            };\n            this.select.onDisabledChange = (disabled) => {\n                if (disabled) {\n                    this.disable();\n                }\n                else {\n                    this.enable();\n                }\n            };\n            this.select.onOptionsChange = (data) => {\n                this.setData(data);\n            };\n            this.store = new Store(this.settings.isMultiple ? 'multiple' : 'single', config.data ? config.data : this.select.getData());\n            if (config.data) {\n                this.select.updateOptions(this.store.getData());\n            }\n            const renderCallbacks = {\n                open: this.open.bind(this),\n                close: this.close.bind(this),\n                addable: this.events.addable ? this.events.addable : undefined,\n                setSelected: this.setSelected.bind(this),\n                addOption: this.addOption.bind(this),\n                search: this.search.bind(this),\n                beforeChange: this.events.beforeChange,\n                afterChange: this.events.afterChange\n            };\n            this.render = new Render(this.settings, this.cssClasses, this.store, renderCallbacks);\n            this.render.renderValues();\n            this.render.renderOptions(this.store.getData());\n            const selectAriaLabel = this.selectEl.getAttribute('aria-label');\n            const selectAriaLabelledBy = this.selectEl.getAttribute('aria-labelledby');\n            if (selectAriaLabel) {\n                this.render.main.main.setAttribute('aria-label', selectAriaLabel);\n            }\n            else if (selectAriaLabelledBy) {\n                this.render.main.main.setAttribute('aria-labelledby', selectAriaLabelledBy);\n            }\n            if (this.selectEl.parentNode) {\n                this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling);\n            }\n            window.addEventListener('resize', this.windowResize, false);\n            if (this.settings.openPosition === 'auto') {\n                window.addEventListener('scroll', this.windowScroll, false);\n            }\n            document.addEventListener('visibilitychange', this.windowVisibilityChange);\n            if (this.settings.disabled) {\n                this.disable();\n            }\n            if (this.settings.alwaysOpen) {\n                this.open();\n            }\n            this.selectEl.slim = this;\n        }\n        enable() {\n            this.settings.disabled = false;\n            this.select.enable();\n            this.render.enable();\n        }\n        disable() {\n            this.settings.disabled = true;\n            this.select.disable();\n            this.render.disable();\n        }\n        getData() {\n            return this.store.getData();\n        }\n        setData(data) {\n            const selected = this.store.getSelected();\n            const err = this.store.validateDataArray(data);\n            if (err) {\n                if (this.events.error) {\n                    this.events.error(err);\n                }\n                return;\n            }\n            this.store.setData(data);\n            const dataClean = this.store.getData();\n            this.select.updateOptions(dataClean);\n            this.render.renderValues();\n            this.render.renderOptions(dataClean);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        getSelected() {\n            let options = this.store.getSelectedOptions();\n            if (this.settings.keepOrder) {\n                options = this.store.selectedOrderOptions(options);\n            }\n            return options.map((option) => option.value);\n        }\n        setSelected(values, runAfterChange = true) {\n            const selected = this.store.getSelected();\n            const options = this.store.getDataOptions();\n            values = Array.isArray(values) ? values : [values];\n            const ids = [];\n            for (const value of values) {\n                if (options.find((option) => option.id == value)) {\n                    ids.push(value);\n                    continue;\n                }\n                for (const option of options.filter((option) => option.value == value)) {\n                    ids.push(option.id);\n                }\n            }\n            this.store.setSelectedBy('id', ids);\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            if (this.render.content.search.input.value !== '') {\n                this.search(this.render.content.search.input.value);\n            }\n            else {\n                this.render.renderOptions(data);\n            }\n            if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        addOption(option) {\n            const selected = this.store.getSelected();\n            if (!this.store.getDataOptions().some((o) => { var _a; return o.value === ((_a = option.value) !== null && _a !== void 0 ? _a : option.text); })) {\n                this.store.addOption(option);\n            }\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            this.render.renderOptions(data);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        open() {\n            if (this.settings.disabled || this.settings.isOpen) {\n                return;\n            }\n            if (this.events.beforeOpen) {\n                this.events.beforeOpen();\n            }\n            this.render.open();\n            if (this.settings.showSearch && this.settings.focusSearch) {\n                this.render.searchFocus();\n            }\n            this.settings.isOpen = true;\n            setTimeout(() => {\n                if (this.events.afterOpen) {\n                    this.events.afterOpen();\n                }\n                if (this.settings.isOpen) {\n                    this.settings.isFullOpen = true;\n                }\n                document.addEventListener('click', this.documentClick);\n            }, this.settings.timeoutDelay);\n            if (this.settings.contentPosition === 'absolute') {\n                if (this.settings.intervalMove) {\n                    clearInterval(this.settings.intervalMove);\n                }\n                this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500);\n            }\n        }\n        close(eventType = null) {\n            if (!this.settings.isOpen || this.settings.alwaysOpen) {\n                return;\n            }\n            if (this.events.beforeClose) {\n                this.events.beforeClose();\n            }\n            this.render.close();\n            if (this.render.content.search.input.value !== '') {\n                this.search('');\n            }\n            this.render.mainFocus(eventType);\n            this.settings.isOpen = false;\n            this.settings.isFullOpen = false;\n            setTimeout(() => {\n                if (this.events.afterClose) {\n                    this.events.afterClose();\n                }\n                document.removeEventListener('click', this.documentClick);\n            }, this.settings.timeoutDelay);\n            if (this.settings.intervalMove) {\n                clearInterval(this.settings.intervalMove);\n            }\n        }\n        search(value) {\n            if (this.render.content.search.input.value !== value) {\n                this.render.content.search.input.value = value;\n            }\n            if (!this.events.search) {\n                this.render.renderOptions(value === '' ? this.store.getData() : this.store.search(value, this.events.searchFilter));\n                return;\n            }\n            this.render.renderSearching();\n            const searchResp = this.events.search(value, this.store.getSelectedOptions());\n            if (searchResp instanceof Promise) {\n                searchResp\n                    .then((data) => {\n                    this.render.renderOptions(this.store.partialToFullData(data));\n                })\n                    .catch((err) => {\n                    this.render.renderError(typeof err === 'string' ? err : err.message);\n                });\n                return;\n            }\n            else if (Array.isArray(searchResp)) {\n                this.render.renderOptions(this.store.partialToFullData(searchResp));\n            }\n            else {\n                this.render.renderError('Search event must return a promise or an array of data');\n            }\n        }\n        destroy() {\n            document.removeEventListener('click', this.documentClick);\n            window.removeEventListener('resize', this.windowResize, false);\n            if (this.settings.openPosition === 'auto') {\n                window.removeEventListener('scroll', this.windowScroll, false);\n            }\n            document.removeEventListener('visibilitychange', this.windowVisibilityChange);\n            this.store.setData([]);\n            this.render.destroy();\n            this.select.destroy();\n        }\n    }\n\n    return SlimSelect;\n\n}));\n","import { ready } from \"../../js/utils/documentReady.js\";\nimport SlimSelect from \"slim-select\";\nimport JustValidate from \"just-validate\";\nimport {\n  emailFieldValidationRules,\n  isSelectHasValue,\n  onValidationSuccess,\n  phoneFieldValidationRules,\n  requiredFieldValidationRules,\n  selectFieldValidationConfig,\n  textFieldValidationRules,\n  validationFormConfig,\n} from \"../../js/common/formVariables.js\";\n\nconst countries = [\n  {\n    text: \"Выберите страну\",\n    value: \"\",\n    html: \"Выберите страну\",\n  },\n  {\n    text: \"Австралия\",\n    value: \"Австралия\",\n    html: `<span class=\"ss-flag australia\">Австралия</span>`,\n  },\n  {\n    text: \"Австрия\",\n    value: \"Австрия\",\n    html: `<span class=\"ss-flag austria\">Австрия</span>`,\n  },\n  {\n    text: \"Бельгия\",\n    value: \"Бельгия\",\n    html: `<span class=\"ss-flag belgium\">Бельгия</span>`,\n  },\n  {\n    text: \"Болгария\",\n    value: \"Болгария\",\n    html: `<span class=\"ss-flag bulgaria\">Болгария</span>`,\n  },\n  {\n    text: \"Великобритания\",\n    value: \"Великобритания\",\n    html: `<span class=\"ss-flag united-kingdom\">Великобритания</span>`,\n  },\n  {\n    text: \"Венгрия\",\n    value: \"Венгрия\",\n    html: `<span class=\"ss-flag hungary\">Венгрия</span>`,\n  },\n  {\n    text: \"Вьетнам\",\n    value: \"Вьетнам\",\n    html: `<span class=\"ss-flag vietnam\">Вьетнам</span>`,\n  },\n  {\n    text: \"Германия\",\n    value: \"Германия\",\n    html: `<span class=\"ss-flag germany\">Германия</span>`,\n  },\n  {\n    text: \"Греция\",\n    value: \"Греция\",\n    html: `<span class=\"ss-flag greece\">Греция</span>`,\n  },\n  {\n    text: \"Дания\",\n    value: \"Дания\",\n    html: `<span class=\"ss-flag denmark\">Дания</span>`,\n  },\n  {\n    text: \"Индия\",\n    value: \"Индия\",\n    html: `<span class=\"ss-flag india\">Индия</span>`,\n  },\n  {\n    text: \"Индонезия\",\n    value: \"Индонезия\",\n    html: `<span class=\"ss-flag indonesia\">Индонезия</span>`,\n  },\n  {\n    text: \"Ирландия\",\n    value: \"Ирландия\",\n    html: `<span class=\"ss-flag ireland\">Ирландия</span>`,\n  },\n  {\n    text: \"Исландия\",\n    value: \"Исландия\",\n    html: `<span class=\"ss-flag iceland\">Исландия</span>`,\n  },\n  {\n    text: \"Испания\",\n    value: \"Испания\",\n    html: `<span class=\"ss-flag spain\">Испания</span>`,\n  },\n  {\n    text: \"Италия\",\n    value: \"Италия\",\n    html: `<span class=\"ss-flag italy\">Италия</span>`,\n  },\n  {\n    text: \"Канада\",\n    value: \"Канада\",\n    html: `<span class=\"ss-flag canada\">Канада</span>`,\n  },\n  {\n    text: \"Кипр\",\n    value: \"Кипр\",\n    html: `<span class=\"ss-flag cyprus\">Кипр</span>`,\n  },\n  {\n    text: \"Китай\",\n    value: \"Китай\",\n    html: `<span class=\"ss-flag china\">Китай</span>`,\n  },\n  {\n    text: \"Латвия\",\n    value: \"Латвия\",\n    html: `<span class=\"ss-flag latvia\">Латвия</span>`,\n  },\n  {\n    text: \"Литва\",\n    value: \"Литва\",\n    html: `<span class=\"ss-flag lithuania\">Литва</span>`,\n  },\n  {\n    text: \"Мальта\",\n    value: \"Мальта\",\n    html: `<span class=\"ss-flag malta\">Мальта</span>`,\n  },\n  {\n    text: \"Мексика\",\n    value: \"Мексика\",\n    html: `<span class=\"ss-flag mexico\">Мексика</span>`,\n  },\n  {\n    text: \"Нидерланды\",\n    value: \"Нидерланды\",\n    html: `<span class=\"ss-flag netherlands\">Нидерланды</span>`,\n  },\n\n  {\n    text: \"Новая Зеландия\",\n    value: \"Новая Зеландия\",\n    html: `<span class=\"ss-flag new-zealand\">Новая Зеландия</span>`,\n  },\n  {\n    text: \"Норвегия\",\n    value: \"Норвегия\",\n    html: `<span class=\"ss-flag norway\">Норвегия</span>`,\n  },\n  {\n    text: \"ОАЭ\",\n    value: \"ОАЭ\",\n    html: `<span class=\"ss-flag uae\">ОАЭ</span>`,\n  },\n  {\n    text: \"Польша\",\n    value: \"Польша\",\n    html: `<span class=\"ss-flag poland\">Польша</span>`,\n  },\n  {\n    text: \"Португалия\",\n    value: \"Португалия\",\n    html: `<span class=\"ss-flag portugal\">Португалия</span>`,\n  },\n  {\n    text: \"Румыния\",\n    value: \"Румыния\",\n    html: `<span class=\"ss-flag romania\">Румыния</span>`,\n  },\n  {\n    text: \"Сингапур\",\n    value: \"Сингапур\",\n    html: `<span class=\"ss-flag singapore\">Сингапур</span>`,\n  },\n  {\n    text: \"Словакия\",\n    value: \"Словакия\",\n    html: `<span class=\"ss-flag slovakia\">Словакия</span>`,\n  },\n  {\n    text: \"Словения\",\n    value: \"Словения\",\n    html: `<span class=\"ss-flag slovenia\">Словения</span>`,\n  },\n  {\n    text: \"США\",\n    value: \"США\",\n    html: `<span class=\"ss-flag usa\">США</span>`,\n  },\n  {\n    text: \"Тайланд\",\n    value: \"Тайланд\",\n    html: `<span class=\"ss-flag thailand\">Тайланд</span>`,\n  },\n  {\n    text: \"Франция\",\n    value: \"Франция\",\n    html: `<span class=\"ss-flag france\">Франция</span>`,\n  },\n\n  {\n    text: \"Финляндия\",\n    value: \"Финляндия\",\n    html: `<span class=\"ss-flag finland\">Финляндия</span>`,\n  },\n  {\n    text: \"Хорватия\",\n    value: \"Хорватия\",\n    html: `<span class=\"ss-flag croatia\">Хорватия</span>`,\n  },\n  {\n    text: \"Чехия\",\n    value: \"Чехия\",\n    html: `<span class=\"ss-flag czech\">Чехия</span>`,\n  },\n  {\n    text: \"Швейцария\",\n    value: \"Швейцария\",\n    html: `<span class=\"ss-flag switzerland\">Швейцария</span>`,\n  },\n  {\n    text: \"Швеция\",\n    value: \"Швеция\",\n    html: `<span class=\"ss-flag sweden\">Швеция</span>`,\n  },\n  {\n    text: \"Шри-Ланка\",\n    value: \"Шри-Ланка\",\n    html: `<span class=\"ss-flag sri-lanka\">Шри-Ланка</span>`,\n  },\n  {\n    text: \"Эстония\",\n    value: \"Эстония\",\n    html: `<span class=\"ss-flag estonia\">Эстония</span>`,\n  },\n  {\n    text: \"Южная Корея\",\n    value: \"Южная Корея\",\n    html: `<span class=\"ss-flag south-korea\">Южная Корея</span>`,\n  },\n  {\n    text: \"Япония\",\n    value: \"Япония\",\n    html: `<span class=\"ss-flag japan\">Япония</span>`,\n  },\n];\nconst currentYear = new Date().getFullYear();\n\nfunction getDaysInMonth(month) {\n  return new Date(currentYear, month, 0).getDate();\n}\n\nready(function () {\n  const requestForm = document.querySelector(\"#requestForm\");\n\n  if (requestForm) {\n    const actionUrl = requestForm.getAttribute(\"action\");\n    const selectedCountry = requestForm.getAttribute(\"data-selected-country\");\n    const formValidate = new JustValidate(requestForm, validationFormConfig);\n    const countrySelect = requestForm.querySelector(\"[data-country-select]\");\n    const visaTypeSelect = requestForm.querySelector(\"select[name='visaType']\");\n    const monthSelect = requestForm.querySelector(\"#month\");\n    const daysSelectElem = requestForm.querySelector(\"#days\");\n    const formButtonForward = requestForm.querySelector(\"[data-action='forward']\");\n    let currentStep = 1;\n    let isDaySelectInit = false;\n    let daysSelect;\n\n    formValidate\n      .addField(\"select[name='country']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"select[name='visaType']\", requiredFieldValidationRules, selectFieldValidationConfig)\n      .addField(\"input[name='phone']\", phoneFieldValidationRules)\n      .addField(\"input[name='name']\", textFieldValidationRules)\n      .addField(\"input[name='email']\", emailFieldValidationRules)\n      .onSuccess(() => {\n        onValidationSuccess(\n          requestForm,\n          actionUrl,\n          () => {\n            requestForm.dataset.steps = (++currentStep).toString();\n          },\n          () => {\n            alert(\"Ошибка! Попробуйте повторить отправку формы позже.\");\n          },\n        );\n      });\n\n    function createDaysSelect(month) {\n      if (isDaySelectInit) {\n        daysSelect.destroy();\n      }\n\n      let daysInMonth = getDaysInMonth(month);\n      let daysArray = [];\n\n      if (month === \"2\" && (currentYear % 4 === 0 || (currentYear + 1) % 4 === 0)) {\n        daysInMonth = 29;\n      }\n\n      for (let i = 1; i <= daysInMonth; i++) {\n        daysArray.push({\n          text: i,\n          value: i,\n        });\n      }\n\n      daysSelect = new SlimSelect({\n        select: daysSelectElem,\n        data: daysArray,\n        settings: {\n          showSearch: false,\n        },\n      });\n\n      isDaySelectInit = true;\n    }\n\n    createDaysSelect(monthSelect.value);\n\n    monthSelect.addEventListener(\"change\", () => {\n      createDaysSelect(monthSelect.value);\n    });\n\n    visaTypeSelect.addEventListener(\"change\", () => {\n      formValidate.revalidateField(\"select[name='visaType']\");\n    });\n\n    const countrySlimSelect = new SlimSelect({\n      select: countrySelect,\n      data: countries,\n      settings: {\n        showSearch: false,\n      },\n      events: {\n        afterChange: () => {\n          formValidate.revalidateField(\"select[name='country']\");\n        },\n      },\n    });\n\n    if (selectedCountry) countrySlimSelect.setSelected(selectedCountry);\n\n    isSelectHasValue(countrySelect);\n    isSelectHasValue(daysSelectElem);\n\n    if (formButtonForward) {\n      formButtonForward.addEventListener(\"click\", function (e) {\n        let isCountryFieldValid;\n        let isVisaTypeFieldValid;\n        formValidate.revalidateField(\"select[name='country']\").then((isValid) => {\n          isCountryFieldValid = isValid;\n        });\n        formValidate.revalidateField(\"select[name='visaType']\").then((isValid) => {\n          isVisaTypeFieldValid = isValid;\n\n          if (isCountryFieldValid && isVisaTypeFieldValid) {\n            e.preventDefault();\n            requestForm.dataset.steps = (++currentStep).toString();\n          }\n        });\n      });\n    }\n  }\n});\n","import { ready } from \"../../js/utils/documentReady.js\";\nimport SlimSelect from \"slim-select\";\nimport { isSelectHasValue } from \"../../js/common/formVariables.js\";\n\nready(function () {\n  const selects = document.querySelectorAll(\"[data-slim-select]\");\n  if (selects.length !== 0) {\n    for (let select of selects) {\n      new SlimSelect({\n        select: select,\n        settings: {\n          showSearch: false,\n        },\n      });\n\n      isSelectHasValue(select);\n\n      // if (select.value.length !== 0) select.classList.add(\"select--has-value\");\n      // select.addEventListener(\"change\", function () {\n      //   this.value.length !== 0 ? this.classList.add(\"select--has-value\") : this.classList.remove(\"select--has-value\");\n      // });\n    }\n  }\n});\n","var e=new Map;function t(t){var o=e.get(t);o&&o.destroy()}function o(t){var o=e.get(t);o&&o.update()}var r=null;\"undefined\"==typeof window?((r=function(e){return e}).destroy=function(e){return e},r.update=function(e){return e}):((r=function(t,o){return t&&Array.prototype.forEach.call(t.length?t:[t],function(t){return function(t){if(t&&t.nodeName&&\"TEXTAREA\"===t.nodeName&&!e.has(t)){var o,r=null,n=window.getComputedStyle(t),i=(o=t.value,function(){a({testForHeightReduction:\"\"===o||!t.value.startsWith(o),restoreTextAlign:null}),o=t.value}),l=function(o){t.removeEventListener(\"autosize:destroy\",l),t.removeEventListener(\"autosize:update\",s),t.removeEventListener(\"input\",i),window.removeEventListener(\"resize\",s),Object.keys(o).forEach(function(e){return t.style[e]=o[e]}),e.delete(t)}.bind(t,{height:t.style.height,resize:t.style.resize,textAlign:t.style.textAlign,overflowY:t.style.overflowY,overflowX:t.style.overflowX,wordWrap:t.style.wordWrap});t.addEventListener(\"autosize:destroy\",l),t.addEventListener(\"autosize:update\",s),t.addEventListener(\"input\",i),window.addEventListener(\"resize\",s),t.style.overflowX=\"hidden\",t.style.wordWrap=\"break-word\",e.set(t,{destroy:l,update:s}),s()}function a(e){var o,i,l=e.restoreTextAlign,s=void 0===l?null:l,d=e.testForHeightReduction,u=void 0===d||d,c=n.overflowY;if(0!==t.scrollHeight&&(\"vertical\"===n.resize?t.style.resize=\"none\":\"both\"===n.resize&&(t.style.resize=\"horizontal\"),u&&(o=function(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push([e.parentNode,e.parentNode.scrollTop]),e=e.parentNode;return function(){return t.forEach(function(e){var t=e[0],o=e[1];t.style.scrollBehavior=\"auto\",t.scrollTop=o,t.style.scrollBehavior=null})}}(t),t.style.height=\"\"),i=\"content-box\"===n.boxSizing?t.scrollHeight-(parseFloat(n.paddingTop)+parseFloat(n.paddingBottom)):t.scrollHeight+parseFloat(n.borderTopWidth)+parseFloat(n.borderBottomWidth),\"none\"!==n.maxHeight&&i>parseFloat(n.maxHeight)?(\"hidden\"===n.overflowY&&(t.style.overflow=\"scroll\"),i=parseFloat(n.maxHeight)):\"hidden\"!==n.overflowY&&(t.style.overflow=\"hidden\"),t.style.height=i+\"px\",s&&(t.style.textAlign=s),o&&o(),r!==i&&(t.dispatchEvent(new Event(\"autosize:resized\",{bubbles:!0})),r=i),c!==n.overflow&&!s)){var v=n.textAlign;\"hidden\"===n.overflow&&(t.style.textAlign=\"start\"===v?\"end\":\"start\"),a({restoreTextAlign:v,testForHeightReduction:!0})}}function s(){a({testForHeightReduction:!0,restoreTextAlign:null})}}(t)}),t}).destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],t),e},r.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],o),e});var n=r;export default n;\n","import { ready } from \"../../js/utils/documentReady\";\nimport autosize from \"autosize\";\n\nready(function () {\n  // textarea\n  const textareas = document.querySelectorAll(\".textarea\");\n\n  if (textareas.length !== 0) {\n    for (let textarea of textareas) {\n      if (textarea.value.length !== 0) {\n        autosize(textarea);\n        textarea.classList.add(\"textarea--has-value\");\n      }\n\n      textarea.addEventListener(\"input\", function () {\n        this.value.length !== 0\n          ? this.classList.add(\"textarea--has-value\")\n          : this.classList.remove(\"textarea--has-value\");\n      });\n    }\n  }\n\n  autosize(textareas);\n});\n","export default function () {\n  const outer = document.createElement(\"div\");\n  const inner = document.createElement(\"div\");\n  outer.style.overflow = \"scroll\";\n  outer.classList.add(\"scrollbar\");\n  outer.appendChild(inner);\n  document.body.appendChild(outer);\n  const scrollbarSize = outer.offsetWidth - inner.offsetWidth;\n  document.body.removeChild(outer);\n  return scrollbarSize;\n}\n"],"names":["ready","fn","document","attachEvent","readyState","addEventListener","then","default","getScrollSize","documentElement","style","setProperty","validationFormConfig","errorFieldCssClass","errorLabelStyle","errorLabelCssClass","requiredFieldValidationRule","rule","errorMessage","phoneFieldValidationRules","value","textFieldValidationRules","emailFieldValidationRules","requiredFieldValidationRules","integerFieldValidationRules","selectFieldValidationConfig","formSendConfig","plainFormData","method","headers","body","JSON","stringify","onValidationSuccess","form","actionUrl","success","error","formData","FormData","Object","fromEntries","entries","fetch","response","ok","isSelectHasValue","select","length","classList","add","remove","successFn","alert","errorFn","formMyData","querySelector","formPayment","formFeedBack","formAddFile","formVisa","formAtes","formWork","formCitizenship","formIntPassport","formInvite","formAvia","formBusiness","formMedical","formOthers","formCallback","getAttribute","formVisaValidate","JustValidate","addField","onSuccess","formAtesValidate","formWorkValidate","formCitizenshipValidate","formIntPassportValidate","formInviteValidate","formAviaValidate","formBusinessValidate","formMedicalValidate","formOthersValidate","formMyDataValidate","formPaymentValidate","formFeedBackValidate","formAddFileValidate","files","extensions","maxSize","minSize","types","formCallbackValidate","location","replace","formSet","serviceTypeSelect","formSetPanes","querySelectorAll","setActivePane","e","target","panes","id","pane","dataset","inputs","input","phoneFields","forEach","field","IMask","lazy","mask","prepare","appended","masked","numberFields","Number","min","passportRussia","passportInt","this","countries","text","html","currentYear","Date","getFullYear","getDaysInMonth","month","getDate","requestForm","selectedCountry","formValidate","countrySelect","visaTypeSelect","monthSelect","daysSelectElem","formButtonForward","currentStep","isDaySelectInit","daysSelect","steps","toString","createDaysSelect","destroy","daysInMonth","daysArray","i","push","SlimSelect","data","settings","showSearch","revalidateField","countrySlimSelect","events","afterChange","setSelected","isCountryFieldValid","isVisaTypeFieldValid","isValid","preventDefault","selects","textareas","textarea","autosize","outer","createElement","inner","overflow","appendChild","scrollbarSize","offsetWidth","removeChild"],"mappings":"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","x_google_ignoreList":[2,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,38]}